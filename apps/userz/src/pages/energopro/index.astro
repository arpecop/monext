---
import { Form } from "astro-forms";
import "../../../base.css";
let errorMessage: string | null = null;
let email: string | null = null;
let phone: string | null = null;
let firstname: string | null = null;
let lastname: string | null = null;
const edit = Astro.url.searchParams.get("edit") || 0;
const del = Astro.url.searchParams.get("delete") || 0;

const form = {
	type: "object",
	properties: {
		id: {
			type: "number",
			title: "Name",
		},
		firstname: {
			type: "string",
			title: "First Name",
		},
		lastname: {
			type: "string",
			title: "First Name",
		},
		submit: {
			type: "submit",
			title: "Submit",
		},
	},
};

const emails = {
	type: "object",
	properties: {
		emails: {
			type: "string",
			title: "Email/s",
		},
		submit: {
			type: "submit",
			title: "+",
		},
	},
};
const phones = {
	type: "object",
	properties: {
		phones: {
			type: "string",
			title: "Email/s",
		},
		submit: {
			type: "submit",
			title: "+",
		},
	},
};

let list = [];

const response = await fetch("https://rudix.hasura.app/api/rest/energo");
const names: {
	vdb_: {
		vdb_energo: {
			id: number;
			firstname: string;
			lastname: string;
			phones?: string;
			emails?: string;
		}[];
	};
} = await response.json();

if (Astro.request.method === "POST") {
	const formData = await Astro.request.formData();
	const isId = formData.get("id") as string;
	firstname = formData.get("firstname") as string;
	lastname = formData.get("lastname") as string;
	email = formData.get("lastname") as string;
	phone = formData.get("phone") as string;
	if (!firstname || !lastname) {
		errorMessage = "Names   are required";
	} else {
		const rawResponse = await fetch(
			"https://rudix.hasura.app/api/rest/energo",
			{
				method: "POST",
				body: JSON.stringify({
					object: {
						firstname,
						lastname,
						phones: phone,
						emails: email,
					},
				}),
			}
		);
		const content = await rawResponse.json();
		if (content.error) {
			errorMessage = content.error;
		} else {
			return Astro.redirect("/energopro/");
		}
	}
}

if (del) {
	await fetch("https://rudix.hasura.app/api/rest/energo/" + del, {
		method: "DELETE",
		body: JSON.stringify({ id: del }),
	});
	return Astro.redirect("/energopro/");
}
if (edit) {
}
---

<!DOCTYPE html>
<head>
	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width" />
	<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
	<title>SSR page nrg pro task</title>
</head>
<body>
	<div class="flex flex-col h-screen">
		<img
			width="130"
			src="https://www.energo-pro.bg/web/files/richeditor/logo/energopro-logo-bg.svg"
			alt="Energo-Pro"
			class="invert"
		/>
		{
			errorMessage && (
				<div
					id="alert-2"
					class="flex items-center p-4 mb-4 text-red-800 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400"
					role="alert"
				>
					<svg
						class="flex-shrink-0 w-4 h-4"
						aria-hidden="true"
						xmlns="http://www.w3.org/2000/svg"
						fill="currentColor"
						viewBox="0 0 20 20"
					>
						<path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z" />
					</svg>
					<span class="sr-only">Info</span>
					<div class="ml-3 text-sm font-medium">{errorMessage}</div>
					<button
						type="button"
						class="ml-auto -mx-1.5 -my-1.5 bg-red-50 text-red-500 rounded-lg focus:ring-2 focus:ring-red-400 p-1.5 hover:bg-red-200 inline-flex items-center justify-center h-8 w-8 dark:bg-gray-800 dark:text-red-400 dark:hover:bg-gray-700"
						data-dismiss-target="#alert-2"
						aria-label="Close"
					>
						<span class="sr-only">Close</span>
						<svg
							class="w-3 h-3"
							aria-hidden="true"
							xmlns="http://www.w3.org/2000/svg"
							fill="none"
							viewBox="0 0 14 14"
						>
							<path
								stroke="currentColor"
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"
							/>
						</svg>
					</button>
				</div>
			)
		}
		<div
			class="grow border rounded-lg bg-gray-900 p-2 mx-4 overflow-scroll"
		>
			<form>
				<label
					for="default-search"
					class="mb-2 text-sm font-medium text-gray-900 sr-only dark:text-white"
					>Search</label
				>
				<div class="relative">
					<div
						class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none"
					>
						<svg
							class="w-4 h-4 text-gray-500 dark:text-gray-400"
							aria-hidden="true"
							xmlns="http://www.w3.org/2000/svg"
							fill="none"
							viewBox="0 0 20 20"
						>
							<path
								stroke="currentColor"
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"
							></path>
						</svg>
					</div>
					<input
						type="search"
						id="default-search"
						class="block w-full p-4 pl-10 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
						placeholder="Search Mockups, Logos..."
						required
					/>
					<button
						type="submit"
						class="text-white absolute right-2.5 bottom-2.5 bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
						>Search</button
					>
				</div>
			</form>
			{
				names.vdb_["vdb_energo"].map((person) => (
					<div class="flex border-b p-2">
						<div class="grow">
							{person.lastname}, {person.firstname}
						</div>
						<div class="grow">
							{person.emails ? person.emails : "No emails"}
						</div>
						<div class="grow">
							{person.phones ? person.emails : "No phones"}
						</div>
						<div>
							<a
								href={"/energopro/?edit=" + person.id}
								class=" p-2 mr-1"
							>
								‚úèÔ∏è Edit
							</a>
							<a
								href={"/energopro/?delete=" + person.id}
								class=" p-2 mr-1"
							>
								üóëÔ∏è Delete
							</a>
						</div>
					</div>
				))
			}
		</div>
		<div class="grow-0 container mx-auto">
			<h1 class="mb-4 text-2xl">Add new Employe</h1>
			<div class="flex justify-center mb-4">
				<div class="w-1/2 pr-2 nrgpro">
					<Form schema={form} action="/energopro/" method="post" />
				</div>
				<div class="multiple">
					<Form schema={emails} action="/energopro/" method="post" />
					<Form schema={phones} action="/energopro/" method="post" />
				</div>
			</div>
		</div>
	</div>
</body>
