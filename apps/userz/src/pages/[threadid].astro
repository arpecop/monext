---
import Layout from "../components/Layout.astro";
import {gql} from "../components/helpers/gql";
const { threadid } = Astro.params as { threadid: string };
function extractUniqueHashtags(inputString: string): string[] {
  const hashtagRegex = /#(\w+)/g;
  const hashtags = inputString.match(hashtagRegex);

  if (!hashtags) return [];
 
  const uniqueHashtags = Array.from(new Set(hashtags.map(tag =>  tag.slice(1))));

  return uniqueHashtags;
}
 const resp  = await gql('thread',{_eq:threadid}) as {qlatest:{genid:string; text:string}[],thread:{genid:string; text:string}[]}
 
 const rest= resp.thread.filter((_x,i) =>  i !== 0)
 const formatter = (text:string) => {
	 let resp = text.replaceAll('@username,','').replaceAll('@username','').split('\n')
	  return(resp)
 }

 if(!resp.thread[0]) {
	  return Astro.redirect('/404')
  }
  
 
  const hashtagsprep = extractUniqueHashtags(rest[0].text) as string[];
  const respx  = await gql('specifictags',{_in:hashtagsprep})  as {qtags:{hashtag:string,count:number}[]}
 
 
---
<Layout title={resp.thread[0].text} description={''} logo={"inner"}  tags={respx.qtags}>	 
		 <article class="prose prose-invert prose-headings:underline mx-auto">
       <h1 class="text-white font-medium">{resp.thread[0].text}</h1>
      {
      rest.map(({text})  =>  {
        return(<div class="text-white text-xl font-light">{formatter(text).map(x=> (<p>{x}</p>))  }</div>)}
      )}
       <!-- ... -->
     </article>
	 
</Layout>