---
import Layout from "../components/Layout.astro";
import {gql} from "../components/helpers/gql";
import { shuffle } from "lodash";
const { threadid } = Astro.params as { threadid: string };
type Thread = {genid:string; text:string}[]
function extractUniqueHashtags(inputString: string): string[] {
  const hashtagRegex = /#(\w+)/g;
  const hashtags = inputString.match(hashtagRegex);

  if (!hashtags) return [];
 
  const uniqueHashtags = Array.from(new Set(hashtags.map(tag =>  tag.slice(1))));

  return uniqueHashtags;
} 
function removeHashtags(inputString: string): string {
  const hashtagRegex = /#\w+/g;
  const stringWithoutHashtags = inputString.replace(hashtagRegex, '');

  return stringWithoutHashtags;
}
 const resp  = await gql('thread',{_eq:threadid}) as {qlatest:Thread,thread:Thread,random:Thread,q:Thread}
 
 
 const rest= resp.thread;
 const question= resp.q[0].text;
 const formatter = (text:string) => {
	 let resp = text.replaceAll('@username,','').replaceAll('@username','').split('\n')
	  return(resp)
 }

 if(!rest[0]) {
	  return Astro.redirect('/404')
  }
  
 //dssd
  const hashtagsprep = extractUniqueHashtags(rest[0].text) as string[];
  
  const respx  = await gql('specifictags',{_in:hashtagsprep})  as {qtags:{hashtag:string,count:number,rows_with_tag:string}[]}
  const getarticles = respx.qtags.filter(x => x.count !==1).map(x => {return(shuffle([...x.rows_with_tag.split(', ')]).slice(0,5))}).flat() as string[]

  const extended  = await gql('specificids',{_in:getarticles})  as {questions:{genid:string,text:string}[]}
 
 
---
<Layout title={resp.thread[0].text} description={''} logo={"inner"}  tags={respx.qtags}>	 
		 <article class="prose prose-invert prose-headings:underline mx-auto">
       <h1 class="text-white font-medium">{question}</h1>
      {
      rest.map(({text},i)  =>  {
        return(<div class="text-white text-xl font-light">{formatter(text).map(x=> (<p>{i=== 0 ? removeHashtags(x) : x}</p>))  }</div>)}
      )}
       <!-- ... -->
     </article>
	 {extended.questions[0] && <h2 class="text-gray-100 font-bold">Extended FAQ</h2> }
   <ul class="space-y-4 text-left text-gray-100 conntainer mx-auto">
     {extended.questions.map(q => ( <li class="space-x-3">
            <a class="flex items-center" href={'/'+q.genid}>
            
            <span class="pl-2 text-gray-200 underline"> {q.text.replace('?','')}</span>
            </a>
        </li>))}
     </ul>
 { resp.random[0] && <h2 class="text-gray-100 font-bold">Other questions</h2>}
 <ul class="space-y-4 text-left text-gray-100 conntainer mx-auto">
  {resp.random.map(q => ( <li class="space-x-3">
         <a class="flex items-center" href={'/'+q.genid}>
         
         <span class="pl-2 text-gray-200 underline"> {q.text.replace('?','')}</span>
         </a>
     </li>))}
  </ul>
</Layout>