---
type Thread = {genid:string; text:string}[]
import { neon  } from '@neondatabase/serverless';
import {getsimilar} from '../lib/vector'
import Layout from "../components/Layout.astro";
import {uniq} from 'lodash'
const sql = neon(import.meta.env.DB_URL1 || process.env.DB_URL1);
// const sql2 = neon(import.meta.env.DB_URL2 || process.env.DB_URL2);
const { threadid } = Astro.params as { threadid: string };

async function extractUniqueHashtags(inputString: string): Promise<{hashtag:string,count:number}[]> {
  const hashtagRegex = /#(\w+)/g;
  const hashtags = inputString.match(hashtagRegex);
  if (!hashtags) return [];
  const uniqueHashtags = Array.from(new Set(hashtags.map(tag =>  ({hashtag:tag.slice(1),count:10}))));
  return uniqueHashtags;
} 
function removeHashtags(inputString: string): string {
  const hashtagRegex = /#\w+/g;
  const stringWithoutHashtags = inputString.replaceAll('\\n','\n').replace(hashtagRegex, '');
  return stringWithoutHashtags;
}


const respOne = await sql`select id,image  from questions where genid = ${threadid} and type = 'q'` as {id:number,image?:string}[]

const image = respOne[0].image
 
const simResultsOne  =   await getsimilar(respOne[0].id)
const simResults = simResultsOne.map(x => x.payload.id)
const ids = [threadid,...simResults]

 
const extended1 = await sql('SELECT text,genid,type FROM questions WHERE  genid IN ('+ids.map(id => `'${id}'`).join(', ')+');');
 
 // as { resp:{text:string, image?: string,id:number},threadx:Thread,q:Thread ,simResultsOne:{genid:string}[]}
 
 
 const formatter = (text:string) => {
	 let resp = removeHashtags(text).replaceAll('@username,','').replaceAll('@username','').split('\n')
	 return(resp)
 }

 if(!extended1[0]) {
	  return Astro.redirect('/404')
  } 
 

const questions = extended1.filter(x=> x.type === 'q') 
const answers  = extended1.filter(x=> x.type === 'a') 
 
const question = questions[0].text
const answer = answers[0].text

 
 
 

 const thread = questions.map((x,i) => ({
   q:{text:x.text,genid:x.genid},
   a:answers[i]?.text || ''
 })).filter(x => x.q.genid !== threadid)
  
 
 const flat = await extractUniqueHashtags(uniq(thread.flatMap(x => x.a)).join(' '))
 
 let qtags;
 let tagzfiltered:{count:number,hashtag:string}[]
 if(flat[0]) {
 qtags =   await sql('SELECT hashtag,count FROM qtags WHERE hashtag IN ('+flat.flatMap(x => "'"+x.hashtag+"'").join(', ')+');')  
 tagzfiltered =  qtags.filter(x => x.count >= 10).sort((a,z) => {return(z.count -a.count)} ).slice(0,30)  
 } else {
   tagzfiltered = []
 }

 
---
<Layout title={question} description={''} logo={"inner"}  tags={tagzfiltered} image={image}>	
  {image && image !== 'none' ? ( 
   <div class="relative">
     <img
      src={"https://cdn.userz.net/xxx.jpg"}
       width="1250"
       height="500"
       class="object-cover w-full h-64 lg:h-96"
       style="aspect-ratio: 1250 / 500; object-fit: cover;"
       alt={question}
     />
     <div class="absolute inset-0 flex items-center justify-center p-4 md:p-6 lg:p-8">
       <h1 class="text-3xl   text-white text-center bg-black bg-opacity-80 rounded-lg p-2">
         {question}
       </h1>
     </div>
   </div>
    ) :(<h1 class="text-white font-medium text-3xl text-center">{question}</h1>)} 
    <article class="prose prose-invert  mx-auto">
       
    
   <div class="text-white text-xl font-light">{formatter(answer).map(x=> (<p>{x}</p>))  }</div> 
       
       {questions[0] && <h2 class="text-gray-100 font-bold">Extended FAQ</h2> }
          {thread.map((q) => ( <div class="space-x-3">
                 <a class="flex items-center" href={'/'+q.q.genid}>
                    <h2 class="pl-2 text-gray-200 underline"> {q.q.text.replace('?','')}</h2>
                 </a>
         { formatter(q.a).map(x => (<p>{x}</p>))}
             </div>))}
       
     </article>
	
 
 
</Layout>