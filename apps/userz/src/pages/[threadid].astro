---
export const prerender = false;
import Layout from "../components/Layout.astro";
 
 
 import { sql } from 'drizzle-orm' 
const { threadid } = Astro.params as { threadid: string };
import { db,q_a,q_q,eq,questions,q_qtags} from "../lib/graph";
async function extractUniqueHashtags(
  inputString: string
): Promise<{ hashtag: string; count: number }[]> {
  const hashtagRegex = /#(\w+)/g;
  const hashtags = inputString.match(hashtagRegex);
  if (!hashtags) return [];
  const uniqueHashtags = Array.from(
    new Set(hashtags.map((tag) => ({ hashtag: tag.slice(1), count: 10 })))
  );
  return uniqueHashtags;
}
function removeHashtags(inputString: string): string {
  const hashtagRegex = /#\w+/g;
  const stringWithoutHashtags = inputString
    .replaceAll("\\n", "\n")
    .replace(hashtagRegex, "");
  return stringWithoutHashtags;
}
 
const respOne = await db.select().from(questions).where(eq(questions.genid, threadid));
const similar   =  await db.select({genid:q_a.genid,text:q_a.text}).from(q_a).where(sql`genid != ${threadid} ORDER BY embed <-> (SELECT embed FROM q.a WHERE genid = ${threadid}) LIMIT 30`);
 
const respTwo =  await db.execute(sql`select * from ${q_q}  where genid IN ${ similar.map(x => x.genid)} `)

const image = respOne.find(x => x.type === 'q')?.image;
const question = respOne.find(x => x.type === 'q')?.text;

if (!question) {
  return Astro.redirect("/404");
}

const answer =respOne.find(x => x.type === 'a')!.text;

const formatter = (text: string) => {
  let resp = removeHashtags(text)
    .replaceAll("@username,", "")
    .replaceAll("@username", "")
    .split("\n");
  return resp;
};

const questions1 = respTwo;
const answers = similar;
 

const thread = questions1
  .map((x, i) => ({
    q: { text: x.text, genid: x.genid ,image:x.image},
    a: answers.find(y => y.genid === x.genid)?.text,
  }))
  .filter((x) => x.q.genid !== threadid) as {
  q: { text: string; genid: string; image?: string  };
  a: string;
}[];

const flat = await extractUniqueHashtags(
  thread.flatMap((x: { a: any }) => x.a).join(" ")
);
 

let tagzfiltered: { count: number; hashtag: string }[];

if (flat[0]) {
 
const qtags:{ count: number; hashtag: string }[] =  await db.execute(sql`select hashtag,count from ${q_qtags}  where hashtag IN ${  flat.map((x) => x.hashtag)} `)
 
  tagzfiltered = qtags
    .filter((x) => x.count >= 10)
    .sort((a , z) => {
      return z.count - a.count;
    })
    .slice(0, 30);
} else {
  tagzfiltered = [];
}
const split = threadid.split("");
---

<Layout
  title={question}
  description={""}
  logo={"inner"}
  tags={tagzfiltered}
  image={image}
>
  { image && image !== "none" ? (
      <div class="relative">
         
        <img
          src={`https://cdn2.userz.net/static/out/${split[0]}/${split[1]}/${split[2]}/${threadid}.jpg`}
          width="1250"
          height="500"
          class="object-cover w-full h-64 lg:h-96"
          style="aspect-ratio: 1250 / 500; object-fit: cover;"
          alt={question}
        />
        <div class="absolute inset-0 flex items-center justify-center p-4 md:p-6 lg:p-8">
          <h1 class="text-3xl   text-white text-center bg-black bg-opacity-80 rounded-lg p-2">
            {question}
          </h1>
        </div>
      </div>
    ) : (
      <h1 class="text-white font-medium text-3xl text-center">{question}</h1>
    )
  }
  <article class="prose prose-invert mx-auto">
    <div class="text-white text-xl font-light">
      {answer && formatter(answer).map((x) => <p>{x}</p>)}
    </div>
  </article>

 
  {thread[0] && <h2 class="text-gray-100 font-bold">Extended FAQ</h2>}
  {
    thread.map((q) => {
    const spl = q.q.genid.split('');
    const img = q.q.image && ( <img
        src={`https://cdn2.userz.net/static/out/${spl[0]}/${spl[1]}/${spl[2]}/${q.q.genid}.jpg`}
        width="100"
        class="rounded-md mr-2 -mb-2"
        alt={q.q.text}
      />)
      return(
      <article class="prose prose-invert mx-auto">
        <a class="flex items-center" href={"/" + q.q.genid}>
          {img} 
          <h2 class="pl-2 text-gray-200 underline">
          {q.q.text.replace("?", "")}
          </h2>
        </a>
        {formatter(q.a).map((x) => (
          <p>{x}</p>
        ))}
      </article>
    )})
  }
</Layout>
