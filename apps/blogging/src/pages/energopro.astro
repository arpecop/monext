---
import "../../base.css";
let errorMessage: string | null = null;
// Initialize edit, del, phone, and email values based on URL parameters.
const edit = Astro.url.searchParams.get("edit");
const search = Astro.url.searchParams.get("q");
const del = Astro.url.searchParams.get("delete");
// Define a data schema for your main form.
interface FormSchema {
	type: string;
	value?: string;
	properties: {
		[key: string]: { type?: string; title?: string; value?: string };
	};
	items?: FormSchema;
}
// Fetch data from a remote API.

type List = {
	vdb_: {
		vdb_energo: {
			id: number;
			firstname: string;
			lastname: string;
			phones?: string;
			emails?: string;
		}[];
	};
}
 
const response = await fetch("https://rudix.hasura.app/api/rest/energo");
let list:List= await response.json();


// Handle form submission when the request method is POST.
if (Astro.request.method === "POST") {
	const formData = await Astro.request.formData();
	const isId = formData.get("id"); // for edit record
	const firstname = formData.get("firstname");
	const lastname = formData.get("lastname");
	const emails = formData.get("emails");
	const phones = formData.get("phones");

	if (!firstname || !lastname) {
		// Display an error message if first name and last name are required.
		errorMessage = "Names   are required";
	} else {
		// Submit the form data to a remote API.
		const object = {
			firstname,
			lastname,
			phones,
			emails,
			search: `${firstname} ${lastname} ${phones} ${emails}`.toLowerCase(),
		};
		const rawResponse = await fetch(
			"https://rudix.hasura.app/api/rest/energo/" + (isId ? isId : ""),
			{
				method: "POST",
				body: JSON.stringify({
					object,
				}),
			}
		);
		const content = await rawResponse.json();
		if (content.error) {
			errorMessage = content.error;
		} else {
			// Redirect to a specific URL after successful form submission. Delete temporary data

			return Astro.redirect("/energopro/");
		}
	}
}
// Handle delete request.
if (del) {
	await fetch("https://rudix.hasura.app/api/rest/energo/" + del, {
		method: "DELETE",
		body: JSON.stringify({ id: del }),
	});
	return Astro.redirect("/energopro/");
}

// Handle delete request.
if (search) {
	const results = await fetch(`https://rudix.hasura.app/api/rest/energox/searchx?_like=${encodeURIComponent('%'+search+'%')}`);
	 list = await results.json();
	console.log(list);
 
}  
---

<html>
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<title>SSR page nrg pro task</title>
		<script
			src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.8.1/flowbite.min.js"
		></script>
	</head>
	<body>
		<div class="flex flex-col h-screen">
			<img
				width="130"
				src="https://www.energo-pro.bg/web/files/richeditor/logo/energopro-logo-bg.svg"
				alt="Energo-Pro"
				class="invert"
			/>

			<form class="mx-2 mb-1" action="/energopro/">
				<div class="relative">
				 
					<input
						type="text"
						id="default-search"
						name="q"
						class="block w-full p-2 h-9 pl-2 text-sm text-gray-900 border border-white rounded-lg bg-black focus:ring-blue-500 focus:border-blue-500 dark:placeholder-gray-400 dark:text-white dark:focus:border-blue-500 text-white"
						placeholder="Search"
					 
					/>
					<button
						class="text-white absolute right-0 bottom-0 bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg rounded-l-none text-sm px-4 py-2 dark:bg-blue-600"
						>Search</button
					>
				</div>
			</form>
			<div class="grow rounded-lg bg-gray-900 p-2 mx-4 overflow-auto">
				{
					list.vdb_.vdb_energo[0] && list.vdb_.vdb_energo.map((person) => (
						<div class="grid grid-cols-3 gap-4 border border-b-0">
							<div class="p-2">
								{person.lastname}, {person.firstname}
							</div>
							<div class="flex flex-col py-2">
								<div>
									‚úâÔ∏è{" "}
									{person.emails ? person.emails : "No email"}
								</div>
								<div>
									üìû{" "}
									{person.phones ? person.phones : "No Phone"}
								</div>
							</div>
							<div class="flex flex-col text-right p-2">
								<a
									href={"/energopro/?edit=" + person.id}
									class="text-xs mb-2"
								>
									‚úèÔ∏è Edit
								</a>
								<a
									href={"/energopro/?delete=" + person.id}
									class="text-xs"
								>
									Remove üóëÔ∏è
								</a>
							</div>
						</div>
					))
				}
				<div class="border"></div>
			</div>
			<div class="grow-0 container mx-auto relative">
				{
					errorMessage && (
						<div
							id="alert-2"
							class="flex items-center p-4 -mt-14 text-red-800 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400 absolute w-full"
							role="alert"
						>
							<svg
								class="flex-shrink-0 w-4 h-4"
								aria-hidden="true"
								xmlns="http://www.w3.org/2000/svg"
								fill="currentColor"
								viewBox="0 0 20 20"
							>
								<path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z" />
							</svg>
							<span class="sr-only">Info</span>
							<div class="ml-3 text-sm font-medium">
								{errorMessage}
							</div>
							<button
								type="button"
								class="ml-auto -mx-1.5 -my-1.5 bg-red-50 text-red-500 rounded-lg focus:ring-2 focus:ring-red-400 p-1.5 hover:bg-red-200 inline-flex items-center justify-center h-8 w-8 dark:bg-gray-800 dark:text-red-400 dark:hover:bg-gray-700"
								data-dismiss-target="#alert-2"
								aria-label="Close"
							>
								<span class="sr-only">Close</span>
								<svg
									class="w-3 h-3"
									aria-hidden="true"
									xmlns="http://www.w3.org/2000/svg"
									fill="none"
									viewBox="0 0 14 14"
								>
									<path
										stroke="currentColor"
										stroke-linecap="round"
										stroke-linejoin="round"
										stroke-width="2"
										d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"
									/>
								</svg>
							</button>
						</div>
					)
				}
				{
					!edit ? (
						<h1 class="mb-4 text-2xl">Add new Employe</h1>
					) : (
						<h1 class="mb-4 text-2xl">
							Edit Employe:{" "}
							{
								list.vdb_.vdb_energo.find(
									(x) => x.id === Number(edit)
								)?.firstname
							}
						</h1>
					)
				}
				<div class="flex justify-center mb-4">
					<div class="w-1/2 pr-2 nrgpro">
						<form
							action="/energopro/"
							method="post"
							enctype="multipart/form-data"
						>
							<input type="hidden" name="id" value={edit} />
							<input type="hidden" name="emails" id="emails" />
							<input type="hidden" name="phones" id="phones" />
							<label
								>First Name *<input
									type="text"
									name="firstname"
								/></label
							><label
								>Last Name *<input
									type="text"
									name="lastname"
								/></label
							><label
								>Address<input
									type="text"
									name="address"
								/></label
							><button type="submit">Submit</button>
						</form>
					</div>
					<div>
						<div class="multiple">
							<label>
								Email/s
								<input type="text" name="email" id="email" />
							</label>
							<a class="add" id="addemail">+</a>

							<div class="flex flex-wrap" id="emailContainer">
							</div>
						</div>
						<div class="multiple">
							<div>
								<label
									>Phone/s<input
										type="text"
										name="phone"
										id="phone"
									/></label
								><a class="add" id="addphone">+</a>
								<div class="flex flex-wrap" id="phoneContainer">
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<script>
			let emails: string[] = [];
			let phones: string[] = [];
			function renderEmails(container:string, array:string[]) {
				const emailContainer = document.getElementById(container) as HTMLInputElement;
				emailContainer.innerHTML = ""; // Clear existing content
				array.forEach(function (email:string, index:number) {
					const emailDiv = document.createElement("a");
					emailDiv.className =
						"m-1 p-1 pr-4 text-xs bg-sky-800 rounded-md flex relative cursor-pointer";
					emailDiv.textContent = email;
					const newItemButton = document.createElement("div");
					newItemButton.className =
						"bg-pink-700  absolute right-0 p-1 top-0 rounded-md rounded-l-none";
					newItemButton.textContent = "x"; // Set the button text from the array
					newItemButton.addEventListener("click", function () {
						emails.splice(index, 1); // Remove the item from the array
						renderEmails(container,array); // Re-render the emails
					});
					emailDiv.appendChild(newItemButton);
					emailContainer.appendChild(emailDiv);
				});
			}

		function getValueFromInput(
		  container: string,
		  dummyInputId: string,
		  populateID: string,
		  arrayToUpdate: any[]
		) {
		  const inputElement: HTMLInputElement | null = document.getElementById(dummyInputId) as HTMLInputElement;
		  const inputElementForm: HTMLInputElement | null = document.getElementById(populateID) as HTMLInputElement;
		
		  if (inputElement && inputElementForm) {
			arrayToUpdate.push(inputElement.value);
			inputElementForm.value = arrayToUpdate.join(" , ");
			inputElement.value = "";
			renderEmails(container, arrayToUpdate);
		  }
		}
			document
			  .getElementById("addemail")
			  ?.addEventListener("click", function () {
				getValueFromInput("emailContainer", "email", "emails", emails);
			  });
			document
			  .getElementById("addphone")
			  ?.addEventListener("click", function () {
				getValueFromInput("phoneContainer", "phone", "phones", phones);
			  });

			// Get the input element, handle case where user directly submit
			const inputElementE = document.getElementById("inputElementE") as HTMLInputElement | null;
			const inputElementP = document.getElementById("inputElementP") as HTMLInputElement | null;
			
			if (inputElementE) {
			  inputElementE.addEventListener("input", function () {
				const emailsElement = document.getElementById("emails") as HTMLInputElement | null;
				if (emailsElement) {
				  emailsElement.value = inputElementE.value;
				}
			  });
			}
			
			if (inputElementP) {
			  inputElementP.addEventListener("input", function () {
				const phonesElement = document.getElementById("phones") as HTMLInputElement | null;
				if (phonesElement) {
				  phonesElement.value = inputElementP.value;
				}
			  });
			}
		</script>
	</body>
</html>
