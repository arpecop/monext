---
export const prerender = false;
import  { tweets,eq,db,agregator} from "../../../data/hasura";
import Pagination from "../../components/Pagination.astro";
import Layout from "../../layouts/Layout.astro";
const alphabet = [
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z",
];
const { twitter } = Astro.params as { twitter: string };
const x = twitter ? twitter.split("_") : (["a"] as string[]);
const pagenum = x[1] ? Number(x[1]) : 1;

const skip = pagenum * 100 - 100;
 
  
  const respxx = db
   .select({uid:tweets.uid,cat:tweets.cat}).from(tweets)
   .limit(100)
   .offset(skip)
   .where(eq(tweets.cat, x[0]))
  const countx = db
   .select({count:agregator.count}).from(agregator)
   .where(eq(agregator.cat, `${x[0]}_tweets`))
  
   
  const respx = await Promise.all([respxx,countx]).then((values) => {
     return({data:values[0],count:values[1][0].count});
   });
   
  
---

<Layout
  title={` Twitter ecosphere ${pagenum}`}
  description={`Twitter ecosphere   `}
>
  <div class="flex flex-wrap justify-center items-center gap-1 mb-3">
    {
      alphabet.map((x) => (
        <a
          href={"/tw/" + x.toLowerCase() + "_1"}
          class="bg-slate-900 p-2 font-bold text-white dark:bg-white dark:text-slate-900 rounded-md"
        >
          {x}
        </a>
      ))
    }
  </div>
  <div class="flex flex-row flex-wrap justify-center p-0 gap-2">
    {
      respx.data.map(({ uid }: { uid: string }) => (
        <a
          class="active flex  bg-slate-900 font-bold text-white dark:bg-white dark:text-slate-900 px-3 rounded-xl text-sm"
          href={"/tw/u/" + uid.replace("_tw", "")}
        >
          {uid.replace("_tw", "")}{" "}
        </a>
      ))
    }
  </div>
  <Pagination
    items={respx.count}
    currentPage={pagenum}
    pageSize={100}
    prefix={"/tw/" + x[0] + "_"}
  />
</Layout>
