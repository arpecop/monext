---
export const prerender = false;
import {uniqBy} from "lodash";

 
import { gql } from "../../../../components/gql";
import { sql } from "../../../../data/hasura";

import CardNews from "../../../../components/CardNews.astro";
import RudSense from "../../../../components/RudSense.astro";
import Layout from "../../../../layouts/Layout.astro";
function countAlphanumeric(str: string) {
  const regex = /[a-zA-Z0-9а-яА-Я]/g;
  const matches = str.match(regex);
  return matches ? matches.length : 0;
}
 
function getLastP(arrz: (string | { type: string; content: string })[]) {
  const arr = arrz.map((x, i) => {
    if (typeof x === "string") {
      return { type: "p", content: x, i };
    } else {
      return { ...x, i };
    }
  });
  const emptylines = arr.filter((x) => countAlphanumeric(x.content) !== 0);
  const lastPElemIndex = emptylines.reduce((acc, curr, index) => {
    if (curr.type === "p") {
      acc = index;
    }
    return acc;
  }, 0);
  const filteredArr = arr.slice(0, lastPElemIndex + 1);
  const removeNoImages = filteredArr.filter(
    (x:{type:string; content:string}) => x.type === "p" || (x.type === "img" && x.content.includes("http"))
  );
  const arrx = uniqBy(removeNoImages, function (e) {
    return e.content;
  });
  return arrx;
}
const { newsid } = Astro.params as { newsid: string; slug?: string };
 function formatDate(date: Date): string {
   const options: Intl.DateTimeFormatOptions = {
     year: "numeric",
     month: "long",
     day: "numeric",
     hour: "numeric",
     minute: "numeric",
     hour12: false,
   };
   return date.toLocaleString("bg-BG", options);
 }
 function getRandomDate(year: number): Date {
   const month = Math.floor(Math.random() * 12) + 1;
   const day = Math.floor(Math.random() * 31) + 1;
   const hour = Math.floor(Math.random() * 14) + 9;
   return new Date(year, month - 1, day, hour);
 }

type Article = {
   type: string;
   content: string;
   i: number;
   html?:Article
 }[]
const newsfetch = await gql(`newssingle`,{_eq:newsid}) as { newsbg_by_pk: { image: string,date:string; title:string,html?:Article } };
 const { title,  date ,html} = newsfetch.newsbg_by_pk  
 let contentfetch:Article;
 if(!html) {
    contentfetch = await fetch(
     `https://cdn.kloun.lol/${newsid}.json`
   ).then((res) => res.json()) as Article;
 } else {
   contentfetch = html
 }
---

<Layout
  title={title}
  description={title}
  image={"https://imgnews.kloun.lol/api/img/" + newsid + ".jpg"}
  hideFooter={true}
>
  {formatDate(new Date(date ? date : getRandomDate(2021)))}
  <h1 class="font-bold sm:text-2xl md:text-4xl">{title}</h1>
  <div class="flex justify-center items-center">
    <div class="p-1 rounded-lg bg-gradient-to-r from-fuchsia-500 to-cyan-500">
      <img
        src={"/api/img/" + newsid + ".jpg"}
        class="rounded-md"
        loading="lazy"
        alt={title}
      />
    </div>
  </div>
  <div class="mb-6 items-center justify-center">
    <RudSense type="inarticle" />
    <article class="leading-relaxed" id="article">
      {
        getLastP(    html || contentfetch.html ).map(
          ({
            type,
            content,
            i,
          }: {
            type: string;
            content: string;
            i: number;
          }) =>
            type === "p" ? (
              <p class="text-lg">
                {content}{" "}
                {(i === 3 || i === 9 || i === 12) && (
                  <RudSense type="inarticle" />
                )}
              </p>
            ) : (
              <div class="flex justify-center items-center">
                <div class="p-1 rounded-lg bg-gradient-to-r from-fuchsia-500 to-cyan-500">
                  <img
                    src={
                      "https://imgnews.kloun.lol/api/img/" +
                      newsid +
                      "--" +
                      i +
                      ".jpg"
                    }
                    class="rounded-md"
                    loading="lazy"
                  />
                </div>
                {(i === 3 || i === 9 || i === 12) && (
                  <RudSense type="inarticle" />
                )}
              </div>
            )
        )
      }
    </article>
    <div class="clear-both"></div>

    <RudSense type="inarticle" main={true} />

    <div class="clear-both"></div>
  </div>
  <div class="flex flex-wrap gap-3">
    {
      newsfetch.newsbg.map(({ nid, title, key, date, image,id }) => (
        <CardNews
          title={title}
          img={image}
          id={id}
          date={date || ""}
          key={key || ""}
          nid={nid || ""}
        />
      ))
    }
  </div>
</Layout>
