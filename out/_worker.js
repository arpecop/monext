globalThis.process = {
								argv: [],
								env: {},
							};
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except2, desc2) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except2)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc2 = __getOwnPropDesc(from, key)) || desc2.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// dist/$server_build/renderers.mjs
var renderers;
var init_renderers = __esm({
  "dist/$server_build/renderers.mjs"() {
    "use strict";
    renderers = [];
  }
});

// ../../node_modules/@astrojs/internal-helpers/dist/path.js
function appendForwardSlash(path) {
  return path.endsWith("/") ? path : path + "/";
}
function prependForwardSlash(path) {
  return path[0] === "/" ? path : "/" + path;
}
function collapseDuplicateSlashes(path) {
  return path.replace(/(?<!:)\/{2,}/g, "/");
}
function removeTrailingForwardSlash(path) {
  return path.endsWith("/") ? path.slice(0, path.length - 1) : path;
}
function removeLeadingForwardSlash(path) {
  return path.startsWith("/") ? path.substring(1) : path;
}
function trimSlashes(path) {
  return path.replace(/^\/|\/$/g, "");
}
function isString(path) {
  return typeof path === "string" || path instanceof String;
}
function joinPaths(...paths) {
  return paths.filter(isString).map((path, i) => {
    if (i === 0) {
      return removeTrailingForwardSlash(path);
    } else if (i === paths.length - 1) {
      return removeLeadingForwardSlash(path);
    } else {
      return trimSlashes(path);
    }
  }).join("/");
}
function isRemotePath(src) {
  return /^(?:http|ftp|https|ws):?\/\//.test(src) || src.startsWith("data:");
}
function slash(path) {
  return path.replace(/\\/g, "/");
}
function fileExtension(path) {
  const ext = path.split(".").pop();
  return ext !== path ? `.${ext}` : "";
}
var init_path = __esm({
  "../../node_modules/@astrojs/internal-helpers/dist/path.js"() {
  }
});

// ../../node_modules/cookie/index.js
var require_cookie = __commonJS({
  "../../node_modules/cookie/index.js"(exports) {
    "use strict";
    exports.parse = parse3;
    exports.serialize = serialize3;
    var __toString = Object.prototype.toString;
    var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
    function parse3(str, options) {
      if (typeof str !== "string") {
        throw new TypeError("argument str must be a string");
      }
      var obj = {};
      var opt = options || {};
      var dec = opt.decode || decode;
      var index = 0;
      while (index < str.length) {
        var eqIdx = str.indexOf("=", index);
        if (eqIdx === -1) {
          break;
        }
        var endIdx = str.indexOf(";", index);
        if (endIdx === -1) {
          endIdx = str.length;
        } else if (endIdx < eqIdx) {
          index = str.lastIndexOf(";", eqIdx - 1) + 1;
          continue;
        }
        var key = str.slice(index, eqIdx).trim();
        if (void 0 === obj[key]) {
          var val = str.slice(eqIdx + 1, endIdx).trim();
          if (val.charCodeAt(0) === 34) {
            val = val.slice(1, -1);
          }
          obj[key] = tryDecode(val, dec);
        }
        index = endIdx + 1;
      }
      return obj;
    }
    function serialize3(name, val, options) {
      var opt = options || {};
      var enc = opt.encode || encode;
      if (typeof enc !== "function") {
        throw new TypeError("option encode is invalid");
      }
      if (!fieldContentRegExp.test(name)) {
        throw new TypeError("argument name is invalid");
      }
      var value = enc(val);
      if (value && !fieldContentRegExp.test(value)) {
        throw new TypeError("argument val is invalid");
      }
      var str = name + "=" + value;
      if (null != opt.maxAge) {
        var maxAge = opt.maxAge - 0;
        if (isNaN(maxAge) || !isFinite(maxAge)) {
          throw new TypeError("option maxAge is invalid");
        }
        str += "; Max-Age=" + Math.floor(maxAge);
      }
      if (opt.domain) {
        if (!fieldContentRegExp.test(opt.domain)) {
          throw new TypeError("option domain is invalid");
        }
        str += "; Domain=" + opt.domain;
      }
      if (opt.path) {
        if (!fieldContentRegExp.test(opt.path)) {
          throw new TypeError("option path is invalid");
        }
        str += "; Path=" + opt.path;
      }
      if (opt.expires) {
        var expires = opt.expires;
        if (!isDate(expires) || isNaN(expires.valueOf())) {
          throw new TypeError("option expires is invalid");
        }
        str += "; Expires=" + expires.toUTCString();
      }
      if (opt.httpOnly) {
        str += "; HttpOnly";
      }
      if (opt.secure) {
        str += "; Secure";
      }
      if (opt.priority) {
        var priority = typeof opt.priority === "string" ? opt.priority.toLowerCase() : opt.priority;
        switch (priority) {
          case "low":
            str += "; Priority=Low";
            break;
          case "medium":
            str += "; Priority=Medium";
            break;
          case "high":
            str += "; Priority=High";
            break;
          default:
            throw new TypeError("option priority is invalid");
        }
      }
      if (opt.sameSite) {
        var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
        switch (sameSite) {
          case true:
            str += "; SameSite=Strict";
            break;
          case "lax":
            str += "; SameSite=Lax";
            break;
          case "strict":
            str += "; SameSite=Strict";
            break;
          case "none":
            str += "; SameSite=None";
            break;
          default:
            throw new TypeError("option sameSite is invalid");
        }
      }
      return str;
    }
    function decode(str) {
      return str.indexOf("%") !== -1 ? decodeURIComponent(str) : str;
    }
    function encode(val) {
      return encodeURIComponent(val);
    }
    function isDate(val) {
      return __toString.call(val) === "[object Date]" || val instanceof Date;
    }
    function tryDecode(str, decode2) {
      try {
        return decode2(str);
      } catch (e) {
        return str;
      }
    }
  }
});

// ../../node_modules/kleur/colors.mjs
function init(x, y) {
  let rgx = new RegExp(`\\x1b\\[${y}m`, "g");
  let open = `\x1B[${x}m`, close = `\x1B[${y}m`;
  return function(txt) {
    if (!$.enabled || txt == null)
      return txt;
    return open + (!!~("" + txt).indexOf(close) ? txt.replace(rgx, close + open) : txt) + close;
  };
}
var FORCE_COLOR, NODE_DISABLE_COLORS, NO_COLOR, TERM, isTTY, $, reset, bold, dim, italic, underline, inverse, hidden, strikethrough, black, red, green, yellow, blue, magenta, cyan, white, gray, grey, bgBlack, bgRed, bgGreen, bgYellow, bgBlue, bgMagenta, bgCyan, bgWhite;
var init_colors = __esm({
  "../../node_modules/kleur/colors.mjs"() {
    isTTY = true;
    if (typeof process !== "undefined") {
      ({ FORCE_COLOR, NODE_DISABLE_COLORS, NO_COLOR, TERM } = process.env || {});
      isTTY = process.stdout && process.stdout.isTTY;
    }
    $ = {
      enabled: !NODE_DISABLE_COLORS && NO_COLOR == null && TERM !== "dumb" && (FORCE_COLOR != null && FORCE_COLOR !== "0" || isTTY)
    };
    reset = init(0, 0);
    bold = init(1, 22);
    dim = init(2, 22);
    italic = init(3, 23);
    underline = init(4, 24);
    inverse = init(7, 27);
    hidden = init(8, 28);
    strikethrough = init(9, 29);
    black = init(30, 39);
    red = init(31, 39);
    green = init(32, 39);
    yellow = init(33, 39);
    blue = init(34, 39);
    magenta = init(35, 39);
    cyan = init(36, 39);
    white = init(37, 39);
    gray = init(90, 39);
    grey = init(90, 39);
    bgBlack = init(40, 49);
    bgRed = init(41, 49);
    bgGreen = init(42, 49);
    bgYellow = init(43, 49);
    bgBlue = init(44, 49);
    bgMagenta = init(45, 49);
    bgCyan = init(46, 49);
    bgWhite = init(47, 49);
  }
});

// ../../node_modules/html-escaper/esm/index.js
var replace, ca, esca, pe, escape;
var init_esm = __esm({
  "../../node_modules/html-escaper/esm/index.js"() {
    ({ replace } = "");
    ca = /[&<>'"]/g;
    esca = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      "'": "&#39;",
      '"': "&quot;"
    };
    pe = (m) => esca[m];
    escape = (es) => replace.call(es, ca, pe);
  }
});

// ../../node_modules/cssesc/cssesc.js
var require_cssesc = __commonJS({
  "../../node_modules/cssesc/cssesc.js"(exports, module) {
    "use strict";
    var object = {};
    var hasOwnProperty = object.hasOwnProperty;
    var merge = function merge2(options, defaults) {
      if (!options) {
        return defaults;
      }
      var result = {};
      for (var key in defaults) {
        result[key] = hasOwnProperty.call(options, key) ? options[key] : defaults[key];
      }
      return result;
    };
    var regexAnySingleEscape = /[ -,\.\/:-@\[-\^`\{-~]/;
    var regexSingleEscape = /[ -,\.\/:-@\[\]\^`\{-~]/;
    var regexExcessiveSpaces = /(^|\\+)?(\\[A-F0-9]{1,6})\x20(?![a-fA-F0-9\x20])/g;
    var cssesc = function cssesc2(string, options) {
      options = merge(options, cssesc2.options);
      if (options.quotes != "single" && options.quotes != "double") {
        options.quotes = "single";
      }
      var quote = options.quotes == "double" ? '"' : "'";
      var isIdentifier = options.isIdentifier;
      var firstChar = string.charAt(0);
      var output = "";
      var counter = 0;
      var length = string.length;
      while (counter < length) {
        var character = string.charAt(counter++);
        var codePoint = character.charCodeAt();
        var value = void 0;
        if (codePoint < 32 || codePoint > 126) {
          if (codePoint >= 55296 && codePoint <= 56319 && counter < length) {
            var extra = string.charCodeAt(counter++);
            if ((extra & 64512) == 56320) {
              codePoint = ((codePoint & 1023) << 10) + (extra & 1023) + 65536;
            } else {
              counter--;
            }
          }
          value = "\\" + codePoint.toString(16).toUpperCase() + " ";
        } else {
          if (options.escapeEverything) {
            if (regexAnySingleEscape.test(character)) {
              value = "\\" + character;
            } else {
              value = "\\" + codePoint.toString(16).toUpperCase() + " ";
            }
          } else if (/[\t\n\f\r\x0B]/.test(character)) {
            value = "\\" + codePoint.toString(16).toUpperCase() + " ";
          } else if (character == "\\" || !isIdentifier && (character == '"' && quote == character || character == "'" && quote == character) || isIdentifier && regexSingleEscape.test(character)) {
            value = "\\" + character;
          } else {
            value = character;
          }
        }
        output += value;
      }
      if (isIdentifier) {
        if (/^-[-\d]/.test(output)) {
          output = "\\-" + output.slice(1);
        } else if (/\d/.test(firstChar)) {
          output = "\\3" + firstChar + " " + output.slice(1);
        }
      }
      output = output.replace(regexExcessiveSpaces, function($0, $1, $2) {
        if ($1 && $1.length % 2) {
          return $0;
        }
        return ($1 || "") + $2;
      });
      if (!isIdentifier && options.wrap) {
        return quote + output + quote;
      }
      return output;
    };
    cssesc.options = {
      "escapeEverything": false,
      "isIdentifier": false,
      "quotes": "single",
      "wrap": false
    };
    cssesc.version = "3.0.0";
    module.exports = cssesc;
  }
});

// dist/$server_build/chunks/astro_CZ31vzIS.mjs
function normalizeLF(code) {
  return code.replace(/\r\n|\r(?!\n)|\n/g, "\n");
}
function codeFrame(src, loc) {
  if (!loc || loc.line === void 0 || loc.column === void 0) {
    return "";
  }
  const lines = normalizeLF(src).split("\n").map((ln) => ln.replace(/\t/g, "  "));
  const visibleLines = [];
  for (let n = -2; n <= 2; n++) {
    if (lines[loc.line + n])
      visibleLines.push(loc.line + n);
  }
  let gutterWidth = 0;
  for (const lineNo of visibleLines) {
    let w = `> ${lineNo}`;
    if (w.length > gutterWidth)
      gutterWidth = w.length;
  }
  let output = "";
  for (const lineNo of visibleLines) {
    const isFocusedLine = lineNo === loc.line - 1;
    output += isFocusedLine ? "> " : "  ";
    output += `${lineNo + 1} | ${lines[lineNo]}
`;
    if (isFocusedLine)
      output += `${Array.from({ length: gutterWidth }).join(" ")}  | ${Array.from({
        length: loc.column
      }).join(" ")}^
`;
  }
  return output;
}
async function renderEndpoint(mod, context, ssr, logger) {
  const { request, url: url2 } = context;
  const method = request.method.toUpperCase();
  const handler = mod[method] ?? mod["ALL"];
  if (!ssr && ssr === false && method !== "GET") {
    logger.warn(
      "router",
      `${url2.pathname} ${bold(
        method
      )} requests are not available for a static site. Update your config to \`output: 'server'\` or \`output: 'hybrid'\` to enable.`
    );
  }
  if (handler === void 0) {
    logger.warn(
      "router",
      `No API Route handler exists for the method "${method}" for the route "${url2.pathname}".
Found handlers: ${Object.keys(mod).map((exp) => JSON.stringify(exp)).join(", ")}
` + ("all" in mod ? `One of the exported handlers is "all" (lowercase), did you mean to export 'ALL'?
` : "")
    );
    return new Response(null, { status: 404 });
  }
  if (typeof handler !== "function") {
    logger.error(
      "router",
      `The route "${url2.pathname}" exports a value for the method "${method}", but it is of the type ${typeof handler} instead of a function.`
    );
    return new Response(null, { status: 500 });
  }
  const response = await handler.call(mod, context);
  if (!response || response instanceof Response === false) {
    throw new AstroError(EndpointDidNotReturnAResponse);
  }
  if (REROUTABLE_STATUS_CODES.includes(response.status)) {
    response.headers.set(REROUTE_DIRECTIVE_HEADER, "no");
  }
  return response;
}
function validateArgs(args) {
  if (args.length !== 3)
    return false;
  if (!args[0] || typeof args[0] !== "object")
    return false;
  return true;
}
function baseCreateComponent(cb, moduleId, propagation) {
  const name = moduleId?.split("/").pop()?.replace(".astro", "") ?? "";
  const fn = (...args) => {
    if (!validateArgs(args)) {
      throw new AstroError({
        ...InvalidComponentArgs,
        message: InvalidComponentArgs.message(name)
      });
    }
    return cb(...args);
  };
  Object.defineProperty(fn, "name", { value: name, writable: false });
  fn.isAstroComponentFactory = true;
  fn.moduleId = moduleId;
  fn.propagation = propagation;
  return fn;
}
function createComponentWithOptions(opts) {
  const cb = baseCreateComponent(opts.factory, opts.moduleId, opts.propagation);
  return cb;
}
function createComponent(arg1, moduleId, propagation) {
  if (typeof arg1 === "function") {
    return baseCreateComponent(arg1, moduleId, propagation);
  } else {
    return createComponentWithOptions(arg1);
  }
}
function createAstroGlobFn() {
  const globHandler = (importMetaGlobResult) => {
    if (typeof importMetaGlobResult === "string") {
      throw new AstroError({
        ...AstroGlobUsedOutside,
        message: AstroGlobUsedOutside.message(JSON.stringify(importMetaGlobResult))
      });
    }
    let allEntries = [...Object.values(importMetaGlobResult)];
    if (allEntries.length === 0) {
      throw new AstroError({
        ...AstroGlobNoMatch,
        message: AstroGlobNoMatch.message(JSON.stringify(importMetaGlobResult))
      });
    }
    return Promise.all(allEntries.map((fn) => fn()));
  };
  return globHandler;
}
function createAstro(site) {
  return {
    // TODO: this is no longer neccessary for `Astro.site`
    // but it somehow allows working around caching issues in content collections for some tests
    site: site ? new URL(site) : void 0,
    generator: `Astro v${ASTRO_VERSION}`,
    glob: createAstroGlobFn()
  };
}
function isPromise(value) {
  return !!value && typeof value === "object" && typeof value.then === "function";
}
async function* streamAsyncIterator(stream) {
  const reader = stream.getReader();
  try {
    while (true) {
      const { done, value } = await reader.read();
      if (done)
        return;
      yield value;
    }
  } finally {
    reader.releaseLock();
  }
}
function isHTMLString(value) {
  return Object.prototype.toString.call(value) === "[object HTMLString]";
}
function markHTMLBytes(bytes) {
  return new HTMLBytes(bytes);
}
function hasGetReader(obj) {
  return typeof obj.getReader === "function";
}
async function* unescapeChunksAsync(iterable) {
  if (hasGetReader(iterable)) {
    for await (const chunk of streamAsyncIterator(iterable)) {
      yield unescapeHTML(chunk);
    }
  } else {
    for await (const chunk of iterable) {
      yield unescapeHTML(chunk);
    }
  }
}
function* unescapeChunks(iterable) {
  for (const chunk of iterable) {
    yield unescapeHTML(chunk);
  }
}
function unescapeHTML(str) {
  if (!!str && typeof str === "object") {
    if (str instanceof Uint8Array) {
      return markHTMLBytes(str);
    } else if (str instanceof Response && str.body) {
      const body = str.body;
      return unescapeChunksAsync(body);
    } else if (typeof str.then === "function") {
      return Promise.resolve(str).then((value) => {
        return unescapeHTML(value);
      });
    } else if (str[Symbol.for("astro:slot-string")]) {
      return str;
    } else if (Symbol.iterator in str) {
      return unescapeChunks(str);
    } else if (Symbol.asyncIterator in str || hasGetReader(str)) {
      return unescapeChunksAsync(str);
    }
  }
  return markHTMLString(str);
}
function isVNode(vnode) {
  return vnode && typeof vnode === "object" && vnode[AstroJSX];
}
function createRenderInstruction(instruction) {
  return Object.defineProperty(instruction, RenderInstructionSymbol, {
    value: true
  });
}
function isRenderInstruction(chunk) {
  return chunk && typeof chunk === "object" && chunk[RenderInstructionSymbol];
}
function r(e) {
  var t, f, n = "";
  if ("string" == typeof e || "number" == typeof e)
    n += e;
  else if ("object" == typeof e)
    if (Array.isArray(e)) {
      var o = e.length;
      for (t = 0; t < o; t++)
        e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
    } else
      for (f in e)
        e[f] && (n && (n += " "), n += f);
  return n;
}
function clsx() {
  for (var e, t, f = 0, n = "", o = arguments.length; f < o; f++)
    (e = arguments[f]) && (t = r(e)) && (n && (n += " "), n += t);
  return n;
}
function serializeArray(value, metadata = {}, parents = /* @__PURE__ */ new WeakSet()) {
  if (parents.has(value)) {
    throw new Error(`Cyclic reference detected while serializing props for <${metadata.displayName} client:${metadata.hydrate}>!

Cyclic references cannot be safely serialized for client-side usage. Please remove the cyclic reference.`);
  }
  parents.add(value);
  const serialized = value.map((v) => {
    return convertToSerializedForm(v, metadata, parents);
  });
  parents.delete(value);
  return serialized;
}
function serializeObject(value, metadata = {}, parents = /* @__PURE__ */ new WeakSet()) {
  if (parents.has(value)) {
    throw new Error(`Cyclic reference detected while serializing props for <${metadata.displayName} client:${metadata.hydrate}>!

Cyclic references cannot be safely serialized for client-side usage. Please remove the cyclic reference.`);
  }
  parents.add(value);
  const serialized = Object.fromEntries(
    Object.entries(value).map(([k, v]) => {
      return [k, convertToSerializedForm(v, metadata, parents)];
    })
  );
  parents.delete(value);
  return serialized;
}
function convertToSerializedForm(value, metadata = {}, parents = /* @__PURE__ */ new WeakSet()) {
  const tag = Object.prototype.toString.call(value);
  switch (tag) {
    case "[object Date]": {
      return [PROP_TYPE.Date, value.toISOString()];
    }
    case "[object RegExp]": {
      return [PROP_TYPE.RegExp, value.source];
    }
    case "[object Map]": {
      return [PROP_TYPE.Map, serializeArray(Array.from(value), metadata, parents)];
    }
    case "[object Set]": {
      return [PROP_TYPE.Set, serializeArray(Array.from(value), metadata, parents)];
    }
    case "[object BigInt]": {
      return [PROP_TYPE.BigInt, value.toString()];
    }
    case "[object URL]": {
      return [PROP_TYPE.URL, value.toString()];
    }
    case "[object Array]": {
      return [PROP_TYPE.JSON, serializeArray(value, metadata, parents)];
    }
    case "[object Uint8Array]": {
      return [PROP_TYPE.Uint8Array, Array.from(value)];
    }
    case "[object Uint16Array]": {
      return [PROP_TYPE.Uint16Array, Array.from(value)];
    }
    case "[object Uint32Array]": {
      return [PROP_TYPE.Uint32Array, Array.from(value)];
    }
    default: {
      if (value !== null && typeof value === "object") {
        return [PROP_TYPE.Value, serializeObject(value, metadata, parents)];
      } else if (value === void 0) {
        return [PROP_TYPE.Value];
      } else {
        return [PROP_TYPE.Value, value];
      }
    }
  }
}
function serializeProps(props, metadata) {
  const serialized = JSON.stringify(serializeObject(props, metadata));
  return serialized;
}
function extractDirectives(inputProps, clientDirectives) {
  let extracted = {
    isPage: false,
    hydration: null,
    props: {},
    propsWithoutTransitionAttributes: {}
  };
  for (const [key, value] of Object.entries(inputProps)) {
    if (key.startsWith("server:")) {
      if (key === "server:root") {
        extracted.isPage = true;
      }
    }
    if (key.startsWith("client:")) {
      if (!extracted.hydration) {
        extracted.hydration = {
          directive: "",
          value: "",
          componentUrl: "",
          componentExport: { value: "" }
        };
      }
      switch (key) {
        case "client:component-path": {
          extracted.hydration.componentUrl = value;
          break;
        }
        case "client:component-export": {
          extracted.hydration.componentExport.value = value;
          break;
        }
        case "client:component-hydration": {
          break;
        }
        case "client:display-name": {
          break;
        }
        default: {
          extracted.hydration.directive = key.split(":")[1];
          extracted.hydration.value = value;
          if (!clientDirectives.has(extracted.hydration.directive)) {
            const hydrationMethods = Array.from(clientDirectives.keys()).map((d) => `client:${d}`).join(", ");
            throw new Error(
              `Error: invalid hydration directive "${key}". Supported hydration methods: ${hydrationMethods}`
            );
          }
          if (extracted.hydration.directive === "media" && typeof extracted.hydration.value !== "string") {
            throw new AstroError(MissingMediaQueryDirective);
          }
          break;
        }
      }
    } else {
      extracted.props[key] = value;
      if (!transitionDirectivesToCopyOnIsland.includes(key)) {
        extracted.propsWithoutTransitionAttributes[key] = value;
      }
    }
  }
  for (const sym of Object.getOwnPropertySymbols(inputProps)) {
    extracted.props[sym] = inputProps[sym];
    extracted.propsWithoutTransitionAttributes[sym] = inputProps[sym];
  }
  return extracted;
}
async function generateHydrateScript(scriptOptions, metadata) {
  const { renderer, result, astroId, props, attrs } = scriptOptions;
  const { hydrate, componentUrl, componentExport } = metadata;
  if (!componentExport.value) {
    throw new AstroError({
      ...NoMatchingImport,
      message: NoMatchingImport.message(metadata.displayName)
    });
  }
  const island = {
    children: "",
    props: {
      // This is for HMR, probably can avoid it in prod
      uid: astroId
    }
  };
  if (attrs) {
    for (const [key, value] of Object.entries(attrs)) {
      island.props[key] = escapeHTML(value);
    }
  }
  island.props["component-url"] = await result.resolve(decodeURI(componentUrl));
  if (renderer.clientEntrypoint) {
    island.props["component-export"] = componentExport.value;
    island.props["renderer-url"] = await result.resolve(decodeURI(renderer.clientEntrypoint));
    island.props["props"] = escapeHTML(serializeProps(props, metadata));
  }
  island.props["ssr"] = "";
  island.props["client"] = hydrate;
  let beforeHydrationUrl = await result.resolve("astro:scripts/before-hydration.js");
  if (beforeHydrationUrl.length) {
    island.props["before-hydration-url"] = beforeHydrationUrl;
  }
  island.props["opts"] = escapeHTML(
    JSON.stringify({
      name: metadata.displayName,
      value: metadata.hydrateArgs || ""
    })
  );
  transitionDirectivesToCopyOnIsland.forEach((name) => {
    if (typeof props[name] !== "undefined") {
      island.props[name] = props[name];
    }
  });
  return island;
}
function bitwise(str) {
  let hash = 0;
  if (str.length === 0)
    return hash;
  for (let i = 0; i < str.length; i++) {
    const ch = str.charCodeAt(i);
    hash = (hash << 5) - hash + ch;
    hash = hash & hash;
  }
  return hash;
}
function shorthash(text2) {
  let num;
  let result = "";
  let integer2 = bitwise(text2);
  const sign = integer2 < 0 ? "Z" : "";
  integer2 = Math.abs(integer2);
  while (integer2 >= binary) {
    num = integer2 % binary;
    integer2 = Math.floor(integer2 / binary);
    result = dictionary[num] + result;
  }
  if (integer2 > 0) {
    result = dictionary[integer2] + result;
  }
  return sign + result;
}
function isAstroComponentFactory(obj) {
  return obj == null ? false : obj.isAstroComponentFactory === true;
}
function isAPropagatingComponent(result, factory) {
  let hint = factory.propagation || "none";
  if (factory.moduleId && result.componentMetadata.has(factory.moduleId) && hint === "none") {
    hint = result.componentMetadata.get(factory.moduleId).propagation;
  }
  return hint === "in-tree" || hint === "self";
}
function isHeadAndContent(obj) {
  return typeof obj === "object" && !!obj[headAndContentSym];
}
function determineIfNeedsHydrationScript(result) {
  if (result._metadata.hasHydrationScript) {
    return false;
  }
  return result._metadata.hasHydrationScript = true;
}
function determinesIfNeedsDirectiveScript(result, directive) {
  if (result._metadata.hasDirectives.has(directive)) {
    return false;
  }
  result._metadata.hasDirectives.add(directive);
  return true;
}
function getDirectiveScriptText(result, directive) {
  const clientDirectives = result.clientDirectives;
  const clientDirective = clientDirectives.get(directive);
  if (!clientDirective) {
    throw new Error(`Unknown directive: ${directive}`);
  }
  return clientDirective;
}
function getPrescripts(result, type, directive) {
  switch (type) {
    case "both":
      return `${ISLAND_STYLES}<script>${getDirectiveScriptText(result, directive)};${astro_island_prebuilt_default}<\/script>`;
    case "directive":
      return `<script>${getDirectiveScriptText(result, directive)}<\/script>`;
  }
  return "";
}
function defineScriptVars(vars) {
  let output = "";
  for (const [key, value] of Object.entries(vars)) {
    output += `const ${toIdent(key)} = ${JSON.stringify(value)?.replace(
      /<\/script>/g,
      "\\x3C/script>"
    )};
`;
  }
  return markHTMLString(output);
}
function formatList(values) {
  if (values.length === 1) {
    return values[0];
  }
  return `${values.slice(0, -1).join(", ")} or ${values[values.length - 1]}`;
}
function addAttribute(value, key, shouldEscape = true) {
  if (value == null) {
    return "";
  }
  if (value === false) {
    if (htmlEnumAttributes.test(key) || svgEnumAttributes.test(key)) {
      return markHTMLString(` ${key}="false"`);
    }
    return "";
  }
  if (STATIC_DIRECTIVES.has(key)) {
    console.warn(`[astro] The "${key}" directive cannot be applied dynamically at runtime. It will not be rendered as an attribute.

Make sure to use the static attribute syntax (\`${key}={value}\`) instead of the dynamic spread syntax (\`{...{ "${key}": value }}\`).`);
    return "";
  }
  if (key === "class:list") {
    const listValue = toAttributeString(clsx(value), shouldEscape);
    if (listValue === "") {
      return "";
    }
    return markHTMLString(` ${key.slice(0, -5)}="${listValue}"`);
  }
  if (key === "style" && !(value instanceof HTMLString)) {
    if (Array.isArray(value) && value.length === 2) {
      return markHTMLString(
        ` ${key}="${toAttributeString(`${toStyleString(value[0])};${value[1]}`, shouldEscape)}"`
      );
    }
    if (typeof value === "object") {
      return markHTMLString(` ${key}="${toAttributeString(toStyleString(value), shouldEscape)}"`);
    }
  }
  if (key === "className") {
    return markHTMLString(` class="${toAttributeString(value, shouldEscape)}"`);
  }
  if (typeof value === "string" && value.includes("&") && urlCanParse(value)) {
    return markHTMLString(` ${key}="${toAttributeString(value, false)}"`);
  }
  if (value === true && (key.startsWith("data-") || htmlBooleanAttributes.test(key))) {
    return markHTMLString(` ${key}`);
  } else {
    return markHTMLString(` ${key}="${toAttributeString(value, shouldEscape)}"`);
  }
}
function internalSpreadAttributes(values, shouldEscape = true) {
  let output = "";
  for (const [key, value] of Object.entries(values)) {
    output += addAttribute(value, key, shouldEscape);
  }
  return markHTMLString(output);
}
function renderElement$1(name, { props: _props, children = "" }, shouldEscape = true) {
  const { lang: _, "data-astro-id": astroId, "define:vars": defineVars, ...props } = _props;
  if (defineVars) {
    if (name === "style") {
      delete props["is:global"];
      delete props["is:scoped"];
    }
    if (name === "script") {
      delete props.hoist;
      children = defineScriptVars(defineVars) + "\n" + children;
    }
  }
  if ((children == null || children == "") && voidElementNames.test(name)) {
    return `<${name}${internalSpreadAttributes(props, shouldEscape)}>`;
  }
  return `<${name}${internalSpreadAttributes(props, shouldEscape)}>${children}</${name}>`;
}
function renderToBufferDestination(bufferRenderFunction) {
  const bufferChunks = [];
  const bufferDestination = {
    write: (chunk) => bufferChunks.push(chunk)
  };
  const renderPromise = bufferRenderFunction(bufferDestination);
  Promise.resolve(renderPromise).catch(() => {
  });
  return {
    async renderToFinalDestination(destination) {
      for (const chunk of bufferChunks) {
        destination.write(chunk);
      }
      bufferDestination.write = (chunk) => destination.write(chunk);
      await renderPromise;
    }
  };
}
function promiseWithResolvers() {
  let resolve, reject;
  const promise = new Promise((_resolve, _reject) => {
    resolve = _resolve;
    reject = _reject;
  });
  return {
    promise,
    resolve,
    reject
  };
}
function urlCanParse(url2) {
  try {
    new URL(url2);
    return true;
  } catch {
    return false;
  }
}
function renderAllHeadContent(result) {
  result._metadata.hasRenderedHead = true;
  const styles = Array.from(result.styles).filter(uniqueElements).map(
    (style) => style.props.rel === "stylesheet" ? renderElement$1("link", style) : renderElement$1("style", style)
  );
  result.styles.clear();
  const scripts = Array.from(result.scripts).filter(uniqueElements).map((script) => {
    return renderElement$1("script", script, false);
  });
  const links = Array.from(result.links).filter(uniqueElements).map((link) => renderElement$1("link", link, false));
  let content = styles.join("\n") + links.join("\n") + scripts.join("\n");
  if (result._metadata.extraHead.length > 0) {
    for (const part of result._metadata.extraHead) {
      content += part;
    }
  }
  return markHTMLString(content);
}
function renderHead() {
  return createRenderInstruction({ type: "head" });
}
function maybeRenderHead() {
  return createRenderInstruction({ type: "maybe-head" });
}
function isSlotString(str) {
  return !!str[slotString];
}
function renderSlot(result, slotted, fallback) {
  if (!slotted && fallback) {
    return renderSlot(result, fallback);
  }
  return {
    async render(destination) {
      await renderChild(destination, typeof slotted === "function" ? slotted(result) : slotted);
    }
  };
}
async function renderSlotToString(result, slotted, fallback) {
  let content = "";
  let instructions = null;
  const temporaryDestination = {
    write(chunk) {
      if (chunk instanceof SlotString) {
        content += chunk;
        if (chunk.instructions) {
          instructions ??= [];
          instructions.push(...chunk.instructions);
        }
      } else if (chunk instanceof Response)
        return;
      else if (typeof chunk === "object" && "type" in chunk && typeof chunk.type === "string") {
        if (instructions === null) {
          instructions = [];
        }
        instructions.push(chunk);
      } else {
        content += chunkToString(result, chunk);
      }
    }
  };
  const renderInstance = renderSlot(result, slotted, fallback);
  await renderInstance.render(temporaryDestination);
  return markHTMLString(new SlotString(content, instructions));
}
async function renderSlots(result, slots = {}) {
  let slotInstructions = null;
  let children = {};
  if (slots) {
    await Promise.all(
      Object.entries(slots).map(
        ([key, value]) => renderSlotToString(result, value).then((output) => {
          if (output.instructions) {
            if (slotInstructions === null) {
              slotInstructions = [];
            }
            slotInstructions.push(...output.instructions);
          }
          children[key] = output;
        })
      )
    );
  }
  return { slotInstructions, children };
}
function stringifyChunk(result, chunk) {
  if (isRenderInstruction(chunk)) {
    const instruction = chunk;
    switch (instruction.type) {
      case "directive": {
        const { hydration } = instruction;
        let needsHydrationScript = hydration && determineIfNeedsHydrationScript(result);
        let needsDirectiveScript = hydration && determinesIfNeedsDirectiveScript(result, hydration.directive);
        let prescriptType = needsHydrationScript ? "both" : needsDirectiveScript ? "directive" : null;
        if (prescriptType) {
          let prescripts = getPrescripts(result, prescriptType, hydration.directive);
          return markHTMLString(prescripts);
        } else {
          return "";
        }
      }
      case "head": {
        if (result._metadata.hasRenderedHead || result.partial) {
          return "";
        }
        return renderAllHeadContent(result);
      }
      case "maybe-head": {
        if (result._metadata.hasRenderedHead || result._metadata.headInTree || result.partial) {
          return "";
        }
        return renderAllHeadContent(result);
      }
      case "renderer-hydration-script": {
        const { rendererSpecificHydrationScripts } = result._metadata;
        const { rendererName } = instruction;
        if (!rendererSpecificHydrationScripts.has(rendererName)) {
          rendererSpecificHydrationScripts.add(rendererName);
          return instruction.render();
        }
        return "";
      }
      default: {
        throw new Error(`Unknown chunk type: ${chunk.type}`);
      }
    }
  } else if (chunk instanceof Response) {
    return "";
  } else if (isSlotString(chunk)) {
    let out = "";
    const c = chunk;
    if (c.instructions) {
      for (const instr of c.instructions) {
        out += stringifyChunk(result, instr);
      }
    }
    out += chunk.toString();
    return out;
  }
  return chunk.toString();
}
function chunkToString(result, chunk) {
  if (ArrayBuffer.isView(chunk)) {
    return decoder.decode(chunk);
  } else {
    return stringifyChunk(result, chunk);
  }
}
function chunkToByteArray(result, chunk) {
  if (ArrayBuffer.isView(chunk)) {
    return chunk;
  } else {
    const stringified = stringifyChunk(result, chunk);
    return encoder.encode(stringified.toString());
  }
}
function isRenderInstance(obj) {
  return !!obj && typeof obj === "object" && "render" in obj && typeof obj.render === "function";
}
async function renderChild(destination, child) {
  child = await child;
  if (child instanceof SlotString) {
    destination.write(child);
  } else if (isHTMLString(child)) {
    destination.write(child);
  } else if (Array.isArray(child)) {
    const childRenders = child.map((c) => {
      return renderToBufferDestination((bufferDestination) => {
        return renderChild(bufferDestination, c);
      });
    });
    for (const childRender of childRenders) {
      if (!childRender)
        continue;
      await childRender.renderToFinalDestination(destination);
    }
  } else if (typeof child === "function") {
    await renderChild(destination, child());
  } else if (typeof child === "string") {
    destination.write(markHTMLString(escapeHTML(child)));
  } else if (!child && child !== 0)
    ;
  else if (isRenderInstance(child)) {
    await child.render(destination);
  } else if (isRenderTemplateResult(child)) {
    await child.render(destination);
  } else if (isAstroComponentInstance(child)) {
    await child.render(destination);
  } else if (ArrayBuffer.isView(child)) {
    destination.write(child);
  } else if (typeof child === "object" && (Symbol.asyncIterator in child || Symbol.iterator in child)) {
    for await (const value of child) {
      await renderChild(destination, value);
    }
  } else {
    destination.write(child);
  }
}
function validateComponentProps(props, displayName) {
  if (props != null) {
    for (const prop of Object.keys(props)) {
      if (prop.startsWith("client:")) {
        console.warn(
          `You are attempting to render <${displayName} ${prop} />, but ${displayName} is an Astro component. Astro components do not render in the client and should not have a hydration directive. Please use a framework component for client rendering.`
        );
      }
    }
  }
}
function createAstroComponentInstance(result, displayName, factory, props, slots = {}) {
  validateComponentProps(props, displayName);
  const instance = new AstroComponentInstance(result, props, slots, factory);
  if (isAPropagatingComponent(result, factory)) {
    result._metadata.propagators.add(instance);
  }
  return instance;
}
function isAstroComponentInstance(obj) {
  return typeof obj === "object" && !!obj[astroComponentInstanceSym];
}
function isRenderTemplateResult(obj) {
  return typeof obj === "object" && !!obj[renderTemplateResultSym];
}
function renderTemplate(htmlParts, ...expressions) {
  return new RenderTemplateResult(htmlParts, expressions);
}
async function renderToString(result, componentFactory, props, children, isPage = false, route) {
  const templateResult = await callComponentAsTemplateResultOrResponse(
    result,
    componentFactory,
    props,
    children,
    route
  );
  if (templateResult instanceof Response)
    return templateResult;
  let str = "";
  let renderedFirstPageChunk = false;
  const destination = {
    write(chunk) {
      if (isPage && !renderedFirstPageChunk) {
        renderedFirstPageChunk = true;
        if (!result.partial && !DOCTYPE_EXP.test(String(chunk))) {
          const doctype = result.compressHTML ? "<!DOCTYPE html>" : "<!DOCTYPE html>\n";
          str += doctype;
        }
      }
      if (chunk instanceof Response)
        return;
      str += chunkToString(result, chunk);
    }
  };
  await templateResult.render(destination);
  return str;
}
async function renderToReadableStream(result, componentFactory, props, children, isPage = false, route) {
  const templateResult = await callComponentAsTemplateResultOrResponse(
    result,
    componentFactory,
    props,
    children,
    route
  );
  if (templateResult instanceof Response)
    return templateResult;
  let renderedFirstPageChunk = false;
  if (isPage) {
    await bufferHeadContent(result);
  }
  return new ReadableStream({
    start(controller) {
      const destination = {
        write(chunk) {
          if (isPage && !renderedFirstPageChunk) {
            renderedFirstPageChunk = true;
            if (!result.partial && !DOCTYPE_EXP.test(String(chunk))) {
              const doctype = result.compressHTML ? "<!DOCTYPE html>" : "<!DOCTYPE html>\n";
              controller.enqueue(encoder.encode(doctype));
            }
          }
          if (chunk instanceof Response) {
            throw new AstroError({
              ...ResponseSentError
            });
          }
          const bytes = chunkToByteArray(result, chunk);
          controller.enqueue(bytes);
        }
      };
      (async () => {
        try {
          await templateResult.render(destination);
          controller.close();
        } catch (e) {
          if (AstroError.is(e) && !e.loc) {
            e.setLocation({
              file: route?.component
            });
          }
          setTimeout(() => controller.error(e), 0);
        }
      })();
    },
    cancel() {
      result.cancelled = true;
    }
  });
}
async function callComponentAsTemplateResultOrResponse(result, componentFactory, props, children, route) {
  const factoryResult = await componentFactory(result, props, children);
  if (factoryResult instanceof Response) {
    return factoryResult;
  } else if (!isRenderTemplateResult(factoryResult)) {
    throw new AstroError({
      ...OnlyResponseCanBeReturned,
      message: OnlyResponseCanBeReturned.message(route?.route, typeof factoryResult),
      location: {
        file: route?.component
      }
    });
  }
  return isHeadAndContent(factoryResult) ? factoryResult.content : factoryResult;
}
async function bufferHeadContent(result) {
  const iterator = result._metadata.propagators.values();
  while (true) {
    const { value, done } = iterator.next();
    if (done) {
      break;
    }
    const returnValue = await value.init(result);
    if (isHeadAndContent(returnValue)) {
      result._metadata.extraHead.push(returnValue.head);
    }
  }
}
async function renderToAsyncIterable(result, componentFactory, props, children, isPage = false, route) {
  const templateResult = await callComponentAsTemplateResultOrResponse(
    result,
    componentFactory,
    props,
    children,
    route
  );
  if (templateResult instanceof Response)
    return templateResult;
  let renderedFirstPageChunk = false;
  if (isPage) {
    await bufferHeadContent(result);
  }
  let error2 = null;
  let next = promiseWithResolvers();
  const buffer = [];
  const iterator = {
    async next() {
      if (result.cancelled)
        return { done: true, value: void 0 };
      await next.promise;
      if (error2) {
        throw error2;
      }
      let length = 0;
      for (let i = 0, len = buffer.length; i < len; i++) {
        length += buffer[i].length;
      }
      let mergedArray = new Uint8Array(length);
      let offset = 0;
      for (let i = 0, len = buffer.length; i < len; i++) {
        const item = buffer[i];
        mergedArray.set(item, offset);
        offset += item.length;
      }
      buffer.length = 0;
      const returnValue = {
        // The iterator is done if there are no chunks to return.
        done: length === 0,
        value: mergedArray
      };
      return returnValue;
    },
    async return() {
      result.cancelled = true;
      return { done: true, value: void 0 };
    }
  };
  const destination = {
    write(chunk) {
      if (isPage && !renderedFirstPageChunk) {
        renderedFirstPageChunk = true;
        if (!result.partial && !DOCTYPE_EXP.test(String(chunk))) {
          const doctype = result.compressHTML ? "<!DOCTYPE html>" : "<!DOCTYPE html>\n";
          buffer.push(encoder.encode(doctype));
        }
      }
      if (chunk instanceof Response) {
        throw new AstroError(ResponseSentError);
      }
      const bytes = chunkToByteArray(result, chunk);
      if (bytes.length > 0) {
        buffer.push(bytes);
        next.resolve();
        next = promiseWithResolvers();
      }
    }
  };
  const renderPromise = templateResult.render(destination);
  renderPromise.then(() => {
    next.resolve();
  }).catch((err) => {
    error2 = err;
    next.resolve();
  });
  return {
    [Symbol.asyncIterator]() {
      return iterator;
    }
  };
}
function componentIsHTMLElement(Component) {
  return typeof HTMLElement !== "undefined" && HTMLElement.isPrototypeOf(Component);
}
async function renderHTMLElement(result, constructor, props, slots) {
  const name = getHTMLElementName(constructor);
  let attrHTML = "";
  for (const attr in props) {
    attrHTML += ` ${attr}="${toAttributeString(await props[attr])}"`;
  }
  return markHTMLString(
    `<${name}${attrHTML}>${await renderSlotToString(result, slots?.default)}</${name}>`
  );
}
function getHTMLElementName(constructor) {
  const definedName = customElements.getName(constructor);
  if (definedName)
    return definedName;
  const assignedName = constructor.name.replace(/^HTML|Element$/g, "").replace(/[A-Z]/g, "-$&").toLowerCase().replace(/^-/, "html-");
  return assignedName;
}
function guessRenderers(componentUrl) {
  const extname = componentUrl?.split(".").pop();
  switch (extname) {
    case "svelte":
      return ["@astrojs/svelte"];
    case "vue":
      return ["@astrojs/vue"];
    case "jsx":
    case "tsx":
      return ["@astrojs/react", "@astrojs/preact", "@astrojs/solid-js", "@astrojs/vue (jsx)"];
    default:
      return [
        "@astrojs/react",
        "@astrojs/preact",
        "@astrojs/solid-js",
        "@astrojs/vue",
        "@astrojs/svelte",
        "@astrojs/lit"
      ];
  }
}
function isFragmentComponent(Component) {
  return Component === Fragment;
}
function isHTMLComponent(Component) {
  return Component && Component["astro:html"] === true;
}
function removeStaticAstroSlot(html, supportsAstroStaticSlot = true) {
  const exp = supportsAstroStaticSlot ? ASTRO_STATIC_SLOT_EXP : ASTRO_SLOT_EXP;
  return html.replace(exp, "");
}
async function renderFrameworkComponent(result, displayName, Component, _props, slots = {}) {
  if (!Component && !_props["client:only"]) {
    throw new Error(
      `Unable to render ${displayName} because it is ${Component}!
Did you forget to import the component or is it possible there is a typo?`
    );
  }
  const { renderers: renderers2, clientDirectives } = result;
  const metadata = {
    astroStaticSlot: true,
    displayName
  };
  const { hydration, isPage, props, propsWithoutTransitionAttributes } = extractDirectives(
    _props,
    clientDirectives
  );
  let html = "";
  let attrs = void 0;
  if (hydration) {
    metadata.hydrate = hydration.directive;
    metadata.hydrateArgs = hydration.value;
    metadata.componentExport = hydration.componentExport;
    metadata.componentUrl = hydration.componentUrl;
  }
  const probableRendererNames = guessRenderers(metadata.componentUrl);
  const validRenderers = renderers2.filter((r2) => r2.name !== "astro:jsx");
  const { children, slotInstructions } = await renderSlots(result, slots);
  let renderer;
  if (metadata.hydrate !== "only") {
    let isTagged = false;
    try {
      isTagged = Component && Component[Renderer];
    } catch {
    }
    if (isTagged) {
      const rendererName = Component[Renderer];
      renderer = renderers2.find(({ name }) => name === rendererName);
    }
    if (!renderer) {
      let error2;
      for (const r2 of renderers2) {
        try {
          if (await r2.ssr.check.call({ result }, Component, props, children)) {
            renderer = r2;
            break;
          }
        } catch (e) {
          error2 ??= e;
        }
      }
      if (!renderer && error2) {
        throw error2;
      }
    }
    if (!renderer && typeof HTMLElement === "function" && componentIsHTMLElement(Component)) {
      const output = await renderHTMLElement(
        result,
        Component,
        _props,
        slots
      );
      return {
        render(destination) {
          destination.write(output);
        }
      };
    }
  } else {
    if (metadata.hydrateArgs) {
      const passedName = metadata.hydrateArgs;
      const rendererName = rendererAliases.has(passedName) ? rendererAliases.get(passedName) : passedName;
      renderer = renderers2.find(
        ({ name }) => name === `@astrojs/${rendererName}` || name === rendererName
      );
    }
    if (!renderer && validRenderers.length === 1) {
      renderer = validRenderers[0];
    }
    if (!renderer) {
      const extname = metadata.componentUrl?.split(".").pop();
      renderer = renderers2.filter(
        ({ name }) => name === `@astrojs/${extname}` || name === extname
      )[0];
    }
  }
  if (!renderer) {
    if (metadata.hydrate === "only") {
      throw new AstroError({
        ...NoClientOnlyHint,
        message: NoClientOnlyHint.message(metadata.displayName),
        hint: NoClientOnlyHint.hint(
          probableRendererNames.map((r2) => r2.replace("@astrojs/", "")).join("|")
        )
      });
    } else if (typeof Component !== "string") {
      const matchingRenderers = validRenderers.filter(
        (r2) => probableRendererNames.includes(r2.name)
      );
      const plural = validRenderers.length > 1;
      if (matchingRenderers.length === 0) {
        throw new AstroError({
          ...NoMatchingRenderer,
          message: NoMatchingRenderer.message(
            metadata.displayName,
            metadata?.componentUrl?.split(".").pop(),
            plural,
            validRenderers.length
          ),
          hint: NoMatchingRenderer.hint(
            formatList(probableRendererNames.map((r2) => "`" + r2 + "`"))
          )
        });
      } else if (matchingRenderers.length === 1) {
        renderer = matchingRenderers[0];
        ({ html, attrs } = await renderer.ssr.renderToStaticMarkup.call(
          { result },
          Component,
          propsWithoutTransitionAttributes,
          children,
          metadata
        ));
      } else {
        throw new Error(`Unable to render ${metadata.displayName}!

This component likely uses ${formatList(probableRendererNames)},
but Astro encountered an error during server-side rendering.

Please ensure that ${metadata.displayName}:
1. Does not unconditionally access browser-specific globals like \`window\` or \`document\`.
   If this is unavoidable, use the \`client:only\` hydration directive.
2. Does not conditionally return \`null\` or \`undefined\` when rendered on the server.

If you're still stuck, please open an issue on GitHub or join us at https://astro.build/chat.`);
      }
    }
  } else {
    if (metadata.hydrate === "only") {
      html = await renderSlotToString(result, slots?.fallback);
    } else {
      performance.now();
      ({ html, attrs } = await renderer.ssr.renderToStaticMarkup.call(
        { result },
        Component,
        propsWithoutTransitionAttributes,
        children,
        metadata
      ));
    }
  }
  if (renderer && !renderer.clientEntrypoint && renderer.name !== "@astrojs/lit" && metadata.hydrate) {
    throw new AstroError({
      ...NoClientEntrypoint,
      message: NoClientEntrypoint.message(
        displayName,
        metadata.hydrate,
        renderer.name
      )
    });
  }
  if (!html && typeof Component === "string") {
    const Tag = sanitizeElementName(Component);
    const childSlots = Object.values(children).join("");
    const renderTemplateResult = renderTemplate`<${Tag}${internalSpreadAttributes(
      props
    )}${markHTMLString(
      childSlots === "" && voidElementNames.test(Tag) ? `/>` : `>${childSlots}</${Tag}>`
    )}`;
    html = "";
    const destination = {
      write(chunk) {
        if (chunk instanceof Response)
          return;
        html += chunkToString(result, chunk);
      }
    };
    await renderTemplateResult.render(destination);
  }
  if (!hydration) {
    return {
      render(destination) {
        if (slotInstructions) {
          for (const instruction of slotInstructions) {
            destination.write(instruction);
          }
        }
        if (isPage || renderer?.name === "astro:jsx") {
          destination.write(html);
        } else if (html && html.length > 0) {
          destination.write(
            markHTMLString(removeStaticAstroSlot(html, renderer?.ssr?.supportsAstroStaticSlot))
          );
        }
      }
    };
  }
  const astroId = shorthash(
    `<!--${metadata.componentExport.value}:${metadata.componentUrl}-->
${html}
${serializeProps(
      props,
      metadata
    )}`
  );
  const island = await generateHydrateScript(
    { renderer, result, astroId, props, attrs },
    metadata
  );
  let unrenderedSlots = [];
  if (html) {
    if (Object.keys(children).length > 0) {
      for (const key of Object.keys(children)) {
        let tagName = renderer?.ssr?.supportsAstroStaticSlot ? !!metadata.hydrate ? "astro-slot" : "astro-static-slot" : "astro-slot";
        let expectedHTML = key === "default" ? `<${tagName}>` : `<${tagName} name="${key}">`;
        if (!html.includes(expectedHTML)) {
          unrenderedSlots.push(key);
        }
      }
    }
  } else {
    unrenderedSlots = Object.keys(children);
  }
  const template = unrenderedSlots.length > 0 ? unrenderedSlots.map(
    (key) => `<template data-astro-template${key !== "default" ? `="${key}"` : ""}>${children[key]}</template>`
  ).join("") : "";
  island.children = `${html ?? ""}${template}`;
  if (island.children) {
    island.props["await-children"] = "";
    island.children += `<!--astro:end-->`;
  }
  return {
    render(destination) {
      if (slotInstructions) {
        for (const instruction of slotInstructions) {
          destination.write(instruction);
        }
      }
      destination.write(createRenderInstruction({ type: "directive", hydration }));
      if (hydration.directive !== "only" && renderer?.ssr.renderHydrationScript) {
        destination.write(
          createRenderInstruction({
            type: "renderer-hydration-script",
            rendererName: renderer.name,
            render: renderer.ssr.renderHydrationScript
          })
        );
      }
      const renderedElement = renderElement$1("astro-island", island, false);
      destination.write(markHTMLString(renderedElement));
    }
  };
}
function sanitizeElementName(tag) {
  const unsafe = /[&<>'"\s]+/;
  if (!unsafe.test(tag))
    return tag;
  return tag.trim().split(unsafe)[0].trim();
}
async function renderFragmentComponent(result, slots = {}) {
  const children = await renderSlotToString(result, slots?.default);
  return {
    render(destination) {
      if (children == null)
        return;
      destination.write(children);
    }
  };
}
async function renderHTMLComponent(result, Component, _props, slots = {}) {
  const { slotInstructions, children } = await renderSlots(result, slots);
  const html = Component({ slots: children });
  const hydrationHtml = slotInstructions ? slotInstructions.map((instr) => chunkToString(result, instr)).join("") : "";
  return {
    render(destination) {
      destination.write(markHTMLString(hydrationHtml + html));
    }
  };
}
function renderAstroComponent(result, displayName, Component, props, slots = {}) {
  const instance = createAstroComponentInstance(result, displayName, Component, props, slots);
  return {
    async render(destination) {
      await instance.render(destination);
    }
  };
}
async function renderComponent(result, displayName, Component, props, slots = {}) {
  if (isPromise(Component)) {
    Component = await Component.catch(handleCancellation);
  }
  if (isFragmentComponent(Component)) {
    return await renderFragmentComponent(result, slots).catch(handleCancellation);
  }
  props = normalizeProps(props);
  if (isHTMLComponent(Component)) {
    return await renderHTMLComponent(result, Component, props, slots).catch(handleCancellation);
  }
  if (isAstroComponentFactory(Component)) {
    return renderAstroComponent(result, displayName, Component, props, slots);
  }
  return await renderFrameworkComponent(result, displayName, Component, props, slots).catch(
    handleCancellation
  );
  function handleCancellation(e) {
    if (result.cancelled)
      return { render() {
      } };
    throw e;
  }
}
function normalizeProps(props) {
  if (props["class:list"] !== void 0) {
    const value = props["class:list"];
    delete props["class:list"];
    props["class"] = clsx(props["class"], value);
    if (props["class"] === "") {
      delete props["class"];
    }
  }
  return props;
}
async function renderComponentToString(result, displayName, Component, props, slots = {}, isPage = false, route) {
  let str = "";
  let renderedFirstPageChunk = false;
  let head = "";
  if (isPage && !result.partial && nonAstroPageNeedsHeadInjection(Component)) {
    head += chunkToString(result, maybeRenderHead());
  }
  try {
    const destination = {
      write(chunk) {
        if (isPage && !result.partial && !renderedFirstPageChunk) {
          renderedFirstPageChunk = true;
          if (!/<!doctype html/i.test(String(chunk))) {
            const doctype = result.compressHTML ? "<!DOCTYPE html>" : "<!DOCTYPE html>\n";
            str += doctype + head;
          }
        }
        if (chunk instanceof Response)
          return;
        str += chunkToString(result, chunk);
      }
    };
    const renderInstance = await renderComponent(result, displayName, Component, props, slots);
    await renderInstance.render(destination);
  } catch (e) {
    if (AstroError.is(e) && !e.loc) {
      e.setLocation({
        file: route?.component
      });
    }
    throw e;
  }
  return str;
}
function nonAstroPageNeedsHeadInjection(pageComponent) {
  return !!pageComponent?.[needsHeadRenderingSymbol];
}
async function renderJSX(result, vnode) {
  switch (true) {
    case vnode instanceof HTMLString:
      if (vnode.toString().trim() === "") {
        return "";
      }
      return vnode;
    case typeof vnode === "string":
      return markHTMLString(escapeHTML(vnode));
    case typeof vnode === "function":
      return vnode;
    case (!vnode && vnode !== 0):
      return "";
    case Array.isArray(vnode):
      return markHTMLString(
        (await Promise.all(vnode.map((v) => renderJSX(result, v)))).join("")
      );
  }
  return renderJSXVNode(result, vnode);
}
async function renderJSXVNode(result, vnode) {
  if (isVNode(vnode)) {
    switch (true) {
      case !vnode.type: {
        throw new Error(`Unable to render ${result.pathname} because it contains an undefined Component!
Did you forget to import the component or is it possible there is a typo?`);
      }
      case vnode.type === Symbol.for("astro:fragment"):
        return renderJSX(result, vnode.props.children);
      case vnode.type.isAstroComponentFactory: {
        let props = {};
        let slots = {};
        for (const [key, value] of Object.entries(vnode.props ?? {})) {
          if (key === "children" || value && typeof value === "object" && value["$$slot"]) {
            slots[key === "children" ? "default" : key] = () => renderJSX(result, value);
          } else {
            props[key] = value;
          }
        }
        const str = await renderToString(result, vnode.type, props, slots);
        if (str instanceof Response) {
          throw str;
        }
        const html = markHTMLString(str);
        return html;
      }
      case (!vnode.type && vnode.type !== 0):
        return "";
      case (typeof vnode.type === "string" && vnode.type !== ClientOnlyPlaceholder):
        return markHTMLString(await renderElement(result, vnode.type, vnode.props ?? {}));
    }
    if (vnode.type) {
      let extractSlots2 = function(child) {
        if (Array.isArray(child)) {
          return child.map((c) => extractSlots2(c));
        }
        if (!isVNode(child)) {
          _slots.default.push(child);
          return;
        }
        if ("slot" in child.props) {
          _slots[child.props.slot] = [..._slots[child.props.slot] ?? [], child];
          delete child.props.slot;
          return;
        }
        _slots.default.push(child);
      };
      if (typeof vnode.type === "function" && vnode.props["server:root"]) {
        const output2 = await vnode.type(vnode.props ?? {});
        return await renderJSX(result, output2);
      }
      if (typeof vnode.type === "function") {
        if (vnode.props[hasTriedRenderComponentSymbol]) {
          const output2 = await vnode.type(vnode.props ?? {});
          if (output2?.[AstroJSX] || !output2) {
            return await renderJSXVNode(result, output2);
          } else {
            return;
          }
        } else {
          vnode.props[hasTriedRenderComponentSymbol] = true;
        }
      }
      const { children = null, ...props } = vnode.props ?? {};
      const _slots = {
        default: []
      };
      extractSlots2(children);
      for (const [key, value] of Object.entries(props)) {
        if (value["$$slot"]) {
          _slots[key] = value;
          delete props[key];
        }
      }
      const slotPromises = [];
      const slots = {};
      for (const [key, value] of Object.entries(_slots)) {
        slotPromises.push(
          renderJSX(result, value).then((output2) => {
            if (output2.toString().trim().length === 0)
              return;
            slots[key] = () => output2;
          })
        );
      }
      await Promise.all(slotPromises);
      let output;
      if (vnode.type === ClientOnlyPlaceholder && vnode.props["client:only"]) {
        output = await renderComponentToString(
          result,
          vnode.props["client:display-name"] ?? "",
          null,
          props,
          slots
        );
      } else {
        output = await renderComponentToString(
          result,
          typeof vnode.type === "function" ? vnode.type.name : vnode.type,
          vnode.type,
          props,
          slots
        );
      }
      return markHTMLString(output);
    }
  }
  return markHTMLString(`${vnode}`);
}
async function renderElement(result, tag, { children, ...props }) {
  return markHTMLString(
    `<${tag}${spreadAttributes(props)}${markHTMLString(
      (children == null || children == "") && voidElementNames.test(tag) ? `/>` : `>${children == null ? "" : await renderJSX(result, prerenderElementChildren(tag, children))}</${tag}>`
    )}`
  );
}
function prerenderElementChildren(tag, children) {
  if (typeof children === "string" && (tag === "style" || tag === "script")) {
    return markHTMLString(children);
  } else {
    return children;
  }
}
async function renderPage(result, componentFactory, props, children, streaming, route) {
  if (!isAstroComponentFactory(componentFactory)) {
    result._metadata.headInTree = result.componentMetadata.get(componentFactory.moduleId)?.containsHead ?? false;
    const pageProps = { ...props ?? {}, "server:root": true };
    const str = await renderComponentToString(
      result,
      componentFactory.name,
      componentFactory,
      pageProps,
      {},
      true,
      route
    );
    const bytes = encoder.encode(str);
    return new Response(bytes, {
      headers: new Headers([
        ["Content-Type", "text/html; charset=utf-8"],
        ["Content-Length", bytes.byteLength.toString()]
      ])
    });
  }
  result._metadata.headInTree = result.componentMetadata.get(componentFactory.moduleId)?.containsHead ?? false;
  let body;
  if (streaming) {
    if (isNode) {
      const nodeBody = await renderToAsyncIterable(
        result,
        componentFactory,
        props,
        children,
        true,
        route
      );
      body = nodeBody;
    } else {
      body = await renderToReadableStream(result, componentFactory, props, children, true, route);
    }
  } else {
    body = await renderToString(result, componentFactory, props, children, true, route);
  }
  if (body instanceof Response)
    return body;
  const init2 = result.response;
  const headers = new Headers(init2.headers);
  if (!streaming && typeof body === "string") {
    body = encoder.encode(body);
    headers.set("Content-Length", body.byteLength.toString());
  }
  if (route?.component.endsWith(".md")) {
    headers.set("Content-Type", "text/html; charset=utf-8");
  }
  const response = new Response(body, { ...init2, headers });
  return response;
}
function spreadAttributes(values = {}, _name, { class: scopedClassName } = {}) {
  let output = "";
  if (scopedClassName) {
    if (typeof values.class !== "undefined") {
      values.class += ` ${scopedClassName}`;
    } else if (typeof values["class:list"] !== "undefined") {
      values["class:list"] = [values["class:list"], scopedClassName];
    } else {
      values.class = scopedClassName;
    }
  }
  for (const [key, value] of Object.entries(values)) {
    output += addAttribute(value, key, true);
  }
  return markHTMLString(output);
}
var import_cssesc, ClientAddressNotAvailable, StaticClientAddressNotAvailable, NoMatchingStaticPathFound, OnlyResponseCanBeReturned, MissingMediaQueryDirective, NoMatchingRenderer, NoClientEntrypoint, NoClientOnlyHint, InvalidGetStaticPathsEntry, InvalidGetStaticPathsReturn, GetStaticPathsExpectedParams, GetStaticPathsInvalidRouteParam, GetStaticPathsRequired, ReservedSlotName, NoMatchingImport, InvalidComponentArgs, PageNumberParamNotFound, ImageMissingAlt, InvalidImageService, MissingImageDimension, FailedToFetchRemoteImageDimensions, UnsupportedImageFormat, UnsupportedImageConversion, PrerenderDynamicEndpointPathCollide, ExpectedImage, ExpectedImageOptions, IncompatibleDescriptorOptions, ResponseSentError, MiddlewareNoDataOrNextCalled, MiddlewareNotAResponse, EndpointDidNotReturnAResponse, LocalsNotAnObject, AstroResponseHeadersReassigned, LocalImageUsedWrongly, AstroGlobUsedOutside, AstroGlobNoMatch, AstroError, ASTRO_VERSION, REROUTE_DIRECTIVE_HEADER, ROUTE_TYPE_HEADER, DEFAULT_404_COMPONENT, REROUTABLE_STATUS_CODES, clientAddressSymbol, clientLocalsSymbol, responseSentSymbol, escapeHTML, HTMLBytes, HTMLString, markHTMLString, AstroJSX, RenderInstructionSymbol, PROP_TYPE, transitionDirectivesToCopyOnIsland, dictionary, binary, headAndContentSym, astro_island_prebuilt_default, ISLAND_STYLES, voidElementNames, htmlBooleanAttributes, htmlEnumAttributes, svgEnumAttributes, STATIC_DIRECTIVES, toIdent, toAttributeString, kebab, toStyleString, isNode, uniqueElements, slotString, SlotString, Fragment, Renderer, encoder, decoder, astroComponentInstanceSym, AstroComponentInstance, renderTemplateResultSym, RenderTemplateResult, DOCTYPE_EXP, needsHeadRenderingSymbol, rendererAliases, ASTRO_SLOT_EXP, ASTRO_STATIC_SLOT_EXP, ClientOnlyPlaceholder, hasTriedRenderComponentSymbol;
var init_astro_CZ31vzIS = __esm({
  "dist/$server_build/chunks/astro_CZ31vzIS.mjs"() {
    "use strict";
    init_colors();
    init_esm();
    import_cssesc = __toESM(require_cssesc(), 1);
    ClientAddressNotAvailable = {
      name: "ClientAddressNotAvailable",
      title: "`Astro.clientAddress` is not available in current adapter.",
      message: (adapterName) => `\`Astro.clientAddress\` is not available in the \`${adapterName}\` adapter. File an issue with the adapter to add support.`
    };
    StaticClientAddressNotAvailable = {
      name: "StaticClientAddressNotAvailable",
      title: "`Astro.clientAddress` is not available in static mode.",
      message: "`Astro.clientAddress` is only available when using `output: 'server'` or `output: 'hybrid'`. Update your Astro config if you need SSR features.",
      hint: "See https://docs.astro.build/en/guides/server-side-rendering/ for more information on how to enable SSR."
    };
    NoMatchingStaticPathFound = {
      name: "NoMatchingStaticPathFound",
      title: "No static path found for requested path.",
      message: (pathName) => `A \`getStaticPaths()\` route pattern was matched, but no matching static path was found for requested path \`${pathName}\`.`,
      hint: (possibleRoutes) => `Possible dynamic routes being matched: ${possibleRoutes.join(", ")}.`
    };
    OnlyResponseCanBeReturned = {
      name: "OnlyResponseCanBeReturned",
      title: "Invalid type returned by Astro page.",
      message: (route, returnedValue) => `Route \`${route ? route : ""}\` returned a \`${returnedValue}\`. Only a [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) can be returned from Astro files.`,
      hint: "See https://docs.astro.build/en/guides/server-side-rendering/#response for more information."
    };
    MissingMediaQueryDirective = {
      name: "MissingMediaQueryDirective",
      title: "Missing value for `client:media` directive.",
      message: 'Media query not provided for `client:media` directive. A media query similar to `client:media="(max-width: 600px)"` must be provided'
    };
    NoMatchingRenderer = {
      name: "NoMatchingRenderer",
      title: "No matching renderer found.",
      message: (componentName, componentExtension, plural, validRenderersCount) => `Unable to render \`${componentName}\`.

${validRenderersCount > 0 ? `There ${plural ? "are" : "is"} ${validRenderersCount} renderer${plural ? "s" : ""} configured in your \`astro.config.mjs\` file,
but ${plural ? "none were" : "it was not"} able to server-side render \`${componentName}\`.` : `No valid renderer was found ${componentExtension ? `for the \`.${componentExtension}\` file extension.` : `for this file extension.`}`}`,
      hint: (probableRenderers) => `Did you mean to enable the ${probableRenderers} integration?

See https://docs.astro.build/en/guides/framework-components/ for more information on how to install and configure integrations.`
    };
    NoClientEntrypoint = {
      name: "NoClientEntrypoint",
      title: "No client entrypoint specified in renderer.",
      message: (componentName, clientDirective, rendererName) => `\`${componentName}\` component has a \`client:${clientDirective}\` directive, but no client entrypoint was provided by \`${rendererName}\`.`,
      hint: "See https://docs.astro.build/en/reference/integrations-reference/#addrenderer-option for more information on how to configure your renderer."
    };
    NoClientOnlyHint = {
      name: "NoClientOnlyHint",
      title: "Missing hint on client:only directive.",
      message: (componentName) => `Unable to render \`${componentName}\`. When using the \`client:only\` hydration strategy, Astro needs a hint to use the correct renderer.`,
      hint: (probableRenderers) => `Did you mean to pass \`client:only="${probableRenderers}"\`? See https://docs.astro.build/en/reference/directives-reference/#clientonly for more information on client:only`
    };
    InvalidGetStaticPathsEntry = {
      name: "InvalidGetStaticPathsEntry",
      title: "Invalid entry inside getStaticPath's return value",
      message: (entryType) => `Invalid entry returned by getStaticPaths. Expected an object, got \`${entryType}\``,
      hint: "If you're using a `.map` call, you might be looking for `.flatMap()` instead. See https://docs.astro.build/en/reference/api-reference/#getstaticpaths for more information on getStaticPaths."
    };
    InvalidGetStaticPathsReturn = {
      name: "InvalidGetStaticPathsReturn",
      title: "Invalid value returned by getStaticPaths.",
      message: (returnType) => `Invalid type returned by \`getStaticPaths\`. Expected an \`array\`, got \`${returnType}\``,
      hint: "See https://docs.astro.build/en/reference/api-reference/#getstaticpaths for more information on getStaticPaths."
    };
    GetStaticPathsExpectedParams = {
      name: "GetStaticPathsExpectedParams",
      title: "Missing params property on `getStaticPaths` route.",
      message: "Missing or empty required `params` property on `getStaticPaths` route.",
      hint: "See https://docs.astro.build/en/reference/api-reference/#getstaticpaths for more information on getStaticPaths."
    };
    GetStaticPathsInvalidRouteParam = {
      name: "GetStaticPathsInvalidRouteParam",
      title: "Invalid value for `getStaticPaths` route parameter.",
      message: (key, value, valueType) => `Invalid getStaticPaths route parameter for \`${key}\`. Expected undefined, a string or a number, received \`${valueType}\` (\`${value}\`)`,
      hint: "See https://docs.astro.build/en/reference/api-reference/#getstaticpaths for more information on getStaticPaths."
    };
    GetStaticPathsRequired = {
      name: "GetStaticPathsRequired",
      title: "`getStaticPaths()` function required for dynamic routes.",
      message: "`getStaticPaths()` function is required for dynamic routes. Make sure that you `export` a `getStaticPaths` function from your dynamic route.",
      hint: `See https://docs.astro.build/en/guides/routing/#dynamic-routes for more information on dynamic routes.

Alternatively, set \`output: "server"\` or \`output: "hybrid"\` in your Astro config file to switch to a non-static server build. This error can also occur if using \`export const prerender = true;\`.
See https://docs.astro.build/en/guides/server-side-rendering/ for more information on non-static rendering.`
    };
    ReservedSlotName = {
      name: "ReservedSlotName",
      title: "Invalid slot name.",
      message: (slotName) => `Unable to create a slot named \`${slotName}\`. \`${slotName}\` is a reserved slot name. Please update the name of this slot.`
    };
    NoMatchingImport = {
      name: "NoMatchingImport",
      title: "No import found for component.",
      message: (componentName) => `Could not render \`${componentName}\`. No matching import has been found for \`${componentName}\`.`,
      hint: "Please make sure the component is properly imported."
    };
    InvalidComponentArgs = {
      name: "InvalidComponentArgs",
      title: "Invalid component arguments.",
      message: (name) => `Invalid arguments passed to${name ? ` <${name}>` : ""} component.`,
      hint: "Astro components cannot be rendered directly via function call, such as `Component()` or `{items.map(Component)}`."
    };
    PageNumberParamNotFound = {
      name: "PageNumberParamNotFound",
      title: "Page number param not found.",
      message: (paramName) => `[paginate()] page number param \`${paramName}\` not found in your filepath.`,
      hint: "Rename your file to `[page].astro` or `[...page].astro`."
    };
    ImageMissingAlt = {
      name: "ImageMissingAlt",
      title: 'Image missing required "alt" property.',
      message: 'Image missing "alt" property. "alt" text is required to describe important images on the page.',
      hint: 'Use an empty string ("") for decorative images.'
    };
    InvalidImageService = {
      name: "InvalidImageService",
      title: "Error while loading image service.",
      message: "There was an error loading the configured image service. Please see the stack trace for more information."
    };
    MissingImageDimension = {
      name: "MissingImageDimension",
      title: "Missing image dimensions",
      message: (missingDimension, imageURL) => `Missing ${missingDimension === "both" ? "width and height attributes" : `${missingDimension} attribute`} for ${imageURL}. When using remote images, both dimensions are required unless in order to avoid CLS.`,
      hint: "If your image is inside your `src` folder, you probably meant to import it instead. See [the Imports guide for more information](https://docs.astro.build/en/guides/imports/#other-assets). You can also use `inferSize={true}` for remote images to get the original dimensions."
    };
    FailedToFetchRemoteImageDimensions = {
      name: "FailedToFetchRemoteImageDimensions",
      title: "Failed to retrieve remote image dimensions",
      message: (imageURL) => `Failed to get the dimensions for ${imageURL}.`,
      hint: "Verify your remote image URL is accurate, and that you are not using `inferSize` with a file located in your `public/` folder."
    };
    UnsupportedImageFormat = {
      name: "UnsupportedImageFormat",
      title: "Unsupported image format",
      message: (format, imagePath, supportedFormats) => `Received unsupported format \`${format}\` from \`${imagePath}\`. Currently only ${supportedFormats.join(
        ", "
      )} are supported by our image services.`,
      hint: "Using an `img` tag directly instead of the `Image` component might be what you're looking for."
    };
    UnsupportedImageConversion = {
      name: "UnsupportedImageConversion",
      title: "Unsupported image conversion",
      message: "Converting between vector (such as SVGs) and raster (such as PNGs and JPEGs) images is not currently supported."
    };
    PrerenderDynamicEndpointPathCollide = {
      name: "PrerenderDynamicEndpointPathCollide",
      title: "Prerendered dynamic endpoint has path collision.",
      message: (pathname) => `Could not render \`${pathname}\` with an \`undefined\` param as the generated path will collide during prerendering. Prevent passing \`undefined\` as \`params\` for the endpoint's \`getStaticPaths()\` function, or add an additional extension to the endpoint's filename.`,
      hint: (filename) => `Rename \`${filename}\` to \`${filename.replace(/\.(?:js|ts)/, (m) => `.json` + m)}\``
    };
    ExpectedImage = {
      name: "ExpectedImage",
      title: "Expected src to be an image.",
      message: (src, typeofOptions, fullOptions) => `Expected \`src\` property for \`getImage\` or \`<Image />\` to be either an ESM imported image or a string with the path of a remote image. Received \`${src}\` (type: \`${typeofOptions}\`).

Full serialized options received: \`${fullOptions}\`.`,
      hint: "This error can often happen because of a wrong path. Make sure the path to your image is correct. If you're passing an async function, make sure to call and await it."
    };
    ExpectedImageOptions = {
      name: "ExpectedImageOptions",
      title: "Expected image options.",
      message: (options) => `Expected getImage() parameter to be an object. Received \`${options}\`.`
    };
    IncompatibleDescriptorOptions = {
      name: "IncompatibleDescriptorOptions",
      title: "Cannot set both `densities` and `widths`",
      message: "Only one of `densities` or `widths` can be specified. In most cases, you'll probably want to use only `widths` if you require specific widths.",
      hint: "Those attributes are used to construct a `srcset` attribute, which cannot have both `x` and `w` descriptors."
    };
    ResponseSentError = {
      name: "ResponseSentError",
      title: "Unable to set response.",
      message: "The response has already been sent to the browser and cannot be altered."
    };
    MiddlewareNoDataOrNextCalled = {
      name: "MiddlewareNoDataOrNextCalled",
      title: "The middleware didn't return a `Response`.",
      message: "Make sure your middleware returns a `Response` object, either directly or by returning the `Response` from calling the `next` function."
    };
    MiddlewareNotAResponse = {
      name: "MiddlewareNotAResponse",
      title: "The middleware returned something that is not a `Response` object.",
      message: "Any data returned from middleware must be a valid `Response` object."
    };
    EndpointDidNotReturnAResponse = {
      name: "EndpointDidNotReturnAResponse",
      title: "The endpoint did not return a `Response`.",
      message: "An endpoint must return either a `Response`, or a `Promise` that resolves with a `Response`."
    };
    LocalsNotAnObject = {
      name: "LocalsNotAnObject",
      title: "Value assigned to `locals` is not accepted.",
      message: "`locals` can only be assigned to an object. Other values like numbers, strings, etc. are not accepted.",
      hint: "If you tried to remove some information from the `locals` object, try to use `delete` or set the property to `undefined`."
    };
    AstroResponseHeadersReassigned = {
      name: "AstroResponseHeadersReassigned",
      title: "`Astro.response.headers` must not be reassigned.",
      message: "Individual headers can be added to and removed from `Astro.response.headers`, but it must not be replaced with another instance of `Headers` altogether.",
      hint: "Consider using `Astro.response.headers.add()`, and `Astro.response.headers.delete()`."
    };
    LocalImageUsedWrongly = {
      name: "LocalImageUsedWrongly",
      title: "Local images must be imported.",
      message: (imageFilePath) => `\`Image\`'s and \`getImage\`'s \`src\` parameter must be an imported image or an URL, it cannot be a string filepath. Received \`${imageFilePath}\`.`,
      hint: "If you want to use an image from your `src` folder, you need to either import it or if the image is coming from a content collection, use the [image() schema helper](https://docs.astro.build/en/guides/images/#images-in-content-collections). See https://docs.astro.build/en/guides/images/#src-required for more information on the `src` property."
    };
    AstroGlobUsedOutside = {
      name: "AstroGlobUsedOutside",
      title: "Astro.glob() used outside of an Astro file.",
      message: (globStr) => `\`Astro.glob(${globStr})\` can only be used in \`.astro\` files. \`import.meta.glob(${globStr})\` can be used instead to achieve a similar result.`,
      hint: "See Vite's documentation on `import.meta.glob` for more information: https://vitejs.dev/guide/features.html#glob-import"
    };
    AstroGlobNoMatch = {
      name: "AstroGlobNoMatch",
      title: "Astro.glob() did not match any files.",
      message: (globStr) => `\`Astro.glob(${globStr})\` did not return any matching files.`,
      hint: "Check the pattern for typos."
    };
    AstroError = class extends Error {
      loc;
      title;
      hint;
      frame;
      type = "AstroError";
      constructor(props, options) {
        const { name, title, message, stack, location, hint, frame } = props;
        super(message, options);
        this.title = title;
        this.name = name;
        if (message)
          this.message = message;
        this.stack = stack ? stack : this.stack;
        this.loc = location;
        this.hint = hint;
        this.frame = frame;
      }
      setLocation(location) {
        this.loc = location;
      }
      setName(name) {
        this.name = name;
      }
      setMessage(message) {
        this.message = message;
      }
      setHint(hint) {
        this.hint = hint;
      }
      setFrame(source, location) {
        this.frame = codeFrame(source, location);
      }
      static is(err) {
        return err.type === "AstroError";
      }
    };
    ASTRO_VERSION = "4.5.9";
    REROUTE_DIRECTIVE_HEADER = "X-Astro-Reroute";
    ROUTE_TYPE_HEADER = "X-Astro-Route-Type";
    DEFAULT_404_COMPONENT = "astro-default-404";
    REROUTABLE_STATUS_CODES = [404, 500];
    clientAddressSymbol = Symbol.for("astro.clientAddress");
    clientLocalsSymbol = Symbol.for("astro.locals");
    responseSentSymbol = Symbol.for("astro.responseSent");
    escapeHTML = escape;
    HTMLBytes = class extends Uint8Array {
    };
    Object.defineProperty(HTMLBytes.prototype, Symbol.toStringTag, {
      get() {
        return "HTMLBytes";
      }
    });
    HTMLString = class extends String {
      get [Symbol.toStringTag]() {
        return "HTMLString";
      }
    };
    markHTMLString = (value) => {
      if (value instanceof HTMLString) {
        return value;
      }
      if (typeof value === "string") {
        return new HTMLString(value);
      }
      return value;
    };
    AstroJSX = "astro:jsx";
    RenderInstructionSymbol = Symbol.for("astro:render");
    PROP_TYPE = {
      Value: 0,
      JSON: 1,
      // Actually means Array
      RegExp: 2,
      Date: 3,
      Map: 4,
      Set: 5,
      BigInt: 6,
      URL: 7,
      Uint8Array: 8,
      Uint16Array: 9,
      Uint32Array: 10
    };
    transitionDirectivesToCopyOnIsland = Object.freeze([
      "data-astro-transition-scope",
      "data-astro-transition-persist",
      "data-astro-transition-persist-props"
    ]);
    dictionary = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXY";
    binary = dictionary.length;
    headAndContentSym = Symbol.for("astro.headAndContent");
    astro_island_prebuilt_default = `(()=>{var v=Object.defineProperty;var A=(c,s,a)=>s in c?v(c,s,{enumerable:!0,configurable:!0,writable:!0,value:a}):c[s]=a;var d=(c,s,a)=>(A(c,typeof s!="symbol"?s+"":s,a),a);var u;{let c={0:t=>m(t),1:t=>a(t),2:t=>new RegExp(t),3:t=>new Date(t),4:t=>new Map(a(t)),5:t=>new Set(a(t)),6:t=>BigInt(t),7:t=>new URL(t),8:t=>new Uint8Array(t),9:t=>new Uint16Array(t),10:t=>new Uint32Array(t)},s=t=>{let[e,n]=t;return e in c?c[e](n):void 0},a=t=>t.map(s),m=t=>typeof t!="object"||t===null?t:Object.fromEntries(Object.entries(t).map(([e,n])=>[e,s(n)]));customElements.get("astro-island")||customElements.define("astro-island",(u=class extends HTMLElement{constructor(){super(...arguments);d(this,"Component");d(this,"hydrator");d(this,"hydrate",async()=>{var f;if(!this.hydrator||!this.isConnected)return;let e=(f=this.parentElement)==null?void 0:f.closest("astro-island[ssr]");if(e){e.addEventListener("astro:hydrate",this.hydrate,{once:!0});return}let n=this.querySelectorAll("astro-slot"),r={},l=this.querySelectorAll("template[data-astro-template]");for(let o of l){let i=o.closest(this.tagName);i!=null&&i.isSameNode(this)&&(r[o.getAttribute("data-astro-template")||"default"]=o.innerHTML,o.remove())}for(let o of n){let i=o.closest(this.tagName);i!=null&&i.isSameNode(this)&&(r[o.getAttribute("name")||"default"]=o.innerHTML)}let h;try{h=this.hasAttribute("props")?m(JSON.parse(this.getAttribute("props"))):{}}catch(o){let i=this.getAttribute("component-url")||"<unknown>",b=this.getAttribute("component-export");throw b&&(i+=\` (export \${b})\`),console.error(\`[hydrate] Error parsing props for component \${i}\`,this.getAttribute("props"),o),o}let p;await this.hydrator(this)(this.Component,h,r,{client:this.getAttribute("client")}),this.removeAttribute("ssr"),this.dispatchEvent(new CustomEvent("astro:hydrate"))});d(this,"unmount",()=>{this.isConnected||this.dispatchEvent(new CustomEvent("astro:unmount"))})}disconnectedCallback(){document.removeEventListener("astro:after-swap",this.unmount),document.addEventListener("astro:after-swap",this.unmount,{once:!0})}connectedCallback(){if(!this.hasAttribute("await-children")||document.readyState==="interactive"||document.readyState==="complete")this.childrenConnectedCallback();else{let e=()=>{document.removeEventListener("DOMContentLoaded",e),n.disconnect(),this.childrenConnectedCallback()},n=new MutationObserver(()=>{var r;((r=this.lastChild)==null?void 0:r.nodeType)===Node.COMMENT_NODE&&this.lastChild.nodeValue==="astro:end"&&(this.lastChild.remove(),e())});n.observe(this,{childList:!0}),document.addEventListener("DOMContentLoaded",e)}}async childrenConnectedCallback(){let e=this.getAttribute("before-hydration-url");e&&await import(e),this.start()}async start(){let e=JSON.parse(this.getAttribute("opts")),n=this.getAttribute("client");if(Astro[n]===void 0){window.addEventListener(\`astro:\${n}\`,()=>this.start(),{once:!0});return}try{await Astro[n](async()=>{let r=this.getAttribute("renderer-url"),[l,{default:h}]=await Promise.all([import(this.getAttribute("component-url")),r?import(r):()=>()=>{}]),p=this.getAttribute("component-export")||"default";if(!p.includes("."))this.Component=l[p];else{this.Component=l;for(let y of p.split("."))this.Component=this.Component[y]}return this.hydrator=h,this.hydrate},e,this)}catch(r){console.error(\`[astro-island] Error hydrating \${this.getAttribute("component-url")}\`,r)}}attributeChangedCallback(){this.hydrate()}},d(u,"observedAttributes",["props"]),u))}})();`;
    ISLAND_STYLES = `<style>astro-island,astro-slot,astro-static-slot{display:contents}</style>`;
    voidElementNames = /^(area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/i;
    htmlBooleanAttributes = /^(?:allowfullscreen|async|autofocus|autoplay|controls|default|defer|disabled|disablepictureinpicture|disableremoteplayback|formnovalidate|hidden|loop|nomodule|novalidate|open|playsinline|readonly|required|reversed|scoped|seamless|itemscope)$/i;
    htmlEnumAttributes = /^(?:contenteditable|draggable|spellcheck|value)$/i;
    svgEnumAttributes = /^(?:autoReverse|externalResourcesRequired|focusable|preserveAlpha)$/i;
    STATIC_DIRECTIVES = /* @__PURE__ */ new Set(["set:html", "set:text"]);
    toIdent = (k) => k.trim().replace(/(?!^)\b\w|\s+|\W+/g, (match, index) => {
      if (/\W/.test(match))
        return "";
      return index === 0 ? match : match.toUpperCase();
    });
    toAttributeString = (value, shouldEscape = true) => shouldEscape ? String(value).replace(/&/g, "&#38;").replace(/"/g, "&#34;") : value;
    kebab = (k) => k.toLowerCase() === k ? k : k.replace(/[A-Z]/g, (match) => `-${match.toLowerCase()}`);
    toStyleString = (obj) => Object.entries(obj).filter(([_, v]) => typeof v === "string" && v.trim() || typeof v === "number").map(([k, v]) => {
      if (k[0] !== "-" && k[1] !== "-")
        return `${kebab(k)}:${v}`;
      return `${k}:${v}`;
    }).join(";");
    isNode = typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]";
    uniqueElements = (item, index, all) => {
      const props = JSON.stringify(item.props);
      const children = item.children;
      return index === all.findIndex((i) => JSON.stringify(i.props) === props && i.children == children);
    };
    slotString = Symbol.for("astro:slot-string");
    SlotString = class extends HTMLString {
      instructions;
      [slotString];
      constructor(content, instructions) {
        super(content);
        this.instructions = instructions;
        this[slotString] = true;
      }
    };
    Fragment = Symbol.for("astro:fragment");
    Renderer = Symbol.for("astro:renderer");
    encoder = new TextEncoder();
    decoder = new TextDecoder();
    astroComponentInstanceSym = Symbol.for("astro.componentInstance");
    AstroComponentInstance = class {
      [astroComponentInstanceSym] = true;
      result;
      props;
      slotValues;
      factory;
      returnValue;
      constructor(result, props, slots, factory) {
        this.result = result;
        this.props = props;
        this.factory = factory;
        this.slotValues = {};
        for (const name in slots) {
          let didRender = false;
          let value = slots[name](result);
          this.slotValues[name] = () => {
            if (!didRender) {
              didRender = true;
              return value;
            }
            return slots[name](result);
          };
        }
      }
      async init(result) {
        if (this.returnValue !== void 0)
          return this.returnValue;
        this.returnValue = this.factory(result, this.props, this.slotValues);
        return this.returnValue;
      }
      async render(destination) {
        if (this.returnValue === void 0) {
          await this.init(this.result);
        }
        let value = this.returnValue;
        if (isPromise(value)) {
          value = await value;
        }
        if (isHeadAndContent(value)) {
          await value.content.render(destination);
        } else {
          await renderChild(destination, value);
        }
      }
    };
    renderTemplateResultSym = Symbol.for("astro.renderTemplateResult");
    RenderTemplateResult = class {
      [renderTemplateResultSym] = true;
      htmlParts;
      expressions;
      error;
      constructor(htmlParts, expressions) {
        this.htmlParts = htmlParts;
        this.error = void 0;
        this.expressions = expressions.map((expression) => {
          if (isPromise(expression)) {
            return Promise.resolve(expression).catch((err) => {
              if (!this.error) {
                this.error = err;
                throw err;
              }
            });
          }
          return expression;
        });
      }
      async render(destination) {
        const expRenders = this.expressions.map((exp) => {
          return renderToBufferDestination((bufferDestination) => {
            if (exp || exp === 0) {
              return renderChild(bufferDestination, exp);
            }
          });
        });
        for (let i = 0; i < this.htmlParts.length; i++) {
          const html = this.htmlParts[i];
          const expRender = expRenders[i];
          destination.write(markHTMLString(html));
          if (expRender) {
            await expRender.renderToFinalDestination(destination);
          }
        }
      }
    };
    DOCTYPE_EXP = /<!doctype html/i;
    needsHeadRenderingSymbol = Symbol.for("astro.needsHeadRendering");
    rendererAliases = /* @__PURE__ */ new Map([["solid", "solid-js"]]);
    ASTRO_SLOT_EXP = /<\/?astro-slot\b[^>]*>/g;
    ASTRO_STATIC_SLOT_EXP = /<\/?astro-static-slot\b[^>]*>/g;
    ClientOnlyPlaceholder = "astro-client-only";
    hasTriedRenderComponentSymbol = Symbol("hasTriedRenderComponent");
    "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_".split("").reduce((v, c) => (v[c.charCodeAt(0)] = c, v), []);
    "-0123456789_".split("").reduce((v, c) => (v[c.charCodeAt(0)] = c, v), []);
  }
});

// ../../node_modules/mime/Mime.js
var require_Mime = __commonJS({
  "../../node_modules/mime/Mime.js"(exports, module) {
    "use strict";
    function Mime() {
      this._types = /* @__PURE__ */ Object.create(null);
      this._extensions = /* @__PURE__ */ Object.create(null);
      for (let i = 0; i < arguments.length; i++) {
        this.define(arguments[i]);
      }
      this.define = this.define.bind(this);
      this.getType = this.getType.bind(this);
      this.getExtension = this.getExtension.bind(this);
    }
    Mime.prototype.define = function(typeMap, force) {
      for (let type in typeMap) {
        let extensions = typeMap[type].map(function(t) {
          return t.toLowerCase();
        });
        type = type.toLowerCase();
        for (let i = 0; i < extensions.length; i++) {
          const ext = extensions[i];
          if (ext[0] === "*") {
            continue;
          }
          if (!force && ext in this._types) {
            throw new Error(
              'Attempt to change mapping for "' + ext + '" extension from "' + this._types[ext] + '" to "' + type + '". Pass `force=true` to allow this, otherwise remove "' + ext + '" from the list of extensions for "' + type + '".'
            );
          }
          this._types[ext] = type;
        }
        if (force || !this._extensions[type]) {
          const ext = extensions[0];
          this._extensions[type] = ext[0] !== "*" ? ext : ext.substr(1);
        }
      }
    };
    Mime.prototype.getType = function(path) {
      path = String(path);
      let last = path.replace(/^.*[/\\]/, "").toLowerCase();
      let ext = last.replace(/^.*\./, "").toLowerCase();
      let hasPath = last.length < path.length;
      let hasDot = ext.length < last.length - 1;
      return (hasDot || !hasPath) && this._types[ext] || null;
    };
    Mime.prototype.getExtension = function(type) {
      type = /^\s*([^;\s]*)/.test(type) && RegExp.$1;
      return type && this._extensions[type.toLowerCase()] || null;
    };
    module.exports = Mime;
  }
});

// ../../node_modules/mime/types/standard.js
var require_standard = __commonJS({
  "../../node_modules/mime/types/standard.js"(exports, module) {
    module.exports = { "application/andrew-inset": ["ez"], "application/applixware": ["aw"], "application/atom+xml": ["atom"], "application/atomcat+xml": ["atomcat"], "application/atomdeleted+xml": ["atomdeleted"], "application/atomsvc+xml": ["atomsvc"], "application/atsc-dwd+xml": ["dwd"], "application/atsc-held+xml": ["held"], "application/atsc-rsat+xml": ["rsat"], "application/bdoc": ["bdoc"], "application/calendar+xml": ["xcs"], "application/ccxml+xml": ["ccxml"], "application/cdfx+xml": ["cdfx"], "application/cdmi-capability": ["cdmia"], "application/cdmi-container": ["cdmic"], "application/cdmi-domain": ["cdmid"], "application/cdmi-object": ["cdmio"], "application/cdmi-queue": ["cdmiq"], "application/cu-seeme": ["cu"], "application/dash+xml": ["mpd"], "application/davmount+xml": ["davmount"], "application/docbook+xml": ["dbk"], "application/dssc+der": ["dssc"], "application/dssc+xml": ["xdssc"], "application/ecmascript": ["es", "ecma"], "application/emma+xml": ["emma"], "application/emotionml+xml": ["emotionml"], "application/epub+zip": ["epub"], "application/exi": ["exi"], "application/express": ["exp"], "application/fdt+xml": ["fdt"], "application/font-tdpfr": ["pfr"], "application/geo+json": ["geojson"], "application/gml+xml": ["gml"], "application/gpx+xml": ["gpx"], "application/gxf": ["gxf"], "application/gzip": ["gz"], "application/hjson": ["hjson"], "application/hyperstudio": ["stk"], "application/inkml+xml": ["ink", "inkml"], "application/ipfix": ["ipfix"], "application/its+xml": ["its"], "application/java-archive": ["jar", "war", "ear"], "application/java-serialized-object": ["ser"], "application/java-vm": ["class"], "application/javascript": ["js", "mjs"], "application/json": ["json", "map"], "application/json5": ["json5"], "application/jsonml+json": ["jsonml"], "application/ld+json": ["jsonld"], "application/lgr+xml": ["lgr"], "application/lost+xml": ["lostxml"], "application/mac-binhex40": ["hqx"], "application/mac-compactpro": ["cpt"], "application/mads+xml": ["mads"], "application/manifest+json": ["webmanifest"], "application/marc": ["mrc"], "application/marcxml+xml": ["mrcx"], "application/mathematica": ["ma", "nb", "mb"], "application/mathml+xml": ["mathml"], "application/mbox": ["mbox"], "application/mediaservercontrol+xml": ["mscml"], "application/metalink+xml": ["metalink"], "application/metalink4+xml": ["meta4"], "application/mets+xml": ["mets"], "application/mmt-aei+xml": ["maei"], "application/mmt-usd+xml": ["musd"], "application/mods+xml": ["mods"], "application/mp21": ["m21", "mp21"], "application/mp4": ["mp4s", "m4p"], "application/msword": ["doc", "dot"], "application/mxf": ["mxf"], "application/n-quads": ["nq"], "application/n-triples": ["nt"], "application/node": ["cjs"], "application/octet-stream": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"], "application/oda": ["oda"], "application/oebps-package+xml": ["opf"], "application/ogg": ["ogx"], "application/omdoc+xml": ["omdoc"], "application/onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"], "application/oxps": ["oxps"], "application/p2p-overlay+xml": ["relo"], "application/patch-ops-error+xml": ["xer"], "application/pdf": ["pdf"], "application/pgp-encrypted": ["pgp"], "application/pgp-signature": ["asc", "sig"], "application/pics-rules": ["prf"], "application/pkcs10": ["p10"], "application/pkcs7-mime": ["p7m", "p7c"], "application/pkcs7-signature": ["p7s"], "application/pkcs8": ["p8"], "application/pkix-attr-cert": ["ac"], "application/pkix-cert": ["cer"], "application/pkix-crl": ["crl"], "application/pkix-pkipath": ["pkipath"], "application/pkixcmp": ["pki"], "application/pls+xml": ["pls"], "application/postscript": ["ai", "eps", "ps"], "application/provenance+xml": ["provx"], "application/pskc+xml": ["pskcxml"], "application/raml+yaml": ["raml"], "application/rdf+xml": ["rdf", "owl"], "application/reginfo+xml": ["rif"], "application/relax-ng-compact-syntax": ["rnc"], "application/resource-lists+xml": ["rl"], "application/resource-lists-diff+xml": ["rld"], "application/rls-services+xml": ["rs"], "application/route-apd+xml": ["rapd"], "application/route-s-tsid+xml": ["sls"], "application/route-usd+xml": ["rusd"], "application/rpki-ghostbusters": ["gbr"], "application/rpki-manifest": ["mft"], "application/rpki-roa": ["roa"], "application/rsd+xml": ["rsd"], "application/rss+xml": ["rss"], "application/rtf": ["rtf"], "application/sbml+xml": ["sbml"], "application/scvp-cv-request": ["scq"], "application/scvp-cv-response": ["scs"], "application/scvp-vp-request": ["spq"], "application/scvp-vp-response": ["spp"], "application/sdp": ["sdp"], "application/senml+xml": ["senmlx"], "application/sensml+xml": ["sensmlx"], "application/set-payment-initiation": ["setpay"], "application/set-registration-initiation": ["setreg"], "application/shf+xml": ["shf"], "application/sieve": ["siv", "sieve"], "application/smil+xml": ["smi", "smil"], "application/sparql-query": ["rq"], "application/sparql-results+xml": ["srx"], "application/srgs": ["gram"], "application/srgs+xml": ["grxml"], "application/sru+xml": ["sru"], "application/ssdl+xml": ["ssdl"], "application/ssml+xml": ["ssml"], "application/swid+xml": ["swidtag"], "application/tei+xml": ["tei", "teicorpus"], "application/thraud+xml": ["tfi"], "application/timestamped-data": ["tsd"], "application/toml": ["toml"], "application/trig": ["trig"], "application/ttml+xml": ["ttml"], "application/ubjson": ["ubj"], "application/urc-ressheet+xml": ["rsheet"], "application/urc-targetdesc+xml": ["td"], "application/voicexml+xml": ["vxml"], "application/wasm": ["wasm"], "application/widget": ["wgt"], "application/winhlp": ["hlp"], "application/wsdl+xml": ["wsdl"], "application/wspolicy+xml": ["wspolicy"], "application/xaml+xml": ["xaml"], "application/xcap-att+xml": ["xav"], "application/xcap-caps+xml": ["xca"], "application/xcap-diff+xml": ["xdf"], "application/xcap-el+xml": ["xel"], "application/xcap-ns+xml": ["xns"], "application/xenc+xml": ["xenc"], "application/xhtml+xml": ["xhtml", "xht"], "application/xliff+xml": ["xlf"], "application/xml": ["xml", "xsl", "xsd", "rng"], "application/xml-dtd": ["dtd"], "application/xop+xml": ["xop"], "application/xproc+xml": ["xpl"], "application/xslt+xml": ["*xsl", "xslt"], "application/xspf+xml": ["xspf"], "application/xv+xml": ["mxml", "xhvml", "xvml", "xvm"], "application/yang": ["yang"], "application/yin+xml": ["yin"], "application/zip": ["zip"], "audio/3gpp": ["*3gpp"], "audio/adpcm": ["adp"], "audio/amr": ["amr"], "audio/basic": ["au", "snd"], "audio/midi": ["mid", "midi", "kar", "rmi"], "audio/mobile-xmf": ["mxmf"], "audio/mp3": ["*mp3"], "audio/mp4": ["m4a", "mp4a"], "audio/mpeg": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"], "audio/ogg": ["oga", "ogg", "spx", "opus"], "audio/s3m": ["s3m"], "audio/silk": ["sil"], "audio/wav": ["wav"], "audio/wave": ["*wav"], "audio/webm": ["weba"], "audio/xm": ["xm"], "font/collection": ["ttc"], "font/otf": ["otf"], "font/ttf": ["ttf"], "font/woff": ["woff"], "font/woff2": ["woff2"], "image/aces": ["exr"], "image/apng": ["apng"], "image/avif": ["avif"], "image/bmp": ["bmp"], "image/cgm": ["cgm"], "image/dicom-rle": ["drle"], "image/emf": ["emf"], "image/fits": ["fits"], "image/g3fax": ["g3"], "image/gif": ["gif"], "image/heic": ["heic"], "image/heic-sequence": ["heics"], "image/heif": ["heif"], "image/heif-sequence": ["heifs"], "image/hej2k": ["hej2"], "image/hsj2": ["hsj2"], "image/ief": ["ief"], "image/jls": ["jls"], "image/jp2": ["jp2", "jpg2"], "image/jpeg": ["jpeg", "jpg", "jpe"], "image/jph": ["jph"], "image/jphc": ["jhc"], "image/jpm": ["jpm"], "image/jpx": ["jpx", "jpf"], "image/jxr": ["jxr"], "image/jxra": ["jxra"], "image/jxrs": ["jxrs"], "image/jxs": ["jxs"], "image/jxsc": ["jxsc"], "image/jxsi": ["jxsi"], "image/jxss": ["jxss"], "image/ktx": ["ktx"], "image/ktx2": ["ktx2"], "image/png": ["png"], "image/sgi": ["sgi"], "image/svg+xml": ["svg", "svgz"], "image/t38": ["t38"], "image/tiff": ["tif", "tiff"], "image/tiff-fx": ["tfx"], "image/webp": ["webp"], "image/wmf": ["wmf"], "message/disposition-notification": ["disposition-notification"], "message/global": ["u8msg"], "message/global-delivery-status": ["u8dsn"], "message/global-disposition-notification": ["u8mdn"], "message/global-headers": ["u8hdr"], "message/rfc822": ["eml", "mime"], "model/3mf": ["3mf"], "model/gltf+json": ["gltf"], "model/gltf-binary": ["glb"], "model/iges": ["igs", "iges"], "model/mesh": ["msh", "mesh", "silo"], "model/mtl": ["mtl"], "model/obj": ["obj"], "model/step+xml": ["stpx"], "model/step+zip": ["stpz"], "model/step-xml+zip": ["stpxz"], "model/stl": ["stl"], "model/vrml": ["wrl", "vrml"], "model/x3d+binary": ["*x3db", "x3dbz"], "model/x3d+fastinfoset": ["x3db"], "model/x3d+vrml": ["*x3dv", "x3dvz"], "model/x3d+xml": ["x3d", "x3dz"], "model/x3d-vrml": ["x3dv"], "text/cache-manifest": ["appcache", "manifest"], "text/calendar": ["ics", "ifb"], "text/coffeescript": ["coffee", "litcoffee"], "text/css": ["css"], "text/csv": ["csv"], "text/html": ["html", "htm", "shtml"], "text/jade": ["jade"], "text/jsx": ["jsx"], "text/less": ["less"], "text/markdown": ["markdown", "md"], "text/mathml": ["mml"], "text/mdx": ["mdx"], "text/n3": ["n3"], "text/plain": ["txt", "text", "conf", "def", "list", "log", "in", "ini"], "text/richtext": ["rtx"], "text/rtf": ["*rtf"], "text/sgml": ["sgml", "sgm"], "text/shex": ["shex"], "text/slim": ["slim", "slm"], "text/spdx": ["spdx"], "text/stylus": ["stylus", "styl"], "text/tab-separated-values": ["tsv"], "text/troff": ["t", "tr", "roff", "man", "me", "ms"], "text/turtle": ["ttl"], "text/uri-list": ["uri", "uris", "urls"], "text/vcard": ["vcard"], "text/vtt": ["vtt"], "text/xml": ["*xml"], "text/yaml": ["yaml", "yml"], "video/3gpp": ["3gp", "3gpp"], "video/3gpp2": ["3g2"], "video/h261": ["h261"], "video/h263": ["h263"], "video/h264": ["h264"], "video/iso.segment": ["m4s"], "video/jpeg": ["jpgv"], "video/jpm": ["*jpm", "jpgm"], "video/mj2": ["mj2", "mjp2"], "video/mp2t": ["ts"], "video/mp4": ["mp4", "mp4v", "mpg4"], "video/mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v"], "video/ogg": ["ogv"], "video/quicktime": ["qt", "mov"], "video/webm": ["webm"] };
  }
});

// ../../node_modules/mime/lite.js
var require_lite = __commonJS({
  "../../node_modules/mime/lite.js"(exports, module) {
    "use strict";
    var Mime = require_Mime();
    module.exports = new Mime(require_standard());
  }
});

// dist/$server_build/chunks/astro/assets-service_4eEmk9sZ.mjs
var assets_service_4eEmk9sZ_exports = {};
__export(assets_service_4eEmk9sZ_exports, {
  D: () => DEFAULT_HASH_PROPS,
  a: () => isESMImportedImage,
  b: () => isLocalService,
  c: () => isRemoteAllowed,
  i: () => isRemoteImage,
  n: () => noop
});
function isESMImportedImage(src) {
  return typeof src === "object";
}
function isRemoteImage(src) {
  return typeof src === "string";
}
function matchPattern(url2, remotePattern) {
  return matchProtocol(url2, remotePattern.protocol) && matchHostname(url2, remotePattern.hostname, true) && matchPort(url2, remotePattern.port) && matchPathname(url2, remotePattern.pathname, true);
}
function matchPort(url2, port) {
  return !port || port === url2.port;
}
function matchProtocol(url2, protocol) {
  return !protocol || protocol === url2.protocol.slice(0, -1);
}
function matchHostname(url2, hostname, allowWildcard) {
  if (!hostname) {
    return true;
  } else if (!allowWildcard || !hostname.startsWith("*")) {
    return hostname === url2.hostname;
  } else if (hostname.startsWith("**.")) {
    const slicedHostname = hostname.slice(2);
    return slicedHostname !== url2.hostname && url2.hostname.endsWith(slicedHostname);
  } else if (hostname.startsWith("*.")) {
    const slicedHostname = hostname.slice(1);
    const additionalSubdomains = url2.hostname.replace(slicedHostname, "").split(".").filter(Boolean);
    return additionalSubdomains.length === 1;
  }
  return false;
}
function matchPathname(url2, pathname, allowWildcard) {
  if (!pathname) {
    return true;
  } else if (!allowWildcard || !pathname.endsWith("*")) {
    return pathname === url2.pathname;
  } else if (pathname.endsWith("/**")) {
    const slicedPathname = pathname.slice(0, -2);
    return slicedPathname !== url2.pathname && url2.pathname.startsWith(slicedPathname);
  } else if (pathname.endsWith("/*")) {
    const slicedPathname = pathname.slice(0, -1);
    const additionalPathChunks = url2.pathname.replace(slicedPathname, "").split("/").filter(Boolean);
    return additionalPathChunks.length === 1;
  }
  return false;
}
function isRemoteAllowed(src, {
  domains = [],
  remotePatterns = []
}) {
  if (!isRemotePath(src))
    return false;
  const url2 = new URL(src);
  return domains.some((domain) => matchHostname(url2, domain)) || remotePatterns.some((remotePattern) => matchPattern(url2, remotePattern));
}
function isLocalService(service) {
  if (!service) {
    return false;
  }
  return "transform" in service;
}
function getTargetDimensions(options) {
  let targetWidth = options.width;
  let targetHeight = options.height;
  if (isESMImportedImage(options.src)) {
    const aspectRatio = options.src.width / options.src.height;
    if (targetHeight && !targetWidth) {
      targetWidth = Math.round(targetHeight * aspectRatio);
    } else if (targetWidth && !targetHeight) {
      targetHeight = Math.round(targetWidth / aspectRatio);
    } else if (!targetWidth && !targetHeight) {
      targetWidth = options.src.width;
      targetHeight = options.src.height;
    }
  }
  return {
    targetWidth,
    targetHeight
  };
}
var VALID_SUPPORTED_FORMATS, DEFAULT_OUTPUT_FORMAT, DEFAULT_HASH_PROPS, baseService, noopService, noop_default, noop;
var init_assets_service_4eEmk9sZ = __esm({
  "dist/$server_build/chunks/astro/assets-service_4eEmk9sZ.mjs"() {
    "use strict";
    init_path();
    init_astro_CZ31vzIS();
    VALID_SUPPORTED_FORMATS = [
      "jpeg",
      "jpg",
      "png",
      "tiff",
      "webp",
      "gif",
      "svg",
      "avif"
    ];
    DEFAULT_OUTPUT_FORMAT = "webp";
    DEFAULT_HASH_PROPS = ["src", "width", "height", "format", "quality"];
    baseService = {
      propertiesToHash: DEFAULT_HASH_PROPS,
      validateOptions(options) {
        if (!options.src || typeof options.src !== "string" && typeof options.src !== "object") {
          throw new AstroError({
            ...ExpectedImage,
            message: ExpectedImage.message(
              JSON.stringify(options.src),
              typeof options.src,
              JSON.stringify(options, (_, v) => v === void 0 ? null : v)
            )
          });
        }
        if (!isESMImportedImage(options.src)) {
          if (options.src.startsWith("/@fs/") || !isRemotePath(options.src) && !options.src.startsWith("/")) {
            throw new AstroError({
              ...LocalImageUsedWrongly,
              message: LocalImageUsedWrongly.message(options.src)
            });
          }
          let missingDimension;
          if (!options.width && !options.height) {
            missingDimension = "both";
          } else if (!options.width && options.height) {
            missingDimension = "width";
          } else if (options.width && !options.height) {
            missingDimension = "height";
          }
          if (missingDimension) {
            throw new AstroError({
              ...MissingImageDimension,
              message: MissingImageDimension.message(missingDimension, options.src)
            });
          }
        } else {
          if (!VALID_SUPPORTED_FORMATS.includes(options.src.format)) {
            throw new AstroError({
              ...UnsupportedImageFormat,
              message: UnsupportedImageFormat.message(
                options.src.format,
                options.src.src,
                VALID_SUPPORTED_FORMATS
              )
            });
          }
          if (options.widths && options.densities) {
            throw new AstroError(IncompatibleDescriptorOptions);
          }
          if (options.src.format === "svg") {
            options.format = "svg";
          }
          if (options.src.format === "svg" && options.format !== "svg" || options.src.format !== "svg" && options.format === "svg") {
            throw new AstroError(UnsupportedImageConversion);
          }
        }
        if (!options.format) {
          options.format = DEFAULT_OUTPUT_FORMAT;
        }
        if (options.width)
          options.width = Math.round(options.width);
        if (options.height)
          options.height = Math.round(options.height);
        return options;
      },
      getHTMLAttributes(options) {
        const { targetWidth, targetHeight } = getTargetDimensions(options);
        const { src, width, height, format, quality, densities, widths, formats, ...attributes } = options;
        return {
          ...attributes,
          width: targetWidth,
          height: targetHeight,
          loading: attributes.loading ?? "lazy",
          decoding: attributes.decoding ?? "async"
        };
      },
      getSrcSet(options) {
        const srcSet = [];
        const { targetWidth } = getTargetDimensions(options);
        const { widths, densities } = options;
        const targetFormat = options.format ?? DEFAULT_OUTPUT_FORMAT;
        let imageWidth = options.width;
        let maxWidth = Infinity;
        if (isESMImportedImage(options.src)) {
          imageWidth = options.src.width;
          maxWidth = imageWidth;
        }
        const {
          width: transformWidth,
          height: transformHeight,
          ...transformWithoutDimensions
        } = options;
        const allWidths = [];
        if (densities) {
          const densityValues = densities.map((density) => {
            if (typeof density === "number") {
              return density;
            } else {
              return parseFloat(density);
            }
          });
          const densityWidths = densityValues.sort().map((density) => Math.round(targetWidth * density));
          allWidths.push(
            ...densityWidths.map((width, index) => ({
              maxTargetWidth: Math.min(width, maxWidth),
              descriptor: `${densityValues[index]}x`
            }))
          );
        } else if (widths) {
          allWidths.push(
            ...widths.map((width) => ({
              maxTargetWidth: Math.min(width, maxWidth),
              descriptor: `${width}w`
            }))
          );
        }
        for (const { maxTargetWidth, descriptor } of allWidths) {
          const srcSetTransform = { ...transformWithoutDimensions };
          if (maxTargetWidth !== imageWidth) {
            srcSetTransform.width = maxTargetWidth;
          } else {
            if (options.width && options.height) {
              srcSetTransform.width = options.width;
              srcSetTransform.height = options.height;
            }
          }
          srcSet.push({
            transform: srcSetTransform,
            descriptor,
            attributes: {
              type: `image/${targetFormat}`
            }
          });
        }
        return srcSet;
      },
      getURL(options, imageConfig2) {
        const searchParams = new URLSearchParams();
        if (isESMImportedImage(options.src)) {
          searchParams.append("href", options.src.src);
        } else if (isRemoteAllowed(options.src, imageConfig2)) {
          searchParams.append("href", options.src);
        } else {
          return options.src;
        }
        const params = {
          w: "width",
          h: "height",
          q: "quality",
          f: "format"
        };
        Object.entries(params).forEach(([param, key]) => {
          options[key] && searchParams.append(param, options[key].toString());
        });
        const imageEndpoint = joinPaths("/", "/_image");
        return `${imageEndpoint}?${searchParams}`;
      },
      parseURL(url2) {
        const params = url2.searchParams;
        if (!params.has("href")) {
          return void 0;
        }
        const transform = {
          src: params.get("href"),
          width: params.has("w") ? parseInt(params.get("w")) : void 0,
          height: params.has("h") ? parseInt(params.get("h")) : void 0,
          format: params.get("f"),
          quality: params.get("q")
        };
        return transform;
      }
    };
    noopService = {
      ...baseService,
      propertiesToHash: ["src"],
      async transform(inputBuffer, transformOptions) {
        return {
          data: inputBuffer,
          format: transformOptions.format
        };
      }
    };
    noop_default = noopService;
    noop = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      default: noop_default
    }, Symbol.toStringTag, { value: "Module" }));
  }
});

// dist/$server_build/chunks/pages/generic_Dg3fraW5.mjs
var generic_Dg3fraW5_exports = {};
__export(generic_Dg3fraW5_exports, {
  GET: () => GET
});
function readUInt(input, bits, offset, isBigEndian) {
  offset = offset || 0;
  const endian = isBigEndian ? "BE" : "LE";
  const methodName = "readUInt" + bits + endian;
  return methods[methodName](input, offset);
}
function readBox(buffer, offset) {
  if (buffer.length - offset < 4)
    return;
  const boxSize = readUInt32BE(buffer, offset);
  if (buffer.length - offset < boxSize)
    return;
  return {
    name: toUTF8String(buffer, 4 + offset, 8 + offset),
    offset,
    size: boxSize
  };
}
function findBox(buffer, boxName, offset) {
  while (offset < buffer.length) {
    const box = readBox(buffer, offset);
    if (!box)
      break;
    if (box.name === boxName)
      return box;
    offset += box.size;
  }
}
function getSizeFromOffset(input, offset) {
  const value = input[offset];
  return value === 0 ? 256 : value;
}
function getImageSize$1(input, imageIndex) {
  const offset = SIZE_HEADER$1 + imageIndex * SIZE_IMAGE_ENTRY;
  return {
    height: getSizeFromOffset(input, offset + 1),
    width: getSizeFromOffset(input, offset)
  };
}
function detectBrands(buffer, start, end) {
  let brandsDetected = {};
  for (let i = start; i <= end; i += 4) {
    const brand = toUTF8String(buffer, i, i + 4);
    if (brand in brandMap) {
      brandsDetected[brand] = 1;
    }
  }
  if ("avif" in brandsDetected) {
    return "avif";
  } else if ("heic" in brandsDetected || "heix" in brandsDetected || "hevc" in brandsDetected || "hevx" in brandsDetected) {
    return "heic";
  } else if ("mif1" in brandsDetected || "msf1" in brandsDetected) {
    return "heif";
  }
}
function readImageHeader(input, imageOffset) {
  const imageLengthOffset = imageOffset + ENTRY_LENGTH_OFFSET;
  return [
    toUTF8String(input, imageOffset, imageLengthOffset),
    readUInt32BE(input, imageLengthOffset)
  ];
}
function getImageSize(type) {
  const size = ICON_TYPE_SIZE[type];
  return { width: size, height: size, type };
}
function isEXIF(input) {
  return toHexString(input, 2, 6) === EXIF_MARKER;
}
function extractSize(input, index) {
  return {
    height: readUInt16BE(input, index),
    width: readUInt16BE(input, index + 2)
  };
}
function extractOrientation(exifBlock, isBigEndian) {
  const idfOffset = 8;
  const offset = EXIF_HEADER_BYTES + idfOffset;
  const idfDirectoryEntries = readUInt(exifBlock, 16, offset, isBigEndian);
  for (let directoryEntryNumber = 0; directoryEntryNumber < idfDirectoryEntries; directoryEntryNumber++) {
    const start = offset + NUM_DIRECTORY_ENTRIES_BYTES + directoryEntryNumber * IDF_ENTRY_BYTES;
    const end = start + IDF_ENTRY_BYTES;
    if (start > exifBlock.length) {
      return;
    }
    const block = exifBlock.slice(start, end);
    const tagNumber = readUInt(block, 16, 0, isBigEndian);
    if (tagNumber === 274) {
      const dataFormat = readUInt(block, 16, 2, isBigEndian);
      if (dataFormat !== 3) {
        return;
      }
      const numberOfComponents = readUInt(block, 32, 4, isBigEndian);
      if (numberOfComponents !== 1) {
        return;
      }
      return readUInt(block, 16, 8, isBigEndian);
    }
  }
}
function validateExifBlock(input, index) {
  const exifBlock = input.slice(APP1_DATA_SIZE_BYTES, index);
  const byteAlign = toHexString(
    exifBlock,
    EXIF_HEADER_BYTES,
    EXIF_HEADER_BYTES + TIFF_BYTE_ALIGN_BYTES
  );
  const isBigEndian = byteAlign === BIG_ENDIAN_BYTE_ALIGN;
  const isLittleEndian = byteAlign === LITTLE_ENDIAN_BYTE_ALIGN;
  if (isBigEndian || isLittleEndian) {
    return extractOrientation(exifBlock, isBigEndian);
  }
}
function validateInput(input, index) {
  if (index > input.length) {
    throw new TypeError("Corrupt JPG, exceeded buffer limits");
  }
}
function parseLength(len) {
  const m = unitsReg.exec(len);
  if (!m) {
    return void 0;
  }
  return Math.round(Number(m[1]) * (units[m[2]] || 1));
}
function parseViewbox(viewbox) {
  const bounds = viewbox.split(" ");
  return {
    height: parseLength(bounds[3]),
    width: parseLength(bounds[2])
  };
}
function parseAttributes(root) {
  const width = root.match(extractorRegExps.width);
  const height = root.match(extractorRegExps.height);
  const viewbox = root.match(extractorRegExps.viewbox);
  return {
    height: height && parseLength(height[2]),
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
    viewbox: viewbox && parseViewbox(viewbox[2]),
    width: width && parseLength(width[2])
  };
}
function calculateByDimensions(attrs) {
  return {
    height: attrs.height,
    width: attrs.width
  };
}
function calculateByViewbox(attrs, viewbox) {
  const ratio = viewbox.width / viewbox.height;
  if (attrs.width) {
    return {
      height: Math.floor(attrs.width / ratio),
      width: attrs.width
    };
  }
  if (attrs.height) {
    return {
      height: attrs.height,
      width: Math.floor(attrs.height * ratio)
    };
  }
  return {
    height: viewbox.height,
    width: viewbox.width
  };
}
function readIFD(input, isBigEndian) {
  const ifdOffset = readUInt(input, 32, 4, isBigEndian);
  return input.slice(ifdOffset + 2);
}
function readValue(input, isBigEndian) {
  const low = readUInt(input, 16, 8, isBigEndian);
  const high = readUInt(input, 16, 10, isBigEndian);
  return (high << 16) + low;
}
function nextTag(input) {
  if (input.length > 24) {
    return input.slice(12);
  }
}
function extractTags(input, isBigEndian) {
  const tags = {};
  let temp = input;
  while (temp && temp.length) {
    const code = readUInt(temp, 16, 0, isBigEndian);
    const type = readUInt(temp, 16, 2, isBigEndian);
    const length = readUInt(temp, 32, 4, isBigEndian);
    if (code === 0) {
      break;
    } else {
      if (length === 1 && (type === 3 || type === 4)) {
        tags[code] = readValue(temp, isBigEndian);
      }
      temp = nextTag(temp);
    }
  }
  return tags;
}
function determineEndianness(input) {
  const signature = toUTF8String(input, 0, 2);
  if ("II" === signature) {
    return "LE";
  } else if ("MM" === signature) {
    return "BE";
  }
}
function calculateExtended(input) {
  return {
    height: 1 + readUInt24LE(input, 7),
    width: 1 + readUInt24LE(input, 4)
  };
}
function calculateLossless(input) {
  return {
    height: 1 + ((input[4] & 15) << 10 | input[3] << 2 | (input[2] & 192) >> 6),
    width: 1 + ((input[2] & 63) << 8 | input[1])
  };
}
function calculateLossy(input) {
  return {
    height: readInt16LE(input, 8) & 16383,
    width: readInt16LE(input, 6) & 16383
  };
}
function detector(input) {
  const byte = input[0];
  const type = firstBytes.get(byte);
  if (type && typeHandlers.get(type).validate(input)) {
    return type;
  }
  return types.find((fileType) => typeHandlers.get(fileType).validate(input));
}
function lookup(input) {
  const type = detector(input);
  if (typeof type !== "undefined") {
    if (globalOptions.disabledTypes.indexOf(type) > -1) {
      throw new TypeError("disabled file type: " + type);
    }
    const size = typeHandlers.get(type).calculate(input);
    if (size !== void 0) {
      size.type = size.type ?? type;
      return size;
    }
  }
  throw new TypeError("unsupported file type: " + type);
}
async function probe(url2) {
  const response = await fetch(url2);
  if (!response.body || !response.ok) {
    throw new Error("Failed to fetch image");
  }
  const reader = response.body.getReader();
  let done, value;
  let accumulatedChunks = new Uint8Array();
  while (!done) {
    const readResult = await reader.read();
    done = readResult.done;
    if (done)
      break;
    if (readResult.value) {
      value = readResult.value;
      let tmp = new Uint8Array(accumulatedChunks.length + value.length);
      tmp.set(accumulatedChunks, 0);
      tmp.set(value, accumulatedChunks.length);
      accumulatedChunks = tmp;
      try {
        const dimensions = lookup(accumulatedChunks);
        if (dimensions) {
          await reader.cancel();
          return dimensions;
        }
      } catch (error2) {
      }
    }
  }
  throw new Error("Failed to parse the size");
}
async function getConfiguredImageService() {
  if (!globalThis?.astroAsset?.imageService) {
    const { default: service } = await Promise.resolve().then(() => (init_assets_service_4eEmk9sZ(), assets_service_4eEmk9sZ_exports)).then((n) => n.n).catch((e) => {
      const error2 = new AstroError(InvalidImageService);
      error2.cause = e;
      throw error2;
    });
    if (!globalThis.astroAsset)
      globalThis.astroAsset = {};
    globalThis.astroAsset.imageService = service;
    return service;
  }
  return globalThis.astroAsset.imageService;
}
async function getImage$1(options, imageConfig2) {
  if (!options || typeof options !== "object") {
    throw new AstroError({
      ...ExpectedImageOptions,
      message: ExpectedImageOptions.message(JSON.stringify(options))
    });
  }
  if (typeof options.src === "undefined") {
    throw new AstroError({
      ...ExpectedImage,
      message: ExpectedImage.message(
        options.src,
        "undefined",
        JSON.stringify(options)
      )
    });
  }
  const service = await getConfiguredImageService();
  const resolvedOptions = {
    ...options,
    src: typeof options.src === "object" && "then" in options.src ? (await options.src).default ?? await options.src : options.src
  };
  if (options.inferSize && isRemoteImage(resolvedOptions.src)) {
    try {
      const result = await probe(resolvedOptions.src);
      resolvedOptions.width ??= result.width;
      resolvedOptions.height ??= result.height;
      delete resolvedOptions.inferSize;
    } catch {
      throw new AstroError({
        ...FailedToFetchRemoteImageDimensions,
        message: FailedToFetchRemoteImageDimensions.message(resolvedOptions.src)
      });
    }
  }
  const originalPath = isESMImportedImage(resolvedOptions.src) ? resolvedOptions.src.fsPath : resolvedOptions.src;
  const clonedSrc = isESMImportedImage(resolvedOptions.src) ? (
    // @ts-expect-error - clone is a private, hidden prop
    resolvedOptions.src.clone ?? resolvedOptions.src
  ) : resolvedOptions.src;
  resolvedOptions.src = clonedSrc;
  const validatedOptions = service.validateOptions ? await service.validateOptions(resolvedOptions, imageConfig2) : resolvedOptions;
  const srcSetTransforms = service.getSrcSet ? await service.getSrcSet(validatedOptions, imageConfig2) : [];
  let imageURL = await service.getURL(validatedOptions, imageConfig2);
  let srcSets = await Promise.all(
    srcSetTransforms.map(async (srcSet) => ({
      transform: srcSet.transform,
      url: await service.getURL(srcSet.transform, imageConfig2),
      descriptor: srcSet.descriptor,
      attributes: srcSet.attributes
    }))
  );
  if (isLocalService(service) && globalThis.astroAsset.addStaticImage && !(isRemoteImage(validatedOptions.src) && imageURL === validatedOptions.src)) {
    const propsToHash = service.propertiesToHash ?? DEFAULT_HASH_PROPS;
    imageURL = globalThis.astroAsset.addStaticImage(validatedOptions, propsToHash, originalPath);
    srcSets = srcSetTransforms.map((srcSet) => ({
      transform: srcSet.transform,
      url: globalThis.astroAsset.addStaticImage(srcSet.transform, propsToHash, originalPath),
      descriptor: srcSet.descriptor,
      attributes: srcSet.attributes
    }));
  }
  return {
    rawOptions: resolvedOptions,
    options: validatedOptions,
    src: imageURL,
    srcSet: {
      values: srcSets,
      attribute: srcSets.map((srcSet) => `${srcSet.url} ${srcSet.descriptor}`).join(", ")
    },
    attributes: service.getHTMLAttributes !== void 0 ? await service.getHTMLAttributes(validatedOptions, imageConfig2) : {}
  };
}
async function loadRemoteImage(src) {
  try {
    const res = await fetch(src);
    if (!res.ok) {
      return void 0;
    }
    return await res.arrayBuffer();
  } catch (err) {
    return void 0;
  }
}
var import_lite, decoder2, toUTF8String, toHexString, readInt16LE, readUInt16BE, readUInt16LE, readUInt24LE, readInt32LE, readUInt32BE, readUInt32LE, methods, BMP, TYPE_ICON, SIZE_HEADER$1, SIZE_IMAGE_ENTRY, ICO, TYPE_CURSOR, CUR, DDS, gifRegexp, GIF, brandMap, HEIF, SIZE_HEADER, FILE_LENGTH_OFFSET, ENTRY_LENGTH_OFFSET, ICON_TYPE_SIZE, ICNS, J2C, JP2, EXIF_MARKER, APP1_DATA_SIZE_BYTES, EXIF_HEADER_BYTES, TIFF_BYTE_ALIGN_BYTES, BIG_ENDIAN_BYTE_ALIGN, LITTLE_ENDIAN_BYTE_ALIGN, IDF_ENTRY_BYTES, NUM_DIRECTORY_ENTRIES_BYTES, JPG, KTX, pngSignature, pngImageHeaderChunkName, pngFriedChunkName, PNG, PNMTypes, handlers, PNM, PSD, svgReg, extractorRegExps, INCH_CM, units, unitsReg, SVG, TGA, signatures, TIFF, WEBP, typeHandlers, types, firstBytes, globalOptions, fnv1a52, etag, $$Astro$1, $$Image, $$Astro, $$Picture, imageConfig, outDir, getImage, GET;
var init_generic_Dg3fraW5 = __esm({
  "dist/$server_build/chunks/pages/generic_Dg3fraW5.mjs"() {
    "use strict";
    init_path();
    import_lite = __toESM(require_lite(), 1);
    init_astro_CZ31vzIS();
    init_assets_service_4eEmk9sZ();
    decoder2 = new TextDecoder();
    toUTF8String = (input, start = 0, end = input.length) => decoder2.decode(input.slice(start, end));
    toHexString = (input, start = 0, end = input.length) => input.slice(start, end).reduce((memo, i) => memo + ("0" + i.toString(16)).slice(-2), "");
    readInt16LE = (input, offset = 0) => {
      const val = input[offset] + input[offset + 1] * 2 ** 8;
      return val | (val & 2 ** 15) * 131070;
    };
    readUInt16BE = (input, offset = 0) => input[offset] * 2 ** 8 + input[offset + 1];
    readUInt16LE = (input, offset = 0) => input[offset] + input[offset + 1] * 2 ** 8;
    readUInt24LE = (input, offset = 0) => input[offset] + input[offset + 1] * 2 ** 8 + input[offset + 2] * 2 ** 16;
    readInt32LE = (input, offset = 0) => input[offset] + input[offset + 1] * 2 ** 8 + input[offset + 2] * 2 ** 16 + (input[offset + 3] << 24);
    readUInt32BE = (input, offset = 0) => input[offset] * 2 ** 24 + input[offset + 1] * 2 ** 16 + input[offset + 2] * 2 ** 8 + input[offset + 3];
    readUInt32LE = (input, offset = 0) => input[offset] + input[offset + 1] * 2 ** 8 + input[offset + 2] * 2 ** 16 + input[offset + 3] * 2 ** 24;
    methods = {
      readUInt16BE,
      readUInt16LE,
      readUInt32BE,
      readUInt32LE
    };
    BMP = {
      validate: (input) => toUTF8String(input, 0, 2) === "BM",
      calculate: (input) => ({
        height: Math.abs(readInt32LE(input, 22)),
        width: readUInt32LE(input, 18)
      })
    };
    TYPE_ICON = 1;
    SIZE_HEADER$1 = 2 + 2 + 2;
    SIZE_IMAGE_ENTRY = 1 + 1 + 1 + 1 + 2 + 2 + 4 + 4;
    ICO = {
      validate(input) {
        const reserved = readUInt16LE(input, 0);
        const imageCount = readUInt16LE(input, 4);
        if (reserved !== 0 || imageCount === 0)
          return false;
        const imageType = readUInt16LE(input, 2);
        return imageType === TYPE_ICON;
      },
      calculate(input) {
        const nbImages = readUInt16LE(input, 4);
        const imageSize = getImageSize$1(input, 0);
        if (nbImages === 1)
          return imageSize;
        const imgs = [imageSize];
        for (let imageIndex = 1; imageIndex < nbImages; imageIndex += 1) {
          imgs.push(getImageSize$1(input, imageIndex));
        }
        return {
          height: imageSize.height,
          images: imgs,
          width: imageSize.width
        };
      }
    };
    TYPE_CURSOR = 2;
    CUR = {
      validate(input) {
        const reserved = readUInt16LE(input, 0);
        const imageCount = readUInt16LE(input, 4);
        if (reserved !== 0 || imageCount === 0)
          return false;
        const imageType = readUInt16LE(input, 2);
        return imageType === TYPE_CURSOR;
      },
      calculate: (input) => ICO.calculate(input)
    };
    DDS = {
      validate: (input) => readUInt32LE(input, 0) === 542327876,
      calculate: (input) => ({
        height: readUInt32LE(input, 12),
        width: readUInt32LE(input, 16)
      })
    };
    gifRegexp = /^GIF8[79]a/;
    GIF = {
      validate: (input) => gifRegexp.test(toUTF8String(input, 0, 6)),
      calculate: (input) => ({
        height: readUInt16LE(input, 8),
        width: readUInt16LE(input, 6)
      })
    };
    brandMap = {
      avif: "avif",
      mif1: "heif",
      msf1: "heif",
      // hief-sequence
      heic: "heic",
      heix: "heic",
      hevc: "heic",
      // heic-sequence
      hevx: "heic"
      // heic-sequence
    };
    HEIF = {
      validate(buffer) {
        const ftype = toUTF8String(buffer, 4, 8);
        const brand = toUTF8String(buffer, 8, 12);
        return "ftyp" === ftype && brand in brandMap;
      },
      calculate(buffer) {
        const metaBox = findBox(buffer, "meta", 0);
        const iprpBox = metaBox && findBox(buffer, "iprp", metaBox.offset + 12);
        const ipcoBox = iprpBox && findBox(buffer, "ipco", iprpBox.offset + 8);
        const ispeBox = ipcoBox && findBox(buffer, "ispe", ipcoBox.offset + 8);
        if (ispeBox) {
          return {
            height: readUInt32BE(buffer, ispeBox.offset + 16),
            width: readUInt32BE(buffer, ispeBox.offset + 12),
            type: detectBrands(buffer, 8, metaBox.offset)
          };
        }
        throw new TypeError("Invalid HEIF, no size found");
      }
    };
    SIZE_HEADER = 4 + 4;
    FILE_LENGTH_OFFSET = 4;
    ENTRY_LENGTH_OFFSET = 4;
    ICON_TYPE_SIZE = {
      ICON: 32,
      "ICN#": 32,
      // m => 16 x 16
      "icm#": 16,
      icm4: 16,
      icm8: 16,
      // s => 16 x 16
      "ics#": 16,
      ics4: 16,
      ics8: 16,
      is32: 16,
      s8mk: 16,
      icp4: 16,
      // l => 32 x 32
      icl4: 32,
      icl8: 32,
      il32: 32,
      l8mk: 32,
      icp5: 32,
      ic11: 32,
      // h => 48 x 48
      ich4: 48,
      ich8: 48,
      ih32: 48,
      h8mk: 48,
      // . => 64 x 64
      icp6: 64,
      ic12: 32,
      // t => 128 x 128
      it32: 128,
      t8mk: 128,
      ic07: 128,
      // . => 256 x 256
      ic08: 256,
      ic13: 256,
      // . => 512 x 512
      ic09: 512,
      ic14: 512,
      // . => 1024 x 1024
      ic10: 1024
    };
    ICNS = {
      validate: (input) => toUTF8String(input, 0, 4) === "icns",
      calculate(input) {
        const inputLength = input.length;
        const fileLength = readUInt32BE(input, FILE_LENGTH_OFFSET);
        let imageOffset = SIZE_HEADER;
        let imageHeader = readImageHeader(input, imageOffset);
        let imageSize = getImageSize(imageHeader[0]);
        imageOffset += imageHeader[1];
        if (imageOffset === fileLength)
          return imageSize;
        const result = {
          height: imageSize.height,
          images: [imageSize],
          width: imageSize.width
        };
        while (imageOffset < fileLength && imageOffset < inputLength) {
          imageHeader = readImageHeader(input, imageOffset);
          imageSize = getImageSize(imageHeader[0]);
          imageOffset += imageHeader[1];
          result.images.push(imageSize);
        }
        return result;
      }
    };
    J2C = {
      // TODO: this doesn't seem right. SIZ marker doesn't have to be right after the SOC
      validate: (input) => toHexString(input, 0, 4) === "ff4fff51",
      calculate: (input) => ({
        height: readUInt32BE(input, 12),
        width: readUInt32BE(input, 8)
      })
    };
    JP2 = {
      validate(input) {
        if (readUInt32BE(input, 4) !== 1783636e3 || readUInt32BE(input, 0) < 1)
          return false;
        const ftypBox = findBox(input, "ftyp", 0);
        if (!ftypBox)
          return false;
        return readUInt32BE(input, ftypBox.offset + 4) === 1718909296;
      },
      calculate(input) {
        const jp2hBox = findBox(input, "jp2h", 0);
        const ihdrBox = jp2hBox && findBox(input, "ihdr", jp2hBox.offset + 8);
        if (ihdrBox) {
          return {
            height: readUInt32BE(input, ihdrBox.offset + 8),
            width: readUInt32BE(input, ihdrBox.offset + 12)
          };
        }
        throw new TypeError("Unsupported JPEG 2000 format");
      }
    };
    EXIF_MARKER = "45786966";
    APP1_DATA_SIZE_BYTES = 2;
    EXIF_HEADER_BYTES = 6;
    TIFF_BYTE_ALIGN_BYTES = 2;
    BIG_ENDIAN_BYTE_ALIGN = "4d4d";
    LITTLE_ENDIAN_BYTE_ALIGN = "4949";
    IDF_ENTRY_BYTES = 12;
    NUM_DIRECTORY_ENTRIES_BYTES = 2;
    JPG = {
      validate: (input) => toHexString(input, 0, 2) === "ffd8",
      calculate(input) {
        input = input.slice(4);
        let orientation;
        let next;
        while (input.length) {
          const i = readUInt16BE(input, 0);
          if (input[i] !== 255) {
            input = input.slice(1);
            continue;
          }
          if (isEXIF(input)) {
            orientation = validateExifBlock(input, i);
          }
          validateInput(input, i);
          next = input[i + 1];
          if (next === 192 || next === 193 || next === 194) {
            const size = extractSize(input, i + 5);
            if (!orientation) {
              return size;
            }
            return {
              height: size.height,
              orientation,
              width: size.width
            };
          }
          input = input.slice(i + 2);
        }
        throw new TypeError("Invalid JPG, no size found");
      }
    };
    KTX = {
      validate: (input) => {
        const signature = toUTF8String(input, 1, 7);
        return ["KTX 11", "KTX 20"].includes(signature);
      },
      calculate: (input) => {
        const type = input[5] === 49 ? "ktx" : "ktx2";
        const offset = type === "ktx" ? 36 : 20;
        return {
          height: readUInt32LE(input, offset + 4),
          width: readUInt32LE(input, offset),
          type
        };
      }
    };
    pngSignature = "PNG\r\n\n";
    pngImageHeaderChunkName = "IHDR";
    pngFriedChunkName = "CgBI";
    PNG = {
      validate(input) {
        if (pngSignature === toUTF8String(input, 1, 8)) {
          let chunkName = toUTF8String(input, 12, 16);
          if (chunkName === pngFriedChunkName) {
            chunkName = toUTF8String(input, 28, 32);
          }
          if (chunkName !== pngImageHeaderChunkName) {
            throw new TypeError("Invalid PNG");
          }
          return true;
        }
        return false;
      },
      calculate(input) {
        if (toUTF8String(input, 12, 16) === pngFriedChunkName) {
          return {
            height: readUInt32BE(input, 36),
            width: readUInt32BE(input, 32)
          };
        }
        return {
          height: readUInt32BE(input, 20),
          width: readUInt32BE(input, 16)
        };
      }
    };
    PNMTypes = {
      P1: "pbm/ascii",
      P2: "pgm/ascii",
      P3: "ppm/ascii",
      P4: "pbm",
      P5: "pgm",
      P6: "ppm",
      P7: "pam",
      PF: "pfm"
    };
    handlers = {
      default: (lines) => {
        let dimensions = [];
        while (lines.length > 0) {
          const line = lines.shift();
          if (line[0] === "#") {
            continue;
          }
          dimensions = line.split(" ");
          break;
        }
        if (dimensions.length === 2) {
          return {
            height: parseInt(dimensions[1], 10),
            width: parseInt(dimensions[0], 10)
          };
        } else {
          throw new TypeError("Invalid PNM");
        }
      },
      pam: (lines) => {
        const size = {};
        while (lines.length > 0) {
          const line = lines.shift();
          if (line.length > 16 || line.charCodeAt(0) > 128) {
            continue;
          }
          const [key, value] = line.split(" ");
          if (key && value) {
            size[key.toLowerCase()] = parseInt(value, 10);
          }
          if (size.height && size.width) {
            break;
          }
        }
        if (size.height && size.width) {
          return {
            height: size.height,
            width: size.width
          };
        } else {
          throw new TypeError("Invalid PAM");
        }
      }
    };
    PNM = {
      validate: (input) => toUTF8String(input, 0, 2) in PNMTypes,
      calculate(input) {
        const signature = toUTF8String(input, 0, 2);
        const type = PNMTypes[signature];
        const lines = toUTF8String(input, 3).split(/[\r\n]+/);
        const handler = handlers[type] || handlers.default;
        return handler(lines);
      }
    };
    PSD = {
      validate: (input) => toUTF8String(input, 0, 4) === "8BPS",
      calculate: (input) => ({
        height: readUInt32BE(input, 14),
        width: readUInt32BE(input, 18)
      })
    };
    svgReg = /<svg\s([^>"']|"[^"]*"|'[^']*')*>/;
    extractorRegExps = {
      height: /\sheight=(['"])([^%]+?)\1/,
      root: svgReg,
      viewbox: /\sviewBox=(['"])(.+?)\1/i,
      width: /\swidth=(['"])([^%]+?)\1/
    };
    INCH_CM = 2.54;
    units = {
      in: 96,
      cm: 96 / INCH_CM,
      em: 16,
      ex: 8,
      m: 96 / INCH_CM * 100,
      mm: 96 / INCH_CM / 10,
      pc: 96 / 72 / 12,
      pt: 96 / 72,
      px: 1
    };
    unitsReg = new RegExp(
      // eslint-disable-next-line regexp/prefer-d
      `^([0-9.]+(?:e\\d+)?)(${Object.keys(units).join("|")})?$`
    );
    SVG = {
      // Scan only the first kilo-byte to speed up the check on larger files
      validate: (input) => svgReg.test(toUTF8String(input, 0, 1e3)),
      calculate(input) {
        const root = toUTF8String(input).match(extractorRegExps.root);
        if (root) {
          const attrs = parseAttributes(root[0]);
          if (attrs.width && attrs.height) {
            return calculateByDimensions(attrs);
          }
          if (attrs.viewbox) {
            return calculateByViewbox(attrs, attrs.viewbox);
          }
        }
        throw new TypeError("Invalid SVG");
      }
    };
    TGA = {
      validate(input) {
        return readUInt16LE(input, 0) === 0 && readUInt16LE(input, 4) === 0;
      },
      calculate(input) {
        return {
          height: readUInt16LE(input, 14),
          width: readUInt16LE(input, 12)
        };
      }
    };
    signatures = [
      // '492049', // currently not supported
      "49492a00",
      // Little endian
      "4d4d002a"
      // Big Endian
      // '4d4d002a', // BigTIFF > 4GB. currently not supported
    ];
    TIFF = {
      validate: (input) => signatures.includes(toHexString(input, 0, 4)),
      calculate(input) {
        const isBigEndian = determineEndianness(input) === "BE";
        const ifdBuffer = readIFD(input, isBigEndian);
        const tags = extractTags(ifdBuffer, isBigEndian);
        const width = tags[256];
        const height = tags[257];
        if (!width || !height) {
          throw new TypeError("Invalid Tiff. Missing tags");
        }
        return { height, width };
      }
    };
    WEBP = {
      validate(input) {
        const riffHeader = "RIFF" === toUTF8String(input, 0, 4);
        const webpHeader = "WEBP" === toUTF8String(input, 8, 12);
        const vp8Header = "VP8" === toUTF8String(input, 12, 15);
        return riffHeader && webpHeader && vp8Header;
      },
      calculate(input) {
        const chunkHeader = toUTF8String(input, 12, 16);
        input = input.slice(20, 30);
        if (chunkHeader === "VP8X") {
          const extendedHeader = input[0];
          const validStart = (extendedHeader & 192) === 0;
          const validEnd = (extendedHeader & 1) === 0;
          if (validStart && validEnd) {
            return calculateExtended(input);
          } else {
            throw new TypeError("Invalid WebP");
          }
        }
        if (chunkHeader === "VP8 " && input[0] !== 47) {
          return calculateLossy(input);
        }
        const signature = toHexString(input, 3, 6);
        if (chunkHeader === "VP8L" && signature !== "9d012a") {
          return calculateLossless(input);
        }
        throw new TypeError("Invalid WebP");
      }
    };
    typeHandlers = /* @__PURE__ */ new Map([
      ["bmp", BMP],
      ["cur", CUR],
      ["dds", DDS],
      ["gif", GIF],
      ["heif", HEIF],
      ["icns", ICNS],
      ["ico", ICO],
      ["j2c", J2C],
      ["jp2", JP2],
      ["jpg", JPG],
      ["ktx", KTX],
      ["png", PNG],
      ["pnm", PNM],
      ["psd", PSD],
      ["svg", SVG],
      ["tga", TGA],
      ["tiff", TIFF],
      ["webp", WEBP]
    ]);
    types = Array.from(typeHandlers.keys());
    firstBytes = /* @__PURE__ */ new Map([
      [56, "psd"],
      [66, "bmp"],
      [68, "dds"],
      [71, "gif"],
      [73, "tiff"],
      [77, "tiff"],
      [82, "webp"],
      [105, "icns"],
      [137, "png"],
      [255, "jpg"]
    ]);
    globalOptions = {
      disabledTypes: []
    };
    fnv1a52 = (str) => {
      const len = str.length;
      let i = 0, t0 = 0, v0 = 8997, t1 = 0, v1 = 33826, t2 = 0, v2 = 40164, t3 = 0, v3 = 52210;
      while (i < len) {
        v0 ^= str.charCodeAt(i++);
        t0 = v0 * 435;
        t1 = v1 * 435;
        t2 = v2 * 435;
        t3 = v3 * 435;
        t2 += v0 << 8;
        t3 += v1 << 8;
        t1 += t0 >>> 16;
        v0 = t0 & 65535;
        t2 += t1 >>> 16;
        v1 = t1 & 65535;
        v3 = t3 + (t2 >>> 16) & 65535;
        v2 = t2 & 65535;
      }
      return (v3 & 15) * 281474976710656 + v2 * 4294967296 + v1 * 65536 + (v0 ^ v3 >> 4);
    };
    etag = (payload, weak = false) => {
      const prefix = weak ? 'W/"' : '"';
      return prefix + fnv1a52(payload).toString(36) + payload.length.toString(36) + '"';
    };
    $$Astro$1 = createAstro();
    $$Image = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro$1, $$props, $$slots);
      Astro2.self = $$Image;
      const props = Astro2.props;
      if (props.alt === void 0 || props.alt === null) {
        throw new AstroError(ImageMissingAlt);
      }
      if (typeof props.width === "string") {
        props.width = parseInt(props.width);
      }
      if (typeof props.height === "string") {
        props.height = parseInt(props.height);
      }
      const image = await getImage(props);
      const additionalAttributes = {};
      if (image.srcSet.values.length > 0) {
        additionalAttributes.srcset = image.srcSet.attribute;
      }
      return renderTemplate`${maybeRenderHead()}<img${addAttribute(image.src, "src")}${spreadAttributes(additionalAttributes)}${spreadAttributes(image.attributes)}>`;
    }, "/home/runner/work/monext/monext/node_modules/astro/components/Image.astro", void 0);
    $$Astro = createAstro();
    $$Picture = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
      Astro2.self = $$Picture;
      const defaultFormats = ["webp"];
      const defaultFallbackFormat = "png";
      const specialFormatsFallback = ["gif", "svg", "jpg", "jpeg"];
      const { formats = defaultFormats, pictureAttributes = {}, fallbackFormat, ...props } = Astro2.props;
      if (props.alt === void 0 || props.alt === null) {
        throw new AstroError(ImageMissingAlt);
      }
      const optimizedImages = await Promise.all(
        formats.map(
          async (format) => await getImage({ ...props, format, widths: props.widths, densities: props.densities })
        )
      );
      let resultFallbackFormat = fallbackFormat ?? defaultFallbackFormat;
      if (!fallbackFormat && isESMImportedImage(props.src) && specialFormatsFallback.includes(props.src.format)) {
        resultFallbackFormat = props.src.format;
      }
      const fallbackImage = await getImage({
        ...props,
        format: resultFallbackFormat,
        widths: props.widths,
        densities: props.densities
      });
      const imgAdditionalAttributes = {};
      const sourceAdditionalAttributes = {};
      if (props.sizes) {
        sourceAdditionalAttributes.sizes = props.sizes;
      }
      if (fallbackImage.srcSet.values.length > 0) {
        imgAdditionalAttributes.srcset = fallbackImage.srcSet.attribute;
      }
      return renderTemplate`${maybeRenderHead()}<picture${spreadAttributes(pictureAttributes)}> ${Object.entries(optimizedImages).map(([_, image]) => {
        const srcsetAttribute = props.densities || !props.densities && !props.widths ? `${image.src}${image.srcSet.values.length > 0 ? ", " + image.srcSet.attribute : ""}` : image.srcSet.attribute;
        return renderTemplate`<source${addAttribute(srcsetAttribute, "srcset")}${addAttribute("image/" + image.options.format, "type")}${spreadAttributes(sourceAdditionalAttributes)}>`;
      })} <img${addAttribute(fallbackImage.src, "src")}${spreadAttributes(imgAdditionalAttributes)}${spreadAttributes(fallbackImage.attributes)}> </picture>`;
    }, "/home/runner/work/monext/monext/node_modules/astro/components/Picture.astro", void 0);
    imageConfig = { "service": { "entrypoint": "astro/assets/services/noop", "config": {} }, "domains": [], "remotePatterns": [] };
    outDir = new URL("file:///home/runner/work/monext/monext/apps/kloun/dist/");
    new URL("_astro", outDir);
    getImage = async (options) => await getImage$1(options, imageConfig);
    GET = async ({ request }) => {
      try {
        const imageService = await getConfiguredImageService();
        if (!("transform" in imageService)) {
          throw new Error("Configured image service is not a local service");
        }
        const url2 = new URL(request.url);
        const transform = await imageService.parseURL(url2, imageConfig);
        if (!transform?.src) {
          throw new Error("Incorrect transform returned by `parseURL`");
        }
        let inputBuffer = void 0;
        const sourceUrl = isRemotePath(transform.src) ? new URL(transform.src) : new URL(transform.src, url2.origin);
        if (isRemotePath(transform.src) && isRemoteAllowed(transform.src, imageConfig) === false) {
          return new Response("Forbidden", { status: 403 });
        }
        inputBuffer = await loadRemoteImage(sourceUrl);
        if (!inputBuffer) {
          return new Response("Not Found", { status: 404 });
        }
        const { data, format } = await imageService.transform(
          new Uint8Array(inputBuffer),
          transform,
          imageConfig
        );
        return new Response(data, {
          status: 200,
          headers: {
            "Content-Type": import_lite.default.getType(format) ?? `image/${format}`,
            "Cache-Control": "public, max-age=31536000",
            ETag: etag(data.toString()),
            Date: (/* @__PURE__ */ new Date()).toUTCString()
          }
        });
      } catch (err) {
        console.error("Could not process image request:", err);
        return new Response(`Server Error: ${err}`, { status: 500 });
      }
    };
  }
});

// dist/$server_build/chunks/generic_DXelvnfV.mjs
var generic_DXelvnfV_exports = {};
__export(generic_DXelvnfV_exports, {
  page: () => page,
  renderers: () => renderers
});
var page;
var init_generic_DXelvnfV = __esm({
  "dist/$server_build/chunks/generic_DXelvnfV.mjs"() {
    "use strict";
    init_renderers();
    page = () => Promise.resolve().then(() => (init_generic_Dg3fraW5(), generic_Dg3fraW5_exports));
  }
});

// dist/$server_build/chunks/pages/cache_B96RcsR2.mjs
var cache_B96RcsR2_exports = {};
__export(cache_B96RcsR2_exports, {
  get: () => get,
  prerender: () => prerender
});
async function fetchWithCloudflare(url2, options) {
  return fetch(url2, options);
}
function convertToFriendlierId(url2) {
  const friendlyId = url2.replace(/[^\w\s]/gi, "").replace(/\s+/g, "-").toLowerCase();
  return friendlyId;
}
var prerender, get;
var init_cache_B96RcsR2 = __esm({
  "dist/$server_build/chunks/pages/cache_B96RcsR2.mjs"() {
    "use strict";
    prerender = false;
    get = async function get2({ request }) {
      const url2 = decodeURI(request.url).split("?url=")[1];
      const ttl = url2 ? Number(url2.split("&cache=")[1]) : 5;
      let response = await fetchWithCloudflare(url2, {
        cf: {
          cacheTtl: ttl,
          cacheEverything: true,
          cacheKey: convertToFriendlierId(url2)
        }
      });
      return new Response(response.body, {
        status: 200,
        headers: {
          "Content-Type": "application/json",
          "Cache-Control": "public, max-age=" + ttl.toString()
        }
      });
    };
  }
});

// dist/$server_build/chunks/cache_CxM4wECI.mjs
var cache_CxM4wECI_exports = {};
__export(cache_CxM4wECI_exports, {
  page: () => page2,
  renderers: () => renderers
});
var page2;
var init_cache_CxM4wECI = __esm({
  "dist/$server_build/chunks/cache_CxM4wECI.mjs"() {
    "use strict";
    init_renderers();
    page2 = () => Promise.resolve().then(() => (init_cache_B96RcsR2(), cache_B96RcsR2_exports));
  }
});

// dist/$server_build/chunks/pages/_id__B7VpvpGu.mjs
var id_B7VpvpGu_exports = {};
__export(id_B7VpvpGu_exports, {
  get: () => get3,
  prerender: () => prerender2
});
var prerender2, get3;
var init_id_B7VpvpGu = __esm({
  "dist/$server_build/chunks/pages/_id__B7VpvpGu.mjs"() {
    "use strict";
    prerender2 = false;
    get3 = async function get22({ params }) {
      params.id;
      try {
        const response = await fetch("datax[0].image");
        const buffer = await response.arrayBuffer();
        return new Response(buffer, {
          status: 200,
          headers: {
            "Content-Type": "image/jpeg"
          }
        });
      } catch (e) {
        return new Response("", {
          status: 200,
          headers: {
            "Content-Type": "image/jpeg"
          }
        });
      }
    };
  }
});

// dist/$server_build/chunks/_id__CGP2WXdM.mjs
var id_CGP2WXdM_exports = {};
__export(id_CGP2WXdM_exports, {
  page: () => page3,
  renderers: () => renderers
});
var page3;
var init_id_CGP2WXdM = __esm({
  "dist/$server_build/chunks/_id__CGP2WXdM.mjs"() {
    "use strict";
    init_renderers();
    page3 = () => Promise.resolve().then(() => (init_id_B7VpvpGu(), id_B7VpvpGu_exports));
  }
});

// dist/$server_build/chunks/pages/__RxTcdYg8.mjs
var RxTcdYg8_exports = {};
__export(RxTcdYg8_exports, {
  $: () => $$Pagination,
  _: () => ____business_,
  a: () => $$Layout,
  b: () => $$CatButton
});
async function fetcher(query, rd) {
  const { db: db22, id, _view, _design, params, insert: insert2 } = query;
  const body = JSON.stringify(query);
  const isPost = body?.includes("_id") || insert2;
  const rdm = (rd || 100).toString();
  const buildurl = `${url}${db22 ? db22 + "/" : "worker/"}${_design ? `_design/${_design}/_view/${_view}?${params}` : ""}${id ? `${id}?rd=${rdm}` : `&rd=${rdm}`}`;
  console.log(buildurl);
  const response = await fetch(buildurl, {
    method: isPost ? "POST" : "GET",
    headers: {
      "Content-Type": "application/json"
    },
    body: isPost ? body : null
  });
  const d = await response.json();
  return d;
}
async function get4(id, rd) {
  const d = await fetcher({ id }, rd || 100);
  if (d.error) {
    return Promise.resolve({ error: "not found" });
  }
  d.id = d._id;
  return Promise.resolve(d);
}
async function view(id, params) {
  const split = id.split("/");
  const d = await fetcher({
    _design: split[0],
    _view: split[1],
    params: serialize(params)
  });
  const rows = d.rows.map((x) => {
    const val = typeof x.value === "string" ? { value: x.value, ...x.doc } : { ...x.value, ...x.doc };
    return { ...val, id: x.id, key: x.key, value: x.value };
  });
  if (rows.length === 1) {
    return Promise.resolve(rows[0]);
  }
  return Promise.resolve({ ...d, rows });
}
async function insert(obj) {
  const ins = await fetcher(obj);
  return Promise.resolve(ins);
}
async function multiple(db22, obj) {
  const response = await fetch(url + "" + db22 + "/_all_docs", {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify({ keys: obj })
  });
  const d = await response.json();
  return Promise.resolve(d.rows);
}
var url, serialize, db, $$Astro$e, $$CatButton, $$Astro$d, $$Pagination, businesses, $$Astro$c, $$Footer, __freeze$2, __defProp$2, __template$2, _a$2, $$Astro$b, $$Astronav, $$Astro$a, $$MenuIcon, $$Astro$9, $$OpenIcon, $$Astro$8, $$CloseIcon, $$Astro$7, $$MenuItems, $$Astro$6, $$Dropdown, $$Astro$5, $$DropdownSubmenu, $$Astro$4, $$DropdownItems, __freeze$1, __defProp$1, __template$1, _a$1, $$Astro$3, $$StickyHeader, $$Astro$2, $$Header, __freeze, __defProp2, __template, _a, _b, $$Astro$12, $$Layout, $$Astro2, prerender3, $$, $$file, $$url, ____business_;
var init_RxTcdYg8 = __esm({
  "dist/$server_build/chunks/pages/__RxTcdYg8.mjs"() {
    "use strict";
    init_astro_CZ31vzIS();
    init_colors();
    url = "https://db.kloun.lol/";
    serialize = (obj) => {
      return Object.entries(obj).map(
        ([key, val]) => `${key}=${key === "key" || key === "start_key" ? `"${val}"` : val}`
      ).join("&");
    };
    db = {
      view,
      get: get4,
      insert,
      multiple
    };
    $$Astro$e = createAstro();
    $$CatButton = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro$e, $$props, $$slots);
      Astro2.self = $$CatButton;
      const { url: url2, title, count } = Astro2.props;
      const formatcount = (count2) => {
        if (count2 > 1500) {
          return `${Math.floor(count2 / 1e3)}k`;
        }
        return count2;
      };
      return renderTemplate`${maybeRenderHead()}<a class="w-full grow sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/5"${addAttribute(url2, "href")}> <div class="flex h-full items-center rounded border border-gray-800 bg-gray-800 p-4 dark:border-gray-500 dark:bg-slate-100"> <div class="flex-1 justify-center align-middle text-white dark:text-gray-800"> <span class="text-shadow font-black">${title}</span> </div>${count && renderTemplate`<div class="btn1-count">${formatcount(count)}</div>`} </div> </a>`;
    }, "/home/runner/work/monext/monext/apps/kloun/src/components/CatButton.astro", void 0);
    $$Astro$d = createAstro();
    $$Pagination = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro$d, $$props, $$slots);
      Astro2.self = $$Pagination;
      const { items, pageSize, currentPage, prefix } = Astro2.props;
      function makeArray({
        pagesToShow,
        items: items2,
        pageSize: pageSize2,
        currentPage: currentPage2
      }) {
        const middle = Math.floor(pagesToShow / 2);
        const isArr = Array.isArray(items2);
        let startIndex = currentPage2 - middle;
        let endIndex = currentPage2 + middle;
        const pagesCount = Math.ceil(isArr ? items2.length : items2 / pageSize2);
        const pages = Array.from({ length: pagesCount }, (_, i) => i + 1);
        if (startIndex < 1) {
          startIndex = 1;
          endIndex = startIndex + pagesToShow;
          if (endIndex > pagesCount) {
            endIndex = pagesCount;
          }
        }
        if (endIndex > pagesCount) {
          endIndex = pagesCount;
          startIndex = endIndex - pagesToShow;
          if (startIndex < 1) {
            startIndex = 1;
          }
        }
        const pagesToRender2 = pages.slice(startIndex - 1, endIndex);
        return pagesToRender2;
      }
      const pagesToRender = makeArray({
        pagesToShow: 9,
        items,
        pageSize,
        currentPage
      });
      const pagesToRenderMobile = makeArray({
        pagesToShow: 3,
        items,
        pageSize,
        currentPage
      });
      return renderTemplate`${pagesToRender[1] && renderTemplate`${maybeRenderHead()}<div class="fixed bottom-2 left-2 right-2 z-20 flex justify-center bg-black/30 p-4 backdrop-blur-sm rounded-xl"><div class="btn-group hidden sm:flex">${pagesToRender.map((page19) => renderTemplate`<a rel="prefetch"${addAttribute(
        page19 === currentPage ? "#" : `${prefix}${page19 === 1 ? prefix.includes("_") ? 1 : "" : page19}/`,
        "href"
      )}${addAttribute(
        page19 === currentPage ? "btn px-4 font-bold bg-gray-700 dark:bg-gray-500" : "btn px-4 font-bold",
        "class"
      )}>${page19}</a>`)}</div><div class="block xs:hidden sm:hidden"><div class="btn-group">${pagesToRenderMobile.map((page19) => renderTemplate`<a${addAttribute(
        page19 === currentPage ? "#" : `${prefix}${page19 === 1 ? "" : page19}/`,
        "href"
      )} rel="nofollow"${addAttribute(
        page19 === currentPage ? "btn px-4 font-bold bg-gray-700 dark:bg-gray-500" : "btn px-4 font-bold",
        "class"
      )}>${page19}</a>`)}</div></div></div>`}`;
    }, "/home/runner/work/monext/monext/apps/kloun/src/components/Pagination.astro", void 0);
    businesses = [{ "key": "\u0410\u0431\u043B\u0430\u043D\u0438\u0446\u0430", "value": 130, "slug": "ablanica" }, { "key": "\u0410\u0431\u0440\u0438\u0442", "value": 6, "slug": "abrit" }, { "key": "\u0410\u0432\u0440\u0430\u043C\u043E\u0432\u043E", "value": 21, "slug": "avramovo" }, { "key": "\u0410\u0432\u0440\u0435\u043D", "value": 100, "slug": "avren" }, { "key": "\u0410\u0433\u0430\u0442\u043E\u0432\u043E", "value": 8, "slug": "agatovo" }, { "key": "\u0410\u0439\u0434\u0435\u043C\u0438\u0440", "value": 280, "slug": "aydemir" }, { "key": "\u0410\u0439\u0440\u043E\u0432\u043E", "value": 31, "slug": "ayrovo" }, { "key": "\u0410\u0439\u0442\u043E\u0441", "value": 1531, "slug": "aytos" }, { "key": "\u0410\u043A\u0430\u043D\u0434\u0436\u0438\u0435\u0432\u043E", "value": 9, "slug": "akandzhievo" }, { "key": "\u0410\u043A\u0430\u0446\u0438\u0435\u0432\u043E", "value": 1, "slug": "akacievo" }, { "key": "\u0410\u043A\u0441\u0430\u043A\u043E\u0432\u043E", "value": 569, "slug": "aksakovo" }, { "key": "\u0410\u043B\u0430\u043C\u043E\u0432\u0446\u0438", "value": 4, "slug": "alamovci" }, { "key": "\u0410\u043B\u0431\u0430\u043D\u0446\u0438", "value": 1, "slug": "albanci" }, { "key": "\u0410\u043B\u0432\u0430\u043D\u043E\u0432\u043E", "value": 4, "slug": "alvanovo" }, { "key": "\u0410\u043B\u0434\u043E\u043C\u0438\u0440\u043E\u0432\u0446\u0438", "value": 79, "slug": "aldomirovci" }, { "key": "\u0410\u043B\u0435\u043A\u043E \u041A\u043E\u043D\u0441\u0442\u0430\u043D\u0442\u0438\u043D\u043E\u0432\u043E", "value": 47, "slug": "aleko-konstantinovo" }, { "key": "\u0410\u043B\u0435\u043A\u043E\u0432\u043E", "value": 23, "slug": "alekovo" }, { "key": "\u0410\u043B\u0435\u043A\u0441\u0430\u043D\u0434\u0440\u0438\u044F", "value": 4, "slug": "aleksandriya" }, { "key": "\u0410\u043B\u0435\u043A\u0441\u0430\u043D\u0434\u0440\u043E\u0432\u043E", "value": 154, "slug": "aleksandrovo" }, { "key": "\u0410\u043B\u0435\u043D\u0434\u0430\u0440\u043E\u0432\u0430", "value": 3, "slug": "alendarova" }, { "key": "\u0410\u043B\u0438\u043D\u043E", "value": 10, "slug": "alino" }, { "key": "\u0410\u043B\u0442\u0438\u043C\u0438\u0440", "value": 29, "slug": "altimir" }, { "key": "\u0410\u043B\u0444\u0430\u0442\u0430\u0440", "value": 65, "slug": "alfatar" }, { "key": "\u0410\u043B\u0446\u0435\u043A", "value": 2, "slug": "alcek" }, { "key": "\u0410\u043D\u0433\u0435\u043B \u0432\u043E\u0439\u0432\u043E\u0434\u0430", "value": 12, "slug": "angel-voyvoda" }, { "key": "\u0410\u043D\u0433\u0435\u043B\u0430\u0440\u0438\u0439", "value": 1, "slug": "angelariy" }, { "key": "\u0410\u043D\u0435\u0432\u043E", "value": 21, "slug": "anevo" }, { "key": "\u0410\u043D\u0442\u0438\u043C\u043E\u0432\u043E", "value": 21, "slug": "antimovo" }, { "key": "\u0410\u043D\u0442\u043E\u043D", "value": 65, "slug": "anton" }, { "key": "\u0410\u043D\u0442\u043E\u043D\u043E\u0432\u043E", "value": 83, "slug": "antonovo" }, { "key": "\u0410\u043F\u0440\u0438\u043B\u043E\u0432\u043E", "value": 69, "slug": "aprilovo" }, { "key": "\u0410\u043F\u0440\u0438\u043B\u0446\u0438", "value": 242, "slug": "aprilci" }, { "key": "\u0410\u0440\u0431\u0430\u043D\u0430\u0441\u0438", "value": 52, "slug": "arbanasi" }, { "key": "\u0410\u0440\u0434\u0430", "value": 13, "slug": "arda" }, { "key": "\u0410\u0440\u0434\u0438\u043D\u043E", "value": 217, "slug": "ardino" }, { "key": "\u0410\u0440\u043A\u043E\u0432\u043D\u0430", "value": 2, "slug": "arkovna" }, { "key": "\u0410\u0440\u043C\u0435\u043D\u0438\u0442\u0435", "value": 5, "slug": "armenite" }, { "key": "\u0410\u0440\u043D\u0430\u0443\u0442\u0438\u0442\u043E", "value": 6, "slug": "arnautito" }, { "key": "\u0410\u0440\u0447\u0430\u0440", "value": 69, "slug": "archar" }, { "key": "\u0410\u0441\u0435\u043D", "value": 12, "slug": "asen" }, { "key": "\u0410\u0441\u0435\u043D\u043E\u0432\u0433\u0440\u0430\u0434", "value": 4690, "slug": "asenovgrad" }, { "key": "\u0410\u0441\u0435\u043D\u043E\u0432\u0435\u0446", "value": 29, "slug": "asenovec" }, { "key": "\u0410\u0441\u0435\u043D\u043E\u0432\u043E", "value": 29, "slug": "asenovo" }, { "key": "\u0410\u0441\u0435\u043D\u043E\u0432\u0446\u0438", "value": 16, "slug": "asenovci" }, { "key": "\u0410\u0441\u043F\u0430\u0440\u0443\u0445\u043E\u0432\u043E", "value": 63, "slug": "asparuhovo" }, { "key": "\u0410\u0442\u0438\u044F", "value": 47, "slug": "atiya" }, { "key": "\u0410\u0442\u043E\u043B\u043E\u0432\u043E", "value": 9, "slug": "atolovo" }, { "key": "\u0410\u0443\u0441\u0442\u0430", "value": 2, "slug": "austa" }, { "key": "\u0410\u0445\u0435\u043B\u043E\u0439", "value": 345, "slug": "aheloy" }, { "key": "\u0410\u0445\u043C\u0430\u0442\u043E\u0432\u043E", "value": 4, "slug": "ahmatovo" }, { "key": "\u0410\u0445\u0442\u043E\u043F\u043E\u043B", "value": 174, "slug": "ahtopol" }, { "key": "\u0411\u0430\u0431\u0435\u043A", "value": 3, "slug": "babek" }, { "key": "\u0411\u0430\u0431\u0438\u043D\u043E", "value": 4, "slug": "babino" }, { "key": "\u0411\u0430\u0431\u0438\u043D\u0446\u0438", "value": 6, "slug": "babinci" }, { "key": "\u0411\u0430\u0431\u043E\u0432\u043E", "value": 23, "slug": "babovo" }, { "key": "\u0411\u0430\u0431\u0443\u043A", "value": 16, "slug": "babuk" }, { "key": "\u0411\u0430\u0431\u044F\u043A", "value": 17, "slug": "babyak" }, { "key": "\u0411\u0430\u0433\u0430\u043B\u0435\u0432\u0446\u0438", "value": 2, "slug": "bagalevci" }, { "key": "\u0411\u0430\u0433\u0440\u0435\u043D\u0446\u0438", "value": 8, "slug": "bagrenci" }, { "key": "\u0411\u0430\u0433\u0440\u0438\u043B\u0446\u0438", "value": 4, "slug": "bagrilci" }, { "key": "\u0411\u0430\u0433\u0440\u044F\u043D\u043A\u0430", "value": 5, "slug": "bagryanka" }, { "key": "\u0411\u0430\u0434\u0435\u0432\u0446\u0438", "value": 1, "slug": "badevci" }, { "key": "\u0411\u0430\u0439\u043A\u0430\u043B", "value": 8, "slug": "baykal" }, { "key": "\u0411\u0430\u0439\u043A\u0430\u043B\u0441\u043A\u043E", "value": 2, "slug": "baykalsko" }, { "key": "\u0411\u0430\u0439\u043A\u043E\u0432\u043E", "value": 5, "slug": "baykovo" }, { "key": "\u0411\u0430\u0439\u043B\u043E\u0432\u043E", "value": 11, "slug": "baylovo" }, { "key": "\u0411\u0430\u043A\u0430\u043B\u0438\u0442\u0435", "value": 1, "slug": "bakalite" }, { "key": "\u0411\u0430\u043B\u0430\u0431\u0430\u043D\u043E\u0432\u043E", "value": 1, "slug": "balabanovo" }, { "key": "\u0411\u0430\u043B\u0430\u0431\u0430\u043D\u0441\u043A\u043E", "value": 5, "slug": "balabansko" }, { "key": "\u0411\u0430\u043B\u0430\u043D\u0438\u0442\u0435", "value": 3, "slug": "balanite" }, { "key": "\u0411\u0430\u043B\u0430\u043D\u043E\u0432\u043E", "value": 14, "slug": "balanovo" }, { "key": "\u0411\u0430\u043B\u0432\u0430\u043D", "value": 14, "slug": "balvan" }, { "key": "\u0411\u0430\u043B\u0434\u0435\u0432\u043E", "value": 5, "slug": "baldevo" }, { "key": "\u0411\u0430\u043B\u0435\u0439", "value": 8, "slug": "baley" }, { "key": "\u0411\u0430\u043B\u0438\u043A", "value": 5, "slug": "balik" }, { "key": "\u0411\u0430\u043B\u043A\u0430\u043D", "value": 4, "slug": "balkan" }, { "key": "\u0411\u0430\u043B\u043A\u0430\u043D\u0435\u0446", "value": 9, "slug": "balkanec" }, { "key": "\u0411\u0430\u043B\u043A\u0430\u043D\u0441\u043A\u0438", "value": 8, "slug": "balkanski" }, { "key": "\u0411\u0430\u043B\u043A\u0430\u043D\u0446\u0438", "value": 10, "slug": "balkanci" }, { "key": "\u0411\u0430\u043B\u0443\u0446\u0438", "value": 7, "slug": "baluci" }, { "key": "\u0411\u0430\u043B\u0447\u0438\u043A", "value": 1217, "slug": "balchik" }, { "key": "\u0411\u0430\u043B\u0448\u0430", "value": 18, "slug": "balsha" }, { "key": "\u0411\u0430\u043B\u044E\u0432\u0438\u0446\u0430", "value": 2, "slug": "balyuvica" }, { "key": "\u0411\u0430\u043D\u0433\u0435\u0439\u0446\u0438", "value": 2, "slug": "bangeyci" }, { "key": "\u0411\u0430\u043D\u0435\u0432\u043E", "value": 63, "slug": "banevo" }, { "key": "\u0411\u0430\u043D\u0438\u0441\u043A\u0430", "value": 29, "slug": "baniska" }, { "key": "\u0411\u0430\u043D\u0438\u0442\u0435", "value": 100, "slug": "banite" }, { "key": "\u0411\u0430\u043D\u0438\u0446\u0430", "value": 13, "slug": "banica" }, { "key": "\u0411\u0430\u043D\u0438\u0447\u0430\u043D", "value": 29, "slug": "banichan" }, { "key": "\u0411\u0430\u043D\u0438\u0449\u0435", "value": 3, "slug": "banishche" }, { "key": "\u0411\u0430\u043D\u043A\u044F", "value": 946, "slug": "bankya" }, { "key": "\u0411\u0430\u043D\u043E\u0432\u043E", "value": 23, "slug": "banovo" }, { "key": "\u0411\u0430\u043D\u0441\u043A\u043E", "value": 1352, "slug": "bansko" }, { "key": "\u0411\u0430\u043D\u044F", "value": 359, "slug": "banya" }, { "key": "\u0411\u0430\u0440\u0430\u043A\u043E\u0432\u043E", "value": 15, "slug": "barakovo" }, { "key": "\u0411\u0430\u0440\u0430\u0446\u0438", "value": 3, "slug": "baraci" }, { "key": "\u0411\u0410\u0420\u0411\u0415\u0419\u0414\u041E\u0421,", "value": 1, "slug": "barbeydos" }, { "key": "\u0411\u0430\u0440\u0443\u0442\u0438\u043D", "value": 72, "slug": "barutin" }, { "key": "\u0411\u0430\u0441\u0430\u0440\u0431\u043E\u0432\u043E", "value": 67, "slug": "basarbovo" }, { "key": "\u0411\u0430\u0442\u0430", "value": 45, "slug": "bata" }, { "key": "\u0411\u0430\u0442\u0430\u043A", "value": 248, "slug": "batak" }, { "key": "\u0411\u0430\u0442\u0430\u043D\u043E\u0432\u0446\u0438", "value": 106, "slug": "batanovci" }, { "key": "\u0411\u0430\u0442\u0438\u043D", "value": 30, "slug": "batin" }, { "key": "\u0411\u0430\u0442\u0438\u0448\u043D\u0438\u0446\u0430", "value": 22, "slug": "batishnica" }, { "key": "\u0411\u0430\u0442\u043E\u0432\u043E", "value": 30, "slug": "batovo" }, { "key": "\u0411\u0430\u0442\u043E\u0448\u0435\u0432\u043E", "value": 12, "slug": "batoshevo" }, { "key": "\u0411\u0430\u0442\u0443\u043B\u0438\u044F", "value": 5, "slug": "batuliya" }, { "key": "\u0411\u0430\u0442\u0443\u043B\u0446\u0438", "value": 7, "slug": "batulci" }, { "key": "\u0411\u0430\u0443\u0440\u0435\u043D\u0435", "value": 4, "slug": "baurene" }, { "key": "\u0411\u0430\u0445\u043E\u0432\u0438\u0446\u0430", "value": 21, "slug": "bahovica" }, { "key": "\u0411\u0430\u0446\u043E\u0432\u0430 \u043C\u0430\u0445\u0430\u043B\u0430", "value": 1, "slug": "bacova-mahala" }, { "key": "\u0411\u0430\u0447\u0435\u0432\u043E", "value": 111, "slug": "bachevo" }, { "key": "\u0411\u0430\u0447\u043A\u043E\u0432\u043E", "value": 26, "slug": "bachkovo" }, { "key": "\u0411\u0430\u0448\u0435\u0432\u043E", "value": 12, "slug": "bashevo" }, { "key": "\u0411\u0430\u0449\u0438\u043D\u043E", "value": 9, "slug": "bashchino" }, { "key": "\u0411\u0430\u044F\u0447\u0435\u0432\u043E", "value": 22, "slug": "bayachevo" }, { "key": "\u0411\u0434\u0438\u043D\u0446\u0438", "value": 4, "slug": "bdinci" }, { "key": "\u0411\u0435\u0431\u0440\u043E\u0432\u043E", "value": 8, "slug": "bebrovo" }, { "key": "\u0411\u0435\u0433\u043B\u0435\u0436", "value": 10, "slug": "beglezh" }, { "key": "\u0411\u0435\u0433\u043E\u0432\u043E", "value": 11, "slug": "begovo" }, { "key": "\u0411\u0435\u0433\u0443\u043D\u043E\u0432\u0446\u0438", "value": 5, "slug": "begunovci" }, { "key": "\u0411\u0435\u0433\u0443\u043D\u0446\u0438", "value": 20, "slug": "begunci" }, { "key": "\u0411\u0435\u0434\u0435\u043D", "value": 6, "slug": "beden" }, { "key": "\u0411\u0435\u0434\u0436\u0435\u043D\u0435", "value": 1, "slug": "bedzhene" }, { "key": "\u0411\u0435\u0436\u0430\u043D\u043E\u0432\u043E", "value": 34, "slug": "bezhanovo" }, { "key": "\u0411\u0435\u0437\u0432\u043E\u0434\u0438\u0446\u0430", "value": 16, "slug": "bezvodica" }, { "key": "\u0411\u0435\u0437\u0434\u0435\u043D", "value": 22, "slug": "bezden" }, { "key": "\u0411\u0435\u0437\u0434\u0435\u043D\u0438\u0446\u0430", "value": 5, "slug": "bezdenica" }, { "key": "\u0411\u0435\u0437\u043C\u0435\u0440", "value": 64, "slug": "bezmer" }, { "key": "\u0411\u0435\u043B \u043A\u0430\u043C\u0435\u043D", "value": 7, "slug": "bel-kamen" }, { "key": "\u0411\u0435\u043B\u0430", "value": 1, "slug": "bela" }, { "key": "\u0411\u0435\u043B\u0430 \u0420\u0430\u0434\u0430", "value": 14, "slug": "bela-rada" }, { "key": "\u0411\u0435\u043B\u0430\u0441\u0438\u0446\u0430", "value": 59, "slug": "belasica" }, { "key": "\u0411\u0435\u043B\u0430\u0449\u0438\u0446\u0430", "value": 192, "slug": "belashchica" }, { "key": "\u0411\u0435\u043B\u0433\u0443\u043D", "value": 6, "slug": "belgun" }, { "key": "\u0411\u0435\u043B\u0435\u0432 \u0434\u043E\u043B", "value": 2, "slug": "belev-dol" }, { "key": "\u0411\u0435\u043B\u0435\u0432\u0440\u0435\u043D", "value": 2, "slug": "belevren" }, { "key": "\u0411\u0435\u043B\u0435\u043D\u0435", "value": 346, "slug": "belene" }, { "key": "\u0411\u0435\u043B\u0435\u043D\u0446\u0438", "value": 6, "slug": "belenci" }, { "key": "\u0411\u0435\u043B\u0438 \u0431\u0440\u0435\u0433", "value": 1, "slug": "beli-breg" }, { "key": "\u0411\u0435\u043B\u0438 \u0431\u0440\u043E\u0434", "value": 3, "slug": "beli-brod" }, { "key": "\u0411\u0435\u043B\u0438 \u0431\u0440\u044F\u0433", "value": 4, "slug": "beli-bryag" }, { "key": "\u0411\u0435\u043B\u0438 \u0432\u0438\u0440", "value": 10, "slug": "beli-vir" }, { "key": "\u0411\u0435\u043B\u0438 \u0438\u0437\u0432\u043E\u0440", "value": 36, "slug": "beli-izvor" }, { "key": "\u0411\u0435\u043B\u0438 \u0418\u0441\u043A\u044A\u0440", "value": 44, "slug": "beli-iskr" }, { "key": "\u0411\u0435\u043B\u0438 \u041B\u043E\u043C", "value": 30, "slug": "beli-lom" }, { "key": "\u0411\u0435\u043B\u0438 \u041E\u0441\u044A\u043C", "value": 38, "slug": "beli-osm" }, { "key": "\u0411\u0435\u043B\u0438 \u043F\u043B\u0430\u0441\u0442", "value": 7, "slug": "beli-plast" }, { "key": "\u0411\u0435\u043B\u0438\u043B\u0430", "value": 1, "slug": "belila" }, { "key": "\u0411\u0435\u043B\u0438\u043C\u0435\u043B", "value": 11, "slug": "belimel" }, { "key": "\u0411\u0435\u043B\u0438\u043D\u0446\u0438", "value": 14, "slug": "belinci" }, { "key": "\u0411\u0435\u043B\u0438\u0446\u0430", "value": 228, "slug": "belica" }, { "key": "\u0411\u0435\u043B\u0438\u0448", "value": 5, "slug": "belish" }, { "key": "\u0411\u0435\u043B\u043E \u043F\u043E\u043B\u0435", "value": 98, "slug": "belo-pole" }, { "key": "\u0411\u0435\u043B\u043E\u0432\u0435\u0446", "value": 49, "slug": "belovec" }, { "key": "\u0411\u0435\u043B\u043E\u0432\u0438\u0446\u0430", "value": 16, "slug": "belovica" }, { "key": "\u0411\u0435\u043B\u043E\u0432\u043E", "value": 184, "slug": "belovo" }, { "key": "\u0411\u0435\u043B\u043E\u0433\u0440\u0430\u0434\u0435\u0446", "value": 32, "slug": "belogradec" }, { "key": "\u0411\u0435\u043B\u043E\u0433\u0440\u0430\u0434\u0447\u0438\u043A", "value": 291, "slug": "belogradchik" }, { "key": "\u0411\u0435\u043B\u043E\u0434\u043E\u043B", "value": 13, "slug": "belodol" }, { "key": "\u0411\u0435\u043B\u043E\u0437\u0435\u043C", "value": 149, "slug": "belozem" }, { "key": "\u0411\u0435\u043B\u043E\u043A\u043E\u043F\u0438\u0442\u043E\u0432\u043E", "value": 9, "slug": "belokopitovo" }, { "key": "\u0411\u0435\u043B\u043E\u043C\u043E\u0440\u0446\u0438", "value": 39, "slug": "belomorci" }, { "key": "\u0411\u0435\u043B\u043E\u043F\u043E\u043B\u0446\u0438", "value": 4, "slug": "belopolci" }, { "key": "\u0411\u0435\u043B\u043E\u043F\u043E\u043B\u044F\u043D\u0435", "value": 4, "slug": "belopolyane" }, { "key": "\u0411\u0435\u043B\u043E\u043F\u043E\u043F\u0446\u0438", "value": 14, "slug": "belopopci" }, { "key": "\u0411\u0435\u043B\u043E\u0441\u043B\u0430\u0432", "value": 444, "slug": "beloslav" }, { "key": "\u0411\u0435\u043B\u043E\u0442\u0438\u043D\u0446\u0438", "value": 11, "slug": "belotinci" }, { "key": "\u0411\u0435\u043B\u0446\u043E\u0432", "value": 20, "slug": "belcov" }, { "key": "\u0411\u0435\u043B\u0447\u0438\u043D", "value": 17, "slug": "belchin" }, { "key": "\u0411\u0435\u043B\u0447\u0438\u043D\u0441\u043A\u0438 \u0431\u0430\u043D\u0438", "value": 2, "slug": "belchinski-bani" }, { "key": "\u0411\u0435\u043B\u044F\u043A\u043E\u0432\u0435\u0446", "value": 57, "slug": "belyakovec" }, { "key": "\u0411\u0435\u043B\u044F\u043D\u043E\u0432\u043E", "value": 1, "slug": "belyanovo" }, { "key": "\u0411\u0435\u043D\u043A\u043E\u0432\u0441\u043A\u0438", "value": 229, "slug": "benkovski" }, { "key": "\u0411\u0435\u0440\u0435\u043D\u0434\u0435", "value": 2, "slug": "berende" }, { "key": "\u0411\u0435\u0440\u0435\u043D\u0434\u0435 \u0438\u0437\u0432\u043E\u0440", "value": 1, "slug": "berende-izvor" }, { "key": "\u0411\u0435\u0440\u0438\u0435\u0432\u043E", "value": 2, "slug": "berievo" }, { "key": "\u0411\u0435\u0440\u043A\u043E\u0432\u0438\u0446\u0430", "value": 745, "slug": "berkovica" }, { "key": "\u0411\u0435\u0440\u043A\u043E\u0432\u0441\u043A\u0438", "value": 1, "slug": "berkovski" }, { "key": "\u0411\u0415\u0420\u041C\u0423\u0414\u0421\u041A\u0418 \u041E\u0421\u0422\u0420\u041E\u0412\u0418,", "value": 6, "slug": "bermudski-ostrovi" }, { "key": "\u0411\u0435\u0440\u043E\u043D\u043E\u0432\u043E", "value": 13, "slug": "beronovo" }, { "key": "\u0411\u0435\u0440\u0441\u0438\u043D", "value": 4, "slug": "bersin" }, { "key": "\u0411\u0435\u0441\u043B\u0435\u043D", "value": 5, "slug": "beslen" }, { "key": "\u0411\u0438\u0432\u043E\u043B\u0430\u0440\u0435", "value": 7, "slug": "bivolare" }, { "key": "\u0411\u0438\u0436\u043E\u0432\u0446\u0438", "value": 2, "slug": "bizhovci" }, { "key": "\u0411\u0438\u043A\u043E\u0432\u043E", "value": 9, "slug": "bikovo" }, { "key": "\u0411\u0438\u043B\u043A\u0430", "value": 14, "slug": "bilka" }, { "key": "\u0411\u0438\u043B\u043E", "value": 1, "slug": "bilo" }, { "key": "\u0411\u0438\u043D\u043A\u043E\u0441", "value": 6, "slug": "binkos" }, { "key": "\u0411\u0438\u0440\u043A\u043E\u0432\u0430", "value": 6, "slug": "birkova" }, { "key": "\u0411\u0438\u0441\u0435\u0440", "value": 26, "slug": "biser" }, { "key": "\u0411\u0438\u0441\u0435\u0440\u0446\u0438", "value": 29, "slug": "biserci" }, { "key": "\u0411\u0438\u0441\u0442\u0440\u0430", "value": 44, "slug": "bistra" }, { "key": "\u0411\u0438\u0441\u0442\u0440\u0435\u043D\u0446\u0438", "value": 10, "slug": "bistrenci" }, { "key": "\u0411\u0438\u0441\u0442\u0440\u0435\u0446", "value": 5, "slug": "bistrec" }, { "key": "\u0411\u0438\u0441\u0442\u0440\u0438\u043B\u0438\u0446\u0430", "value": 2, "slug": "bistrilica" }, { "key": "\u0411\u0438\u0441\u0442\u0440\u0438\u0446\u0430", "value": 423, "slug": "bistrica" }, { "key": "\u0411\u043B\u0430\u0433\u043E\u0432\u043E", "value": 19, "slug": "blagovo" }, { "key": "\u0411\u043B\u0430\u0433\u043E\u0435\u0432\u0433\u0440\u0430\u0434", "value": 10020, "slug": "blagoevgrad" }, { "key": "\u0411\u043B\u0430\u0433\u043E\u0435\u0432\u043E", "value": 16, "slug": "blagoevo" }, { "key": "\u0411\u043B\u0430\u0436\u0438\u0435\u0432\u043E", "value": 11, "slug": "blazhievo" }, { "key": "\u0411\u043B\u0430\u0442\u0435\u0446", "value": 20, "slug": "blatec" }, { "key": "\u0411\u043B\u0430\u0442\u043D\u0438\u0446\u0430", "value": 9, "slug": "blatnica" }, { "key": "\u0411\u043B\u0430\u0442\u043E", "value": 1, "slug": "blato" }, { "key": "\u0411\u043B\u0430\u0442\u0441\u043A\u0430", "value": 17, "slug": "blatska" }, { "key": "\u0411\u043B\u0435\u043D\u0438\u043A\u0430", "value": 8, "slug": "blenika" }, { "key": "\u0411\u043B\u0438\u0437\u043D\u0430\u043A", "value": 10, "slug": "bliznak" }, { "key": "\u0411\u043B\u0438\u0437\u043D\u0430\u0446\u0438", "value": 126, "slug": "bliznaci" }, { "key": "\u0411\u043B\u0438\u0437\u043D\u0435\u0446", "value": 2, "slug": "bliznec" }, { "key": "\u0411\u043B\u044A\u0441\u043A\u043E\u0432\u043E", "value": 39, "slug": "blskovo" }, { "key": "\u0411\u043B\u044A\u0441\u043A\u043E\u0432\u0446\u0438", "value": 6, "slug": "blskovci" }, { "key": "\u0411\u043E\u0431\u043E\u0432 \u0434\u043E\u043B", "value": 219, "slug": "bobov-dol" }, { "key": "\u0411\u043E\u0431\u043E\u0440\u0430\u0446\u0438", "value": 2, "slug": "boboraci" }, { "key": "\u0411\u043E\u0431\u043E\u0448\u0435\u0432\u043E", "value": 68, "slug": "boboshevo" }, { "key": "\u0411\u043E\u0432", "value": 29, "slug": "bov" }, { "key": "\u0411\u043E\u0433\u0430\u0442\u0438\u043D\u043E", "value": 3, "slug": "bogatino" }, { "key": "\u0411\u043E\u0433\u0430\u0442\u043E\u0432\u043E", "value": 11, "slug": "bogatovo" }, { "key": "\u0411\u043E\u0433\u0434\u0430\u043D", "value": 27, "slug": "bogdan" }, { "key": "\u0411\u043E\u0433\u0434\u0430\u043D\u0438\u0446\u0430", "value": 7, "slug": "bogdanica" }, { "key": "\u0411\u043E\u0433\u0434\u0430\u043D\u043B\u0438\u044F", "value": 4, "slug": "bogdanliya" }, { "key": "\u0411\u043E\u0433\u0434\u0430\u043D\u043E\u0432 \u0434\u043E\u043B", "value": 14, "slug": "bogdanov-dol" }, { "key": "\u0411\u043E\u0433\u0434\u0430\u043D\u043E\u0432\u043E", "value": 16, "slug": "bogdanovo" }, { "key": "\u0411\u043E\u0433\u0434\u0430\u043D\u0446\u0438", "value": 20, "slug": "bogdanci" }, { "key": "\u0411\u043E\u0433\u043E\u043B\u0438\u043D", "value": 16, "slug": "bogolin" }, { "key": "\u0411\u043E\u0433\u043E\u043C\u0438\u043B\u043E\u0432\u043E", "value": 101, "slug": "bogomilovo" }, { "key": "\u0411\u043E\u0433\u043E\u043C\u0438\u043B\u0446\u0438", "value": 15, "slug": "bogomilci" }, { "key": "\u0411\u043E\u0433\u043E\u0440\u043E\u0432\u043E", "value": 12, "slug": "bogorovo" }, { "key": "\u0411\u043E\u0433\u043E\u0441\u043B\u043E\u0432", "value": 22, "slug": "bogoslov" }, { "key": "\u0411\u043E\u0433\u0443\u0442\u0435\u0432\u043E", "value": 15, "slug": "bogutevo" }, { "key": "\u0411\u043E\u0433\u044C\u043E\u0432\u0446\u0438", "value": 12, "slug": "bogovci" }, { "key": "\u0411\u043E\u0434\u0435\u043D\u0435\u0446", "value": 9, "slug": "bodenec" }, { "key": "\u0411\u043E\u0434\u0440\u043E\u0432\u043E", "value": 3, "slug": "bodrovo" }, { "key": "\u0411\u043E\u0435\u0440\u0438\u0446\u0430", "value": 2, "slug": "boerica" }, { "key": "\u0411\u043E\u0436\u0430\u043D", "value": 11, "slug": "bozhan" }, { "key": "\u0411\u043E\u0436\u0435\u0432\u0446\u0438", "value": 4, "slug": "bozhevci" }, { "key": "\u0411\u043E\u0436\u0435\u043D\u0438\u0446\u0430", "value": 6, "slug": "bozhenica" }, { "key": "\u0411\u043E\u0436\u0435\u043D\u0446\u0438\u0442\u0435", "value": 8, "slug": "bozhencite" }, { "key": "\u0411\u043E\u0436\u0438\u0447\u0435\u043D", "value": 13, "slug": "bozhichen" }, { "key": "\u0411\u043E\u0436\u0443\u0440\u0435\u0446", "value": 54, "slug": "bozhurec" }, { "key": "\u0411\u043E\u0436\u0443\u0440\u0438\u0446\u0430", "value": 22, "slug": "bozhurica" }, { "key": "\u0411\u043E\u0436\u0443\u0440\u0438\u0449\u0435", "value": 478, "slug": "bozhurishche" }, { "key": "\u0411\u043E\u0436\u0443\u0440\u043A\u0430", "value": 4, "slug": "bozhurka" }, { "key": "\u0411\u043E\u0436\u0443\u0440\u043B\u0443\u043A", "value": 1, "slug": "bozhurluk" }, { "key": "\u0411\u043E\u0436\u0443\u0440\u043E\u0432\u043E", "value": 25, "slug": "bozhurovo" }, { "key": "\u0411\u043E\u0436\u0443\u0440\u0446\u0438", "value": 2, "slug": "bozhurci" }, { "key": "\u0411\u043E\u0437\u0430\u0434\u0436\u0438\u0438", "value": 1, "slug": "bozadzhii" }, { "key": "\u0411\u043E\u0437\u0432\u0435\u043B\u0438\u0439\u0441\u043A\u043E", "value": 36, "slug": "bozveliysko" }, { "key": "\u0411\u043E\u0437\u0434\u0443\u0433\u0430\u043D\u043E\u0432\u043E", "value": 14, "slug": "bozduganovo" }, { "key": "\u0411\u043E\u0438\u043B", "value": 30, "slug": "boil" }, { "key": "\u0411\u043E\u0439\u043A\u043E\u0432\u0435\u0446", "value": 9, "slug": "boykovec" }, { "key": "\u0411\u043E\u0439\u043A\u043E\u0432\u043E", "value": 13, "slug": "boykovo" }, { "key": "\u0411\u043E\u0439\u043D\u0438\u0446\u0430", "value": 4, "slug": "boynica" }, { "key": "\u0411\u043E\u0439\u043D\u043E", "value": 16, "slug": "boyno" }, { "key": "\u0411\u043E\u0439\u043D\u043E\u0432\u0446\u0438", "value": 2, "slug": "boynovci" }, { "key": "\u0411\u043E\u0439\u0447\u0438\u043D\u043E\u0432\u0446\u0438", "value": 45, "slug": "boychinovci" }, { "key": "\u0411\u043E\u043A\u0438\u043B\u043E\u0432\u0446\u0438", "value": 4, "slug": "bokilovci" }, { "key": "\u0411\u043E\u043B\u044F\u0440\u0438\u043D\u043E", "value": 5, "slug": "bolyarino" }, { "key": "\u0411\u043E\u043B\u044F\u0440\u043E\u0432\u043E", "value": 118, "slug": "bolyarovo" }, { "key": "\u0411\u043E\u043B\u044F\u0440\u0441\u043A\u043E", "value": 14, "slug": "bolyarsko" }, { "key": "\u0411\u043E\u043B\u044F\u0440\u0446\u0438", "value": 112, "slug": "bolyarci" }, { "key": "\u0411\u043E\u0440\u0435\u0446", "value": 16, "slug": "borec" }, { "key": "\u0411\u043E\u0440\u0438\u0435", "value": 7, "slug": "borie" }, { "key": "\u0411\u043E\u0440\u0438\u043A\u0430", "value": 8, "slug": "borika" }, { "key": "\u0411\u043E\u0440\u0438\u043A\u0438", "value": 8, "slug": "boriki" }, { "key": "\u0411\u043E\u0440\u0438\u043B\u043E\u0432\u0435\u0446", "value": 2, "slug": "borilovec" }, { "key": "\u0411\u043E\u0440\u0438\u043B\u043E\u0432\u043E", "value": 9, "slug": "borilovo" }, { "key": "\u0411\u043E\u0440\u0438\u043C\u0430", "value": 54, "slug": "borima" }, { "key": "\u0411\u043E\u0440\u0438\u043C\u0435\u0447\u043A\u043E\u0432\u043E", "value": 9, "slug": "borimechkovo" }, { "key": "\u0411\u043E\u0440\u0438\u043D\u043E", "value": 123, "slug": "borino" }, { "key": "\u0411\u043E\u0440\u0438\u043D\u043E\u0432\u043E", "value": 14, "slug": "borinovo" }, { "key": "\u0411\u043E\u0440\u0438\u043D\u0446\u0438", "value": 7, "slug": "borinci" }, { "key": "\u0411\u043E\u0440\u0438\u0441\u043B\u0430\u0432", "value": 4, "slug": "borislav" }, { "key": "\u0411\u043E\u0440\u0438\u0441\u043B\u0430\u0432\u0446\u0438", "value": 11, "slug": "borislavci" }, { "key": "\u0411\u043E\u0440\u0438\u0441\u043E\u0432\u043E", "value": 30, "slug": "borisovo" }, { "key": "\u0411\u043E\u0440\u043D\u0430\u0440\u0435\u0432\u043E", "value": 1, "slug": "bornarevo" }, { "key": "\u0411\u043E\u0440\u043E\u0432 \u0434\u043E\u043B", "value": 16, "slug": "borov-dol" }, { "key": "\u0411\u043E\u0440\u043E\u0432\u0430\u043D", "value": 53, "slug": "borovan" }, { "key": "\u0411\u043E\u0440\u043E\u0432\u0435\u0446", "value": 2, "slug": "borovec" }, { "key": "\u0411\u043E\u0440\u043E\u0432\u0438\u043D\u0430", "value": 10, "slug": "borovina" }, { "key": "\u0411\u043E\u0440\u043E\u0432\u0438\u0446\u0430", "value": 21, "slug": "borovica" }, { "key": "\u0411\u043E\u0440\u043E\u0432\u043E", "value": 164, "slug": "borovo" }, { "key": "\u0411\u043E\u0440\u043E\u0432\u0446\u0438", "value": 18, "slug": "borovci" }, { "key": "\u0411\u043E\u0440\u0443\u0449\u0438\u0446\u0430", "value": 5, "slug": "borushchica" }, { "key": "\u0411\u043E\u0440\u0446\u0438", "value": 20, "slug": "borci" }, { "key": "\u0411\u043E\u0440\u044F\u043D\u0430", "value": 16, "slug": "boryana" }, { "key": "\u0411\u043E\u0441\u0438\u043B\u043A\u043E\u0432\u043E", "value": 3, "slug": "bosilkovo" }, { "key": "\u0411\u043E\u0441\u0438\u043B\u043A\u043E\u0432\u0446\u0438", "value": 17, "slug": "bosilkovci" }, { "key": "\u0411\u043E\u0441\u043D\u0430", "value": 4, "slug": "bosna" }, { "key": "\u0411\u043E\u0441\u043D\u0435\u043A", "value": 4, "slug": "bosnek" }, { "key": "\u0411\u043E\u0441\u0442\u0430\u043D\u0446\u0438", "value": 1, "slug": "bostanci" }, { "key": "\u0411\u043E\u0441\u0442\u0438\u043D\u0430", "value": 9, "slug": "bostina" }, { "key": "\u0411\u043E\u0442\u0435\u0432\u0433\u0440\u0430\u0434", "value": 1740, "slug": "botevgrad" }, { "key": "\u0411\u043E\u0442\u0435\u0432\u043E", "value": 39, "slug": "botevo" }, { "key": "\u0411\u043E\u0442\u0440\u043E\u0432", "value": 4, "slug": "botrov" }, { "key": "\u0411\u043E\u0442\u0443\u043D\u044F", "value": 5, "slug": "botunya" }, { "key": "\u0411\u043E\u0445\u043E\u0442", "value": 15, "slug": "bohot" }, { "key": "\u0411\u043E\u0448\u0443\u043B\u044F", "value": 17, "slug": "boshulya" }, { "key": "\u0411\u043E\u044F\u0434\u0436\u0438\u043A", "value": 40, "slug": "boyadzhik" }, { "key": "\u0411\u043E\u044F\u043D", "value": 8, "slug": "boyan" }, { "key": "\u0411\u043E\u044F\u043D \u0411\u043E\u0442\u0435\u0432\u043E", "value": 30, "slug": "boyan-botevo" }, { "key": "\u0411\u043E\u044F\u043D\u0430", "value": 8, "slug": "boyana" }, { "key": "\u0411\u043E\u044F\u043D\u043E\u0432\u043E", "value": 49, "slug": "boyanovo" }, { "key": "\u0411\u043E\u044F\u043D\u0446\u0438", "value": 34, "slug": "boyanci" }, { "key": "\u0411\u0440\u0430\u0434\u0432\u0430\u0440\u0438", "value": 32, "slug": "bradvari" }, { "key": "\u0411\u0440\u0430\u043A\u043D\u0438\u0446\u0430", "value": 5, "slug": "braknica" }, { "key": "\u0411\u0440\u0430\u043D\u0438\u043F\u043E\u043B\u0435", "value": 230, "slug": "branipole" }, { "key": "\u0411\u0440\u0430\u043D\u0438\u0446\u0430", "value": 3, "slug": "branica" }, { "key": "\u0411\u0440\u0430\u043D\u0438\u0447\u0435\u0432\u043E", "value": 37, "slug": "branichevo" }, { "key": "\u0411\u0440\u0430\u043D\u0438\u0449\u0435", "value": 36, "slug": "branishche" }, { "key": "\u0411\u0440\u0430\u043D\u043A\u043E\u0432\u0446\u0438", "value": 1, "slug": "brankovci" }, { "key": "\u0411\u0440\u0430\u0442\u0430\u043D", "value": 2, "slug": "bratan" }, { "key": "\u0411\u0440\u0430\u0442\u0430\u043D\u0438\u0446\u0430", "value": 58, "slug": "bratanica" }, { "key": "\u0411\u0440\u0430\u0442\u043E\u0432\u043E", "value": 3, "slug": "bratovo" }, { "key": "\u0411\u0440\u0430\u0442\u0443\u0448\u043A\u043E\u0432\u043E", "value": 7, "slug": "bratushkovo" }, { "key": "\u0411\u0440\u0430\u0442\u044F \u0414\u0430\u0441\u043A\u0430\u043B\u043E\u0432\u0438", "value": 40, "slug": "bratya-daskalovi" }, { "key": "\u0411\u0440\u0430\u0442\u044F \u041A\u0443\u043D\u0447\u0435\u0432\u0438", "value": 17, "slug": "bratya-kunchevi" }, { "key": "\u0411\u0440\u0430\u0446\u0438\u0433\u043E\u0432\u043E", "value": 267, "slug": "bracigovo" }, { "key": "\u0411\u0440\u0435\u0433\u0430\u0440\u0435", "value": 18, "slug": "bregare" }, { "key": "\u0411\u0440\u0435\u0433\u043E\u0432\u043E", "value": 73, "slug": "bregovo" }, { "key": "\u0411\u0440\u0435\u0436\u0430\u043D\u0438", "value": 40, "slug": "brezhani" }, { "key": "\u0411\u0440\u0435\u0437\u0435", "value": 29, "slug": "breze" }, { "key": "\u0411\u0440\u0435\u0437\u0435\u043D", "value": 9, "slug": "brezen" }, { "key": "\u0411\u0440\u0435\u0437\u043D\u0438\u043A", "value": 216, "slug": "breznik" }, { "key": "\u0411\u0440\u0435\u0437\u043D\u0438\u0446\u0430", "value": 171, "slug": "breznica" }, { "key": "\u0411\u0440\u0435\u0437\u043E\u0432\u043E", "value": 125, "slug": "brezovo" }, { "key": "\u0411\u0440\u0435\u043D\u0438\u0446\u0430", "value": 48, "slug": "brenica" }, { "key": "\u0411\u0440\u0435\u0441\u0442", "value": 52, "slug": "brest" }, { "key": "\u0411\u0440\u0435\u0441\u0442\u0430\u043A", "value": 37, "slug": "brestak" }, { "key": "\u0411\u0440\u0435\u0441\u0442\u0435", "value": 17, "slug": "breste" }, { "key": "\u0411\u0440\u0435\u0441\u0442\u043D\u0438\u043A", "value": 147, "slug": "brestnik" }, { "key": "\u0411\u0440\u0435\u0441\u0442\u043D\u0438\u0446\u0430", "value": 23, "slug": "brestnica" }, { "key": "\u0411\u0440\u0435\u0441\u0442\u043E\u0432\u0435\u043D\u0435", "value": 77, "slug": "brestovene" }, { "key": "\u0411\u0440\u0435\u0441\u0442\u043E\u0432\u0435\u0446", "value": 39, "slug": "brestovec" }, { "key": "\u0411\u0440\u0435\u0441\u0442\u043E\u0432\u0438\u0446\u0430", "value": 166, "slug": "brestovica" }, { "key": "\u0411\u0440\u0435\u0441\u0442\u043E\u0432\u043E", "value": 9, "slug": "brestovo" }, { "key": "\u0411\u0440\u043E\u0434", "value": 46, "slug": "brod" }, { "key": "\u0411\u0440\u043E\u0434\u0438\u043B\u043E\u0432\u043E", "value": 14, "slug": "brodilovo" }, { "key": "\u0411\u0440\u043E\u0448", "value": 12, "slug": "brosh" }, { "key": "\u0411\u0440\u0443\u0441\u0430\u0440\u0446\u0438", "value": 33, "slug": "brusarci" }, { "key": "\u0411\u0440\u0443\u0441\u0435\u043D", "value": 19, "slug": "brusen" }, { "key": "\u0411\u0440\u0443\u0441\u043D\u0438\u043A", "value": 1, "slug": "brusnik" }, { "key": "\u0411\u0440\u044A\u043D\u0435\u0446\u0438\u0442\u0435", "value": 1, "slug": "brnecite" }, { "key": "\u0411\u0440\u044A\u0448\u043B\u0435\u043D", "value": 28, "slug": "brshlen" }, { "key": "\u0411\u0440\u044A\u0448\u043B\u044F\u043D", "value": 5, "slug": "brshlyan" }, { "key": "\u0411\u0440\u044A\u0448\u043B\u044F\u043D\u0438\u0446\u0430", "value": 8, "slug": "brshlyanica" }, { "key": "\u0411\u0440\u044A\u0449\u0435\u043D", "value": 19, "slug": "brshchen" }, { "key": "\u0411\u0440\u044F\u0433\u043E\u0432\u0438\u0446\u0430", "value": 8, "slug": "bryagovica" }, { "key": "\u0411\u0440\u044F\u0433\u043E\u0432\u043E", "value": 28, "slug": "bryagovo" }, { "key": "\u0411\u0440\u044F\u0441\u0442", "value": 5, "slug": "bryast" }, { "key": "\u0411\u0440\u044F\u0441\u0442\u043E\u0432\u0435\u0446", "value": 31, "slug": "bryastovec" }, { "key": "\u0411\u0440\u044F\u0441\u0442\u043E\u0432\u043E", "value": 26, "slug": "bryastovo" }, { "key": "\u0411\u0443\u0437\u043E\u0432\u0433\u0440\u0430\u0434", "value": 84, "slug": "buzovgrad" }, { "key": "\u0411\u0443\u0437\u044F\u043A\u043E\u0432\u0446\u0438", "value": 2, "slug": "buzyakovci" }, { "key": "\u0411\u0443\u0439\u043D\u043E\u0432\u0438\u0446\u0430", "value": 3, "slug": "buynovica" }, { "key": "\u0411\u0443\u0439\u043D\u043E\u0432\u043E", "value": 43, "slug": "buynovo" }, { "key": "\u0411\u0443\u0439\u043D\u043E\u0432\u0446\u0438", "value": 3, "slug": "buynovci" }, { "key": "\u0411\u0443\u043A", "value": 6, "slug": "buk" }, { "key": "\u0411\u0443\u043A\u0430\u0442\u0430", "value": 6, "slug": "bukata" }, { "key": "\u0411\u0443\u043A\u043E\u0432\u0430 \u043F\u043E\u043B\u044F\u043D\u0430", "value": 7, "slug": "bukova-polyana" }, { "key": "\u0411\u0443\u043A\u043E\u0432\u0435\u0446", "value": 33, "slug": "bukovec" }, { "key": "\u0411\u0443\u043A\u043E\u0432\u043B\u044A\u043A", "value": 104, "slug": "bukovlk" }, { "key": "\u0411\u0443\u043A\u043E\u0432\u043E", "value": 56, "slug": "bukovo" }, { "key": "\u0411\u0443\u043A\u043E\u0440\u043E\u0432\u0446\u0438", "value": 1, "slug": "bukorovci" }, { "key": "\u0411\u0443\u043B\u0430\u0438\u0440", "value": 2, "slug": "bulair" }, { "key": "\u0411\u0443\u043D\u043E\u0432\u043E", "value": 11, "slug": "bunovo" }, { "key": "\u0411\u0443\u043D\u0446\u0435\u0432\u043E", "value": 11, "slug": "buncevo" }, { "key": "\u0411\u0443\u0440\u0433\u0430\u0441", "value": 28269, "slug": "burgas" }, { "key": "\u0411\u0443\u0440\u0435\u0432\u043E", "value": 1, "slug": "burevo" }, { "key": "\u0411\u0443\u0440\u044F", "value": 13, "slug": "burya" }, { "key": "\u0411\u0443\u0441\u0438\u043D\u0446\u0438", "value": 1, "slug": "businci" }, { "key": "\u0411\u0443\u0441\u043C\u0430\u043D\u0446\u0438", "value": 100, "slug": "busmanci" }, { "key": "\u0411\u0443\u0442\u0430\u043D", "value": 104, "slug": "butan" }, { "key": "\u0411\u0443\u0442\u043E\u0432\u043E", "value": 29, "slug": "butovo" }, { "key": "\u0411\u0443\u0445\u043E\u0432\u043E", "value": 90, "slug": "buhovo" }, { "key": "\u0411\u0443\u0445\u043E\u0432\u0446\u0438", "value": 13, "slug": "buhovci" }, { "key": "\u0411\u0443\u0447\u0438\u043D \u043F\u0440\u043E\u0445\u043E\u0434", "value": 9, "slug": "buchin-prohod" }, { "key": "\u0411\u0443\u0447\u0438\u043D\u043E", "value": 1, "slug": "buchino" }, { "key": "\u0411\u044A\u0434\u0435\u0449\u0435", "value": 6, "slug": "bdeshche" }, { "key": "\u0411\u044A\u0437\u043E\u0432\u0435\u0446", "value": 28, "slug": "bzovec" }, { "key": "\u0411\u044A\u0437\u044A\u043D", "value": 60, "slug": "bzn" }, { "key": "\u0411\u044A\u043B\u0433\u0430\u0440\u0430\u043D\u043E\u0432\u043E", "value": 8, "slug": "blgaranovo" }, { "key": "\u0411\u044A\u043B\u0433\u0430\u0440\u0435\u0432\u043E", "value": 71, "slug": "blgarevo" }, { "key": "\u0411\u044A\u043B\u0433\u0430\u0440\u0435\u043D\u0435", "value": 43, "slug": "blgarene" }, { "key": "\u0411\u044A\u043B\u0433\u0430\u0440\u0438", "value": 8, "slug": "blgari" }, { "key": "\u0411\u044A\u043B\u0433\u0430\u0440\u0438\u043D", "value": 11, "slug": "blgarin" }, { "key": "\u0411\u044A\u043B\u0433\u0430\u0440\u043A\u0430", "value": 4, "slug": "blgarka" }, { "key": "\u0411\u044A\u043B\u0433\u0430\u0440\u043E\u0432\u043E", "value": 101, "slug": "blgarovo" }, { "key": "\u0411\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0430 \u043F\u043E\u043B\u044F\u043D\u0430", "value": 3, "slug": "blgarska-polyana" }, { "key": "\u0411\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438 \u0438\u0437\u0432\u043E\u0440", "value": 67, "slug": "blgarski-izvor" }, { "key": "\u0411\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u043E \u0421\u043B\u0438\u0432\u043E\u0432\u043E", "value": 46, "slug": "blgarsko-slivovo" }, { "key": "\u0411\u044A\u043B\u0433\u0430\u0440\u0447\u0435\u0432\u043E", "value": 20, "slug": "blgarchevo" }, { "key": "\u0411\u044A\u0440\u0434\u0430\u0440\u0435\u0432\u043E", "value": 1, "slug": "brdarevo" }, { "key": "\u0411\u044A\u0440\u0434\u0430\u0440\u0441\u043A\u0438 \u0433\u0435\u0440\u0430\u043D", "value": 15, "slug": "brdarski-geran" }, { "key": "\u0411\u044A\u0440\u0434\u043E\u043A\u0432\u0430", "value": 9, "slug": "brdokva" }, { "key": "\u0411\u044A\u0440\u0437\u0430 \u0440\u0435\u043A\u0430", "value": 1, "slug": "brza-reka" }, { "key": "\u0411\u044A\u0440\u0437\u0438\u043D\u0430", "value": 7, "slug": "brzina" }, { "key": "\u0411\u044A\u0440\u0437\u0438\u0446\u0430", "value": 10, "slug": "brzica" }, { "key": "\u0411\u044A\u0440\u0437\u0438\u044F", "value": 38, "slug": "brziya" }, { "key": "\u0411\u044A\u0440\u043A\u0430\u0447", "value": 28, "slug": "brkach" }, { "key": "\u0411\u044A\u0440\u043A\u0430\u0447\u0435\u0432\u043E", "value": 22, "slug": "brkachevo" }, { "key": "\u0411\u044A\u0440\u043B\u043E\u0436\u043D\u0438\u0446\u0430", "value": 12, "slug": "brlozhnica" }, { "key": "\u0411\u044A\u0440\u0447\u0435\u0432\u043E", "value": 4, "slug": "brchevo" }, { "key": "\u0411\u044A\u0442\u0430", "value": 28, "slug": "bta" }, { "key": "\u0411\u044F\u0433\u0430", "value": 41, "slug": "byaga" }, { "key": "\u0411\u044F\u043B \u0431\u0440\u044F\u0433", "value": 14, "slug": "byal-bryag" }, { "key": "\u0411\u044F\u043B \u0438\u0437\u0432\u043E\u0440", "value": 91, "slug": "byal-izvor" }, { "key": "\u0411\u044F\u043B \u043A\u043B\u0430\u0434\u0435\u043D\u0435\u0446", "value": 9, "slug": "byal-kladenec" }, { "key": "\u0411\u044F\u043B\u0430", "value": 1016, "slug": "byala" }, { "key": "\u0411\u044F\u043B\u0430 \u0432\u043E\u0434\u0430", "value": 15, "slug": "byala-voda" }, { "key": "\u0411\u044F\u043B\u0430 \u043F\u0430\u043B\u0430\u043D\u043A\u0430", "value": 17, "slug": "byala-palanka" }, { "key": "\u0411\u044F\u043B\u0430 \u043F\u043E\u043B\u044F\u043D\u0430", "value": 6, "slug": "byala-polyana" }, { "key": "\u0411\u044F\u043B\u0430 \u0440\u0435\u043A\u0430", "value": 82, "slug": "byala-reka" }, { "key": "\u0411\u044F\u043B\u0430 \u0421\u043B\u0430\u0442\u0438\u043D\u0430", "value": 739, "slug": "byala-slatina" }, { "key": "\u0411\u044F\u043B\u0430 \u0447\u0435\u0440\u043A\u0432\u0430", "value": 88, "slug": "byala-cherkva" }, { "key": "\u0411\u044F\u043B\u043E \u043F\u043E\u043B\u0435", "value": 6, "slug": "byalo-pole" }, { "key": "\u0412\u0430\u0437\u043E\u0432\u043E", "value": 26, "slug": "vazovo" }, { "key": "\u0412\u0430\u043A\u0430\u0440\u0435\u043B", "value": 119, "slug": "vakarel" }, { "key": "\u0412\u0430\u043A\u043B\u0438\u043D\u043E", "value": 6, "slug": "vaklino" }, { "key": "\u0412\u0430\u043A\u043B\u0438\u043D\u043E\u0432\u043E", "value": 16, "slug": "vaklinovo" }, { "key": "\u0412\u0430\u043A\u0441\u0435\u0432\u043E", "value": 12, "slug": "vaksevo" }, { "key": "\u0412\u0430\u043B\u0435\u0432\u0446\u0438", "value": 3, "slug": "valevci" }, { "key": "\u0412\u0430\u0440\u0430\u043D\u0430", "value": 1, "slug": "varana" }, { "key": "\u0412\u0430\u0440\u0432\u0430\u0440\u0430", "value": 117, "slug": "varvara" }, { "key": "\u0412\u0430\u0440\u0434\u0438\u043C", "value": 32, "slug": "vardim" }, { "key": "\u0412\u0430\u0440\u0434\u0443\u043D", "value": 51, "slug": "vardun" }, { "key": "\u0412\u0430\u0440\u043D\u0430", "value": 48410, "slug": "varna" }, { "key": "\u0412\u0430\u0440\u043D\u0435\u043D\u0446\u0438", "value": 10, "slug": "varnenci" }, { "key": "\u0412\u0430\u0441\u0438\u043B \u0414\u0440\u0443\u043C\u0435\u0432", "value": 11, "slug": "vasil-drumev" }, { "key": "\u0412\u0430\u0441\u0438\u043B \u041B\u0435\u0432\u0441\u043A\u0438", "value": 70, "slug": "vasil-levski" }, { "key": "\u0412\u0430\u0441\u0438\u043B\u0435\u0432\u043E", "value": 20, "slug": "vasilevo" }, { "key": "\u0412\u0430\u0441\u0438\u043B\u043E\u0432\u0446\u0438", "value": 59, "slug": "vasilovci" }, { "key": "\u0412\u0430\u0441\u0438\u043B\u044C\u043E\u0432\u043E", "value": 7, "slug": "vasilovo" }, { "key": "\u0412\u0430\u0441\u043A\u043E\u0432\u043E", "value": 6, "slug": "vaskovo" }, { "key": "\u0412\u0435\u0434\u0440\u0430\u0440\u0435", "value": 50, "slug": "vedrare" }, { "key": "\u0412\u0435\u0434\u0440\u0438\u043D\u0430", "value": 22, "slug": "vedrina" }, { "key": "\u0412\u0435\u0434\u0440\u043E\u0432\u043E", "value": 6, "slug": "vedrovo" }, { "key": "\u0412\u0435\u0437\u0435\u043D\u043A\u043E\u0432\u043E", "value": 13, "slug": "vezenkovo" }, { "key": "\u0412\u0435\u043A\u0438\u043B\u0441\u043A\u0438", "value": 2, "slug": "vekilski" }, { "key": "\u0412\u0435\u043B\u0435\u0448\u0430\u043D\u0438", "value": 3, "slug": "veleshani" }, { "key": "\u0412\u0435\u043B\u0438\u043A\u0430", "value": 10, "slug": "velika" }, { "key": "\u0412\u0435\u043B\u0438\u043A\u0430\u043D", "value": 3, "slug": "velikan" }, { "key": "\u0412\u0435\u043B\u0438\u043A\u0434\u0435\u043D\u0447\u0435", "value": 5, "slug": "velikdenche" }, { "key": "\u0412\u0435\u043B\u0438\u043A\u0438 \u041F\u0440\u0435\u0441\u043B\u0430\u0432", "value": 509, "slug": "veliki-preslav" }, { "key": "\u0412\u0435\u043B\u0438\u043A\u043E \u0422\u044A\u0440\u043D\u043E\u0432\u043E", "value": 7996, "slug": "veliko-trnovo" }, { "key": "\u0412\u0435\u043B\u0438\u043A\u043E\u0432\u043E", "value": 2, "slug": "velikovo" }, { "key": "\u0412\u0435\u043B\u0438\u043A\u043E\u0432\u0446\u0438", "value": 2, "slug": "velikovci" }, { "key": "\u0412\u0435\u043B\u0438\u043D\u0433\u0440\u0430\u0434", "value": 1816, "slug": "velingrad" }, { "key": "\u0412\u0435\u043B\u0438\u043D\u043E", "value": 14, "slug": "velino" }, { "key": "\u0412\u0435\u043B\u0438\u0441\u043B\u0430\u0432", "value": 10, "slug": "velislav" }, { "key": "\u0412\u0435\u043B\u0438\u0447\u043A\u0430", "value": 4, "slug": "velichka" }, { "key": "\u0412\u0435\u043B\u0438\u0447\u043A\u043E\u0432\u043E", "value": 45, "slug": "velichkovo" }, { "key": "\u0412\u0435\u043B\u043A\u043E\u0432\u0446\u0438", "value": 14, "slug": "velkovci" }, { "key": "\u0412\u0435\u043B\u0447\u0435\u0432\u043E", "value": 16, "slug": "velchevo" }, { "key": "\u0412\u0435\u043D\u0435\u043B\u0438\u043D", "value": 41, "slug": "venelin" }, { "key": "\u0412\u0435\u043D\u0435\u0446", "value": 62, "slug": "venec" }, { "key": "\u0412\u0435\u043D\u043A\u043E\u0432\u0435\u0446", "value": 2, "slug": "venkovec" }, { "key": "\u0412\u0435\u043D\u0447\u0430\u043D", "value": 2, "slug": "venchan" }, { "key": "\u0412\u0435\u0440\u0435\u043D", "value": 8, "slug": "veren" }, { "key": "\u0412\u0435\u0440\u0435\u043D\u0446\u0438", "value": 10, "slug": "verenci" }, { "key": "\u0412\u0435\u0440\u0438\u043D\u0441\u043A\u043E", "value": 16, "slug": "verinsko" }, { "key": "\u0412\u0435\u0440\u0441\u043A\u043E", "value": 3, "slug": "versko" }, { "key": "\u0412\u0435\u0441\u0435\u043B\u0435\u0446", "value": 20, "slug": "veselec" }, { "key": "\u0412\u0435\u0441\u0435\u043B\u0438\u0435", "value": 34, "slug": "veselie" }, { "key": "\u0412\u0435\u0441\u0435\u043B\u0438\u043D\u0430", "value": 38, "slug": "veselina" }, { "key": "\u0412\u0435\u0441\u0435\u043B\u0438\u043D\u043E\u0432\u043E", "value": 67, "slug": "veselinovo" }, { "key": "\u0412\u0435\u0441\u043B\u0435\u0446", "value": 6, "slug": "veslec" }, { "key": "\u0412\u0435\u0442\u043E\u0432\u043E", "value": 231, "slug": "vetovo" }, { "key": "\u0412\u0435\u0442\u0440\u0435\u043D", "value": 229, "slug": "vetren" }, { "key": "\u0412\u0435\u0442\u0440\u0435\u043D \u0434\u043E\u043B", "value": 50, "slug": "vetren-dol" }, { "key": "\u0412\u0435\u0442\u0440\u0438\u043D\u043E", "value": 109, "slug": "vetrino" }, { "key": "\u0412\u0435\u0442\u0440\u0438\u043D\u0446\u0438", "value": 16, "slug": "vetrinci" }, { "key": "\u0412\u0435\u0442\u0440\u0438\u0449\u0435", "value": 9, "slug": "vetrishche" }, { "key": "\u0412\u0435\u0445\u0442\u043E\u0432\u043E", "value": 11, "slug": "vehtovo" }, { "key": "\u0412\u0435\u0449\u0438\u0446\u0430", "value": 4, "slug": "veshchica" }, { "key": "\u0412\u0438\u0434\u0438\u043D", "value": 3680, "slug": "vidin" }, { "key": "\u0412\u0438\u0434\u043B\u0438\u0446\u0430", "value": 3, "slug": "vidlica" }, { "key": "\u0412\u0438\u0434\u043D\u043E", "value": 16, "slug": "vidno" }, { "key": "\u0412\u0438\u0434\u0440\u0430\u0440", "value": 1, "slug": "vidrar" }, { "key": "\u0412\u0438\u0434\u0440\u0430\u0440\u0435", "value": 10, "slug": "vidrare" }, { "key": "\u0412\u0438\u0435\u0432\u043E", "value": 12, "slug": "vievo" }, { "key": "\u0412\u0438\u0437\u0438\u0446\u0430", "value": 1, "slug": "vizica" }, { "key": "\u0412\u0438\u043D\u0430\u0440\u043E\u0432\u043E", "value": 25, "slug": "vinarovo" }, { "key": "\u0412\u0438\u043D\u0430\u0440\u0441\u043A\u043E", "value": 20, "slug": "vinarsko" }, { "key": "\u0412\u0438\u043D\u0435\u0432\u043E", "value": 5, "slug": "vinevo" }, { "key": "\u0412\u0438\u043D\u0438\u0446\u0430", "value": 32, "slug": "vinica" }, { "key": "\u0412\u0438\u043D\u0438\u0449\u0435", "value": 2, "slug": "vinishche" }, { "key": "\u0412\u0438\u043D\u043E\u0433\u0440\u0430\u0434", "value": 6, "slug": "vinograd" }, { "key": "\u0412\u0438\u043D\u043E\u0433\u0440\u0430\u0434\u0435\u0446", "value": 33, "slug": "vinogradec" }, { "key": "\u0412\u0438\u043D\u043E\u0433\u0440\u0430\u0434\u0438", "value": 5, "slug": "vinogradi" }, { "key": "\u0412\u0438\u0440\u043E\u0432\u0435", "value": 7, "slug": "virove" }, { "key": "\u0412\u0438\u0440\u043E\u0432\u0441\u043A\u043E", "value": 7, "slug": "virovsko" }, { "key": "\u0412\u0438\u0441\u043A\u044F\u0440", "value": 4, "slug": "viskyar" }, { "key": "\u0412\u0438\u0441\u043E\u043A", "value": 4, "slug": "visok" }, { "key": "\u0412\u0438\u0441\u043E\u043A\u0430 \u043C\u043E\u0433\u0438\u043B\u0430", "value": 2, "slug": "visoka-mogila" }, { "key": "\u0412\u0438\u0441\u043E\u043A\u0430 \u043F\u043E\u043B\u044F\u043D\u0430", "value": 13, "slug": "visoka-polyana" }, { "key": "\u0412\u0438\u0441\u043E\u043A\u043E\u0432\u0446\u0438", "value": 1, "slug": "visokovci" }, { "key": "\u0412\u0438\u0442\u0430\u043D\u043E\u0432\u0446\u0438", "value": 9, "slug": "vitanovci" }, { "key": "\u0412\u0438\u0442\u0438\u043D\u0430", "value": 10, "slug": "vitina" }, { "key": "\u0412\u0438\u0447\u043E\u0432\u043E", "value": 5, "slug": "vichovo" }, { "key": "\u0412\u0438\u0448\u0430\u043D", "value": 1, "slug": "vishan" }, { "key": "\u0412\u0438\u0448\u043D\u0430", "value": 4, "slug": "vishna" }, { "key": "\u0412\u0438\u0448\u043D\u0435\u0432\u043E", "value": 4, "slug": "vishnevo" }, { "key": "\u0412\u0438\u0448\u043E\u0432\u0433\u0440\u0430\u0434", "value": 23, "slug": "vishovgrad" }, { "key": "\u0412\u043B\u0430\u0434\u0430\u044F", "value": 172, "slug": "vladaya" }, { "key": "\u0412\u043B\u0430\u0434\u0438\u043C\u0438\u0440", "value": 2, "slug": "vladimir" }, { "key": "\u0412\u043B\u0430\u0434\u0438\u043C\u0438\u0440\u043E\u0432\u043E", "value": 37, "slug": "vladimirovo" }, { "key": "\u0412\u043B\u0430\u0434\u0438\u043C\u0438\u0440\u043E\u0432\u0446\u0438", "value": 31, "slug": "vladimirovci" }, { "key": "\u0412\u043B\u0430\u0434\u0438\u043D\u044F", "value": 13, "slug": "vladinya" }, { "key": "\u0412\u043B\u0430\u0434\u0438\u0441\u043B\u0430\u0432", "value": 4, "slug": "vladislav" }, { "key": "\u0412\u043B\u0430\u0434\u0438\u0441\u043B\u0430\u0432\u0446\u0438", "value": 1, "slug": "vladislavci" }, { "key": "\u0412\u043B\u0430\u0434\u043E \u0422\u0440\u0438\u0447\u043A\u043E\u0432", "value": 90, "slug": "vlado-trichkov" }, { "key": "\u0412\u043B\u0430\u0441\u0430\u0442\u0438\u0446\u0430", "value": 10, "slug": "vlasatica" }, { "key": "\u0412\u043B\u0430\u0445\u043E\u0432\u043E", "value": 13, "slug": "vlahovo" }, { "key": "\u0412\u043E\u0434\u0430\u0447", "value": 8, "slug": "vodach" }, { "key": "\u0412\u043E\u0434\u0435\u043D", "value": 41, "slug": "voden" }, { "key": "\u0412\u043E\u0434\u0435\u043D\u0438\u0447\u0430\u043D\u0435", "value": 8, "slug": "vodenichane" }, { "key": "\u0412\u043E\u0434\u0435\u043D\u0438\u0447\u0430\u0440\u0441\u043A\u043E", "value": 4, "slug": "vodenicharsko" }, { "key": "\u0412\u043E\u0434\u0438\u0446\u0430", "value": 35, "slug": "vodica" }, { "key": "\u0412\u043E\u0434\u043D\u0430", "value": 1, "slug": "vodna" }, { "key": "\u0412\u043E\u0434\u043D\u0438 \u043F\u0430\u0434", "value": 7, "slug": "vodni-pad" }, { "key": "\u0412\u043E\u0434\u043D\u043E", "value": 17, "slug": "vodno" }, { "key": "\u0412\u043E\u0434\u043D\u044F\u043D\u0446\u0438", "value": 12, "slug": "vodnyanci" }, { "key": "\u0412\u043E\u0434\u043E\u043B\u0435\u0439", "value": 14, "slug": "vodoley" }, { "key": "\u0412\u043E\u0436\u0434\u043E\u0432\u043E", "value": 2, "slug": "vozhdovo" }, { "key": "\u0412\u043E\u0439\u0432\u043E\u0434\u0430", "value": 15, "slug": "voyvoda" }, { "key": "\u0412\u043E\u0439\u0432\u043E\u0434\u0435\u043D\u0435\u0446", "value": 1, "slug": "voyvodenec" }, { "key": "\u0412\u043E\u0439\u0432\u043E\u0434\u0438\u043D\u043E", "value": 21, "slug": "voyvodino" }, { "key": "\u0412\u043E\u0439\u0432\u043E\u0434\u0438\u043D\u043E\u0432\u043E", "value": 210, "slug": "voyvodinovo" }, { "key": "\u0412\u043E\u0439\u0432\u043E\u0434\u043E\u0432\u043E", "value": 38, "slug": "voyvodovo" }, { "key": "\u0412\u043E\u0439\u043A\u043E\u0432\u0430 \u043B\u044A\u043A\u0430", "value": 18, "slug": "voykova-lka" }, { "key": "\u0412\u043E\u0439\u043D\u0435\u0433\u043E\u0432\u0446\u0438", "value": 34, "slug": "voynegovci" }, { "key": "\u0412\u043E\u0439\u043D\u0435\u0436\u0430", "value": 1, "slug": "voynezha" }, { "key": "\u0412\u043E\u0439\u043D\u0438\u043A\u0430", "value": 15, "slug": "voynika" }, { "key": "\u0412\u043E\u0439\u043D\u0438\u0446\u0430", "value": 2, "slug": "voynica" }, { "key": "\u0412\u043E\u0439\u043D\u043E\u0432\u043E", "value": 9, "slug": "voynovo" }, { "key": "\u0412\u043E\u0439\u043D\u044F\u0433\u043E\u0432\u043E", "value": 32, "slug": "voynyagovo" }, { "key": "\u0412\u043E\u0439\u0441\u0438\u043B", "value": 48, "slug": "voysil" }, { "key": "\u0412\u043E\u043A\u0438\u043B", "value": 25, "slug": "vokil" }, { "key": "\u0412\u043E\u043B\u043E\u0432\u043E", "value": 6, "slug": "volovo" }, { "key": "\u0412\u043E\u043B\u0443\u044F\u043A", "value": 192, "slug": "voluyak" }, { "key": "\u0412\u043E\u043D\u0435\u0449\u0430 \u0432\u043E\u0434\u0430", "value": 20, "slug": "voneshcha-voda" }, { "key": "\u0412\u0440\u0430\u0431\u0435\u0432\u043E", "value": 22, "slug": "vrabevo" }, { "key": "\u0412\u0440\u0430\u0431\u0446\u0438\u0442\u0435", "value": 1, "slug": "vrabcite" }, { "key": "\u0412\u0440\u0430\u043D\u0435\u043D\u0446\u0438", "value": 1, "slug": "vranenci" }, { "key": "\u0412\u0440\u0430\u043D\u0438 \u043A\u043E\u043D", "value": 12, "slug": "vrani-kon" }, { "key": "\u0412\u0440\u0430\u043D\u0438\u043B\u043E\u0432\u0446\u0438", "value": 13, "slug": "vranilovci" }, { "key": "\u0412\u0440\u0430\u043D\u0438\u043D\u043E", "value": 18, "slug": "vranino" }, { "key": "\u0412\u0440\u0430\u043D\u0441\u043A\u043E", "value": 27, "slug": "vransko" }, { "key": "\u0412\u0440\u0430\u043D\u044F", "value": 4, "slug": "vranya" }, { "key": "\u0412\u0440\u0430\u043D\u044F\u043A", "value": 10, "slug": "vranyak" }, { "key": "\u0412\u0440\u0430\u0442\u0430\u0440\u0438\u0442\u0435", "value": 2, "slug": "vratarite" }, { "key": "\u0412\u0440\u0430\u0442\u0438\u0446\u0430", "value": 8, "slug": "vratica" }, { "key": "\u0412\u0440\u0430\u0442\u0446\u0430", "value": 3, "slug": "vratca" }, { "key": "\u0412\u0440\u0430\u0446\u0430", "value": 5700, "slug": "vraca" }, { "key": "\u0412\u0440\u0430\u0447\u0435\u0448", "value": 141, "slug": "vrachesh" }, { "key": "\u0412\u0440\u0435\u043B\u043E", "value": 1, "slug": "vrelo" }, { "key": "\u0412\u0440\u0435\u0441\u043E\u0432\u043E", "value": 36, "slug": "vresovo" }, { "key": "\u0412\u0440\u044A\u0432", "value": 22, "slug": "vrv" }, { "key": "\u0412\u0441\u0435\u043C\u0438\u0440\u0446\u0438", "value": 2, "slug": "vsemirci" }, { "key": "\u0412\u044A\u0431\u0435\u043B", "value": 25, "slug": "vbel" }, { "key": "\u0412\u044A\u0433\u043B\u0430\u0440\u043E\u0432\u043E", "value": 20, "slug": "vglarovo" }, { "key": "\u0412\u044A\u0433\u043B\u0435\u0432\u0446\u0438", "value": 6, "slug": "vglevci" }, { "key": "\u0412\u044A\u0433\u043B\u0435\u043D", "value": 17, "slug": "vglen" }, { "key": "\u0412\u044A\u0437\u0435\u043B", "value": 2, "slug": "vzel" }, { "key": "\u0412\u044A\u043B\u043A\u0430\u043D", "value": 19, "slug": "vlkan" }, { "key": "\u0412\u044A\u043B\u043A\u043E\u0432\u0438\u0447", "value": 6, "slug": "vlkovich" }, { "key": "\u0412\u044A\u043B\u043A\u043E\u0432\u043E", "value": 20, "slug": "vlkovo" }, { "key": "\u0412\u044A\u043B\u043A\u043E\u0441\u0435\u043B", "value": 78, "slug": "vlkosel" }, { "key": "\u0412\u044A\u043B\u043D\u0430\u0440\u0438", "value": 38, "slug": "vlnari" }, { "key": "\u0412\u044A\u043B\u0447\u0430 \u043F\u043E\u043B\u044F\u043D\u0430", "value": 8, "slug": "vlcha-polyana" }, { "key": "\u0412\u044A\u043B\u0447\u0430\u043D", "value": 2, "slug": "vlchan" }, { "key": "\u0412\u044A\u043B\u0447\u0430\u043D \u0434\u043E\u043B", "value": 5, "slug": "vlchan-dol" }, { "key": "\u0412\u044A\u043B\u0447\u0430\u043D\u043E\u0432\u043E", "value": 6, "slug": "vlchanovo" }, { "key": "\u0412\u044A\u043B\u0447\u0435 \u043F\u043E\u043B\u0435", "value": 5, "slug": "vlche-pole" }, { "key": "\u0412\u044A\u043B\u0447\u0435\u0434\u0440\u044A\u043C", "value": 99, "slug": "vlchedrm" }, { "key": "\u0412\u044A\u043B\u0447\u0435\u043A", "value": 5, "slug": "vlchek" }, { "key": "\u0412\u044A\u043B\u0447\u0438 \u0434\u043E\u043B", "value": 176, "slug": "vlchi-dol" }, { "key": "\u0412\u044A\u043B\u0447\u0438\u043D", "value": 6, "slug": "vlchin" }, { "key": "\u0412\u044A\u043B\u0447\u0438\u0442\u0440\u044A\u043D", "value": 32, "slug": "vlchitrn" }, { "key": "\u0412\u044A\u0440\u0431\u0430", "value": 1, "slug": "vrba" }, { "key": "\u0412\u044A\u0440\u0431\u0430\u043A", "value": 5, "slug": "vrbak" }, { "key": "\u0412\u044A\u0440\u0431\u0435\u043D", "value": 20, "slug": "vrben" }, { "key": "\u0412\u044A\u0440\u0431\u0435\u0448\u043D\u0438\u0446\u0430", "value": 7, "slug": "vrbeshnica" }, { "key": "\u0412\u044A\u0440\u0431\u0438\u043D\u0430", "value": 32, "slug": "vrbina" }, { "key": "\u0412\u044A\u0440\u0431\u0438\u043D\u043E", "value": 4, "slug": "vrbino" }, { "key": "\u0412\u044A\u0440\u0431\u0438\u0446\u0430", "value": 181, "slug": "vrbica" }, { "key": "\u0412\u044A\u0440\u0431\u043D\u0438\u0446\u0430", "value": 2, "slug": "vrbnica" }, { "key": "\u0412\u044A\u0440\u0431\u043E\u0432\u043A\u0430", "value": 31, "slug": "vrbovka" }, { "key": "\u0412\u044A\u0440\u0431\u043E\u0432\u043E", "value": 16, "slug": "vrbovo" }, { "key": "\u0412\u044A\u0440\u0431\u043E\u0432\u0447\u0435\u0446", "value": 2, "slug": "vrbovchec" }, { "key": "\u0412\u044A\u0440\u0431\u044F\u043D\u0435", "value": 10, "slug": "vrbyane" }, { "key": "\u0412\u044A\u0440\u0433\u043E\u0432 \u0434\u043E\u043B", "value": 1, "slug": "vrgov-dol" }, { "key": "\u0412\u044A\u0440\u0437\u0438\u043B\u043A\u043E\u0432\u0446\u0438", "value": 1, "slug": "vrzilkovci" }, { "key": "\u0412\u044A\u0440\u0437\u0443\u043B\u0438\u0446\u0430", "value": 5, "slug": "vrzulica" }, { "key": "\u0412\u044A\u0440\u043B\u0438 \u0434\u043E\u043B", "value": 1, "slug": "vrli-dol" }, { "key": "\u0412\u044A\u0440\u043B\u0438\u043D\u043E", "value": 3, "slug": "vrlino" }, { "key": "\u0412\u044A\u0440\u0442\u043E\u043F", "value": 1, "slug": "vrtop" }, { "key": "\u0412\u044A\u0440\u0448\u0435\u0446", "value": 251, "slug": "vrshec" }, { "key": "\u0412\u044A\u0440\u0448\u0438\u043B\u043E", "value": 4, "slug": "vrshilo" }, { "key": "\u0413\u0430\u0431\u0430\u0440\u0435", "value": 38, "slug": "gabare" }, { "key": "\u0413\u0430\u0431\u0430\u0440\u0435\u0432\u043E", "value": 64, "slug": "gabarevo" }, { "key": "\u0413\u0430\u0431\u0435\u0440", "value": 27, "slug": "gaber" }, { "key": "\u0413\u0430\u0431\u0435\u0440\u043E\u0432\u043E", "value": 14, "slug": "gaberovo" }, { "key": "\u0413\u0430\u0431\u0440\u0430", "value": 28, "slug": "gabra" }, { "key": "\u0413\u0430\u0431\u0440\u0435\u043D\u0435", "value": 26, "slug": "gabrene" }, { "key": "\u0413\u0430\u0431\u0440\u0435\u0448\u0435\u0432\u0446\u0438", "value": 2, "slug": "gabreshevci" }, { "key": "\u0413\u0430\u0431\u0440\u0438\u0446\u0430", "value": 7, "slug": "gabrica" }, { "key": "\u0413\u0430\u0431\u0440\u043E\u0432\u0434\u043E\u043B", "value": 4, "slug": "gabrovdol" }, { "key": "\u0413\u0430\u0431\u0440\u043E\u0432\u0438\u0446\u0430", "value": 17, "slug": "gabrovica" }, { "key": "\u0413\u0430\u0431\u0440\u043E\u0432\u043D\u0438\u0446\u0430", "value": 29, "slug": "gabrovnica" }, { "key": "\u0413\u0430\u0431\u0440\u043E\u0432\u043E", "value": 6205, "slug": "gabrovo" }, { "key": "\u0413\u0430\u0431\u0440\u043E\u0432\u0446\u0438", "value": 3, "slug": "gabrovci" }, { "key": "\u0413\u0430\u0431\u044A\u0440", "value": 4, "slug": "gabr" }, { "key": "\u0413\u0430\u0431\u044A\u0440\u043D\u0438\u0446\u0430", "value": 33, "slug": "gabrnica" }, { "key": "\u0413\u0430\u0432\u0440\u0430\u0438\u043B\u043E\u0432\u043E", "value": 44, "slug": "gavrailovo" }, { "key": "\u0413\u0430\u0432\u0440\u0438\u043B \u0413\u0435\u043D\u043E\u0432\u043E", "value": 9, "slug": "gavril-genovo" }, { "key": "\u0413\u0430\u0433\u0430\u043D\u0438\u0446\u0430", "value": 7, "slug": "gaganica" }, { "key": "\u0413\u0430\u0433\u043E\u0432\u043E", "value": 5, "slug": "gagovo" }, { "key": "\u0413\u0430\u0439\u0442\u0430\u043D\u0435\u0432\u043E", "value": 5, "slug": "gaytanevo" }, { "key": "\u0413\u0430\u0439\u0442\u0430\u043D\u0438\u043D\u043E\u0432\u043E", "value": 9, "slug": "gaytaninovo" }, { "key": "\u0413\u0430\u0439\u0442\u0430\u043D\u0438\u0442\u0435", "value": 6, "slug": "gaytanite" }, { "key": "\u0413\u0430\u0439\u0442\u0430\u043D\u0446\u0438", "value": 2, "slug": "gaytanci" }, { "key": "\u0413\u0430\u043B\u0430\u0442\u0430", "value": 78, "slug": "galata" }, { "key": "\u0413\u0430\u043B\u0430\u0442\u0438\u043D", "value": 21, "slug": "galatin" }, { "key": "\u0413\u0430\u043B\u0438\u0447\u0435", "value": 57, "slug": "galiche" }, { "key": "\u0413\u0430\u043B\u043E\u0432\u043E", "value": 6, "slug": "galovo" }, { "key": "\u0413\u0430\u043D\u0447\u043E\u0432\u0435\u0446", "value": 11, "slug": "ganchovec" }, { "key": "\u0413\u0430\u0440\u0432\u0430\u043D", "value": 22, "slug": "garvan" }, { "key": "\u0413\u0430\u0440\u0432\u0430\u043D\u043E\u0432\u043E", "value": 10, "slug": "garvanovo" }, { "key": "\u0413\u0435\u0433\u0430", "value": 4, "slug": "gega" }, { "key": "\u0413\u0435\u043B\u0430", "value": 5, "slug": "gela" }, { "key": "\u0413\u0435\u043B\u0435\u043C\u0435\u043D\u043E\u0432\u043E", "value": 15, "slug": "gelemenovo" }, { "key": "\u0413\u0435\u043D\u0435\u0440\u0430\u043B \u0418\u043D\u0437\u043E\u0432\u043E", "value": 52, "slug": "general-inzovo" }, { "key": "\u0413\u0435\u043D\u0435\u0440\u0430\u043B \u041A\u0430\u043D\u0442\u0430\u0440\u0434\u0436\u0438\u0435\u0432\u043E", "value": 49, "slug": "general-kantardzhievo" }, { "key": "\u0413\u0435\u043D\u0435\u0440\u0430\u043B \u041A\u0438\u0441\u0435\u043B\u043E\u0432\u043E", "value": 20, "slug": "general-kiselovo" }, { "key": "\u0413\u0435\u043D\u0435\u0440\u0430\u043B \u041A\u043E\u043B\u0435\u0432\u043E", "value": 18, "slug": "general-kolevo" }, { "key": "\u0413\u0435\u043D\u0435\u0440\u0430\u043B \u041C\u0430\u0440\u0438\u043D\u043E\u0432\u043E", "value": 1, "slug": "general-marinovo" }, { "key": "\u0413\u0435\u043D\u0435\u0440\u0430\u043B \u0422\u043E\u0434\u043E\u0440\u043E\u0432", "value": 23, "slug": "general-todorov" }, { "key": "\u0413\u0435\u043D\u0435\u0440\u0430\u043B \u0422\u043E\u0448\u0435\u0432\u043E", "value": 566, "slug": "general-toshevo" }, { "key": "\u0413\u0435\u043D\u0435\u0440\u0430\u043B\u043E\u0432\u043E", "value": 4, "slug": "generalovo" }, { "key": "\u0413\u0435\u043E\u0440\u0433\u0438 \u0414\u0430\u043C\u044F\u043D\u043E\u0432\u043E", "value": 24, "slug": "georgi-damyanovo" }, { "key": "\u0413\u0435\u043E\u0440\u0433\u0438 \u0414\u043E\u0431\u0440\u0435\u0432\u043E", "value": 8, "slug": "georgi-dobrevo" }, { "key": "\u0413\u0435\u0440\u0433\u0435\u0432\u0435\u0446", "value": 23, "slug": "gergevec" }, { "key": "\u0413\u0435\u0440\u043C\u0430\u043D", "value": 189, "slug": "german" }, { "key": "\u0413\u0435\u0446\u043E\u0432\u043E", "value": 90, "slug": "gecovo" }, { "key": "\u0413\u0435\u0448\u0430", "value": 1, "slug": "gesha" }, { "key": "\u0413\u0435\u0448\u0430\u043D\u043E\u0432\u043E", "value": 12, "slug": "geshanovo" }, { "key": "\u0413\u0438\u0433\u0435\u043D", "value": 22, "slug": "gigen" }, { "key": "\u0413\u0438\u0433\u0438\u043D\u0446\u0438", "value": 7, "slug": "giginci" }, { "key": "\u0413\u0438\u043D\u0446\u0438", "value": 21, "slug": "ginci" }, { "key": "\u0413\u0438\u0440\u0447\u0435\u0432\u0446\u0438", "value": 5, "slug": "girchevci" }, { "key": "\u0413\u0438\u0442\u0430", "value": 16, "slug": "gita" }, { "key": "\u0413\u043B\u0430\u0432\u0430", "value": 23, "slug": "glava" }, { "key": "\u0413\u043B\u0430\u0432\u0430\u043D", "value": 43, "slug": "glavan" }, { "key": "\u0413\u043B\u0430\u0432\u0430\u043D\u043E\u0432\u0446\u0438", "value": 8, "slug": "glavanovci" }, { "key": "\u0413\u043B\u0430\u0432\u0430\u043D\u0446\u0438", "value": 2, "slug": "glavanci" }, { "key": "\u0413\u043B\u0430\u0432\u0430\u0442\u0430\u0440", "value": 7, "slug": "glavatar" }, { "key": "\u0413\u043B\u0430\u0432\u0430\u0442\u0430\u0440\u0446\u0438", "value": 4, "slug": "glavatarci" }, { "key": "\u0413\u043B\u0430\u0432\u0430\u0446\u0438", "value": 10, "slug": "glavaci" }, { "key": "\u0413\u043B\u0430\u0432\u0438\u043D\u0438\u0446\u0430", "value": 175, "slug": "glavinica" }, { "key": "\u0413\u043B\u0430\u0432\u043D\u0438\u043A", "value": 5, "slug": "glavnik" }, { "key": "\u0413\u043B\u0430\u0448\u0430\u0442\u0430\u0439", "value": 1, "slug": "glashatay" }, { "key": "\u0413\u043B\u0435\u0434\u0430\u0446\u0438", "value": 2, "slug": "gledaci" }, { "key": "\u0413\u043B\u0435\u0434\u043A\u0430", "value": 20, "slug": "gledka" }, { "key": "\u0413\u043B\u043E\u0433\u0438\u043D\u043A\u0430", "value": 13, "slug": "gloginka" }, { "key": "\u0413\u043B\u043E\u0433\u0438\u043D\u043E", "value": 4, "slug": "glogino" }, { "key": "\u0413\u043B\u043E\u0433\u043E\u0432\u0438\u0446\u0430", "value": 3, "slug": "glogovica" }, { "key": "\u0413\u043B\u043E\u0433\u043E\u0432\u043E", "value": 48, "slug": "glogovo" }, { "key": "\u0413\u043B\u043E\u0434\u0436\u0435\u0432\u043E", "value": 98, "slug": "glodzhevo" }, { "key": "\u0413\u043B\u043E\u0436\u0435\u043D\u0435", "value": 131, "slug": "glozhene" }, { "key": "\u0413\u043B\u0443\u043C\u043E\u0432\u043E", "value": 1, "slug": "glumovo" }, { "key": "\u0413\u043B\u0443\u043C\u0447\u0435", "value": 1, "slug": "glumche" }, { "key": "\u0413\u043B\u0443\u0444\u0438\u0448\u0435\u0432\u043E", "value": 21, "slug": "glufishevo" }, { "key": "\u0413\u043B\u0443\u0445\u0430\u0440", "value": 39, "slug": "gluhar" }, { "key": "\u0413\u043B\u0443\u0448\u043D\u0438\u043A", "value": 10, "slug": "glushnik" }, { "key": "\u0413\u043D\u044F\u0437\u0434\u043E\u0432\u043E", "value": 4, "slug": "gnyazdovo" }, { "key": "\u0413\u043E\u0432\u0435\u0434\u0430\u0440\u0435", "value": 43, "slug": "govedare" }, { "key": "\u0413\u043E\u0432\u0435\u0434\u0430\u0440\u0446\u0438", "value": 93, "slug": "govedarci" }, { "key": "\u0413\u043E\u0432\u0435\u0436\u0434\u0430", "value": 17, "slug": "govezhda" }, { "key": "\u0413\u043E\u0434\u0435\u0447", "value": 264, "slug": "godech" }, { "key": "\u0413\u043E\u0434\u0435\u0448\u0435\u0432\u043E", "value": 14, "slug": "godeshevo" }, { "key": "\u0413\u043E\u0434\u043B\u0435\u0432\u043E", "value": 43, "slug": "godlevo" }, { "key": "\u0413\u043E\u0437\u0434\u0435\u0439\u043A\u0430", "value": 2, "slug": "gozdeyka" }, { "key": "\u0413\u043E\u043B\u0435\u043C\u0430 \u0420\u0430\u043A\u043E\u0432\u0438\u0446\u0430", "value": 9, "slug": "golema-rakovica" }, { "key": "\u0413\u043E\u043B\u0435\u043C\u0430\u043D\u0438\u0442\u0435", "value": 2, "slug": "golemanite" }, { "key": "\u0413\u043E\u043B\u0435\u043C\u0430\u043D\u043E\u0432\u043E", "value": 7, "slug": "golemanovo" }, { "key": "\u0413\u043E\u043B\u0435\u043C\u0430\u043D\u0446\u0438", "value": 11, "slug": "golemanci" }, { "key": "\u0413\u043E\u043B\u0435\u043C\u0438 \u0421\u0442\u0430\u043D\u0447\u043E\u0432\u0446\u0438", "value": 6, "slug": "golemi-stanchovci" }, { "key": "\u0413\u043E\u043B\u0435\u043C\u043E \u0411\u0430\u0431\u0438\u043D\u043E", "value": 16, "slug": "golemo-babino" }, { "key": "\u0413\u043E\u043B\u0435\u043C\u043E \u0411\u0443\u0447\u0438\u043D\u043E", "value": 28, "slug": "golemo-buchino" }, { "key": "\u0413\u043E\u043B\u0435\u043C\u043E \u041C\u0430\u043B\u043E\u0432\u043E", "value": 6, "slug": "golemo-malovo" }, { "key": "\u0413\u043E\u043B\u0435\u043C\u043E \u0441\u0435\u043B\u043E", "value": 30, "slug": "golemo-selo" }, { "key": "\u0413\u043E\u043B\u0435\u0446", "value": 18, "slug": "golec" }, { "key": "\u0413\u043E\u043B\u0435\u0448", "value": 28, "slug": "golesh" }, { "key": "\u0413\u043E\u043B\u0438\u0446\u0430", "value": 7, "slug": "golica" }, { "key": "\u0413\u043E\u043B\u043E\u0431\u0440\u0430\u0434\u043E\u0432\u043E", "value": 1, "slug": "golobradovo" }, { "key": "\u0413\u043E\u043B\u044F\u043C \u0412\u044A\u0440\u0431\u043E\u0432\u043D\u0438\u043A", "value": 4, "slug": "golyam-vrbovnik" }, { "key": "\u0413\u043E\u043B\u044F\u043C \u0414\u0435\u0432\u0435\u0441\u0438\u043B", "value": 2, "slug": "golyam-devesil" }, { "key": "\u0413\u043E\u043B\u044F\u043C \u0414\u0435\u0440\u0432\u0435\u043D\u0442", "value": 3, "slug": "golyam-dervent" }, { "key": "\u0413\u043E\u043B\u044F\u043C \u0434\u043E\u043B", "value": 4, "slug": "golyam-dol" }, { "key": "\u0413\u043E\u043B\u044F\u043C \u0438\u0437\u0432\u043E\u0440", "value": 30, "slug": "golyam-izvor" }, { "key": "\u0413\u043E\u043B\u044F\u043C \u043C\u0430\u043D\u0430\u0441\u0442\u0438\u0440", "value": 8, "slug": "golyam-manastir" }, { "key": "\u0413\u043E\u043B\u044F\u043C \u041F\u043E\u0440\u043E\u0432\u0435\u0446", "value": 17, "slug": "golyam-porovec" }, { "key": "\u0413\u043E\u043B\u044F\u043C \u0447\u0430\u0440\u0434\u0430\u043A", "value": 22, "slug": "golyam-chardak" }, { "key": "\u0413\u043E\u043B\u044F\u043C\u0430 \u0411\u0440\u0435\u0441\u0442\u043D\u0438\u0446\u0430", "value": 7, "slug": "golyama-brestnica" }, { "key": "\u0413\u043E\u043B\u044F\u043C\u0430 \u0432\u043E\u0434\u0430", "value": 12, "slug": "golyama-voda" }, { "key": "\u0413\u043E\u043B\u044F\u043C\u0430 \u0416\u0435\u043B\u044F\u0437\u043D\u0430", "value": 30, "slug": "golyama-zhelyazna" }, { "key": "\u0413\u043E\u043B\u044F\u043C\u0430 \u0427\u0438\u043D\u043A\u0430", "value": 8, "slug": "golyama-chinka" }, { "key": "\u0413\u043E\u043B\u044F\u043C\u043E \u0410\u0441\u0435\u043D\u043E\u0432\u043E", "value": 1, "slug": "golyamo-asenovo" }, { "key": "\u0413\u043E\u043B\u044F\u043C\u043E \u0411\u0435\u043B\u043E\u0432\u043E", "value": 17, "slug": "golyamo-belovo" }, { "key": "\u0413\u043E\u043B\u044F\u043C\u043E \u0411\u0443\u043A\u043E\u0432\u043E", "value": 5, "slug": "golyamo-bukovo" }, { "key": "\u0413\u043E\u043B\u044F\u043C\u043E \u0412\u0440\u0430\u043D\u043E\u0432\u043E", "value": 58, "slug": "golyamo-vranovo" }, { "key": "\u0413\u043E\u043B\u044F\u043C\u043E \u0433\u0440\u0430\u0434\u0438\u0449\u0435", "value": 19, "slug": "golyamo-gradishche" }, { "key": "\u0413\u043E\u043B\u044F\u043C\u043E \u0414\u0440\u044F\u043D\u043E\u0432\u043E", "value": 4, "slug": "golyamo-dryanovo" }, { "key": "\u0413\u043E\u043B\u044F\u043C\u043E \u041A\u0430\u043C\u0435\u043D\u044F\u043D\u0435", "value": 6, "slug": "golyamo-kamenyane" }, { "key": "\u0413\u043E\u043B\u044F\u043C\u043E \u041A\u0440\u0443\u0448\u0435\u0432\u043E", "value": 9, "slug": "golyamo-krushevo" }, { "key": "\u0413\u043E\u043B\u044F\u043C\u043E \u043D\u043E\u0432\u043E", "value": 11, "slug": "golyamo-novo" }, { "key": "\u0413\u043E\u043B\u044F\u043C\u043E \u041F\u0435\u0449\u0435\u043D\u0435", "value": 4, "slug": "golyamo-peshchene" }, { "key": "\u0413\u043E\u043B\u044F\u043C\u043E \u0421\u043E\u043A\u043E\u043B\u043E\u0432\u043E", "value": 7, "slug": "golyamo-sokolovo" }, { "key": "\u0413\u043E\u043B\u044F\u043C\u043E \u0446\u044A\u0440\u043A\u0432\u0438\u0449\u0435", "value": 7, "slug": "golyamo-crkvishche" }, { "key": "\u0413\u043E\u043B\u044F\u043C\u043E \u0427\u043E\u0447\u043E\u0432\u0435\u043D\u0438", "value": 11, "slug": "golyamo-chochoveni" }, { "key": "\u0413\u043E\u043B\u044F\u043D\u043E\u0432\u0446\u0438", "value": 31, "slug": "golyanovci" }, { "key": "\u0413\u043E\u043C\u043E\u0442\u0430\u0440\u0446\u0438", "value": 38, "slug": "gomotarci" }, { "key": "\u0413\u043E\u0440\u0430\u043D", "value": 5, "slug": "goran" }, { "key": "\u0413\u043E\u0440\u0430\u043D\u043E\u0432\u0446\u0438", "value": 2, "slug": "goranovci" }, { "key": "\u0413\u043E\u0440\u0435\u043C\u0435", "value": 1, "slug": "goreme" }, { "key": "\u0413\u043E\u0440\u0435\u043D \u0415\u043D\u0435\u0432\u0435\u0446", "value": 1, "slug": "goren-enevec" }, { "key": "\u0413\u043E\u0440\u0435\u043D \u0447\u0438\u0444\u043B\u0438\u043A", "value": 63, "slug": "goren-chiflik" }, { "key": "\u0413\u043E\u0440\u0438\u0446\u0430", "value": 79, "slug": "gorica" }, { "key": "\u0413\u043E\u0440\u0438\u0447\u0430\u043D\u0435", "value": 4, "slug": "gorichane" }, { "key": "\u0413\u043E\u0440\u0438\u0447\u0435\u0432\u043E", "value": 3, "slug": "gorichevo" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u0410\u0440\u0434\u0430", "value": 3, "slug": "gorna-arda" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u0411\u0435\u043B\u0430 \u0440\u0435\u0447\u043A\u0430", "value": 2, "slug": "gorna-bela-rechka" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u0411\u0435\u0448\u043E\u0432\u0438\u0446\u0430", "value": 5, "slug": "gorna-beshovica" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u0411\u0438\u0440\u043A\u043E\u0432\u0430", "value": 6, "slug": "gorna-birkova" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u0411\u0440\u0435\u0437\u043D\u0438\u0446\u0430", "value": 38, "slug": "gorna-breznica" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u0411\u0440\u0435\u0441\u0442\u043D\u0438\u0446\u0430", "value": 2, "slug": "gorna-brestnica" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u0412\u0430\u0441\u0438\u043B\u0438\u0446\u0430", "value": 5, "slug": "gorna-vasilica" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u0412\u0435\u0440\u0435\u043D\u0438\u0446\u0430", "value": 2, "slug": "gorna-verenica" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u0412\u0440\u0430\u0431\u0447\u0430", "value": 1, "slug": "gorna-vrabcha" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u0413\u0440\u0430\u0449\u0438\u0446\u0430", "value": 18, "slug": "gorna-grashchica" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u0414\u0438\u043A\u0430\u043D\u044F", "value": 6, "slug": "gorna-dikanya" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u0414\u044A\u0431\u0435\u0432\u0430", "value": 2, "slug": "gorna-dbeva" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u041A\u043E\u0432\u0430\u0447\u0438\u0446\u0430", "value": 7, "slug": "gorna-kovachica" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u041A\u043E\u0437\u043D\u0438\u0446\u0430", "value": 9, "slug": "gorna-koznica" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u041A\u0440\u0435\u043C\u0435\u043D\u0430", "value": 14, "slug": "gorna-kremena" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u043A\u0440\u0435\u043F\u043E\u0441\u0442", "value": 1, "slug": "gorna-krepost" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u041A\u0440\u0443\u0448\u0438\u0446\u0430", "value": 3, "slug": "gorna-krushica" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u043A\u0443\u043B\u0430", "value": 11, "slug": "gorna-kula" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u041B\u0438\u043F\u043D\u0438\u0446\u0430", "value": 15, "slug": "gorna-lipnica" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u041B\u0443\u043A\u0430", "value": 21, "slug": "gorna-luka" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u041C\u0430\u043B\u0438\u043D\u0430", "value": 89, "slug": "gorna-malina" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u043C\u0430\u0445\u0430\u043B\u0430", "value": 5, "slug": "gorna-mahala" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u041C\u0438\u0442\u0440\u043E\u043F\u043E\u043B\u0438\u044F", "value": 53, "slug": "gorna-mitropoliya" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u041E\u0440\u044F\u0445\u043E\u0432\u0438\u0446\u0430", "value": 2362, "slug": "gorna-oryahovica" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u0420\u043E\u0441\u0438\u0446\u0430", "value": 25, "slug": "gorna-rosica" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u0421\u0442\u0443\u0434\u0435\u043D\u0430", "value": 19, "slug": "gorna-studena" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u0421\u0443\u0448\u0438\u0446\u0430", "value": 3, "slug": "gorna-sushica" }, { "key": "\u0413\u043E\u0440\u043D\u0430 \u0425\u0443\u0431\u0430\u0432\u043A\u0430", "value": 1, "slug": "gorna-hubavka" }, { "key": "\u0413\u043E\u0440\u043D\u0438 \u0411\u043E\u0433\u0440\u043E\u0432", "value": 86, "slug": "gorni-bogrov" }, { "key": "\u0413\u043E\u0440\u043D\u0438 \u0412\u0430\u0434\u0438\u043D", "value": 5, "slug": "gorni-vadin" }, { "key": "\u0413\u043E\u0440\u043D\u0438 \u0412\u044A\u0440\u043F\u0438\u0449\u0430", "value": 1, "slug": "gorni-vrpishcha" }, { "key": "\u0413\u043E\u0440\u043D\u0438 \u0413\u043B\u0430\u0432\u0430\u043D\u0430\u043A", "value": 6, "slug": "gorni-glavanak" }, { "key": "\u0413\u043E\u0440\u043D\u0438 \u0414\u043E\u043C\u043B\u044F\u043D", "value": 12, "slug": "gorni-domlyan" }, { "key": "\u0413\u043E\u0440\u043D\u0438 \u0414\u044A\u0431\u043D\u0438\u043A", "value": 56, "slug": "gorni-dbnik" }, { "key": "\u0413\u043E\u0440\u043D\u0438 \u041B\u043E\u043C", "value": 27, "slug": "gorni-lom" }, { "key": "\u0413\u043E\u0440\u043D\u0438 \u041E\u043A\u043E\u043B", "value": 3, "slug": "gorni-okol" }, { "key": "\u0413\u043E\u0440\u043D\u0438 \u0420\u043E\u043C\u0430\u043D\u0446\u0438", "value": 1, "slug": "gorni-romanci" }, { "key": "\u0413\u043E\u0440\u043D\u0438 \u0426\u0438\u0431\u044A\u0440", "value": 4, "slug": "gorni-cibr" }, { "key": "\u0413\u043E\u0440\u043D\u0438 \u042E\u0440\u0443\u0446\u0438", "value": 3, "slug": "gorni-yuruci" }, { "key": "\u0413\u043E\u0440\u043D\u0438\u043A", "value": 28, "slug": "gornik" }, { "key": "\u0413\u043E\u0440\u043D\u043E \u0410\u0431\u043B\u0430\u043D\u043E\u0432\u043E", "value": 18, "slug": "gorno-ablanovo" }, { "key": "\u0413\u043E\u0440\u043D\u043E \u0410\u043B\u0435\u043A\u0441\u0430\u043D\u0434\u0440\u043E\u0432\u043E", "value": 13, "slug": "gorno-aleksandrovo" }, { "key": "\u0413\u043E\u0440\u043D\u043E \u0411\u0435\u043B\u0435\u0432\u043E", "value": 13, "slug": "gorno-belevo" }, { "key": "\u0413\u043E\u0440\u043D\u043E \u0411\u043E\u0442\u0435\u0432\u043E", "value": 31, "slug": "gorno-botevo" }, { "key": "\u0413\u043E\u0440\u043D\u043E \u0412\u043E\u0439\u0432\u043E\u0434\u0438\u043D\u043E", "value": 4, "slug": "gorno-voyvodino" }, { "key": "\u0413\u043E\u0440\u043D\u043E \u0414\u0440\u0430\u0433\u043B\u0438\u0449\u0435", "value": 38, "slug": "gorno-draglishche" }, { "key": "\u0413\u043E\u0440\u043D\u043E \u0414\u0440\u044F\u043D\u043E\u0432\u043E", "value": 59, "slug": "gorno-dryanovo" }, { "key": "\u0413\u043E\u0440\u043D\u043E \u0418\u0437\u0432\u043E\u0440\u043E\u0432\u043E", "value": 11, "slug": "gorno-izvorovo" }, { "key": "\u0413\u043E\u0440\u043D\u043E \u041A\u0430\u043C\u0430\u0440\u0446\u0438", "value": 15, "slug": "gorno-kamarci" }, { "key": "\u0413\u043E\u0440\u043D\u043E \u041A\u0438\u0440\u043A\u043E\u0432\u043E", "value": 23, "slug": "gorno-kirkovo" }, { "key": "\u0413\u043E\u0440\u043D\u043E \u041A\u043E\u0437\u0430\u0440\u0435\u0432\u043E", "value": 6, "slug": "gorno-kozarevo" }, { "key": "\u0413\u043E\u0440\u043D\u043E \u041A\u0440\u0430\u0438\u0449\u0435", "value": 27, "slug": "gorno-kraishche" }, { "key": "\u0413\u043E\u0440\u043D\u043E \u041D\u043E\u0432\u043A\u043E\u0432\u043E", "value": 3, "slug": "gorno-novkovo" }, { "key": "\u0413\u043E\u0440\u043D\u043E \u041E\u0437\u0438\u0440\u043E\u0432\u043E", "value": 5, "slug": "gorno-ozirovo" }, { "key": "\u0413\u043E\u0440\u043D\u043E \u041F\u0430\u0432\u043B\u0438\u043A\u0435\u043D\u0435", "value": 4, "slug": "gorno-pavlikene" }, { "key": "\u0413\u043E\u0440\u043D\u043E \u041F\u0435\u0449\u0435\u043D\u0435", "value": 6, "slug": "gorno-peshchene" }, { "key": "\u0413\u043E\u0440\u043D\u043E \u043F\u043E\u043B\u0435", "value": 4, "slug": "gorno-pole" }, { "key": "\u0413\u043E\u0440\u043D\u043E \u041F\u0440\u0430\u0445\u043E\u0432\u043E", "value": 17, "slug": "gorno-prahovo" }, { "key": "\u0413\u043E\u0440\u043D\u043E \u0421\u0430\u0445\u0440\u0430\u043D\u0435", "value": 59, "slug": "gorno-sahrane" }, { "key": "\u0413\u043E\u0440\u043D\u043E \u0421\u043F\u0430\u043D\u0447\u0435\u0432\u043E", "value": 1, "slug": "gorno-spanchevo" }, { "key": "\u0413\u043E\u0440\u043D\u043E \u0442\u0440\u0430\u043F\u0435", "value": 10, "slug": "gorno-trape" }, { "key": "\u0413\u043E\u0440\u043D\u043E \u0425\u044A\u0440\u0441\u043E\u0432\u043E", "value": 1, "slug": "gorno-hrsovo" }, { "key": "\u0413\u043E\u0440\u043D\u043E \u0426\u0435\u0440\u043E\u0432\u0435\u043D\u0435", "value": 6, "slug": "gorno-cerovene" }, { "key": "\u0413\u043E\u0440\u043D\u043E \u0427\u0435\u0440\u043A\u043E\u0432\u0438\u0449\u0435", "value": 30, "slug": "gorno-cherkovishche" }, { "key": "\u0413\u043E\u0440\u043D\u043E \u042F\u0431\u044A\u043B\u043A\u043E\u0432\u043E", "value": 1, "slug": "gorno-yablkovo" }, { "key": "\u0413\u043E\u0440\u043D\u043E\u0441\u043B\u0430\u0432", "value": 3, "slug": "gornoslav" }, { "key": "\u0413\u043E\u0440\u043E\u0446\u0432\u0435\u0442", "value": 11, "slug": "gorocvet" }, { "key": "\u0413\u043E\u0440\u043E\u0447\u0435\u0432\u0446\u0438", "value": 2, "slug": "gorochevci" }, { "key": "\u0413\u043E\u0440\u0441\u043A\u0430 \u043F\u043E\u043B\u044F\u043D\u0430", "value": 6, "slug": "gorska-polyana" }, { "key": "\u0413\u043E\u0440\u0441\u043A\u0438 \u0433\u043E\u0440\u0435\u043D \u0422\u0440\u044A\u043C\u0431\u0435\u0448", "value": 4, "slug": "gorski-goren-trmbesh" }, { "key": "\u0413\u043E\u0440\u0441\u043A\u0438 \u0434\u043E\u043B\u0435\u043D \u0422\u0440\u044A\u043C\u0431\u0435\u0448", "value": 3, "slug": "gorski-dolen-trmbesh" }, { "key": "\u0413\u043E\u0440\u0441\u043A\u0438 \u0438\u0437\u0432\u043E\u0440", "value": 65, "slug": "gorski-izvor" }, { "key": "\u0413\u043E\u0440\u0441\u043A\u0438 \u0421\u0435\u043D\u043E\u0432\u0435\u0446", "value": 9, "slug": "gorski-senovec" }, { "key": "\u0413\u043E\u0440\u0441\u043A\u043E \u0410\u0431\u043B\u0430\u043D\u043E\u0432\u043E", "value": 3, "slug": "gorsko-ablanovo" }, { "key": "\u0413\u043E\u0440\u0441\u043A\u043E \u0414\u044E\u043B\u0435\u0432\u043E", "value": 1, "slug": "gorsko-dyulevo" }, { "key": "\u0413\u043E\u0440\u0441\u043A\u043E \u041A\u0430\u043B\u0443\u0433\u0435\u0440\u043E\u0432\u043E", "value": 6, "slug": "gorsko-kalugerovo" }, { "key": "\u0413\u043E\u0440\u0441\u043A\u043E \u041A\u043E\u0441\u043E\u0432\u043E", "value": 5, "slug": "gorsko-kosovo" }, { "key": "\u0413\u043E\u0440\u0441\u043A\u043E \u043D\u043E\u0432\u043E \u0441\u0435\u043B\u043E", "value": 30, "slug": "gorsko-novo-selo" }, { "key": "\u0413\u043E\u0440\u0441\u043A\u043E \u0441\u0435\u043B\u043E", "value": 2, "slug": "gorsko-selo" }, { "key": "\u0413\u043E\u0440\u0441\u043A\u043E \u0421\u043B\u0438\u0432\u043E\u0432\u043E", "value": 22, "slug": "gorsko-slivovo" }, { "key": "\u0413\u043E\u0440\u0442\u0430\u043B\u043E\u0432\u043E", "value": 3, "slug": "gortalovo" }, { "key": "\u0413\u043E\u0440\u0443\u043D", "value": 7, "slug": "gorun" }, { "key": "\u0413\u043E\u0441\u043F\u043E\u0434\u0438\u043D\u043E\u0432\u043E", "value": 12, "slug": "gospodinovo" }, { "key": "\u0413\u043E\u0441\u043F\u043E\u0434\u0438\u043D\u0446\u0438", "value": 16, "slug": "gospodinci" }, { "key": "\u0413\u043E\u0441\u0442\u0438\u043B\u0438\u0446\u0430", "value": 31, "slug": "gostilica" }, { "key": "\u0413\u043E\u0441\u0442\u0438\u043B\u044F", "value": 6, "slug": "gostilya" }, { "key": "\u0413\u043E\u0441\u0442\u0438\u043D\u044F", "value": 6, "slug": "gostinya" }, { "key": "\u0413\u043E\u0446\u0435 \u0414\u0435\u043B\u0447\u0435\u0432", "value": 2391, "slug": "goce-delchev" }, { "key": "\u0413\u0440\u0430\u0434\u0435\u0432\u043E", "value": 10, "slug": "gradevo" }, { "key": "\u0413\u0440\u0430\u0434\u0435\u0436\u043D\u0438\u0446\u0430", "value": 46, "slug": "gradezhnica" }, { "key": "\u0413\u0440\u0430\u0434\u0435\u0446", "value": 125, "slug": "gradec" }, { "key": "\u0413\u0440\u0430\u0434\u0435\u0448\u043D\u0438\u0446\u0430", "value": 12, "slug": "gradeshnica" }, { "key": "\u0413\u0440\u0430\u0434\u0438\u043D\u0430", "value": 125, "slug": "gradina" }, { "key": "\u0413\u0440\u0430\u0434\u0438\u043D\u0430\u0440\u043E\u0432\u043E", "value": 17, "slug": "gradinarovo" }, { "key": "\u0413\u0440\u0430\u0434\u0438\u043D\u0438", "value": 4, "slug": "gradini" }, { "key": "\u0413\u0440\u0430\u0434\u0438\u0449\u0435", "value": 37, "slug": "gradishche" }, { "key": "\u0413\u0440\u0430\u0434\u043D\u0438\u0446\u0430", "value": 28, "slug": "gradnica" }, { "key": "\u0413\u0440\u0430\u0434\u0441\u043A\u043E", "value": 9, "slug": "gradsko" }, { "key": "\u0413\u0440\u0430\u0434\u044A\u0442", "value": 4, "slug": "gradt" }, { "key": "\u0413\u0440\u0430\u043C\u0430\u0434\u0430", "value": 48, "slug": "gramada" }, { "key": "\u0413\u0440\u0430\u043C\u0430\u0434\u0435", "value": 3, "slug": "gramade" }, { "key": "\u0413\u0440\u0430\u043C\u0430\u0436\u0434\u0430\u043D\u043E", "value": 14, "slug": "gramazhdano" }, { "key": "\u0413\u0440\u0430\u043C\u0430\u0442\u0438\u043A\u043E\u0432\u043E", "value": 40, "slug": "gramatikovo" }, { "key": "\u0413\u0440\u0430\u043D\u0438\u0442", "value": 7, "slug": "granit" }, { "key": "\u0413\u0440\u0430\u043D\u0438\u0442\u043E\u0432\u043E", "value": 38, "slug": "granitovo" }, { "key": "\u0413\u0440\u0430\u043D\u0438\u0446\u0430", "value": 18, "slug": "granica" }, { "key": "\u0413\u0440\u0430\u043D\u0438\u0447\u0430\u0440", "value": 8, "slug": "granichar" }, { "key": "\u0413\u0440\u0430\u0444 \u0418\u0433\u043D\u0430\u0442\u0438\u0435\u0432\u043E", "value": 112, "slug": "graf-ignatievo" }, { "key": "\u0413\u0440\u0430\u0448\u0435\u0432\u043E", "value": 23, "slug": "grashevo" }, { "key": "\u0413\u0440\u0438\u0432\u0438\u0446\u0430", "value": 54, "slug": "grivica" }, { "key": "\u0413\u0440\u0438\u0432\u043A\u0430", "value": 1, "slug": "grivka" }, { "key": "\u0413\u0440\u0438\u0433\u043E\u0440\u0435\u0432\u043E", "value": 17, "slug": "grigorevo" }, { "key": "\u0413\u0440\u043E\u0437\u0434\u0435\u043D", "value": 29, "slug": "grozden" }, { "key": "\u0413\u0440\u043E\u0437\u0434\u044C\u043E\u0432\u043E", "value": 76, "slug": "grozdovo" }, { "key": "\u0413\u0440\u043E\u043C\u0448\u0438\u043D", "value": 11, "slug": "gromshin" }, { "key": "\u0413\u0440\u043E\u0445\u043E\u0442\u043D\u043E", "value": 22, "slug": "grohotno" }, { "key": "\u0413\u0440\u0443\u0435\u0432\u043E", "value": 14, "slug": "gruevo" }, { "key": "\u0413\u0440\u044A\u0431\u043B\u0435\u0432\u0446\u0438", "value": 2, "slug": "grblevci" }, { "key": "\u0413\u0440\u044A\u043D\u0447\u0430\u0440\u043E\u0432\u043E", "value": 11, "slug": "grncharovo" }, { "key": "\u0413\u0443\u0431\u0435\u0448", "value": 2, "slug": "gubesh" }, { "key": "\u0413\u0443\u043B\u0438\u0439\u043A\u0430", "value": 4, "slug": "guliyka" }, { "key": "\u0413\u0443\u043B\u044F\u043D\u0446\u0438", "value": 105, "slug": "gulyanci" }, { "key": "\u0413\u0443\u043C\u043E\u0449\u043D\u0438\u043A", "value": 3, "slug": "gumoshchnik" }, { "key": "\u0413\u0443\u0440\u043A\u043E\u0432\u043E", "value": 178, "slug": "gurkovo" }, { "key": "\u0413\u0443\u0440\u043C\u0430\u0437\u043E\u0432\u043E", "value": 42, "slug": "gurmazovo" }, { "key": "\u0413\u0443\u0441\u043B\u0430", "value": 15, "slug": "gusla" }, { "key": "\u0413\u0443\u0446\u0430\u043B", "value": 8, "slug": "gucal" }, { "key": "\u0413\u044A\u0431\u0435\u043D\u0435", "value": 12, "slug": "gbene" }, { "key": "\u0413\u044A\u043B\u044A\u0431\u0435\u0446", "value": 77, "slug": "glbec" }, { "key": "\u0413\u044A\u043B\u044A\u0431\u0438\u043D\u0446\u0438", "value": 10, "slug": "glbinci" }, { "key": "\u0413\u044A\u043B\u044A\u0431\u043D\u0438\u043A", "value": 3, "slug": "glbnik" }, { "key": "\u0413\u044A\u043B\u044A\u0431\u043E\u0432\u043E", "value": 598, "slug": "glbovo" }, { "key": "\u0413\u044A\u043B\u044A\u0431\u043E\u0432\u0446\u0438", "value": 17, "slug": "glbovci" }, { "key": "\u0413\u044A\u043C\u0437\u043E\u0432\u043E", "value": 19, "slug": "gmzovo" }, { "key": "\u0413\u044A\u0440\u0431\u0438\u0449\u0435", "value": 3, "slug": "grbishche" }, { "key": "\u0413\u044A\u0440\u0434\u0435\u0432\u0446\u0438", "value": 2, "slug": "grdevci" }, { "key": "\u0413\u044A\u0440\u043B\u043E", "value": 4, "slug": "grlo" }, { "key": "\u0413\u044A\u0440\u043B\u044F\u043D\u043E", "value": 11, "slug": "grlyano" }, { "key": "\u0413\u044A\u0440\u043C\u0435\u043D", "value": 135, "slug": "grmen" }, { "key": "\u0413\u044A\u0440\u043D\u0430\u0442\u0438", "value": 1, "slug": "grnati" }, { "key": "\u0413\u044A\u0440\u0447\u0438\u043D\u043E\u0432\u043E", "value": 16, "slug": "grchinovo" }, { "key": "\u0413\u044A\u0441\u043A\u043E\u0432\u043E", "value": 4, "slug": "gskovo" }, { "key": "\u0413\u044C\u043E\u0432\u0440\u0435\u043D", "value": 26, "slug": "govren" }, { "key": "\u0413\u044E\u0435\u0448\u0435\u0432\u043E", "value": 5, "slug": "gyueshevo" }, { "key": "\u0413\u044E\u043B\u044C\u043E\u0432\u0446\u0430", "value": 64, "slug": "gyulovca" }, { "key": "\u0413\u044E\u0440\u0433\u0438\u0447", "value": 4, "slug": "gyurgich" }, { "key": "\u0414\u0430\u0432\u0435\u0440\u0438", "value": 2, "slug": "daveri" }, { "key": "\u0414\u0430\u0432\u0438\u0434\u043A\u043E\u0432\u043E", "value": 30, "slug": "davidkovo" }, { "key": "\u0414\u0430\u0432\u0438\u0434\u043E\u0432\u043E", "value": 17, "slug": "davidovo" }, { "key": "\u0414\u0430\u0433\u043E\u043D\u043E\u0432\u043E", "value": 17, "slug": "dagonovo" }, { "key": "\u0414\u0430\u043C\u044F\u043D\u0438\u0446\u0430", "value": 58, "slug": "damyanica" }, { "key": "\u0414\u0430\u043C\u044F\u043D\u043E\u0432\u043E", "value": 16, "slug": "damyanovo" }, { "key": "\u0414\u0430\u0441\u043A\u0430\u043B-\u0410\u0442\u0430\u043D\u0430\u0441\u043E\u0432\u043E", "value": 11, "slug": "daskal-atanasovo" }, { "key": "\u0414\u0430\u0441\u043A\u0430\u043B\u043E\u0432\u043E", "value": 7, "slug": "daskalovo" }, { "key": "\u0414\u0432\u0435 \u043C\u043E\u0433\u0438\u043B\u0438", "value": 196, "slug": "dve-mogili" }, { "key": "\u0414\u0432\u043E\u0440\u0438\u0449\u0435", "value": 2, "slug": "dvorishche" }, { "key": "\u0414\u0435\u0431\u0435\u043B \u0434\u044F\u043B", "value": 1, "slug": "debel-dyal" }, { "key": "\u0414\u0435\u0431\u0435\u043B\u0435\u0446", "value": 198, "slug": "debelec" }, { "key": "\u0414\u0435\u0431\u0435\u043B\u0438 \u043B\u0430\u0433", "value": 4, "slug": "debeli-lag" }, { "key": "\u0414\u0435\u0431\u0435\u043B\u0442", "value": 85, "slug": "debelt" }, { "key": "\u0414\u0435\u0431\u0435\u043B\u0446\u043E\u0432\u043E", "value": 3, "slug": "debelcovo" }, { "key": "\u0414\u0435\u0431\u0435\u043B\u044F\u043D\u043E\u0432\u043E", "value": 3, "slug": "debelyanovo" }, { "key": "\u0414\u0435\u0431\u043D\u0435\u0432\u043E", "value": 25, "slug": "debnevo" }, { "key": "\u0414\u0435\u0431\u043E\u0432\u043E", "value": 7, "slug": "debovo" }, { "key": "\u0414\u0435\u0431\u0440\u0435\u043D", "value": 109, "slug": "debren" }, { "key": "\u0414\u0435\u0431\u0440\u0435\u043D\u0435", "value": 2, "slug": "debrene" }, { "key": "\u0414\u0435\u0431\u0440\u044A\u0449\u0438\u0446\u0430", "value": 35, "slug": "debrshchica" }, { "key": "\u0414\u0435\u0432\u0435\u043D\u0435", "value": 20, "slug": "devene" }, { "key": "\u0414\u0435\u0432\u0435\u043D\u0446\u0438", "value": 16, "slug": "devenci" }, { "key": "\u0414\u0435\u0432\u0435\u0441\u0438\u043B\u0438\u0446\u0430", "value": 2, "slug": "devesilica" }, { "key": "\u0414\u0435\u0432\u0435\u0441\u0438\u043B\u043E\u0432\u043E", "value": 2, "slug": "devesilovo" }, { "key": "\u0414\u0435\u0432\u0435\u0442\u0430\u043A", "value": 7, "slug": "devetak" }, { "key": "\u0414\u0435\u0432\u0435\u0442\u0430\u043A\u0438", "value": 7, "slug": "devetaki" }, { "key": "\u0414\u0435\u0432\u0435\u0442\u0438\u043D\u0446\u0438", "value": 5, "slug": "devetinci" }, { "key": "\u0414\u0435\u0432\u0438\u043D", "value": 495, "slug": "devin" }, { "key": "\u0414\u0435\u0432\u0438\u043D\u0446\u0438", "value": 2, "slug": "devinci" }, { "key": "\u0414\u0435\u0432\u043D\u044F", "value": 543, "slug": "devnya" }, { "key": "\u0414\u0435\u0434\u0435\u0446", "value": 1, "slug": "dedec" }, { "key": "\u0414\u0435\u0434\u0438\u043D\u0430", "value": 2, "slug": "dedina" }, { "key": "\u0414\u0435\u0434\u0438\u043D\u043E", "value": 3, "slug": "dedino" }, { "key": "\u0414\u0435\u0434\u0438\u043D\u0446\u0438", "value": 2, "slug": "dedinci" }, { "key": "\u0414\u0435\u0434\u043E\u0432\u043E", "value": 7, "slug": "dedovo" }, { "key": "\u0414\u0435\u043A\u043E\u0432", "value": 24, "slug": "dekov" }, { "key": "\u0414\u0435\u043B\u0432\u0438\u043D\u043E", "value": 1, "slug": "delvino" }, { "key": "\u0414\u0435\u043B\u0435\u0439\u043D\u0430", "value": 5, "slug": "deleyna" }, { "key": "\u0414\u0435\u043B\u0447\u0435\u0432\u043E", "value": 20, "slug": "delchevo" }, { "key": "\u0414\u0435\u043B\u044F\u043D", "value": 4, "slug": "delyan" }, { "key": "\u0414\u0435\u043B\u044F\u043D\u043E\u0432\u0446\u0438", "value": 3, "slug": "delyanovci" }, { "key": "\u0414\u0435\u043D\u043D\u0438\u0446\u0430", "value": 4, "slug": "dennica" }, { "key": "\u0414\u0435\u043D\u0447\u0435\u0432\u0446\u0438", "value": 4, "slug": "denchevci" }, { "key": "\u0414\u0435\u0440\u043C\u0430\u043D\u0446\u0438", "value": 75, "slug": "dermanci" }, { "key": "\u0414\u0435\u0442\u0435\u043B\u0438\u043D\u0430", "value": 14, "slug": "detelina" }, { "key": "\u0414\u0436\u0435\u0431\u0435\u043B", "value": 196, "slug": "dzhebel" }, { "key": "\u0414\u0436\u0435\u043B\u0435\u043F\u0441\u043A\u043E", "value": 6, "slug": "dzhelepsko" }, { "key": "\u0414\u0436\u0435\u0440\u043C\u0430\u043D", "value": 60, "slug": "dzherman" }, { "key": "\u0414\u0436\u0435\u0440\u043E\u0432\u043E", "value": 8, "slug": "dzherovo" }, { "key": "\u0414\u0436\u0438\u0433\u0443\u0440\u043E\u0432\u043E", "value": 28, "slug": "dzhigurovo" }, { "key": "\u0414\u0436\u0438\u043D\u043E\u0442", "value": 7, "slug": "dzhinot" }, { "key": "\u0414\u0436\u0438\u043D\u0447\u043E\u0432\u0446\u0438", "value": 1, "slug": "dzhinchovci" }, { "key": "\u0414\u0436\u0443\u043B\u044E\u043D\u0438\u0446\u0430", "value": 63, "slug": "dzhulyunica" }, { "key": "\u0414\u0436\u0443\u043C\u0440\u0438\u0438\u0442\u0435", "value": 1, "slug": "dzhumriite" }, { "key": "\u0414\u0436\u0443\u0440\u043A\u043E\u0432\u043E", "value": 7, "slug": "dzhurkovo" }, { "key": "\u0414\u0436\u0443\u0440\u043E\u0432\u043E", "value": 28, "slug": "dzhurovo" }, { "key": "\u0414\u0438\u0430\u043C\u0430\u043D\u0434\u043E\u0432\u043E", "value": 4, "slug": "diamandovo" }, { "key": "\u0414\u0438\u0431\u0438\u0447", "value": 24, "slug": "dibich" }, { "key": "\u0414\u0438\u0432\u0430 \u0421\u043B\u0430\u0442\u0438\u043D\u0430", "value": 3, "slug": "diva-slatina" }, { "key": "\u0414\u0438\u0432\u0435\u0446\u0438", "value": 1, "slug": "diveci" }, { "key": "\u0414\u0438\u0432\u043B\u044F", "value": 5, "slug": "divlya" }, { "key": "\u0414\u0438\u0432\u043E\u0442\u0438\u043D\u043E", "value": 107, "slug": "divotino" }, { "key": "\u0414\u0438\u0432\u0447\u043E\u0432\u043E\u0442\u043E", "value": 2, "slug": "divchovoto" }, { "key": "\u0414\u0438\u043C\u0430\u043D\u043E\u0432\u043E", "value": 3, "slug": "dimanovo" }, { "key": "\u0414\u0438\u043C\u0438\u0435\u0432\u0446\u0438", "value": 1, "slug": "dimievci" }, { "key": "\u0414\u0438\u043C\u0438\u0442\u0440\u0438\u0435\u0432\u043E", "value": 3, "slug": "dimitrievo" }, { "key": "\u0414\u0438\u043C\u0438\u0442\u0440\u043E\u0432\u0433\u0440\u0430\u0434", "value": 3669, "slug": "dimitrovgrad" }, { "key": "\u0414\u0438\u043C\u0438\u0442\u0440\u043E\u0432\u0447\u0435", "value": 22, "slug": "dimitrovche" }, { "key": "\u0414\u0438\u043C\u043E\u0432\u043E", "value": 36, "slug": "dimovo" }, { "key": "\u0414\u0438\u043C\u043E\u0432\u0446\u0438", "value": 3, "slug": "dimovci" }, { "key": "\u0414\u0438\u043C\u0447\u0430", "value": 8, "slug": "dimcha" }, { "key": "\u0414\u0438\u043C\u0447\u0435\u0432\u043E", "value": 12, "slug": "dimchevo" }, { "key": "\u0414\u0438\u043D\u0435\u0432\u043E", "value": 11, "slug": "dinevo" }, { "key": "\u0414\u0438\u043D\u043A", "value": 10, "slug": "dink" }, { "key": "\u0414\u0438\u043D\u043A\u0430\u0442\u0430", "value": 25, "slug": "dinkata" }, { "key": "\u0414\u0438\u043D\u043A\u043E\u0432\u043E", "value": 3, "slug": "dinkovo" }, { "key": "\u0414\u0438\u043D\u044F", "value": 6, "slug": "dinya" }, { "key": "\u0414\u0438\u0440\u0430\u043B\u043E", "value": 1, "slug": "diralo" }, { "key": "\u0414\u0438\u0441\u0435\u0432\u0438\u0446\u0430", "value": 9, "slug": "disevica" }, { "key": "\u0414\u0438\u0447\u0435\u0432\u043E", "value": 8, "slug": "dichevo" }, { "key": "\u0414\u0438\u0447\u0438\u043D", "value": 15, "slug": "dichin" }, { "key": "\u0414\u043B\u044A\u0433\u043D\u0435\u0432\u043E", "value": 4, "slug": "dlgnevo" }, { "key": "\u0414\u043B\u044A\u0433\u043D\u044F", "value": 6, "slug": "dlgnya" }, { "key": "\u0414\u043B\u044A\u0436\u043A\u0430 \u043F\u043E\u043B\u044F\u043D\u0430", "value": 5, "slug": "dlzhka-polyana" }, { "key": "\u0414\u043B\u044A\u0436\u043A\u043E", "value": 4, "slug": "dlzhko" }, { "key": "\u0414\u043E\u0431\u043E\u0440\u0441\u043A\u043E", "value": 2, "slug": "doborsko" }, { "key": "\u0414\u043E\u0431\u0440\u0430 \u043F\u043E\u043B\u044F\u043D\u0430", "value": 17, "slug": "dobra-polyana" }, { "key": "\u0414\u043E\u0431\u0440\u0430\u043B\u044A\u043A", "value": 4, "slug": "dobralk" }, { "key": "\u0414\u043E\u0431\u0440\u0435\u0432\u043E", "value": 5, "slug": "dobrevo" }, { "key": "\u0414\u043E\u0431\u0440\u0435\u0432\u0446\u0438", "value": 10, "slug": "dobrevci" }, { "key": "\u0414\u043E\u0431\u0440\u0438 \u0412\u043E\u0439\u043D\u0438\u043A\u043E\u0432\u043E", "value": 6, "slug": "dobri-voynikovo" }, { "key": "\u0414\u043E\u0431\u0440\u0438 \u0434\u043E\u043B", "value": 7, "slug": "dobri-dol" }, { "key": "\u0414\u043E\u0431\u0440\u0438 \u0434\u044F\u043B", "value": 23, "slug": "dobri-dyal" }, { "key": "\u0414\u043E\u0431\u0440\u0438 \u043B\u0430\u043A\u0438", "value": 5, "slug": "dobri-laki" }, { "key": "\u0414\u043E\u0431\u0440\u0438\u043D", "value": 12, "slug": "dobrin" }, { "key": "\u0414\u043E\u0431\u0440\u0438\u043D\u0430", "value": 22, "slug": "dobrina" }, { "key": "\u0414\u043E\u0431\u0440\u0438\u043D\u0438\u0449\u0435", "value": 212, "slug": "dobrinishche" }, { "key": "\u0414\u043E\u0431\u0440\u0438\u043D\u043E\u0432\u043E", "value": 10, "slug": "dobrinovo" }, { "key": "\u0414\u043E\u0431\u0440\u0438\u043D\u0446\u0438", "value": 8, "slug": "dobrinci" }, { "key": "\u0414\u043E\u0431\u0440\u0438\u0447", "value": 9162, "slug": "dobrich" }, { "key": "\u0414\u043E\u0431\u0440\u043E\u0432\u043D\u0438\u0446\u0430", "value": 55, "slug": "dobrovnica" }, { "key": "\u0414\u043E\u0431\u0440\u043E\u0433\u043B\u0435\u0434", "value": 16, "slug": "dobrogled" }, { "key": "\u0414\u043E\u0431\u0440\u043E\u0434\u0430\u043D", "value": 14, "slug": "dobrodan" }, { "key": "\u0414\u043E\u0431\u0440\u043E\u043B\u0435\u0432\u043E", "value": 22, "slug": "dobrolevo" }, { "key": "\u0414\u043E\u0431\u0440\u043E\u043C\u0438\u0440", "value": 34, "slug": "dobromir" }, { "key": "\u0414\u043E\u0431\u0440\u043E\u043C\u0438\u0440\u043A\u0430", "value": 20, "slug": "dobromirka" }, { "key": "\u0414\u043E\u0431\u0440\u043E\u043C\u0438\u0440\u0446\u0438", "value": 31, "slug": "dobromirci" }, { "key": "\u0414\u043E\u0431\u0440\u043E\u043F\u043B\u043E\u0434\u043D\u043E", "value": 17, "slug": "dobroplodno" }, { "key": "\u0414\u043E\u0431\u0440\u043E\u0441\u043B\u0430\u0432\u0446\u0438", "value": 78, "slug": "dobroslavci" }, { "key": "\u0414\u043E\u0431\u0440\u043E\u0442\u0438\u0446\u0430", "value": 14, "slug": "dobrotica" }, { "key": "\u0414\u043E\u0431\u0440\u043E\u0442\u0438\u0447", "value": 17, "slug": "dobrotich" }, { "key": "\u0414\u043E\u0431\u0440\u0443\u0434\u0436\u0430\u043D\u043A\u0430", "value": 1, "slug": "dobrudzhanka" }, { "key": "\u0414\u043E\u0431\u0440\u0443\u0448\u0430", "value": 4, "slug": "dobrusha" }, { "key": "\u0414\u043E\u0431\u044A\u0440\u0441\u043A\u043E", "value": 18, "slug": "dobrsko" }, { "key": "\u0414\u043E\u0431\u044A\u0440\u0447\u0438\u043D", "value": 1, "slug": "dobrchin" }, { "key": "\u0414\u043E\u0433\u0430\u043D\u043E\u0432\u043E", "value": 26, "slug": "doganovo" }, { "key": "\u0414\u043E\u0439\u0440\u0430\u043D\u0446\u0438", "value": 14, "slug": "doyranci" }, { "key": "\u0414\u043E\u0439\u0440\u0435\u043D\u0446\u0438", "value": 32, "slug": "doyrenci" }, { "key": "\u0414\u043E\u043A\u0442\u043E\u0440 \u0419\u043E\u0441\u0438\u0444\u043E\u0432\u043E", "value": 17, "slug": "doktor-yosifovo" }, { "key": "\u0414\u043E\u043B\u0435\u043D", "value": 44, "slug": "dolen" }, { "key": "\u0414\u043E\u043B\u0435\u0446", "value": 10, "slug": "dolec" }, { "key": "\u0414\u043E\u043B\u0438\u0435", "value": 3, "slug": "dolie" }, { "key": "\u0414\u043E\u043B\u0438\u043D\u0430", "value": 28, "slug": "dolina" }, { "key": "\u0414\u043E\u043B\u0438\u0441\u0442\u043E\u0432\u043E", "value": 11, "slug": "dolistovo" }, { "key": "\u0414\u043E\u043B\u0438\u0449\u0435", "value": 42, "slug": "dolishche" }, { "key": "\u0414\u043E\u043B\u043D\u0430 \u0431\u0430\u043D\u044F", "value": 194, "slug": "dolna-banya" }, { "key": "\u0414\u043E\u043B\u043D\u0430 \u0411\u0435\u043B\u0430 \u0440\u0435\u0447\u043A\u0430", "value": 1, "slug": "dolna-bela-rechka" }, { "key": "\u0414\u043E\u043B\u043D\u0430 \u0411\u0435\u0448\u043E\u0432\u0438\u0446\u0430", "value": 11, "slug": "dolna-beshovica" }, { "key": "\u0414\u043E\u043B\u043D\u0430 \u0412\u0435\u0440\u0435\u043D\u0438\u0446\u0430", "value": 5, "slug": "dolna-verenica" }, { "key": "\u0414\u043E\u043B\u043D\u0430 \u0413\u0440\u0430\u0434\u0435\u0448\u043D\u0438\u0446\u0430", "value": 51, "slug": "dolna-gradeshnica" }, { "key": "\u0414\u043E\u043B\u043D\u0430 \u0413\u0440\u0430\u0449\u0438\u0446\u0430", "value": 1, "slug": "dolna-grashchica" }, { "key": "\u0414\u043E\u043B\u043D\u0430 \u0414\u0438\u043A\u0430\u043D\u044F", "value": 25, "slug": "dolna-dikanya" }, { "key": "\u0414\u043E\u043B\u043D\u0430 \u0414\u044A\u0431\u0435\u0432\u0430", "value": 4, "slug": "dolna-dbeva" }, { "key": "\u0414\u043E\u043B\u043D\u0430 \u041A\u0430\u0431\u0434\u0430", "value": 10, "slug": "dolna-kabda" }, { "key": "\u0414\u043E\u043B\u043D\u0430 \u041A\u0440\u0435\u043C\u0435\u043D\u0430", "value": 16, "slug": "dolna-kremena" }, { "key": "\u0414\u043E\u043B\u043D\u0430 \u043A\u0440\u0435\u043F\u043E\u0441\u0442", "value": 1, "slug": "dolna-krepost" }, { "key": "\u0414\u043E\u043B\u043D\u0430 \u041A\u0440\u0443\u0448\u0438\u0446\u0430", "value": 5, "slug": "dolna-krushica" }, { "key": "\u0414\u043E\u043B\u043D\u0430 \u041B\u0438\u043F\u043D\u0438\u0446\u0430", "value": 17, "slug": "dolna-lipnica" }, { "key": "\u0414\u043E\u043B\u043D\u0430 \u041C\u0430\u043B\u0438\u043D\u0430", "value": 6, "slug": "dolna-malina" }, { "key": "\u0414\u043E\u043B\u043D\u0430 \u043C\u0430\u0445\u0430\u043B\u0430", "value": 15, "slug": "dolna-mahala" }, { "key": "\u0414\u043E\u043B\u043D\u0430 \u041C\u0438\u0442\u0440\u043E\u043F\u043E\u043B\u0438\u044F", "value": 155, "slug": "dolna-mitropoliya" }, { "key": "\u0414\u043E\u043B\u043D\u0430 \u041D\u0435\u0432\u043B\u044F", "value": 3, "slug": "dolna-nevlya" }, { "key": "\u0414\u043E\u043B\u043D\u0430 \u041E\u0440\u044F\u0445\u043E\u0432\u0438\u0446\u0430", "value": 129, "slug": "dolna-oryahovica" }, { "key": "\u0414\u043E\u043B\u043D\u0430 \u0420\u0438\u0431\u043D\u0438\u0446\u0430", "value": 12, "slug": "dolna-ribnica" }, { "key": "\u0414\u043E\u043B\u043D\u0430 \u0420\u0438\u043A\u0441\u0430", "value": 2, "slug": "dolna-riksa" }, { "key": "\u0414\u043E\u043B\u043D\u0430 \u0421\u0435\u043A\u0438\u0440\u043D\u0430", "value": 5, "slug": "dolna-sekirna" }, { "key": "\u0414\u043E\u043B\u043D\u0430 \u0421\u0442\u0443\u0434\u0435\u043D\u0430", "value": 36, "slug": "dolna-studena" }, { "key": "\u0414\u043E\u043B\u043D\u0430 \u0425\u0443\u0431\u0430\u0432\u043A\u0430", "value": 8, "slug": "dolna-hubavka" }, { "key": "\u0414\u043E\u043B\u043D\u0438 \u0411\u043E\u0433\u0440\u043E\u0432", "value": 47, "slug": "dolni-bogrov" }, { "key": "\u0414\u043E\u043B\u043D\u0438 \u0411\u043E\u0448\u043D\u044F\u043A", "value": 1, "slug": "dolni-boshnyak" }, { "key": "\u0414\u043E\u043B\u043D\u0438 \u0412\u0430\u0434\u0438\u043D", "value": 12, "slug": "dolni-vadin" }, { "key": "\u0414\u043E\u043B\u043D\u0438 \u0412\u0438\u0442", "value": 18, "slug": "dolni-vit" }, { "key": "\u0414\u043E\u043B\u043D\u0438 \u0413\u043B\u0430\u0432\u0430\u043D\u0430\u043A", "value": 7, "slug": "dolni-glavanak" }, { "key": "\u0414\u043E\u043B\u043D\u0438 \u0414\u044A\u0431\u043D\u0438\u043A", "value": 222, "slug": "dolni-dbnik" }, { "key": "\u0414\u043E\u043B\u043D\u0438 \u041B\u043E\u043C", "value": 17, "slug": "dolni-lom" }, { "key": "\u0414\u043E\u043B\u043D\u0438 \u041B\u0443\u043A\u043E\u0432\u0438\u0442", "value": 37, "slug": "dolni-lukovit" }, { "key": "\u0414\u043E\u043B\u043D\u0438 \u041C\u0430\u0440\u044F\u043D", "value": 1, "slug": "dolni-maryan" }, { "key": "\u0414\u043E\u043B\u043D\u0438 \u041E\u043A\u043E\u043B", "value": 1, "slug": "dolni-okol" }, { "key": "\u0414\u043E\u043B\u043D\u0438 \u041F\u0430\u0441\u0430\u0440\u0435\u043B", "value": 44, "slug": "dolni-pasarel" }, { "key": "\u0414\u043E\u043B\u043D\u0438 \u0420\u0430\u043A\u043E\u0432\u0435\u0446", "value": 12, "slug": "dolni-rakovec" }, { "key": "\u0414\u043E\u043B\u043D\u0438 \u0426\u0438\u0431\u044A\u0440", "value": 38, "slug": "dolni-cibr" }, { "key": "\u0414\u043E\u043B\u043D\u0438 \u0447\u0438\u0444\u043B\u0438\u043A", "value": 403, "slug": "dolni-chiflik" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u0410\u0431\u043B\u0430\u043D\u043E\u0432\u043E", "value": 7, "slug": "dolno-ablanovo" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u0411\u0435\u043B\u0435\u0432\u043E", "value": 12, "slug": "dolno-belevo" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u0411\u0435\u043B\u043E\u0442\u0438\u043D\u0446\u0438", "value": 11, "slug": "dolno-belotinci" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u0411\u043E\u0442\u0435\u0432\u043E", "value": 13, "slug": "dolno-botevo" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u0412\u043E\u0439\u0432\u043E\u0434\u0438\u043D\u043E", "value": 3, "slug": "dolno-voyvodino" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u0413\u043E\u043B\u0435\u043C\u0430\u043D\u0446\u0438", "value": 10, "slug": "dolno-golemanci" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u0414\u0440\u0430\u0433\u043B\u0438\u0449\u0435", "value": 34, "slug": "dolno-draglishche" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u0414\u0440\u044F\u043D\u043E\u0432\u043E", "value": 30, "slug": "dolno-dryanovo" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u0438\u0437\u0432\u043E\u0440\u043E\u0432\u043E", "value": 22, "slug": "dolno-izvorovo" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u041A\u0430\u043C\u0430\u0440\u0446\u0438", "value": 9, "slug": "dolno-kamarci" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u041A\u043E\u0431\u0438\u043B\u0435", "value": 1, "slug": "dolno-kobile" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u041A\u043E\u0437\u0430\u0440\u0435\u0432\u043E", "value": 6, "slug": "dolno-kozarevo" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u041A\u044A\u043F\u0438\u043D\u043E\u0432\u043E", "value": 5, "slug": "dolno-kpinovo" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u041B\u0438\u043D\u0435\u0432\u043E", "value": 4, "slug": "dolno-linevo" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u041B\u0443\u043A\u043E\u0432\u043E", "value": 2, "slug": "dolno-lukovo" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u041D\u043E\u0432\u043A\u043E\u0432\u043E", "value": 1, "slug": "dolno-novkovo" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u043D\u043E\u0432\u043E \u0441\u0435\u043B\u043E", "value": 4, "slug": "dolno-novo-selo" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u041E\u0437\u0438\u0440\u043E\u0432\u043E", "value": 14, "slug": "dolno-ozirovo" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u041E\u0441\u0435\u043D\u043E\u0432\u043E", "value": 23, "slug": "dolno-osenovo" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u041F\u0440\u0430\u0445\u043E\u0432\u043E", "value": 1, "slug": "dolno-prahovo" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u0420\u044F\u0445\u043E\u0432\u043E", "value": 8, "slug": "dolno-ryahovo" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u0421\u0430\u0445\u0440\u0430\u043D\u0435", "value": 37, "slug": "dolno-sahrane" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u0441\u0435\u043B\u043E", "value": 3, "slug": "dolno-selo" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u0421\u043F\u0430\u043D\u0447\u0435\u0432\u043E", "value": 11, "slug": "dolno-spanchevo" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u0421\u044A\u0434\u0438\u0435\u0432\u043E", "value": 2, "slug": "dolno-sdievo" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u0423\u0439\u043D\u043E", "value": 6, "slug": "dolno-uyno" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u0426\u0435\u0440\u043E\u0432\u0435\u043D\u0435", "value": 10, "slug": "dolno-cerovene" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u0427\u0435\u0440\u043A\u043E\u0432\u0438\u0449\u0435", "value": 9, "slug": "dolno-cherkovishche" }, { "key": "\u0414\u043E\u043B\u043D\u043E \u042F\u0431\u044A\u043B\u043A\u043E\u0432\u043E", "value": 1, "slug": "dolno-yablkovo" }, { "key": "\u0414\u043E\u043B\u043D\u043E\u0441\u043B\u0430\u0432", "value": 11, "slug": "dolnoslav" }, { "key": "\u0414\u043E\u043C\u0438\u0449\u0435", "value": 4, "slug": "domishche" }, { "key": "\u0414\u043E\u043C\u043B\u044F\u043D", "value": 7, "slug": "domlyan" }, { "key": "\u0414\u043E\u043D\u0434\u0443\u043A\u043E\u0432\u043E", "value": 11, "slug": "dondukovo" }, { "key": "\u0414\u043E\u043D\u0438\u043D\u043E", "value": 3, "slug": "donino" }, { "key": "\u0414\u043E\u043D\u043A\u043E\u0432\u0446\u0438", "value": 2, "slug": "donkovci" }, { "key": "\u0414\u043E\u043D\u0447\u0435\u0432\u043E", "value": 36, "slug": "donchevo" }, { "key": "\u0414\u043E\u0440\u043A\u043E\u0432\u043E", "value": 89, "slug": "dorkovo" }, { "key": "\u0414\u043E\u0441\u0438\u0442\u0435\u0435\u0432\u043E", "value": 9, "slug": "dositeevo" }, { "key": "\u0414\u043E\u0441\u043F\u0430\u0442", "value": 216, "slug": "dospat" }, { "key": "\u0414\u043E\u0441\u043F\u0435\u0439", "value": 51, "slug": "dospey" }, { "key": "\u0414\u0440\u0430\u0431\u0438\u0448\u043D\u0430", "value": 2, "slug": "drabishna" }, { "key": "\u0414\u0440\u0430\u0433\u0430\u043D\u0430", "value": 6, "slug": "dragana" }, { "key": "\u0414\u0440\u0430\u0433\u0430\u043D\u0438\u0446\u0430", "value": 3, "slug": "draganica" }, { "key": "\u0414\u0440\u0430\u0433\u0430\u043D\u043E\u0432\u0435\u0446", "value": 4, "slug": "draganovec" }, { "key": "\u0414\u0440\u0430\u0433\u0430\u043D\u043E\u0432\u043E", "value": 89, "slug": "draganovo" }, { "key": "\u0414\u0440\u0430\u0433\u0430\u043D\u043E\u0432\u0446\u0438", "value": 14, "slug": "draganovci" }, { "key": "\u0414\u0440\u0430\u0433\u0430\u043D\u0446\u0438", "value": 7, "slug": "draganci" }, { "key": "\u0414\u0440\u0430\u0433\u0430\u043D\u0447\u0435\u0442\u0430\u0442\u0430", "value": 4, "slug": "draganchetata" }, { "key": "\u0414\u0440\u0430\u0433\u0430\u0448 \u0432\u043E\u0439\u0432\u043E\u0434\u0430", "value": 13, "slug": "dragash-voyvoda" }, { "key": "\u0414\u0440\u0430\u0433\u0438\u0435\u0432\u0446\u0438", "value": 11, "slug": "dragievci" }, { "key": "\u0414\u0440\u0430\u0433\u0438\u0436\u0435\u0432\u043E", "value": 49, "slug": "dragizhevo" }, { "key": "\u0414\u0440\u0430\u0433\u0438\u043D\u043E\u0432\u043E", "value": 100, "slug": "draginovo" }, { "key": "\u0414\u0440\u0430\u0433\u0438\u0447\u0435\u0432\u043E", "value": 118, "slug": "dragichevo" }, { "key": "\u0414\u0440\u0430\u0433\u043E\u0432\u0438\u0449\u0438\u0446\u0430", "value": 78, "slug": "dragovishchica" }, { "key": "\u0414\u0440\u0430\u0433\u043E\u0432\u043E", "value": 3, "slug": "dragovo" }, { "key": "\u0414\u0440\u0430\u0433\u043E\u0434\u0430\u043D\u043E\u0432\u043E", "value": 12, "slug": "dragodanovo" }, { "key": "\u0414\u0440\u0430\u0433\u043E\u0435\u0432\u043E", "value": 30, "slug": "dragoevo" }, { "key": "\u0414\u0440\u0430\u0433\u043E\u0438\u043B", "value": 2, "slug": "dragoil" }, { "key": "\u0414\u0440\u0430\u0433\u043E\u0439\u043D\u043E\u0432\u043E", "value": 15, "slug": "dragoynovo" }, { "key": "\u0414\u0440\u0430\u0433\u043E\u043C\u0430\u043D", "value": 240, "slug": "dragoman" }, { "key": "\u0414\u0440\u0430\u0433\u043E\u043C\u0438\u0440", "value": 13, "slug": "dragomir" }, { "key": "\u0414\u0440\u0430\u0433\u043E\u043C\u0438\u0440\u043E\u0432\u043E", "value": 9, "slug": "dragomirovo" }, { "key": "\u0414\u0440\u0430\u0433\u043E\u043C\u044A\u0436", "value": 12, "slug": "dragomzh" }, { "key": "\u0414\u0440\u0430\u0433\u043E\u0440", "value": 75, "slug": "dragor" }, { "key": "\u0414\u0440\u0430\u0433\u043E\u0442\u0438\u043D\u0446\u0438", "value": 1, "slug": "dragotinci" }, { "key": "\u0414\u0440\u0430\u0433\u0443\u0448\u0438\u043D\u043E\u0432\u043E", "value": 42, "slug": "dragushinovo" }, { "key": "\u0414\u0440\u0430\u0436\u0435\u0432\u043E", "value": 25, "slug": "drazhevo" }, { "key": "\u0414\u0440\u0430\u0436\u0438\u043D\u0446\u0438", "value": 1, "slug": "drazhinci" }, { "key": "\u0414\u0440\u0430\u043A\u0430", "value": 10, "slug": "draka" }, { "key": "\u0414\u0440\u0430\u043A\u0430\u0442\u0430", "value": 10, "slug": "drakata" }, { "key": "\u0414\u0440\u0430\u043B\u0444\u0430", "value": 7, "slug": "dralfa" }, { "key": "\u0414\u0440\u0430\u043C\u0430", "value": 4, "slug": "drama" }, { "key": "\u0414\u0440\u0430\u043D\u0433\u043E\u0432\u043E", "value": 45, "slug": "drangovo" }, { "key": "\u0414\u0440\u0430\u0447\u0435\u0432\u043E", "value": 20, "slug": "drachevo" }, { "key": "\u0414\u0440\u0430\u0448\u0430\u043D", "value": 1, "slug": "drashan" }, { "key": "\u0414\u0440\u0430\u0448\u043A\u043E\u0432\u0430 \u043F\u043E\u043B\u044F\u043D\u0430", "value": 10, "slug": "drashkova-polyana" }, { "key": "\u0414\u0440\u0435\u043D", "value": 35, "slug": "dren" }, { "key": "\u0414\u0440\u0435\u043D\u043E\u0432", "value": 14, "slug": "drenov" }, { "key": "\u0414\u0440\u0435\u043D\u043E\u0432\u0435\u0446", "value": 29, "slug": "drenovec" }, { "key": "\u0414\u0440\u0435\u043D\u043E\u0432\u043E", "value": 3, "slug": "drenovo" }, { "key": "\u0414\u0440\u0435\u043D\u0442\u0430", "value": 3, "slug": "drenta" }, { "key": "\u0414\u0440\u0435\u043D\u0446\u0438", "value": 6, "slug": "drenci" }, { "key": "\u0414\u0440\u0438\u043D\u043E\u0432\u043E", "value": 12, "slug": "drinovo" }, { "key": "\u0414\u0440\u0438\u043F\u0447\u0435\u0432\u043E", "value": 3, "slug": "dripchevo" }, { "key": "\u0414\u0440\u043E\u043F\u043B\u0430", "value": 26, "slug": "dropla" }, { "key": "\u0414\u0440\u0443\u0433\u0430\u043D", "value": 18, "slug": "drugan" }, { "key": "\u0414\u0440\u0443\u0436\u0431\u0430", "value": 2, "slug": "druzhba" }, { "key": "\u0414\u0440\u0443\u0436\u0438\u043D\u0446\u0438", "value": 3, "slug": "druzhinci" }, { "key": "\u0414\u0440\u0443\u043C\u0435\u0432\u043E", "value": 23, "slug": "drumevo" }, { "key": "\u0414\u0440\u0443\u043C\u043E\u0445\u0430\u0440", "value": 8, "slug": "drumohar" }, { "key": "\u0414\u0440\u044A\u043C\u0448\u0430", "value": 14, "slug": "drmsha" }, { "key": "\u0414\u0440\u044A\u043D\u0434\u0430\u0440", "value": 3, "slug": "drndar" }, { "key": "\u0414\u0440\u044F\u043D\u043A\u0430", "value": 10, "slug": "dryanka" }, { "key": "\u0414\u0440\u044F\u043D\u043A\u043E\u0432\u0435\u0446", "value": 5, "slug": "dryankovec" }, { "key": "\u0414\u0440\u044F\u043D\u043E\u0432\u0435\u0446", "value": 55, "slug": "dryanovec" }, { "key": "\u0414\u0440\u044F\u043D\u043E\u0432\u043E", "value": 582, "slug": "dryanovo" }, { "key": "\u0414\u0440\u044F\u043D\u044A\u0442", "value": 1, "slug": "dryant" }, { "key": "\u0414\u0443\u0432\u0430\u043D\u043B\u0438\u0438", "value": 7, "slug": "duvanlii" }, { "key": "\u0414\u0443\u043B\u043E\u0432\u043E", "value": 566, "slug": "dulovo" }, { "key": "\u0414\u0443\u043C\u043D\u0438\u0446\u0438", "value": 6, "slug": "dumnici" }, { "key": "\u0414\u0443\u043D\u0430\u0432\u0446\u0438", "value": 118, "slug": "dunavci" }, { "key": "\u0414\u0443\u043D\u0435\u0432\u043E", "value": 7, "slug": "dunevo" }, { "key": "\u0414\u0443\u043F\u043D\u0438\u0446\u0430", "value": 2733, "slug": "dupnica" }, { "key": "\u0414\u0443\u0440\u0430\u043D\u043A\u0443\u043B\u0430\u043A", "value": 53, "slug": "durankulak" }, { "key": "\u0414\u0443\u0445\u043E\u0432\u0435\u0446", "value": 9, "slug": "duhovec" }, { "key": "\u0414\u0443\u0448\u0430\u043D\u0446\u0438", "value": 27, "slug": "dushanci" }, { "key": "\u0414\u0443\u0448\u0435\u0432\u043E", "value": 39, "slug": "dushevo" }, { "key": "\u0414\u044A\u0431\u0435\u043D", "value": 8, "slug": "dben" }, { "key": "\u0414\u044A\u0431\u0435\u043D\u0435", "value": 76, "slug": "dbene" }, { "key": "\u0414\u044A\u0431\u043D\u0438\u043A", "value": 38, "slug": "dbnik" }, { "key": "\u0414\u044A\u0431\u043D\u0438\u0446\u0430", "value": 77, "slug": "dbnica" }, { "key": "\u0414\u044A\u0431\u043E\u0432\u0430", "value": 1, "slug": "dbova" }, { "key": "\u0414\u044A\u0431\u043E\u0432\u0430\u043D", "value": 17, "slug": "dbovan" }, { "key": "\u0414\u044A\u0431\u043E\u0432\u0435\u0446", "value": 4, "slug": "dbovec" }, { "key": "\u0414\u044A\u0431\u043E\u0432\u0438\u043A", "value": 7, "slug": "dbovik" }, { "key": "\u0414\u044A\u0431\u043E\u0432\u0438\u0446\u0430", "value": 2, "slug": "dbovica" }, { "key": "\u0414\u044A\u0431\u043E\u0432\u043E", "value": 49, "slug": "dbovo" }, { "key": "\u0414\u044A\u0431\u0440\u0430\u0432\u0430", "value": 14, "slug": "dbrava" }, { "key": "\u0414\u044A\u0431\u0440\u0430\u0432\u0430\u0442\u0430", "value": 2, "slug": "dbravata" }, { "key": "\u0414\u044A\u0431\u0440\u0430\u0432\u0438\u043D\u043E", "value": 44, "slug": "dbravino" }, { "key": "\u0414\u044A\u0431\u0440\u0430\u0432\u0438\u0442\u0435", "value": 17, "slug": "dbravite" }, { "key": "\u0414\u044A\u0431\u0440\u0430\u0432\u043A\u0430", "value": 1, "slug": "dbravka" }, { "key": "\u0414\u044A\u0436\u0434\u0438\u043D\u043E", "value": 11, "slug": "dzhdino" }, { "key": "\u0414\u044A\u0436\u0434\u043E\u0432\u043D\u0438\u0446\u0430", "value": 1, "slug": "dzhdovnica" }, { "key": "\u0414\u044A\u043B\u0431\u043E\u043A \u0434\u043E\u043B", "value": 14, "slug": "dlbok-dol" }, { "key": "\u0414\u044A\u043B\u0431\u043E\u043A \u0438\u0437\u0432\u043E\u0440", "value": 43, "slug": "dlbok-izvor" }, { "key": "\u0414\u044A\u043B\u0431\u043E\u043A\u0438", "value": 47, "slug": "dlboki" }, { "key": "\u0414\u044A\u043B\u0433\u0430\u0447", "value": 16, "slug": "dlgach" }, { "key": "\u0414\u044A\u043B\u0433\u0438 \u0434\u0435\u043B", "value": 12, "slug": "dlgi-del" }, { "key": "\u0414\u044A\u043B\u0433\u043E \u043F\u043E\u043B\u0435", "value": 54, "slug": "dlgo-pole" }, { "key": "\u0414\u044A\u043B\u0433\u043E\u0434\u0435\u043B\u0446\u0438", "value": 8, "slug": "dlgodelci" }, { "key": "\u0414\u044A\u043B\u0433\u043E\u043F\u043E\u043B", "value": 216, "slug": "dlgopol" }, { "key": "\u0414\u044A\u0440\u0436\u0430\u0432\u0430", "value": 4, "slug": "drzhava" }, { "key": "\u0414\u044A\u0440\u0436\u0430\u043D\u0438\u0446\u0430", "value": 12, "slug": "drzhanica" }, { "key": "\u0414\u044A\u0440\u043C\u0430\u043D\u0446\u0438", "value": 8, "slug": "drmanci" }, { "key": "\u0414\u044A\u0441\u043A\u043E\u0442", "value": 22, "slug": "dskot" }, { "key": "\u0414\u044A\u0441\u043A\u043E\u0442\u043D\u0430", "value": 43, "slug": "dskotna" }, { "key": "\u0414\u044E\u043B\u0435\u0432\u043E", "value": 53, "slug": "dyulevo" }, { "key": "\u0414\u044E\u043B\u0438\u043D\u043E", "value": 20, "slug": "dyulino" }, { "key": "\u0414\u044E\u043B\u0438\u0446\u0430", "value": 12, "slug": "dyulica" }, { "key": "\u0414\u044F\u0434\u043E\u0432\u043E", "value": 12, "slug": "dyadovo" }, { "key": "\u0414\u044F\u0434\u043E\u0432\u0441\u043A\u043E", "value": 6, "slug": "dyadovsko" }, { "key": "\u0414\u044F\u0434\u043E\u0432\u0446\u0438", "value": 3, "slug": "dyadovci" }, { "key": "\u0414\u044F\u043A\u043E\u0432\u043E", "value": 1, "slug": "dyakovo" }, { "key": "\u0414\u044F\u043D\u043A\u043E\u0432\u043E", "value": 77, "slug": "dyankovo" }, { "key": "\u0415\u0432\u0440\u0435\u043D\u043E\u0437\u043E\u0432\u043E", "value": 2, "slug": "evrenozovo" }, { "key": "\u0415\u0433\u0440\u0435\u043A", "value": 4, "slug": "egrek" }, { "key": "\u0415\u0433\u044A\u043B\u043D\u0438\u0446\u0430", "value": 4, "slug": "eglnica" }, { "key": "\u0415\u0434\u0438\u043D\u0430\u043A\u043E\u0432\u0446\u0438", "value": 5, "slug": "edinakovci" }, { "key": "\u0415\u0434\u0440\u0435\u0432\u043E", "value": 16, "slug": "edrevo" }, { "key": "\u0415\u0434\u0440\u0438\u043D\u043E", "value": 6, "slug": "edrino" }, { "key": "\u0415\u0437\u0434\u0438\u043C\u0438\u0440\u0446\u0438", "value": 6, "slug": "ezdimirci" }, { "key": "\u0415\u0437\u0435\u0440\u0435\u0446", "value": 1, "slug": "ezerec" }, { "key": "\u0415\u0437\u0435\u0440\u043E", "value": 12, "slug": "ezero" }, { "key": "\u0415\u0437\u0435\u0440\u043E\u0432\u043E", "value": 143, "slug": "ezerovo" }, { "key": "\u0415\u0437\u0435\u0440\u0447\u0435", "value": 59, "slug": "ezerche" }, { "key": "\u0415\u043A\u0437\u0430\u0440\u0445 \u0410\u043D\u0442\u0438\u043C\u043E\u0432\u043E", "value": 31, "slug": "ekzarh-antimovo" }, { "key": "\u0415\u043A\u0437\u0430\u0440\u0445 \u0419\u043E\u0441\u0438\u0444", "value": 14, "slug": "ekzarh-yosif" }, { "key": "\u0415\u043B\u0435\u043D\u0430", "value": 390, "slug": "elena" }, { "key": "\u0415\u043B\u0435\u043D\u0438\u043D\u043E", "value": 33, "slug": "elenino" }, { "key": "\u0415\u043B\u0435\u043D\u043A\u0430", "value": 4, "slug": "elenka" }, { "key": "\u0415\u043B\u0435\u043D\u043E\u0432\u043E", "value": 47, "slug": "elenovo" }, { "key": "\u0415\u043B\u0435\u0448\u043D\u0438\u0446\u0430", "value": 68, "slug": "eleshnica" }, { "key": "\u0415\u043B\u0438\u043D \u041F\u0435\u043B\u0438\u043D", "value": 786, "slug": "elin-pelin" }, { "key": "\u0415\u043B\u0438\u0441\u0435\u0439\u043D\u0430", "value": 7, "slug": "eliseyna" }, { "key": "\u0415\u043B\u043E\u0432\u0434\u043E\u043B", "value": 6, "slug": "elovdol" }, { "key": "\u0415\u043B\u0445\u043E\u0432\u0435\u0446", "value": 44, "slug": "elhovec" }, { "key": "\u0415\u043B\u0445\u043E\u0432\u043E", "value": 1167, "slug": "elhovo" }, { "key": "\u0415\u043B\u0448\u0438\u0446\u0430", "value": 17, "slug": "elshica" }, { "key": "\u0415\u043C\u0435\u043D", "value": 7, "slug": "emen" }, { "key": "\u0415\u043C\u043E\u043D\u0430", "value": 12, "slug": "emona" }, { "key": "\u0415\u043D\u0435\u0432 \u0440\u044A\u0442", "value": 1, "slug": "enev-rt" }, { "key": "\u0415\u043D\u0435\u0432\u043E", "value": 15, "slug": "enevo" }, { "key": "\u0415\u043D\u0438\u043D\u0430", "value": 154, "slug": "enina" }, { "key": "\u0415\u043D\u0438\u0446\u0430", "value": 18, "slug": "enica" }, { "key": "\u0415\u043D\u0447\u0435\u0446", "value": 20, "slug": "enchec" }, { "key": "\u0415\u043D\u0447\u043E\u0432\u0446\u0438", "value": 1, "slug": "enchovci" }, { "key": "\u0415\u043D\u044C\u043E\u0432\u0447\u0435", "value": 2, "slug": "enovche" }, { "key": "\u0415\u0440\u0434\u0435\u043D", "value": 15, "slug": "erden" }, { "key": "\u0415\u0440\u0435\u043C\u0438\u044F", "value": 1, "slug": "eremiya" }, { "key": "\u0415\u0440\u043C\u0430 \u0440\u0435\u043A\u0430", "value": 29, "slug": "erma-reka" }, { "key": "\u0415\u0440\u043E\u0432\u0435\u0442\u0435", "value": 2, "slug": "erovete" }, { "key": "\u0415\u0441\u0435\u043D", "value": 1, "slug": "esen" }, { "key": "\u0415\u0441\u0435\u043D\u0438\u0446\u0430", "value": 12, "slug": "esenica" }, { "key": "\u0415\u0442\u0440\u043E\u043F\u043E\u043B\u0435", "value": 598, "slug": "etropole" }, { "key": "\u0415\u0444\u0440\u0435\u0439\u0442\u043E\u0440 \u0411\u0430\u043A\u0430\u043B\u043E\u0432\u043E", "value": 2, "slug": "efreytor-bakalovo" }, { "key": "\u0415\u0444\u0440\u0435\u043C", "value": 3, "slug": "efrem" }, { "key": "\u0416\u0430\u0431\u043B\u044F\u043D\u043E", "value": 4, "slug": "zhablyano" }, { "key": "\u0416\u0430\u0431\u043E\u043A\u0440\u044A\u0442", "value": 37, "slug": "zhabokrt" }, { "key": "\u0416\u0435\u0433\u043B\u0430\u0440\u0446\u0438", "value": 15, "slug": "zheglarci" }, { "key": "\u0416\u0435\u0433\u043B\u0438\u0446\u0430", "value": 5, "slug": "zheglica" }, { "key": "\u0416\u0435\u0434\u043D\u0430", "value": 4, "slug": "zhedna" }, { "key": "\u0416\u0435\u043B\u0435\u0437\u0430\u0440\u0438", "value": 3, "slug": "zhelezari" }, { "key": "\u0416\u0435\u043B\u0435\u0437\u0438\u043D\u043E", "value": 7, "slug": "zhelezino" }, { "key": "\u0416\u0435\u043B\u0435\u0437\u043D\u0430", "value": 14, "slug": "zhelezna" }, { "key": "\u0416\u0435\u043B\u0435\u0437\u043D\u0438\u043A", "value": 12, "slug": "zheleznik" }, { "key": "\u0416\u0435\u043B\u0435\u0437\u043D\u0438\u0446\u0430", "value": 92, "slug": "zheleznica" }, { "key": "\u0416\u0435\u043B\u0435\u043D", "value": 6, "slug": "zhelen" }, { "key": "\u0416\u0435\u043B\u044A\u0434", "value": 1, "slug": "zheld" }, { "key": "\u0416\u0435\u043B\u044A\u0434\u043E\u0432\u043E", "value": 1, "slug": "zheldovo" }, { "key": "\u0416\u0435\u043B\u044E \u0432\u043E\u0439\u0432\u043E\u0434\u0430", "value": 76, "slug": "zhelyu-voyvoda" }, { "key": "\u0416\u0435\u043B\u044F\u0432\u0430", "value": 39, "slug": "zhelyava" }, { "key": "\u0416\u0435\u043B\u044F\u0437\u043A\u043E\u0432\u0435\u0446", "value": 15, "slug": "zhelyazkovec" }, { "key": "\u0416\u0435\u043B\u044F\u0437\u043D\u043E", "value": 23, "slug": "zhelyazno" }, { "key": "\u0416\u0435\u043B\u044F\u0437\u043E\u0432\u043E", "value": 9, "slug": "zhelyazovo" }, { "key": "\u0416\u0435\u043D\u0434\u0430", "value": 1, "slug": "zhenda" }, { "key": "\u0416\u0435\u0440\u0430\u0432\u043D\u0430", "value": 21, "slug": "zheravna" }, { "key": "\u0416\u0435\u0440\u043D\u043E\u0432", "value": 2, "slug": "zhernov" }, { "key": "\u0416\u0438\u0432\u043A\u043E", "value": 2, "slug": "zhivko" }, { "key": "\u0416\u0438\u0432\u043A\u043E\u0432\u043E", "value": 41, "slug": "zhivkovo" }, { "key": "\u0416\u0438\u0436\u0435\u0432\u043E", "value": 5, "slug": "zhizhevo" }, { "key": "\u0416\u0438\u043B\u0435\u043D\u0446\u0438", "value": 60, "slug": "zhilenci" }, { "key": "\u0416\u0438\u043B\u0438\u043D\u043E", "value": 4, "slug": "zhilino" }, { "key": "\u0416\u0438\u043D\u0437\u0438\u0444\u043E\u0432\u043E", "value": 7, "slug": "zhinzifovo" }, { "key": "\u0416\u0438\u0442\u0435\u043D", "value": 53, "slug": "zhiten" }, { "key": "\u0416\u0438\u0442\u043D\u0438\u0446\u0430", "value": 174, "slug": "zhitnica" }, { "key": "\u0416\u0438\u0442\u043E\u0441\u0432\u044F\u0442", "value": 10, "slug": "zhitosvyat" }, { "key": "\u0416\u0438\u0442\u0443\u0448\u0430", "value": 1, "slug": "zhitusha" }, { "key": "\u0416\u0440\u0435\u0431\u0435\u0432\u043E", "value": 2, "slug": "zhrebevo" }, { "key": "\u0416\u0440\u0435\u0431\u0438\u0447\u043A\u043E", "value": 1, "slug": "zhrebichko" }, { "key": "\u0416\u044A\u043B\u0442 \u0431\u0440\u044F\u0433", "value": 9, "slug": "zhlt-bryag" }, { "key": "\u0416\u044A\u043B\u0442 \u043A\u0430\u043C\u044A\u043A", "value": 3, "slug": "zhlt-kamk" }, { "key": "\u0416\u044A\u043B\u0442\u0435\u0448", "value": 13, "slug": "zhltesh" }, { "key": "\u0416\u044A\u043B\u0442\u0438 \u0431\u0440\u044F\u0433", "value": 13, "slug": "zhlti-bryag" }, { "key": "\u0416\u044A\u043B\u0442\u0438 \u0440\u0438\u0434", "value": 4, "slug": "zhlti-rid" }, { "key": "\u0416\u044A\u043B\u0442\u0443\u0448\u0430", "value": 22, "slug": "zhltusha" }, { "key": "\u0417\u0430\u0431\u0435\u0440\u043D\u043E\u0432\u043E", "value": 5, "slug": "zabernovo" }, { "key": "\u0417\u0430\u0431\u044A\u0440\u0434\u043E", "value": 11, "slug": "zabrdo" }, { "key": "\u0417\u0430\u0432\u0435\u0442", "value": 145, "slug": "zavet" }, { "key": "\u0417\u0430\u0432\u043E\u0439", "value": 25, "slug": "zavoy" }, { "key": "\u0417\u0430\u0432\u043E\u044F", "value": 10, "slug": "zavoya" }, { "key": "\u0417\u0430\u0433\u043E\u0440\u0435", "value": 28, "slug": "zagore" }, { "key": "\u0417\u0430\u0433\u043E\u0440\u0438\u0447\u0435", "value": 18, "slug": "zagoriche" }, { "key": "\u0417\u0430\u0433\u043E\u0440\u0441\u043A\u043E", "value": 2, "slug": "zagorsko" }, { "key": "\u0417\u0430\u0433\u043E\u0440\u0446\u0438", "value": 38, "slug": "zagorci" }, { "key": "\u0417\u0430\u0433\u0440\u0430\u0436\u0434\u0435\u043D", "value": 24, "slug": "zagrazhden" }, { "key": "\u0417\u0430\u0434\u0440\u0443\u0433\u0430", "value": 9, "slug": "zadruga" }, { "key": "\u0417\u0430\u0438\u043C\u0447\u0435\u0432\u043E", "value": 7, "slug": "zaimchevo" }, { "key": "\u0417\u0430\u0439\u0447\u0430\u0440", "value": 28, "slug": "zaychar" }, { "key": "\u0417\u0430\u0439\u0447\u0438\u043D\u043E", "value": 2, "slug": "zaychino" }, { "key": "\u0417\u0430\u0439\u0447\u0438\u043D\u043E \u043E\u0440\u0435\u0448\u0435", "value": 14, "slug": "zaychino-oreshe" }, { "key": "\u0417\u0430\u043C\u0444\u0438\u0440", "value": 22, "slug": "zamfir" }, { "key": "\u0417\u0430\u043C\u0444\u0438\u0440\u043E\u0432\u043E", "value": 50, "slug": "zamfirovo" }, { "key": "\u0417\u0430\u043D\u043E\u0433\u0435", "value": 1, "slug": "zanoge" }, { "key": "\u0417\u0430\u0440\u0430\u0435\u0432\u043E", "value": 15, "slug": "zaraevo" }, { "key": "\u0417\u0430\u0440\u0438\u0446\u0430", "value": 6, "slug": "zarica" }, { "key": "\u0417\u0430\u0440\u043D\u0438\u043A", "value": 6, "slug": "zarnik" }, { "key": "\u0417\u0430\u0441\u0435\u043B\u0435", "value": 8, "slug": "zasele" }, { "key": "\u0417\u0430\u0441\u043C\u044F\u043D\u043E", "value": 8, "slug": "zasmyano" }, { "key": "\u0417\u0430\u0444\u0438\u0440\u043E\u0432\u043E", "value": 48, "slug": "zafirovo" }, { "key": "\u0417\u0430\u0445\u0430\u0440\u0438 \u0421\u0442\u043E\u044F\u043D\u043E\u0432\u043E", "value": 13, "slug": "zahari-stoyanovo" }, { "key": "\u0417\u0430\u044F", "value": 8, "slug": "zaya" }, { "key": "\u0417\u0432\u0435\u0433\u043E\u0440", "value": 6, "slug": "zvegor" }, { "key": "\u0417\u0432\u0435\u0437\u0434\u0430", "value": 3, "slug": "zvezda" }, { "key": "\u0417\u0432\u0435\u0437\u0434\u0435\u043B", "value": 23, "slug": "zvezdel" }, { "key": "\u0417\u0432\u0435\u0437\u0434\u0435\u043B\u0438\u043D\u0430", "value": 14, "slug": "zvezdelina" }, { "key": "\u0417\u0432\u0435\u0437\u0434\u0435\u043D", "value": 5, "slug": "zvezden" }, { "key": "\u0417\u0432\u0435\u0437\u0434\u0435\u0446", "value": 16, "slug": "zvezdec" }, { "key": "\u0417\u0432\u0435\u0437\u0434\u0438\u0446\u0430", "value": 101, "slug": "zvezdica" }, { "key": "\u0417\u0432\u0435\u043D\u0438\u043C\u0438\u0440", "value": 8, "slug": "zvenimir" }, { "key": "\u0417\u0432\u0435\u0440\u0438\u043D\u043E", "value": 54, "slug": "zverino" }, { "key": "\u0417\u0432\u0438\u043D\u0438\u0446\u0430", "value": 7, "slug": "zvinica" }, { "key": "\u0417\u0432\u044A\u043D\u0430\u0440\u043A\u0430", "value": 16, "slug": "zvnarka" }, { "key": "\u0417\u0432\u044A\u043D\u0430\u0440\u0446\u0438", "value": 14, "slug": "zvnarci" }, { "key": "\u0417\u0432\u044A\u043D\u0435\u0446", "value": 4, "slug": "zvnec" }, { "key": "\u0417\u0432\u044A\u043D\u0438\u0447\u0435\u0432\u043E", "value": 83, "slug": "zvnichevo" }, { "key": "\u0417\u0433\u0430\u043B\u0435\u0432\u043E", "value": 20, "slug": "zgalevo" }, { "key": "\u0417\u0433\u043E\u0440\u0438\u0433\u0440\u0430\u0434", "value": 84, "slug": "zgorigrad" }, { "key": "\u0417\u0433\u0443\u0440\u043E\u0432\u043E", "value": 2, "slug": "zgurovo" }, { "key": "\u0417\u0434\u0440\u0430\u0432\u0435\u0446", "value": 66, "slug": "zdravec" }, { "key": "\u0417\u0434\u0440\u0430\u0432\u043A\u043E\u0432\u0435\u0446", "value": 2, "slug": "zdravkovec" }, { "key": "\u0417\u0434\u0440\u0430\u0432\u0447\u0435\u0446", "value": 1, "slug": "zdravchec" }, { "key": "\u0417\u0435\u0431\u0438\u043B", "value": 14, "slug": "zebil" }, { "key": "\u0417\u0435\u043B\u0435\u043D\u0430 \u043C\u043E\u0440\u0430\u0432\u0430", "value": 10, "slug": "zelena-morava" }, { "key": "\u0417\u0435\u043B\u0435\u043D\u0434\u043E\u043B", "value": 19, "slug": "zelendol" }, { "key": "\u0417\u0435\u043B\u0435\u043D\u0438\u0433\u0440\u0430\u0434", "value": 1, "slug": "zelenigrad" }, { "key": "\u0417\u0435\u043B\u0435\u043D\u0438\u043A\u0430", "value": 1, "slug": "zelenika" }, { "key": "\u0417\u0435\u043B\u0435\u043D\u0438\u043A\u043E\u0432\u043E", "value": 19, "slug": "zelenikovo" }, { "key": "\u0417\u0435\u043C\u0435\u043D", "value": 91, "slug": "zemen" }, { "key": "\u0417\u0435\u043C\u0435\u043D\u0446\u0438", "value": 2, "slug": "zemenci" }, { "key": "\u0417\u0435\u043C\u043B\u0435\u043D", "value": 11, "slug": "zemlen" }, { "key": "\u0417\u0435\u0442\u044C\u043E\u0432\u043E", "value": 41, "slug": "zetovo" }, { "key": "\u0417\u0438\u0434\u0430\u0440\u043E\u0432\u043E", "value": 32, "slug": "zidarovo" }, { "key": "\u0417\u0438\u0434\u0430\u0440\u0446\u0438", "value": 2, "slug": "zidarci" }, { "key": "\u0417\u0438\u043C\u0435\u043D", "value": 3, "slug": "zimen" }, { "key": "\u0417\u0438\u043C\u043D\u0438\u0446\u0430", "value": 95, "slug": "zimnica" }, { "key": "\u0417\u0438\u043C\u043E\u0432\u0438\u043D\u0430", "value": 14, "slug": "zimovina" }, { "key": "\u0417\u043B\u0430\u0442\u0430\u0440", "value": 14, "slug": "zlatar" }, { "key": "\u0417\u043B\u0430\u0442\u0430\u0440\u0438", "value": 6, "slug": "zlatari" }, { "key": "\u0417\u043B\u0430\u0442\u0430\u0440\u0438\u0446\u0430", "value": 92, "slug": "zlatarica" }, { "key": "\u0417\u043B\u0430\u0442\u0435\u0432\u0446\u0438", "value": 11, "slug": "zlatevci" }, { "key": "\u0417\u043B\u0430\u0442\u0438 \u0432\u043E\u0439\u0432\u043E\u0434\u0430", "value": 21, "slug": "zlati-voyvoda" }, { "key": "\u0417\u043B\u0430\u0442\u0438\u043D\u0430", "value": 10, "slug": "zlatina" }, { "key": "\u0417\u043B\u0430\u0442\u0438\u0442\u0440\u0430\u043F", "value": 120, "slug": "zlatitrap" }, { "key": "\u0417\u043B\u0430\u0442\u0438\u0446\u0430", "value": 308, "slug": "zlatica" }, { "key": "\u0417\u043B\u0430\u0442\u0438\u044F", "value": 24, "slug": "zlatiya" }, { "key": "\u0417\u043B\u0430\u0442\u043D\u0430 \u043B\u0438\u0432\u0430\u0434\u0430", "value": 5, "slug": "zlatna-livada" }, { "key": "\u0417\u043B\u0430\u0442\u043D\u0430 \u043D\u0438\u0432\u0430", "value": 8, "slug": "zlatna-niva" }, { "key": "\u0417\u043B\u0430\u0442\u043D\u0430 \u041F\u0430\u043D\u0435\u0433\u0430", "value": 42, "slug": "zlatna-panega" }, { "key": "\u0417\u043B\u0430\u0442\u043E\u0432\u0440\u044A\u0445", "value": 26, "slug": "zlatovrh" }, { "key": "\u0417\u043B\u0430\u0442\u043E\u0433\u0440\u0430\u0434", "value": 513, "slug": "zlatograd" }, { "key": "\u0417\u043B\u0430\u0442\u043E\u043A\u043B\u0430\u0441", "value": 11, "slug": "zlatoklas" }, { "key": "\u0417\u043B\u0430\u0442\u043E\u043B\u0438\u0441\u0442", "value": 5, "slug": "zlatolist" }, { "key": "\u0417\u043B\u0430\u0442\u043E\u043F\u043E\u043B\u0435", "value": 10, "slug": "zlatopole" }, { "key": "\u0417\u043B\u0430\u0442\u043E\u0441\u0435\u043B", "value": 9, "slug": "zlatosel" }, { "key": "\u0417\u043B\u0430\u0442\u043E\u0443\u0441\u0442\u043E\u0432\u043E", "value": 2, "slug": "zlatoustovo" }, { "key": "\u0417\u043B\u0430\u0442\u0443\u0448\u0430", "value": 10, "slug": "zlatusha" }, { "key": "\u0417\u043B\u043E\u0433\u043E\u0448", "value": 3, "slug": "zlogosh" }, { "key": "\u0417\u043B\u043E\u043A\u0443\u0447\u0435\u043D\u0435", "value": 38, "slug": "zlokuchene" }, { "key": "\u0417\u043C\u0435\u0435\u0432\u043E", "value": 20, "slug": "zmeevo" }, { "key": "\u0417\u043C\u0435\u0438\u0446\u0430", "value": 50, "slug": "zmeica" }, { "key": "\u0417\u043C\u0435\u0439\u043D\u043E", "value": 5, "slug": "zmeyno" }, { "key": "\u0417\u043C\u0435\u0439\u043E\u0432\u043E", "value": 30, "slug": "zmeyovo" }, { "key": "\u0417\u043D\u0430\u043C\u0435\u043D\u043E\u0441\u0435\u0446", "value": 26, "slug": "znamenosec" }, { "key": "\u0417\u043E\u0433\u0440\u0430\u0444", "value": 1, "slug": "zograf" }, { "key": "\u0417\u043E\u0440\u043D\u0438\u0446\u0430", "value": 35, "slug": "zornica" }, { "key": "\u0417\u044A\u0440\u043D\u0435\u0432\u043E", "value": 21, "slug": "zrnevo" }, { "key": "\u0418\u0432\u0430\u0439\u043B\u043E", "value": 123, "slug": "ivaylo" }, { "key": "\u0418\u0432\u0430\u0439\u043B\u043E\u0432\u0433\u0440\u0430\u0434", "value": 183, "slug": "ivaylovgrad" }, { "key": "\u0418\u0432\u0430\u043D \u0412\u0430\u0437\u043E\u0432\u043E", "value": 15, "slug": "ivan-vazovo" }, { "key": "\u0418\u0432\u0430\u043D \u0428\u0438\u0448\u043C\u0430\u043D\u043E\u0432\u043E", "value": 9, "slug": "ivan-shishmanovo" }, { "key": "\u0418\u0432\u0430\u043D\u043A\u043E\u0432\u0446\u0438", "value": 1, "slug": "ivankovci" }, { "key": "\u0418\u0432\u0430\u043D\u043E\u0432\u043E", "value": 71, "slug": "ivanovo" }, { "key": "\u0418\u0432\u0430\u043D\u043E\u0432\u0446\u0438", "value": 1, "slug": "ivanovci" }, { "key": "\u0418\u0432\u0430\u043D\u0441\u043A\u0438", "value": 28, "slug": "ivanski" }, { "key": "\u0418\u0432\u0430\u043D\u0446\u0438", "value": 4, "slug": "ivanci" }, { "key": "\u0418\u0432\u0430\u043D\u0447\u0430", "value": 5, "slug": "ivancha" }, { "key": "\u0418\u0432\u0430\u043D\u044F\u043D\u0435", "value": 43, "slug": "ivanyane" }, { "key": "\u0418\u0433\u0430\u043D\u043E\u0432\u043E", "value": 10, "slug": "iganovo" }, { "key": "\u0418\u0433\u043B\u0438\u043A\u0430", "value": 1, "slug": "iglika" }, { "key": "\u0418\u0433\u043D\u0430\u0442\u0438\u0435\u0432\u043E", "value": 172, "slug": "ignatievo" }, { "key": "\u0418\u0433\u043D\u0430\u0442\u0438\u0446\u0430", "value": 20, "slug": "ignatica" }, { "key": "\u0418\u0433\u043D\u0430\u0442\u043E\u0432\u043E", "value": 3, "slug": "ignatovo" }, { "key": "\u0418\u0433\u043D\u0430\u0442\u043E\u0432\u0446\u0438", "value": 1, "slug": "ignatovci" }, { "key": "\u0418\u0433\u0440\u0430\u043B\u0438\u0449\u0435", "value": 8, "slug": "igralishche" }, { "key": "\u0418\u0434\u0438\u043B\u0435\u0432\u043E", "value": 1, "slug": "idilevo" }, { "key": "\u0418\u0437\u0431\u0435\u0433\u043B\u0438\u0438", "value": 27, "slug": "izbeglii" }, { "key": "\u0418\u0437\u0431\u0443\u043B", "value": 4, "slug": "izbul" }, { "key": "\u0418\u0437\u0432\u043E\u0440", "value": 75, "slug": "izvor" }, { "key": "\u0418\u0437\u0432\u043E\u0440\u0438\u0449\u0435", "value": 38, "slug": "izvorishche" }, { "key": "\u0418\u0437\u0432\u043E\u0440\u043D\u0438\u043A", "value": 6, "slug": "izvornik" }, { "key": "\u0418\u0437\u0432\u043E\u0440\u043E\u0432\u043E", "value": 54, "slug": "izvorovo" }, { "key": "\u0418\u0437\u0432\u043E\u0440\u0441\u043A\u043E", "value": 22, "slug": "izvorsko" }, { "key": "\u0418\u0437\u0433\u0440\u0435\u0432", "value": 110, "slug": "izgrev" }, { "key": "\u0418\u043B\u0430\u043A\u043E\u0432 \u0440\u044A\u0442", "value": 3, "slug": "ilakov-rt" }, { "key": "\u0418\u043B\u0438\u0439\u043D\u043E", "value": 3, "slug": "iliyno" }, { "key": "\u0418\u043B\u0438\u0439\u0441\u043A\u043E", "value": 1, "slug": "iliysko" }, { "key": "\u0418\u043B\u0438\u043D\u0434\u0435\u043D", "value": 4, "slug": "ilinden" }, { "key": "\u0418\u043B\u0438\u043D\u0434\u0435\u043D\u0446\u0438", "value": 42, "slug": "ilindenci" }, { "key": "\u0418\u043B\u0438\u044F \u0411\u043B\u044A\u0441\u043A\u043E\u0432\u043E", "value": 3, "slug": "iliya-blskovo" }, { "key": "\u0418\u043C\u0440\u0435\u043D\u0447\u0435\u0432\u043E", "value": 15, "slug": "imrenchevo" }, { "key": "\u0418\u043D\u0434\u0436\u0435 \u0432\u043E\u0439\u0432\u043E\u0434\u0430", "value": 8, "slug": "indzhe-voyvoda" }, { "key": "\u0418\u043D\u043E\u0432\u043E", "value": 15, "slug": "inovo" }, { "key": "\u0418\u0440\u0435\u0447\u0435\u043A\u043E\u0432\u043E", "value": 15, "slug": "irechekovo" }, { "key": "\u0418\u0440\u043D\u0438\u043A", "value": 3, "slug": "irnik" }, { "key": "\u0418\u0441\u043A\u0440\u0430", "value": 100, "slug": "iskra" }, { "key": "\u0418\u0441\u043A\u0440\u0435\u0446", "value": 68, "slug": "iskrec" }, { "key": "\u0418\u0441\u043A\u0440\u0438\u0446\u0430", "value": 8, "slug": "iskrica" }, { "key": "\u0418\u0441\u043A\u044A\u0440", "value": 116, "slug": "iskr" }, { "key": "\u0418\u0441\u043F\u0435\u0440\u0438\u0445", "value": 612, "slug": "isperih" }, { "key": "\u0418\u0441\u043F\u0435\u0440\u0438\u0445\u043E\u0432\u043E", "value": 38, "slug": "isperihovo" }, { "key": "\u0418\u0445\u0442\u0438\u043C\u0430\u043D", "value": 736, "slug": "ihtiman" }, { "key": "\u0418\u0447\u0435\u0440\u0430", "value": 8, "slug": "ichera" }, { "key": "\u0419\u0435\u0440\u0443\u0441\u0430\u043B\u0438\u043C\u043E\u0432\u043E", "value": 7, "slug": "yerusalimovo" }, { "key": "\u0419\u043E\u0430\u043A\u0438\u043C \u0413\u0440\u0443\u0435\u0432\u043E", "value": 127, "slug": "yoakim-gruevo" }, { "key": "\u0419\u043E\u0432\u043A\u043E\u0432\u043E", "value": 8, "slug": "yovkovo" }, { "key": "\u0419\u043E\u0433\u043B\u0430\u0432", "value": 3, "slug": "yoglav" }, { "key": "\u0419\u043E\u043D\u043A\u043E\u0432\u043E", "value": 32, "slug": "yonkovo" }, { "key": "\u0419\u043E\u043D\u0447\u043E\u0432\u043E", "value": 1, "slug": "yonchovo" }, { "key": "\u0419\u043E\u0440\u0434\u0430\u043D\u043E\u0432\u043E", "value": 10, "slug": "yordanovo" }, { "key": "\u041A\u0430\u0431\u0438\u043B\u0435", "value": 74, "slug": "kabile" }, { "key": "\u041A\u0430\u0431\u043B\u0435\u0448\u043A\u043E\u0432\u043E", "value": 303, "slug": "kableshkovo" }, { "key": "\u041A\u0430\u0432\u0430\u0440\u043D\u0430", "value": 867, "slug": "kavarna" }, { "key": "\u041A\u0430\u0432\u0440\u0430\u043A\u0438\u0440\u043E\u0432\u043E", "value": 40, "slug": "kavrakirovo" }, { "key": "\u041A\u0430\u0434\u0438\u0435\u0432\u043E", "value": 47, "slug": "kadievo" }, { "key": "\u041A\u0430\u0437\u0430\u043D\u043A\u0430", "value": 3, "slug": "kazanka" }, { "key": "\u041A\u0430\u0437\u0430\u043D\u043B\u044A\u043A", "value": 4337, "slug": "kazanlk" }, { "key": "\u041A\u0430\u0437\u0430\u0446\u0438\u0442\u0435", "value": 1, "slug": "kazacite" }, { "key": "\u041A\u0430\u0437\u0430\u0447\u0435\u0432\u043E", "value": 8, "slug": "kazachevo" }, { "key": "\u041A\u0430\u0437\u0430\u0448\u043A\u0430 \u0440\u0435\u043A\u0430", "value": 7, "slug": "kazashka-reka" }, { "key": "\u041A\u0430\u0437\u0430\u0448\u043A\u043E", "value": 21, "slug": "kazashko" }, { "key": "\u041A\u0430\u0437\u0438\u043C\u0438\u0440", "value": 5, "slug": "kazimir" }, { "key": "\u041A\u0430\u0437\u0438\u0447\u0435\u043D\u0435", "value": 397, "slug": "kazichene" }, { "key": "\u041A\u0410\u0419\u041C\u0410\u041D\u041E\u0412\u0418 \u041E\u0421\u0422\u0420\u041E\u0412\u0418,", "value": 9, "slug": "kaymanovi-ostrovi" }, { "key": "\u041A\u0430\u0439\u043D\u0430\u0440\u0434\u0436\u0430", "value": 23, "slug": "kaynardzha" }, { "key": "\u041A\u0430\u043B\u0430\u0439\u0434\u0436\u0438\u0438", "value": 7, "slug": "kalaydzhii" }, { "key": "\u041A\u0430\u043B\u0435\u0439\u0446\u0430", "value": 33, "slug": "kaleyca" }, { "key": "\u041A\u0430\u043B\u0435\u043A\u043E\u0432\u0435\u0446", "value": 152, "slug": "kalekovec" }, { "key": "\u041A\u0430\u043B\u0435\u043D", "value": 2, "slug": "kalen" }, { "key": "\u041A\u0430\u043B\u0435\u043D\u0438\u043A", "value": 8, "slug": "kalenik" }, { "key": "\u041A\u0430\u043B\u0435\u043D\u043E\u0432\u0446\u0438", "value": 5, "slug": "kalenovci" }, { "key": "\u041A\u0430\u043B\u0438\u043C\u0430\u043D\u0446\u0438", "value": 36, "slug": "kalimanci" }, { "key": "\u041A\u0430\u043B\u0438\u043D\u0430", "value": 8, "slug": "kalina" }, { "key": "\u041A\u0430\u043B\u0438\u043D\u043A\u0430", "value": 8, "slug": "kalinka" }, { "key": "\u041A\u0430\u043B\u0438\u043D\u043E", "value": 5, "slug": "kalino" }, { "key": "\u041A\u0430\u043B\u0438\u043F\u0435\u0442\u0440\u043E\u0432\u043E", "value": 173, "slug": "kalipetrovo" }, { "key": "\u041A\u0430\u043B\u0438\u0442\u0438\u043D\u043E\u0432\u043E", "value": 33, "slug": "kalitinovo" }, { "key": "\u041A\u0430\u043B\u0438\u0449\u0435", "value": 9, "slug": "kalishche" }, { "key": "\u041A\u0430\u043B\u043E\u043C\u0435\u043D", "value": 1, "slug": "kalomen" }, { "key": "\u041A\u0430\u043B\u043E\u0442\u0438\u043D\u0430", "value": 17, "slug": "kalotina" }, { "key": "\u041A\u0430\u043B\u043E\u0442\u0438\u043D\u0446\u0438", "value": 2, "slug": "kalotinci" }, { "key": "\u041A\u0430\u043B\u043E\u0444\u0435\u0440", "value": 131, "slug": "kalofer" }, { "key": "\u041A\u0430\u043B\u043E\u044F\u043D", "value": 8, "slug": "kaloyan" }, { "key": "\u041A\u0430\u043B\u043E\u044F\u043D\u043E\u0432\u0435\u0446", "value": 23, "slug": "kaloyanovec" }, { "key": "\u041A\u0430\u043B\u043E\u044F\u043D\u043E\u0432\u043E", "value": 150, "slug": "kaloyanovo" }, { "key": "\u041A\u0430\u043B\u043E\u044F\u043D\u0446\u0438", "value": 9, "slug": "kaloyanci" }, { "key": "\u041A\u0430\u043B\u0443\u0433\u0435\u0440\u0435\u043D\u0435", "value": 16, "slug": "kalugerene" }, { "key": "\u041A\u0430\u043B\u0443\u0433\u0435\u0440\u043E\u0432\u043E", "value": 69, "slug": "kalugerovo" }, { "key": "\u041A\u0430\u043B\u0447\u0435\u0432\u043E", "value": 32, "slug": "kalchevo" }, { "key": "\u041A\u0430\u043C\u0431\u0435\u043B\u0435\u0432\u0446\u0438", "value": 1, "slug": "kambelevci" }, { "key": "\u041A\u0430\u043C\u0431\u0443\u0440\u043E\u0432\u043E", "value": 22, "slug": "kamburovo" }, { "key": "\u041A\u0430\u043C\u0435\u043D", "value": 89, "slug": "kamen" }, { "key": "\u041A\u0430\u043C\u0435\u043D \u0431\u0440\u044F\u0433", "value": 5, "slug": "kamen-bryag" }, { "key": "\u041A\u0430\u043C\u0435\u043D \u0432\u0440\u044A\u0445", "value": 1, "slug": "kamen-vrh" }, { "key": "\u041A\u0430\u043C\u0435\u043D \u0434\u044F\u043B", "value": 2, "slug": "kamen-dyal" }, { "key": "\u041A\u0430\u043C\u0435\u043D\u0430", "value": 12, "slug": "kamena" }, { "key": "\u041A\u0430\u043C\u0435\u043D\u0430\u0440", "value": 120, "slug": "kamenar" }, { "key": "\u041A\u0430\u043C\u0435\u043D\u0430\u0440\u0438", "value": 9, "slug": "kamenari" }, { "key": "\u041A\u0430\u043C\u0435\u043D\u0430\u0440\u0446\u0438", "value": 1, "slug": "kamenarci" }, { "key": "\u041A\u0430\u043C\u0435\u043D\u0435\u0446", "value": 43, "slug": "kamenec" }, { "key": "\u041A\u0430\u043C\u0435\u043D\u0438\u0446\u0430", "value": 6, "slug": "kamenica" }, { "key": "\u041A\u0430\u043C\u0435\u043D\u0438\u0447\u043A\u0430 \u0421\u043A\u0430\u043A\u0430\u0432\u0438\u0446\u0430", "value": 1, "slug": "kamenichka-skakavica" }, { "key": "\u041A\u0430\u043C\u0435\u043D\u043A\u0430", "value": 1, "slug": "kamenka" }, { "key": "\u041A\u0430\u043C\u0435\u043D\u043D\u0430 \u0420\u0438\u043A\u0441\u0430", "value": 10, "slug": "kamenna-riksa" }, { "key": "\u041A\u0430\u043C\u0435\u043D\u043E", "value": 283, "slug": "kameno" }, { "key": "\u041A\u0430\u043C\u0435\u043D\u043E \u043F\u043E\u043B\u0435", "value": 14, "slug": "kameno-pole" }, { "key": "\u041A\u0430\u043C\u0435\u043D\u043E\u0432\u043E", "value": 24, "slug": "kamenovo" }, { "key": "\u041A\u0430\u043C\u0435\u043D\u044F\u043A", "value": 12, "slug": "kamenyak" }, { "key": "\u041A\u0430\u043C\u0435\u0449\u0438\u0446\u0430", "value": 2, "slug": "kameshchica" }, { "key": "\u041A\u0430\u043C\u0447\u0438\u044F", "value": 5, "slug": "kamchiya" }, { "key": "\u041A\u0430\u043D\u0434\u0438\u043B\u043A\u0430", "value": 12, "slug": "kandilka" }, { "key": "\u041A\u0430\u043D\u0434\u043E\u0432\u0438", "value": 1, "slug": "kandovi" }, { "key": "\u041A\u0430\u043D\u044F\u043A", "value": 1, "slug": "kanyak" }, { "key": "\u041A\u0430\u043E\u043B\u0438\u043D\u043E\u0432\u043E", "value": 56, "slug": "kaolinovo" }, { "key": "\u041A\u0430\u043F\u0430\u0442\u043E\u0432\u043E", "value": 5, "slug": "kapatovo" }, { "key": "\u041A\u0430\u043F\u0438\u0442\u0430\u043D \u0410\u043D\u0434\u0440\u0435\u0435\u0432\u043E", "value": 43, "slug": "kapitan-andreevo" }, { "key": "\u041A\u0430\u043F\u0438\u0442\u0430\u043D \u0414\u0438\u043C\u0438\u0442\u0440\u0438\u0435\u0432\u043E", "value": 32, "slug": "kapitan-dimitrievo" }, { "key": "\u041A\u0430\u043F\u0438\u0442\u0430\u043D \u0414\u0438\u043C\u0438\u0442\u0440\u043E\u0432\u043E", "value": 1, "slug": "kapitan-dimitrovo" }, { "key": "\u041A\u0430\u043F\u0438\u0442\u0430\u043D \u041F\u0435\u0442\u043A\u043E", "value": 19, "slug": "kapitan-petko" }, { "key": "\u041A\u0430\u043F\u0438\u0442\u0430\u043D \u041F\u0435\u0442\u043A\u043E \u0432\u043E\u0439\u0432\u043E\u0434\u0430", "value": 6, "slug": "kapitan-petko-voyvoda" }, { "key": "\u041A\u0430\u043F\u0438\u0442\u0430\u043D\u043E\u0432\u0446\u0438", "value": 39, "slug": "kapitanovci" }, { "key": "\u041A\u0430\u0440\u0430 \u041C\u0438\u0445\u0430\u043B", "value": 1, "slug": "kara-mihal" }, { "key": "\u041A\u0430\u0440\u0430\u0431\u0443\u043D\u0430\u0440", "value": 32, "slug": "karabunar" }, { "key": "\u041A\u0430\u0440\u0430\u0432\u0435\u043B\u043E\u0432\u043E", "value": 70, "slug": "karavelovo" }, { "key": "\u041A\u0430\u0440\u0430\u0432\u0435\u043B\u044C\u043E\u0432\u043E", "value": 9, "slug": "karavelovo" }, { "key": "\u041A\u0430\u0440\u0430\u0433\u0435\u043E\u0440\u0433\u0438\u0435\u0432\u043E", "value": 43, "slug": "karageorgievo" }, { "key": "\u041A\u0430\u0440\u0430\u0434\u0436\u0430\u043B\u043E\u0432\u043E", "value": 18, "slug": "karadzhalovo" }, { "key": "\u041A\u0430\u0440\u0430\u0434\u0436\u043E\u0432\u043E", "value": 28, "slug": "karadzhovo" }, { "key": "\u041A\u0430\u0440\u0430\u0438\u0432\u0430\u043D\u0446\u0430", "value": 3, "slug": "karaivanca" }, { "key": "\u041A\u0430\u0440\u0430\u0438\u0441\u0435\u043D", "value": 31, "slug": "karaisen" }, { "key": "\u041A\u0430\u0440\u0430\u043C\u0430\u043D\u0438\u0442\u0435", "value": 9, "slug": "karamanite" }, { "key": "\u041A\u0430\u0440\u0430\u043C\u0430\u043D\u043E\u0432\u043E", "value": 12, "slug": "karamanovo" }, { "key": "\u041A\u0430\u0440\u0430\u043C\u0430\u043D\u0446\u0438", "value": 47, "slug": "karamanci" }, { "key": "\u041A\u0430\u0440\u0430\u043C\u0444\u0438\u043B", "value": 4, "slug": "karamfil" }, { "key": "\u041A\u0430\u0440\u0430\u043D \u0412\u044A\u0440\u0431\u043E\u0432\u043A\u0430", "value": 16, "slug": "karan-vrbovka" }, { "key": "\u041A\u0430\u0440\u0430\u043D\u043E\u0432\u043E", "value": 25, "slug": "karanovo" }, { "key": "\u041A\u0430\u0440\u0430\u043D\u0446\u0438", "value": 10, "slug": "karanci" }, { "key": "\u041A\u0430\u0440\u0430\u043F\u0435\u043B\u0438\u0442", "value": 38, "slug": "karapelit" }, { "key": "\u041A\u0430\u0440\u0430\u043F\u043E\u043B\u0446\u0438", "value": 8, "slug": "karapolci" }, { "key": "\u041A\u0430\u0440\u0430\u0448", "value": 2, "slug": "karash" }, { "key": "\u041A\u0430\u0440\u0434\u0430\u043C", "value": 79, "slug": "kardam" }, { "key": "\u041A\u0430\u0440\u043B\u0438\u0435\u0432\u043E", "value": 5, "slug": "karlievo" }, { "key": "\u041A\u0430\u0440\u043B\u043E\u0432\u043E", "value": 1800, "slug": "karlovo" }, { "key": "\u041A\u0430\u0440\u043B\u0443\u043A\u043E\u0432\u043E", "value": 14, "slug": "karlukovo" }, { "key": "\u041A\u0430\u0440\u043D\u043E\u0431\u0430\u0442", "value": 1256, "slug": "karnobat" }, { "key": "\u041A\u0430\u0441\u0438\u043B\u0430\u0433", "value": 4, "slug": "kasilag" }, { "key": "\u041A\u0430\u0441\u043D\u0430\u043A\u043E\u0432\u043E", "value": 15, "slug": "kasnakovo" }, { "key": "\u041A\u0430\u0441\u043F\u0438\u0447\u0430\u043D", "value": 262, "slug": "kaspichan" }, { "key": "\u041A\u0430\u0442\u0435\u0440\u0438\u0446\u0430", "value": 1, "slug": "katerica" }, { "key": "\u041A\u0430\u0442\u0440\u0430\u043D\u0434\u0436\u0438\u0438", "value": 3, "slug": "katrandzhii" }, { "key": "\u041A\u0430\u0442\u0440\u0430\u043D\u0438\u0446\u0430", "value": 11, "slug": "katranica" }, { "key": "\u041A\u0430\u0442\u0440\u0438\u0449\u0435", "value": 5, "slug": "katrishche" }, { "key": "\u041A\u0430\u0442\u0443\u043D\u0435\u0446", "value": 8, "slug": "katunec" }, { "key": "\u041A\u0430\u0442\u0443\u043D\u0438\u0446\u0430", "value": 134, "slug": "katunica" }, { "key": "\u041A\u0430\u0442\u0443\u043D\u0438\u0449\u0435", "value": 4, "slug": "katunishche" }, { "key": "\u041A\u0430\u0442\u0443\u043D\u0446\u0438", "value": 82, "slug": "katunci" }, { "key": "\u041A\u0430\u0446\u0435\u043B\u043E\u0432\u043E", "value": 23, "slug": "kacelovo" }, { "key": "\u041A\u0430\u0448\u0438\u043D\u0430", "value": 1, "slug": "kashina" }, { "key": "\u041A\u0430\u044F\u043B\u043E\u0431\u0430", "value": 2, "slug": "kayaloba" }, { "key": "\u041A\u0435\u0440\u0435\u043A\u0430", "value": 7, "slug": "kereka" }, { "key": "\u041A\u0435\u0440\u0435\u043D\u0438\u0442\u0435", "value": 1, "slug": "kerenite" }, { "key": "\u041A\u0435\u0440\u043C\u0435\u043D", "value": 79, "slug": "kermen" }, { "key": "\u041A\u0435\u0441\u0430\u0440\u0435\u0432\u043E", "value": 49, "slug": "kesarevo" }, { "key": "\u041A\u0435\u0441\u0442\u0435\u043D", "value": 6, "slug": "kesten" }, { "key": "\u041A\u0435\u0441\u0442\u0435\u043D\u043E\u0432\u043E", "value": 4, "slug": "kestenovo" }, { "key": "\u041A\u0438\u0435\u0432\u0446\u0438", "value": 7, "slug": "kievci" }, { "key": "\u041A\u0438\u043B\u0438\u0444\u0430\u0440\u0435\u0432\u043E", "value": 149, "slug": "kilifarevo" }, { "key": "\u041A\u0438\u043F\u0438\u043B\u043E\u0432\u043E", "value": 19, "slug": "kipilovo" }, { "key": "\u041A\u0438\u043F\u0440\u0430", "value": 33, "slug": "kipra" }, { "key": "\u041A\u0438\u0440\u0435\u0435\u0432\u043E", "value": 5, "slug": "kireevo" }, { "key": "\u041A\u0438\u0440\u0438\u043B\u043E\u0432\u043E", "value": 30, "slug": "kirilovo" }, { "key": "\u041A\u0438\u0440\u043A\u043E\u0432\u043E", "value": 91, "slug": "kirkovo" }, { "key": "\u041A\u0438\u0440\u043E\u0432\u043E", "value": 2, "slug": "kirovo" }, { "key": "\u041A\u0438\u0440\u0447\u0435\u0432\u043E", "value": 22, "slug": "kirchevo" }, { "key": "\u041A\u0438\u0441\u0435\u043B\u0435\u0432\u043E", "value": 4, "slug": "kiselevo" }, { "key": "\u041A\u0438\u0441\u0435\u043B\u0447\u043E\u0432\u043E", "value": 14, "slug": "kiselchovo" }, { "key": "\u041A\u0438\u0442\u0430\u043D\u0447\u0435\u0432\u043E", "value": 41, "slug": "kitanchevo" }, { "key": "\u041A\u0438\u0442\u0435\u043D", "value": 228, "slug": "kiten" }, { "key": "\u041A\u0438\u0442\u0438\u043D\u043E", "value": 5, "slug": "kitino" }, { "key": "\u041A\u0438\u0442\u043A\u0430", "value": 22, "slug": "kitka" }, { "key": "\u041A\u0438\u0442\u043D\u0430", "value": 5, "slug": "kitna" }, { "key": "\u041A\u0438\u0442\u043D\u0438\u0446\u0430", "value": 2, "slug": "kitnica" }, { "key": "\u041A\u0438\u0447\u0435\u0432\u043E", "value": 89, "slug": "kichevo" }, { "key": "\u041A\u0438\u0447\u0435\u043D\u0438\u0446\u0430", "value": 25, "slug": "kichenica" }, { "key": "\u041A\u043B\u0430\u0434\u0435\u043D\u0435\u0446", "value": 6, "slug": "kladenec" }, { "key": "\u041A\u043B\u0430\u0434\u0435\u043D\u0446\u0438", "value": 2, "slug": "kladenci" }, { "key": "\u041A\u043B\u0430\u0434\u043D\u0438 \u0434\u044F\u043B", "value": 2, "slug": "kladni-dyal" }, { "key": "\u041A\u043B\u0430\u0434\u043D\u0438\u0446\u0430", "value": 59, "slug": "kladnica" }, { "key": "\u041A\u043B\u0435\u043D\u043E\u0432\u0438\u043A", "value": 11, "slug": "klenovik" }, { "key": "\u041A\u043B\u0438\u043A\u0430\u0447", "value": 25, "slug": "klikach" }, { "key": "\u041A\u043B\u0438\u043C\u0430\u0448", "value": 9, "slug": "klimash" }, { "key": "\u041A\u043B\u0438\u043C\u0435\u043D\u0442", "value": 102, "slug": "kliment" }, { "key": "\u041A\u043B\u0438\u043C\u0435\u043D\u0442\u043E\u0432\u043E", "value": 42, "slug": "klimentovo" }, { "key": "\u041A\u043B\u0438\u0441\u0443\u0440\u0430", "value": 44, "slug": "klisura" }, { "key": "\u041A\u043B\u0438\u0441\u0443\u0440\u0438\u0446\u0430", "value": 4, "slug": "klisurica" }, { "key": "\u041A\u043B\u043E\u043A\u043E\u0442\u043D\u0438\u0446\u0430", "value": 39, "slug": "klokotnica" }, { "key": "\u041A\u043B\u044E\u0447", "value": 42, "slug": "klyuch" }, { "key": "\u041A\u043C\u0435\u0442\u043E\u0432\u0446\u0438", "value": 2, "slug": "kmetovci" }, { "key": "\u041A\u043D\u0435\u0436\u0430", "value": 505, "slug": "knezha" }, { "key": "\u041A\u043D\u0438\u0436\u043E\u0432\u043D\u0438\u043A", "value": 9, "slug": "knizhovnik" }, { "key": "\u041A\u043D\u044F\u0436\u0435\u0432\u043E", "value": 16, "slug": "knyazhevo" }, { "key": "\u041A\u043D\u044F\u0436\u0435\u0432\u0441\u043A\u043E", "value": 8, "slug": "knyazhevsko" }, { "key": "\u041A\u043E\u0431\u0438\u043B\u044F\u043A", "value": 2, "slug": "kobilyak" }, { "key": "\u041A\u043E\u0431\u0438\u043B\u044F\u043D\u0435", "value": 16, "slug": "kobilyane" }, { "key": "\u041A\u043E\u0432\u0430\u0447", "value": 2, "slug": "kovach" }, { "key": "\u041A\u043E\u0432\u0430\u0447\u0435\u0432\u0435\u0446", "value": 21, "slug": "kovachevec" }, { "key": "\u041A\u043E\u0432\u0430\u0447\u0435\u0432\u0438\u0446\u0430", "value": 13, "slug": "kovachevica" }, { "key": "\u041A\u043E\u0432\u0430\u0447\u0435\u0432\u043E", "value": 92, "slug": "kovachevo" }, { "key": "\u041A\u043E\u0432\u0430\u0447\u0435\u0432\u0446\u0438", "value": 44, "slug": "kovachevci" }, { "key": "\u041A\u043E\u0432\u0430\u0447\u0438\u0442\u0435", "value": 29, "slug": "kovachite" }, { "key": "\u041A\u043E\u0432\u0430\u0447\u0438\u0446\u0430", "value": 29, "slug": "kovachica" }, { "key": "\u041A\u043E\u0435\u0432\u0446\u0438", "value": 4, "slug": "koevci" }, { "key": "\u041A\u043E\u0436\u0430\u0440\u0438", "value": 3, "slug": "kozhari" }, { "key": "\u041A\u043E\u0436\u0438\u043D\u0446\u0438", "value": 1, "slug": "kozhinci" }, { "key": "\u041A\u043E\u0436\u043B\u044E\u0432\u0446\u0438", "value": 1, "slug": "kozhlyuvci" }, { "key": "\u041A\u043E\u0437\u0430\u043D\u043E\u0432\u043E", "value": 22, "slug": "kozanovo" }, { "key": "\u041A\u043E\u0437\u0430\u0440 \u0411\u0435\u043B\u0435\u043D\u0435", "value": 27, "slug": "kozar-belene" }, { "key": "\u041A\u043E\u0437\u0430\u0440\u0435", "value": 3, "slug": "kozare" }, { "key": "\u041A\u043E\u0437\u0430\u0440\u0435\u0432\u0435\u0446", "value": 37, "slug": "kozarevec" }, { "key": "\u041A\u043E\u0437\u0430\u0440\u0435\u0432\u043E", "value": 6, "slug": "kozarevo" }, { "key": "\u041A\u043E\u0437\u0430\u0440\u043A\u0430", "value": 12, "slug": "kozarka" }, { "key": "\u041A\u043E\u0437\u0430\u0440\u0441\u043A\u043E", "value": 36, "slug": "kozarsko" }, { "key": "\u041A\u043E\u0437\u0438\u0446\u0430", "value": 4, "slug": "kozica" }, { "key": "\u041A\u043E\u0437\u0438\u0447\u0438\u043D\u043E", "value": 7, "slug": "kozichino" }, { "key": "\u041A\u043E\u0437\u043B\u0435\u0432\u043E", "value": 1, "slug": "kozlevo" }, { "key": "\u041A\u043E\u0437\u043B\u0435\u0446", "value": 25, "slug": "kozlec" }, { "key": "\u041A\u043E\u0437\u043B\u043E\u0432\u0435\u0446", "value": 36, "slug": "kozlovec" }, { "key": "\u041A\u043E\u0437\u043B\u043E\u0434\u0443\u0439", "value": 587, "slug": "kozloduy" }, { "key": "\u041A\u043E\u0437\u043B\u043E\u0434\u0443\u0439\u0446\u0438", "value": 15, "slug": "kozloduyci" }, { "key": "\u041A\u043E\u0437\u043C\u0430 \u043F\u0440\u0435\u0437\u0432\u0438\u0442\u0435\u0440", "value": 13, "slug": "kozma-prezviter" }, { "key": "\u041A\u043E\u0437\u044F\u043A", "value": 7, "slug": "kozyak" }, { "key": "\u041A\u043E\u0438\u043B\u043E\u0432\u0446\u0438", "value": 28, "slug": "koilovci" }, { "key": "\u041A\u043E\u0439\u043D\u0430\u0440\u0435", "value": 131, "slug": "koynare" }, { "key": "\u041A\u043E\u043A\u0430\u043B\u044F\u043D\u0435", "value": 153, "slug": "kokalyane" }, { "key": "\u041A\u043E\u043A\u0438\u0447\u0435", "value": 2, "slug": "kokiche" }, { "key": "\u041A\u043E\u043A\u043E\u0440\u0446\u0438", "value": 1, "slug": "kokorci" }, { "key": "\u041A\u043E\u043A\u043E\u0448\u0430\u043D\u0435", "value": 2, "slug": "kokoshane" }, { "key": "\u041A\u043E\u043B\u0430\u0440\u043E\u0432\u043E", "value": 169, "slug": "kolarovo" }, { "key": "\u041A\u043E\u043B\u0430\u0440\u0446\u0438", "value": 9, "slug": "kolarci" }, { "key": "\u041A\u043E\u043B\u0435\u043D\u0430", "value": 6, "slug": "kolena" }, { "key": "\u041A\u043E\u043B\u0435\u0446", "value": 6, "slug": "kolec" }, { "key": "\u041A\u043E\u043B\u043E\u0431\u044A\u0440", "value": 9, "slug": "kolobr" }, { "key": "\u041A\u043E\u043B\u044E \u041C\u0430\u0440\u0438\u043D\u043E\u0432\u043E", "value": 7, "slug": "kolyu-marinovo" }, { "key": "\u041A\u043E\u043C\u0430\u0440\u0435\u0432\u043E", "value": 69, "slug": "komarevo" }, { "key": "\u041A\u043E\u043C\u043E\u0449\u0438\u0446\u0430", "value": 21, "slug": "komoshchica" }, { "key": "\u041A\u043E\u043C\u0443\u043D\u0430\u0440\u0438", "value": 3, "slug": "komunari" }, { "key": "\u041A\u043E\u043C\u0443\u043D\u0438\u0433\u0430", "value": 41, "slug": "komuniga" }, { "key": "\u041A\u043E\u043C\u0449\u0438\u0446\u0430", "value": 1, "slug": "komshchica" }, { "key": "\u041A\u043E\u043D\u0430\u043A", "value": 6, "slug": "konak" }, { "key": "\u041A\u043E\u043D\u0430\u0440\u0435", "value": 20, "slug": "konare" }, { "key": "\u041A\u043E\u043D\u0430\u0440\u0441\u043A\u043E", "value": 15, "slug": "konarsko" }, { "key": "\u041A\u043E\u043D\u0430\u0440\u0441\u043A\u043E\u0442\u043E", "value": 3, "slug": "konarskoto" }, { "key": "\u041A\u043E\u043D\u0434\u043E\u0444\u0440\u0435\u0439", "value": 14, "slug": "kondofrey" }, { "key": "\u041A\u043E\u043D\u0435\u0432\u0435\u0446", "value": 5, "slug": "konevec" }, { "key": "\u041A\u043E\u043D\u0435\u0432\u043E", "value": 19, "slug": "konevo" }, { "key": "\u041A\u043E\u043D\u043E\u043F", "value": 2, "slug": "konop" }, { "key": "\u041A\u043E\u043D\u0441\u043A\u0430", "value": 4, "slug": "konska" }, { "key": "\u041A\u043E\u043D\u0441\u0442\u0430\u043D\u0442\u0438\u043D", "value": 30, "slug": "konstantin" }, { "key": "\u041A\u043E\u043D\u0441\u0442\u0430\u043D\u0442\u0438\u043D\u043E\u0432\u043E", "value": 106, "slug": "konstantinovo" }, { "key": "\u041A\u043E\u043D\u0443\u0448", "value": 28, "slug": "konush" }, { "key": "\u041A\u043E\u043D\u0447\u0435", "value": 4, "slug": "konche" }, { "key": "\u041A\u043E\u043D\u044C\u043E\u0432\u0435\u0446", "value": 6, "slug": "konovec" }, { "key": "\u041A\u043E\u043D\u044C\u043E\u0432\u043E", "value": 21, "slug": "konovo" }, { "key": "\u041A\u043E\u043D\u044F\u0432\u043E", "value": 43, "slug": "konyavo" }, { "key": "\u041A\u043E\u043F\u0430\u043D\u0438\u0446\u0430", "value": 6, "slug": "kopanica" }, { "key": "\u041A\u043E\u043F\u0438\u043B\u043E\u0432\u0446\u0438", "value": 40, "slug": "kopilovci" }, { "key": "\u041A\u043E\u043F\u0440\u0435\u0446", "value": 1, "slug": "koprec" }, { "key": "\u041A\u043E\u043F\u0440\u0438\u0432\u0435\u0446", "value": 29, "slug": "koprivec" }, { "key": "\u041A\u043E\u043F\u0440\u0438\u0432\u043B\u0435\u043D", "value": 83, "slug": "koprivlen" }, { "key": "\u041A\u043E\u043F\u0440\u0438\u0432\u0449\u0438\u0446\u0430", "value": 139, "slug": "koprivshchica" }, { "key": "\u041A\u043E\u043F\u0440\u0438\u043D\u043A\u0430", "value": 114, "slug": "koprinka" }, { "key": "\u041A\u043E\u043F\u0447\u0435\u043B\u0438\u0438\u0442\u0435", "value": 4, "slug": "kopcheliite" }, { "key": "\u041A\u043E\u0440\u0435\u043D", "value": 10, "slug": "koren" }, { "key": "\u041A\u043E\u0440\u0438\u0442\u0430\u0442\u0430", "value": 5, "slug": "koritata" }, { "key": "\u041A\u043E\u0440\u0438\u0442\u0435\u043D", "value": 3, "slug": "koriten" }, { "key": "\u041A\u043E\u0440\u043A\u0438\u043D\u0430", "value": 5, "slug": "korkina" }, { "key": "\u041A\u043E\u0440\u043C\u044F\u043D\u0441\u043A\u043E", "value": 24, "slug": "kormyansko" }, { "key": "\u041A\u043E\u0440\u043D\u0438\u0446\u0430", "value": 58, "slug": "kornica" }, { "key": "\u041A\u043E\u0440\u0442\u0435\u043D", "value": 78, "slug": "korten" }, { "key": "\u041A\u043E\u0441", "value": 1, "slug": "kos" }, { "key": "\u041A\u043E\u0441\u0430\u0440\u0430", "value": 2, "slug": "kosara" }, { "key": "\u041A\u043E\u0441\u0430\u0440\u043A\u0430", "value": 2, "slug": "kosarka" }, { "key": "\u041A\u043E\u0441\u0430\u0447\u0430", "value": 19, "slug": "kosacha" }, { "key": "\u041A\u043E\u0441\u043E\u0432\u0435\u0446", "value": 12, "slug": "kosovec" }, { "key": "\u041A\u043E\u0441\u043E\u0432\u043E", "value": 27, "slug": "kosovo" }, { "key": "\u041A\u043E\u0441\u0442\u0430 \u041F\u0435\u0440\u0447\u0435\u0432\u043E", "value": 4, "slug": "kosta-perchevo" }, { "key": "\u041A\u043E\u0441\u0442\u0430\u0434\u0438\u043D\u043A\u0438\u043D\u043E", "value": 3, "slug": "kostadinkino" }, { "key": "\u041A\u043E\u0441\u0442\u0430\u043D\u0434\u0435\u043D\u0435\u0446", "value": 23, "slug": "kostandenec" }, { "key": "\u041A\u043E\u0441\u0442\u0430\u043D\u0434\u043E\u0432\u043E", "value": 119, "slug": "kostandovo" }, { "key": "\u041A\u043E\u0441\u0442\u0435\u043B", "value": 3, "slug": "kostel" }, { "key": "\u041A\u043E\u0441\u0442\u0435\u043B\u0435\u0432\u043E", "value": 26, "slug": "kostelevo" }, { "key": "\u041A\u043E\u0441\u0442\u0435\u043D", "value": 10, "slug": "kosten" }, { "key": "\u041A\u043E\u0441\u0442\u0435\u043D\u0430 \u0440\u0435\u043A\u0430", "value": 7, "slug": "kostena-reka" }, { "key": "\u041A\u043E\u0441\u0442\u0435\u043D\u0435\u0446", "value": 696, "slug": "kostenec" }, { "key": "\u041A\u043E\u0441\u0442\u0435\u043D\u043A\u043E\u0432\u0446\u0438", "value": 2, "slug": "kostenkovci" }, { "key": "\u041A\u043E\u0441\u0442\u0435\u043D\u0446\u0438", "value": 2, "slug": "kostenci" }, { "key": "\u041A\u043E\u0441\u0442\u0438", "value": 8, "slug": "kosti" }, { "key": "\u041A\u043E\u0441\u0442\u0438\u0435\u0432\u043E", "value": 78, "slug": "kostievo" }, { "key": "\u041A\u043E\u0441\u0442\u0438\u043B\u043A\u043E\u0432\u043E", "value": 1, "slug": "kostilkovo" }, { "key": "\u041A\u043E\u0441\u0442\u0438\u043D\u0431\u0440\u043E\u0434", "value": 1016, "slug": "kostinbrod" }, { "key": "\u041A\u043E\u0441\u0442\u0438\u043D\u043E", "value": 5, "slug": "kostino" }, { "key": "\u041A\u043E\u0441\u0442\u0443\u0440", "value": 1, "slug": "kostur" }, { "key": "\u041A\u043E\u0441\u0442\u0443\u0440\u0438\u043D\u0446\u0438", "value": 1, "slug": "kosturinci" }, { "key": "\u041A\u043E\u0442\u0435\u043B", "value": 329, "slug": "kotel" }, { "key": "\u041A\u043E\u0442\u0435\u043D\u043E\u0432\u0446\u0438", "value": 2, "slug": "kotenovci" }, { "key": "\u041A\u043E\u0442\u043B\u0430\u0440\u0438", "value": 1, "slug": "kotlari" }, { "key": "\u041A\u043E\u0442\u043B\u0435\u043D\u0446\u0438", "value": 4, "slug": "kotlenci" }, { "key": "\u041A\u043E\u0447\u0430\u043D", "value": 108, "slug": "kochan" }, { "key": "\u041A\u043E\u0447\u0430\u043D\u0438", "value": 6, "slug": "kochani" }, { "key": "\u041A\u043E\u0447\u0435\u0432\u043E", "value": 33, "slug": "kochevo" }, { "key": "\u041A\u043E\u0447\u0435\u0440\u0438\u043D\u043E\u0432\u043E", "value": 50, "slug": "kocherinovo" }, { "key": "\u041A\u043E\u0447\u043C\u0430\u0440", "value": 36, "slug": "kochmar" }, { "key": "\u041A\u043E\u0447\u043E\u0432\u043E", "value": 15, "slug": "kochovo" }, { "key": "\u041A\u043E\u0448\u0430\u0432\u0430", "value": 12, "slug": "koshava" }, { "key": "\u041A\u043E\u0448\u0430\u0440\u0435\u0432\u043E", "value": 15, "slug": "kosharevo" }, { "key": "\u041A\u043E\u0448\u0430\u0440\u0438\u0442\u0435", "value": 2, "slug": "kosharite" }, { "key": "\u041A\u043E\u0448\u0430\u0440\u0438\u0446\u0430", "value": 212, "slug": "kosharica" }, { "key": "\u041A\u043E\u0448\u0430\u0440\u043D\u0430", "value": 22, "slug": "kosharna" }, { "key": "\u041A\u043E\u0448\u043D\u0438\u0446\u0430", "value": 4, "slug": "koshnica" }, { "key": "\u041A\u043E\u0448\u043D\u0438\u0447\u0430\u0440\u0438", "value": 4, "slug": "koshnichari" }, { "key": "\u041A\u043E\u0448\u043E\u0432", "value": 12, "slug": "koshov" }, { "key": "\u041A\u0440\u0430\u0432\u0438\u043D\u043E", "value": 4, "slug": "kravino" }, { "key": "\u041A\u0440\u0430\u0432\u043E\u0434\u0435\u0440", "value": 26, "slug": "kravoder" }, { "key": "\u041A\u0440\u0430\u0435\u0432\u043E", "value": 4, "slug": "kraevo" }, { "key": "\u041A\u0440\u0430\u0438\u0449\u0435", "value": 65, "slug": "kraishche" }, { "key": "\u041A\u0440\u0430\u0439\u0433\u043E\u0440\u0446\u0438", "value": 6, "slug": "kraygorci" }, { "key": "\u041A\u0440\u0430\u0439\u043D\u0438\u0446\u0438", "value": 93, "slug": "kraynici" }, { "key": "\u041A\u0440\u0430\u0439\u043D\u043E \u0441\u0435\u043B\u043E", "value": 10, "slug": "krayno-selo" }, { "key": "\u041A\u0440\u0430\u0439\u043D\u043E\u0432\u043E", "value": 2, "slug": "kraynovo" }, { "key": "\u041A\u0440\u0430\u043A\u0440\u0430", "value": 2, "slug": "krakra" }, { "key": "\u041A\u0440\u0430\u043B\u0435\u0432 \u0434\u043E\u043B", "value": 27, "slug": "kralev-dol" }, { "key": "\u041A\u0440\u0430\u043B\u0435\u0432\u043E", "value": 35, "slug": "kralevo" }, { "key": "\u041A\u0440\u0430\u043B\u0438 \u041C\u0430\u0440\u043A\u043E", "value": 13, "slug": "krali-marko" }, { "key": "\u041A\u0440\u0430\u043C\u043E\u043B\u0438\u043D", "value": 7, "slug": "kramolin" }, { "key": "\u041A\u0440\u0430\u043D\u0435\u0432\u043E", "value": 182, "slug": "kranevo" }, { "key": "\u041A\u0440\u0430\u043F\u0435\u0446", "value": 21, "slug": "krapec" }, { "key": "\u041A\u0440\u0430\u043F\u0447\u0435\u043D\u0435", "value": 5, "slug": "krapchene" }, { "key": "\u041A\u0440\u0430\u0441\u0435\u043D", "value": 58, "slug": "krasen" }, { "key": "\u041A\u0440\u0430\u0441\u0435\u043D \u0434\u043E\u043B", "value": 5, "slug": "krasen-dol" }, { "key": "\u041A\u0440\u0430\u0441\u0438\u043C\u0438\u0440", "value": 9, "slug": "krasimir" }, { "key": "\u041A\u0440\u0430\u0441\u043D\u043E \u0433\u0440\u0430\u0434\u0438\u0449\u0435", "value": 2, "slug": "krasno-gradishche" }, { "key": "\u041A\u0440\u0430\u0441\u043D\u043E\u0432\u043E", "value": 15, "slug": "krasnovo" }, { "key": "\u041A\u0440\u0430\u0441\u043D\u043E\u0441\u0435\u043B\u0446\u0438", "value": 6, "slug": "krasnoselci" }, { "key": "\u041A\u0440\u0430\u0447\u0438\u043C\u0438\u0440", "value": 5, "slug": "krachimir" }, { "key": "\u041A\u0440\u0435\u043C\u0435\u043D", "value": 5, "slug": "kremen" }, { "key": "\u041A\u0440\u0435\u043C\u0435\u043D\u0430", "value": 3, "slug": "kremena" }, { "key": "\u041A\u0440\u0435\u043C\u0435\u043D\u0435", "value": 1, "slug": "kremene" }, { "key": "\u041A\u0440\u0435\u043F\u043E\u0441\u0442", "value": 74, "slug": "krepost" }, { "key": "\u041A\u0440\u0435\u043F\u0447\u0430", "value": 31, "slug": "krepcha" }, { "key": "\u041A\u0440\u0435\u0441\u043D\u0430", "value": 292, "slug": "kresna" }, { "key": "\u041A\u0440\u0435\u0442\u0430", "value": 19, "slug": "kreta" }, { "key": "\u041A\u0440\u0438\u0431\u0443\u043B", "value": 10, "slug": "kribul" }, { "key": "\u041A\u0440\u0438\u0432\u0430 \u0431\u0430\u0440\u0430", "value": 27, "slug": "kriva-bara" }, { "key": "\u041A\u0440\u0438\u0432\u0430 \u0440\u0435\u043A\u0430", "value": 11, "slug": "kriva-reka" }, { "key": "\u041A\u0440\u0438\u0432\u0438\u043D\u0430", "value": 91, "slug": "krivina" }, { "key": "\u041A\u0440\u0438\u0432\u0438\u043D\u0438", "value": 8, "slug": "krivini" }, { "key": "\u041A\u0440\u0438\u0432\u0438\u0446\u0430", "value": 8, "slug": "krivica" }, { "key": "\u041A\u0440\u0438\u0432\u043D\u044F", "value": 32, "slug": "krivnya" }, { "key": "\u041A\u0440\u0438\u0432\u043E \u043F\u043E\u043B\u0435", "value": 15, "slug": "krivo-pole" }, { "key": "\u041A\u0440\u0438\u0432\u043E\u0434\u043E\u043B", "value": 178, "slug": "krivodol" }, { "key": "\u041A\u0440\u0438\u043B\u0430\u0442\u0438\u0446\u0430", "value": 8, "slug": "krilatica" }, { "key": "\u041A\u0440\u0438\u043D", "value": 9, "slug": "krin" }, { "key": "\u041A\u0440\u0438\u0441\u043B\u043E\u0432\u043E", "value": 18, "slug": "krislovo" }, { "key": "\u041A\u0440\u0438\u0447\u0438\u043C", "value": 424, "slug": "krichim" }, { "key": "\u041A\u0440\u043E\u043C\u0438\u0434\u043E\u0432\u043E", "value": 2, "slug": "kromidovo" }, { "key": "\u041A\u0440\u043E\u044F\u0447", "value": 5, "slug": "kroyach" }, { "key": "\u041A\u0440\u0443\u043C", "value": 6, "slug": "krum" }, { "key": "\u041A\u0440\u0443\u043C\u043E\u0432\u0433\u0440\u0430\u0434", "value": 348, "slug": "krumovgrad" }, { "key": "\u041A\u0440\u0443\u043C\u043E\u0432\u043E", "value": 243, "slug": "krumovo" }, { "key": "\u041A\u0440\u0443\u043C\u043E\u0432\u043E \u0433\u0440\u0430\u0434\u0438\u0449\u0435", "value": 16, "slug": "krumovo-gradishche" }, { "key": "\u041A\u0440\u0443\u043F\u0435\u043D", "value": 1, "slug": "krupen" }, { "key": "\u041A\u0440\u0443\u043F\u043D\u0438\u043A", "value": 78, "slug": "krupnik" }, { "key": "\u041A\u0440\u0443\u0448\u0430", "value": 11, "slug": "krusha" }, { "key": "\u041A\u0440\u0443\u0448\u0430\u0440\u0435", "value": 53, "slug": "krushare" }, { "key": "\u041A\u0440\u0443\u0448\u0430\u0440\u0438", "value": 41, "slug": "krushari" }, { "key": "\u041A\u0440\u0443\u0448\u0435\u0432\u0435\u0446", "value": 33, "slug": "krushevec" }, { "key": "\u041A\u0440\u0443\u0448\u0435\u0432\u043E", "value": 54, "slug": "krushevo" }, { "key": "\u041A\u0440\u0443\u0448\u0435\u0432\u0441\u043A\u0430", "value": 3, "slug": "krushevska" }, { "key": "\u041A\u0440\u0443\u0448\u0435\u0442\u043E", "value": 14, "slug": "krusheto" }, { "key": "\u041A\u0440\u0443\u0448\u043A\u0430", "value": 1, "slug": "krushka" }, { "key": "\u041A\u0440\u0443\u0448\u043E\u0432\u0435\u043D\u0435", "value": 25, "slug": "krushovene" }, { "key": "\u041A\u0440\u0443\u0448\u043E\u0432\u0438\u0446\u0430", "value": 93, "slug": "krushovica" }, { "key": "\u041A\u0440\u0443\u0448\u043E\u0432\u043E", "value": 7, "slug": "krushovo" }, { "key": "\u041A\u0440\u0443\u0448\u043E\u043B\u0430\u043A", "value": 2, "slug": "krusholak" }, { "key": "\u041A\u0440\u0443\u0448\u0443\u043D\u0430", "value": 9, "slug": "krushuna" }, { "key": "\u041A\u0440\u044A\u0432\u0435\u043D\u0438\u043A", "value": 13, "slug": "krvenik" }, { "key": "\u041A\u0440\u044A\u043D", "value": 215, "slug": "krn" }, { "key": "\u041A\u0440\u044A\u0441\u0442\u0430\u0432\u0430", "value": 34, "slug": "krstava" }, { "key": "\u041A\u0440\u044A\u0441\u0442\u0435\u0432\u0438\u0447", "value": 11, "slug": "krstevich" }, { "key": "\u041A\u0440\u044A\u0441\u0442\u0435\u0446", "value": 5, "slug": "krstec" }, { "key": "\u041A\u0440\u044A\u0441\u0442\u0438\u043D\u0430", "value": 20, "slug": "krstina" }, { "key": "\u041A\u0440\u044A\u0448\u043D\u043E", "value": 7, "slug": "krshno" }, { "key": "\u041A\u0443\u0431\u0430\u0434\u0438\u043D", "value": 5, "slug": "kubadin" }, { "key": "\u041A\u0443\u0431\u0440\u0430\u0442", "value": 519, "slug": "kubrat" }, { "key": "\u041A\u0443\u0431\u0440\u0430\u0442\u043E\u0432\u043E", "value": 41, "slug": "kubratovo" }, { "key": "\u041A\u0443\u0434\u0435\u043B\u0438\u043D", "value": 5, "slug": "kudelin" }, { "key": "\u041A\u0443\u0437\u044C\u043E\u0432\u043E", "value": 6, "slug": "kuzovo" }, { "key": "\u041A\u0443\u043A\u043B\u0435\u043D", "value": 430, "slug": "kuklen" }, { "key": "\u041A\u0443\u043A\u043E\u0440\u0435\u0432\u043E", "value": 80, "slug": "kukorevo" }, { "key": "\u041A\u0443\u043A\u0443\u0440\u044F\u043A", "value": 7, "slug": "kukuryak" }, { "key": "\u041A\u0443\u043B\u0430", "value": 152, "slug": "kula" }, { "key": "\u041A\u0443\u043B\u0430\u0442\u0430", "value": 98, "slug": "kulata" }, { "key": "\u041A\u0443\u043C\u0430\u043D\u0438\u0442\u0435", "value": 6, "slug": "kumanite" }, { "key": "\u041A\u0443\u043C\u0430\u043D\u043E\u0432\u043E", "value": 31, "slug": "kumanovo" }, { "key": "\u041A\u0443\u043D\u0434\u0435\u0432\u043E", "value": 7, "slug": "kundevo" }, { "key": "\u041A\u0443\u043D\u0438\u043D\u043E", "value": 16, "slug": "kunino" }, { "key": "\u041A\u0443\u043F\u0435\u043D", "value": 2, "slug": "kupen" }, { "key": "\u041A\u0443\u0440\u043D\u043E\u0432\u043E", "value": 4, "slug": "kurnovo" }, { "key": "\u041A\u0443\u0440\u0442\u043E\u0432\u043E", "value": 9, "slug": "kurtovo" }, { "key": "\u041A\u0443\u0440\u0442\u043E\u0432\u043E \u041A\u043E\u043D\u0430\u0440\u0435", "value": 94, "slug": "kurtovo-konare" }, { "key": "\u041A\u0443\u0442\u0435\u043B\u0430", "value": 25, "slug": "kutela" }, { "key": "\u041A\u0443\u0442\u043B\u043E\u0432\u0438\u0446\u0430", "value": 3, "slug": "kutlovica" }, { "key": "\u041A\u0443\u0442\u043E\u0432\u043E", "value": 24, "slug": "kutovo" }, { "key": "\u041A\u0443\u0446\u0438\u043D\u0430", "value": 19, "slug": "kucina" }, { "key": "\u041A\u044A\u043A\u0440\u0438\u043D\u0430", "value": 10, "slug": "kkrina" }, { "key": "\u041A\u044A\u043B\u043D\u043E\u0432\u043E", "value": 11, "slug": "klnovo" }, { "key": "\u041A\u044A\u043D\u0447\u0435\u0432\u043E", "value": 31, "slug": "knchevo" }, { "key": "\u041A\u044A\u043F\u0438\u043D\u043E\u0432\u043E", "value": 18, "slug": "kpinovo" }, { "key": "\u041A\u044A\u043F\u0438\u043D\u043E\u0432\u0446\u0438", "value": 4, "slug": "kpinovci" }, { "key": "\u041A\u044A\u0440\u0434\u0436\u0430\u043B\u0438", "value": 4275, "slug": "krdzhali" }, { "key": "\u041A\u044A\u0440\u043B\u0430\u043D\u043E\u0432\u043E", "value": 1, "slug": "krlanovo" }, { "key": "\u041A\u044A\u0440\u043D\u0430\u043B\u043E\u0432\u043E", "value": 71, "slug": "krnalovo" }, { "key": "\u041A\u044A\u0440\u043D\u0430\u0440\u0435", "value": 28, "slug": "krnare" }, { "key": "\u041A\u044A\u0440\u043F\u0430\u0447\u0435\u0432\u043E", "value": 3, "slug": "krpachevo" }, { "key": "\u041A\u044A\u0440\u0442\u043E\u0436\u0430\u0431\u0435\u043D\u0435", "value": 4, "slug": "krtozhabene" }, { "key": "\u041A\u044A\u0440\u0447\u043E\u0432\u0441\u043A\u043E", "value": 3, "slug": "krchovsko" }, { "key": "\u041A\u044A\u0441\u0430\u043A", "value": 27, "slug": "ksak" }, { "key": "\u041A\u044A\u0442\u0438\u043D\u0430", "value": 49, "slug": "ktina" }, { "key": "\u041A\u044A\u0448\u0438\u043D", "value": 10, "slug": "kshin" }, { "key": "\u041A\u044C\u043E\u043B\u043C\u0435\u043D", "value": 1, "slug": "kolmen" }, { "key": "\u041A\u044C\u043E\u0441\u0435\u0432\u043E", "value": 7, "slug": "kosevo" }, { "key": "\u041A\u044C\u043E\u0441\u0435\u0432\u0446\u0438", "value": 4, "slug": "kosevci" }, { "key": "\u041A\u044E\u043B\u0435\u0432\u0447\u0430", "value": 30, "slug": "kyulevcha" }, { "key": "\u041A\u044E\u0441\u0442\u0435\u043D\u0434\u0438\u043B", "value": 4764, "slug": "kyustendil" }, { "key": "\u041B\u0430\u0433\u043E\u0448\u0435\u0432\u0446\u0438", "value": 4, "slug": "lagoshevci" }, { "key": "\u041B\u0430\u0434\u0430\u0440\u0435\u0432\u043E", "value": 2, "slug": "ladarevo" }, { "key": "\u041B\u0430\u0437\u0430\u0440\u043E\u0432\u043E", "value": 11, "slug": "lazarovo" }, { "key": "\u041B\u0430\u0437\u0430\u0440\u0446\u0438", "value": 8, "slug": "lazarci" }, { "key": "\u041B\u0430\u043A\u0430\u0442\u043D\u0438\u043A", "value": 61, "slug": "lakatnik" }, { "key": "\u041B\u0430\u043B\u0435", "value": 5, "slug": "lale" }, { "key": "\u041B\u0430\u043B\u043A\u043E\u0432\u043E", "value": 10, "slug": "lalkovo" }, { "key": "\u041B\u0430\u0441\u043A\u0430\u0440", "value": 3, "slug": "laskar" }, { "key": "\u041B\u0430\u0441\u043A\u0430\u0440\u0435\u0432\u043E", "value": 16, "slug": "laskarevo" }, { "key": "\u041B\u0430\u0442\u0438\u043D\u043A\u0430", "value": 1, "slug": "latinka" }, { "key": "\u041B\u0435\u0431\u0435\u0434", "value": 1, "slug": "lebed" }, { "key": "\u041B\u0435\u0431\u043D\u0438\u0446\u0430", "value": 23, "slug": "lebnica" }, { "key": "\u041B\u0435\u0432\u0430 \u0440\u0435\u043A\u0430", "value": 1, "slug": "leva-reka" }, { "key": "\u041B\u0435\u0432\u043A\u0430", "value": 16, "slug": "levka" }, { "key": "\u041B\u0435\u0432\u043E\u0447\u0435\u0432\u043E", "value": 9, "slug": "levochevo" }, { "key": "\u041B\u0435\u0432\u0441\u043A\u0438", "value": 588, "slug": "levski" }, { "key": "\u041B\u0435\u0432\u0443\u043D\u043E\u0432\u043E", "value": 33, "slug": "levunovo" }, { "key": "\u041B\u0435\u0434\u0435\u043D\u0438\u043A", "value": 45, "slug": "ledenik" }, { "key": "\u041B\u0435\u043D\u0438\u0449\u0435", "value": 4, "slug": "lenishche" }, { "key": "\u041B\u0435\u043D\u043A\u043E\u0432\u043E", "value": 7, "slug": "lenkovo" }, { "key": "\u041B\u0435\u043D\u043E\u0432\u043E", "value": 12, "slug": "lenovo" }, { "key": "\u041B\u0435\u043D\u0441\u043A\u043E", "value": 1, "slug": "lensko" }, { "key": "\u041B\u0435\u043F\u0438\u0446\u0430", "value": 9, "slug": "lepica" }, { "key": "\u041B\u0435\u0441\u0438\u0434\u0440\u0435\u043D", "value": 57, "slug": "lesidren" }, { "key": "\u041B\u0435\u0441\u0438\u0447\u0430\u0440\u043A\u0430", "value": 7, "slug": "lesicharka" }, { "key": "\u041B\u0435\u0441\u0438\u0447\u0435\u0440\u0438", "value": 14, "slug": "lesicheri" }, { "key": "\u041B\u0435\u0441\u0438\u0447\u043E\u0432\u043E", "value": 33, "slug": "lesichovo" }, { "key": "\u041B\u0435\u0441\u043A\u0430", "value": 9, "slug": "leska" }, { "key": "\u041B\u0435\u0441\u043A\u043E\u0432\u0434\u043E\u043B", "value": 1, "slug": "leskovdol" }, { "key": "\u041B\u0435\u0441\u043A\u043E\u0432\u0435\u0446", "value": 13, "slug": "leskovec" }, { "key": "\u041B\u0435\u0441\u043D\u043E\u0432\u043E", "value": 72, "slug": "lesnovo" }, { "key": "\u041B\u0435\u0441\u043E\u0432\u043E", "value": 28, "slug": "lesovo" }, { "key": "\u041B\u0435\u0441\u0443\u0440\u0430", "value": 28, "slug": "lesura" }, { "key": "\u041B\u0435\u0442\u043D\u0438\u0446\u0430", "value": 122, "slug": "letnica" }, { "key": "\u041B\u0435\u0442\u043E\u0432\u043D\u0438\u043A", "value": 1, "slug": "letovnik" }, { "key": "\u041B\u0435\u0445\u0447\u0435\u0432\u043E", "value": 39, "slug": "lehchevo" }, { "key": "\u041B\u0435\u0448\u043A\u043E", "value": 2, "slug": "leshko" }, { "key": "\u041B\u0435\u0448\u043D\u0438\u043A\u043E\u0432\u043E", "value": 1, "slug": "leshnikovo" }, { "key": "\u041B\u0435\u0448\u043D\u0438\u043A\u043E\u0432\u0446\u0438", "value": 4, "slug": "leshnikovci" }, { "key": "\u041B\u0435\u0448\u043D\u0438\u0446\u0430", "value": 38, "slug": "leshnica" }, { "key": "\u041B\u0435\u0449\u0430\u043A", "value": 5, "slug": "leshchak" }, { "key": "\u041B\u0435\u0449\u0430\u0440\u043A\u0430", "value": 2, "slug": "leshcharka" }, { "key": "\u041B\u0435\u0449\u0435\u043D", "value": 22, "slug": "leshchen" }, { "key": "\u041B\u0438\u0432\u0430\u0434\u0430", "value": 19, "slug": "livada" }, { "key": "\u041B\u0438\u043A", "value": 8, "slug": "lik" }, { "key": "\u041B\u0438\u043B\u0435\u043A\u043E\u0432\u043E", "value": 5, "slug": "lilekovo" }, { "key": "\u041B\u0438\u043B\u043A\u043E\u0432\u043E", "value": 4, "slug": "lilkovo" }, { "key": "\u041B\u0438\u043B\u044F\u043A", "value": 18, "slug": "lilyak" }, { "key": "\u041B\u0438\u043B\u044F\u043D\u043E\u0432\u043E", "value": 10, "slug": "lilyanovo" }, { "key": "\u041B\u0438\u043B\u044F\u0447", "value": 13, "slug": "lilyach" }, { "key": "\u041B\u0438\u043B\u044F\u0447\u0435", "value": 22, "slug": "lilyache" }, { "key": "\u041B\u0438\u043F\u0435\u043D", "value": 5, "slug": "lipen" }, { "key": "\u041B\u0438\u043F\u043D\u0438\u043A", "value": 25, "slug": "lipnik" }, { "key": "\u041B\u0438\u043F\u043D\u0438\u0446\u0430", "value": 31, "slug": "lipnica" }, { "key": "\u041B\u0438\u0441\u0435\u0446", "value": 20, "slug": "lisec" }, { "key": "\u041B\u0438\u0441\u0438 \u0432\u0440\u044A\u0445", "value": 1, "slug": "lisi-vrh" }, { "key": "\u041B\u0438\u0441\u0442\u0435\u0446", "value": 17, "slug": "listec" }, { "key": "\u041B\u0438\u0442\u0430\u043A\u043E\u0432\u043E", "value": 50, "slug": "litakovo" }, { "key": "\u041B\u043E\u0431\u043E\u0448", "value": 8, "slug": "lobosh" }, { "key": "\u041B\u043E\u0432\u0435\u0446", "value": 32, "slug": "lovec" }, { "key": "\u041B\u043E\u0432\u0435\u0447", "value": 3025, "slug": "lovech" }, { "key": "\u041B\u043E\u0432\u043D\u0438\u0434\u043E\u043B", "value": 3, "slug": "lovnidol" }, { "key": "\u041B\u043E\u0432\u0441\u043A\u043E", "value": 18, "slug": "lovsko" }, { "key": "\u041B\u043E\u0432\u0446\u0438", "value": 8, "slug": "lovci" }, { "key": "\u041B\u043E\u0432\u0447\u0430\u043D\u0446\u0438", "value": 16, "slug": "lovchanci" }, { "key": "\u041B\u043E\u0433\u043E\u0434\u0430\u0436", "value": 10, "slug": "logodazh" }, { "key": "\u041B\u043E\u0437\u0430", "value": 1, "slug": "loza" }, { "key": "\u041B\u043E\u0437\u0430\u0440\u0435\u0432\u043E", "value": 39, "slug": "lozarevo" }, { "key": "\u041B\u043E\u0437\u0435\u0432\u043E", "value": 15, "slug": "lozevo" }, { "key": "\u041B\u043E\u0437\u0435\u043D", "value": 520, "slug": "lozen" }, { "key": "\u041B\u043E\u0437\u0435\u043D\u0433\u0440\u0430\u0434\u0446\u0438", "value": 2, "slug": "lozengradci" }, { "key": "\u041B\u043E\u0437\u0435\u043D\u0435\u0446", "value": 149, "slug": "lozenec" }, { "key": "\u041B\u043E\u0437\u0435\u043D\u0438\u0446\u0430", "value": 7, "slug": "lozenica" }, { "key": "\u041B\u043E\u0437\u0438\u0446\u0430", "value": 10, "slug": "lozica" }, { "key": "\u041B\u043E\u0437\u043D\u0438\u0446\u0430", "value": 169, "slug": "loznica" }, { "key": "\u041B\u043E\u0437\u043D\u043E", "value": 30, "slug": "lozno" }, { "key": "\u041B\u043E\u043A\u0432\u0430\u0442\u0430", "value": 1, "slug": "lokvata" }, { "key": "\u041B\u043E\u043A\u043E\u0440\u0441\u043A\u043E", "value": 41, "slug": "lokorsko" }, { "key": "\u041B\u043E\u043C", "value": 1207, "slug": "lom" }, { "key": "\u041B\u043E\u043C \u0427\u0435\u0440\u043A\u043E\u0432\u043D\u0430", "value": 7, "slug": "lom-cherkovna" }, { "key": "\u041B\u043E\u043C\u0435\u0446", "value": 29, "slug": "lomec" }, { "key": "\u041B\u043E\u043C\u043D\u0438\u0446\u0430", "value": 1, "slug": "lomnica" }, { "key": "\u041B\u043E\u043C\u0446\u0438", "value": 15, "slug": "lomci" }, { "key": "\u041B\u043E\u043F\u0443\u0448\u043D\u0430", "value": 24, "slug": "lopushna" }, { "key": "\u041B\u043E\u043F\u044F\u043D", "value": 14, "slug": "lopyan" }, { "key": "\u041B\u0443\u0434\u043E\u0433\u043E\u0440\u0446\u0438", "value": 28, "slug": "ludogorci" }, { "key": "\u041B\u0443\u043A\u043E\u0432\u0438\u0442", "value": 554, "slug": "lukovit" }, { "key": "\u041B\u0443\u043A\u043E\u0432\u043E", "value": 15, "slug": "lukovo" }, { "key": "\u041B\u0443\u043B\u0438\u0447\u043A\u0430", "value": 1, "slug": "lulichka" }, { "key": "\u041B\u044A\u0432\u0438\u043D\u043E", "value": 20, "slug": "lvino" }, { "key": "\u041B\u044A\u0433\u0430", "value": 5, "slug": "lga" }, { "key": "\u041B\u044A\u0436\u043D\u0438\u0446\u0430", "value": 63, "slug": "lzhnica" }, { "key": "\u041B\u044A\u043A\u0430", "value": 31, "slug": "lka" }, { "key": "\u041B\u044A\u043A\u0438", "value": 137, "slug": "lki" }, { "key": "\u041B\u044E\u0431\u0435\u043D", "value": 14, "slug": "lyuben" }, { "key": "\u041B\u044E\u0431\u0435\u043D \u041A\u0430\u0440\u0430\u0432\u0435\u043B\u043E\u0432\u043E", "value": 30, "slug": "lyuben-karavelovo" }, { "key": "\u041B\u044E\u0431\u0435\u043D\u0435\u0446", "value": 7, "slug": "lyubenec" }, { "key": "\u041B\u044E\u0431\u0435\u043D\u043E\u0432\u0430 \u043C\u0430\u0445\u0430\u043B\u0430", "value": 28, "slug": "lyubenova-mahala" }, { "key": "\u041B\u044E\u0431\u0435\u043D\u043E\u0432\u043E", "value": 29, "slug": "lyubenovo" }, { "key": "\u041B\u044E\u0431\u0438\u043C\u0435\u0446", "value": 433, "slug": "lyubimec" }, { "key": "\u041B\u044E\u0431\u0438\u043D\u043E", "value": 1, "slug": "lyubino" }, { "key": "\u041B\u044E\u0431\u0438\u0447\u0435\u0432\u043E", "value": 8, "slug": "lyubichevo" }, { "key": "\u041B\u044E\u0431\u043B\u0435\u043D", "value": 19, "slug": "lyublen" }, { "key": "\u041B\u044E\u0431\u043E\u0432\u043A\u0430", "value": 2, "slug": "lyubovka" }, { "key": "\u041B\u044E\u0431\u0447\u0430", "value": 22, "slug": "lyubcha" }, { "key": "\u041B\u044E\u043B\u0438\u043D", "value": 55, "slug": "lyulin" }, { "key": "\u041B\u044E\u043B\u043A\u0430", "value": 1, "slug": "lyulka" }, { "key": "\u041B\u044E\u043B\u044F\u043A", "value": 1, "slug": "lyulyak" }, { "key": "\u041B\u044E\u043B\u044F\u043A\u043E\u0432\u043E", "value": 123, "slug": "lyulyakovo" }, { "key": "\u041B\u044E\u0442\u0430\u0434\u0436\u0438\u043A", "value": 7, "slug": "lyutadzhik" }, { "key": "\u041B\u044E\u0442\u0438\u0431\u0440\u043E\u0434", "value": 13, "slug": "lyutibrod" }, { "key": "\u041B\u044E\u0442\u0438\u0434\u043E\u043B", "value": 5, "slug": "lyutidol" }, { "key": "\u041B\u044E\u0442\u043E\u0432\u043E", "value": 5, "slug": "lyutovo" }, { "key": "\u041B\u044F\u0432\u0430 \u0440\u0435\u043A\u0430", "value": 1, "slug": "lyava-reka" }, { "key": "\u041B\u044F\u0441\u043A\u043E\u0432\u0435\u0446", "value": 515, "slug": "lyaskovec" }, { "key": "\u041B\u044F\u0441\u043A\u043E\u0432\u043E", "value": 72, "slug": "lyaskovo" }, { "key": "\u041B\u044F\u0442\u043D\u043E", "value": 12, "slug": "lyatno" }, { "key": "\u041B\u044F\u0445\u043E\u0432\u043E", "value": 11, "slug": "lyahovo" }, { "key": "\u041C\u0430\u0434\u0430\u043D", "value": 465, "slug": "madan" }, { "key": "\u041C\u0430\u0434\u0430\u0440\u0430", "value": 36, "slug": "madara" }, { "key": "\u041C\u0430\u0434\u0436\u0430\u0440\u0435", "value": 18, "slug": "madzhare" }, { "key": "\u041C\u0430\u0434\u0436\u0430\u0440\u0438", "value": 3, "slug": "madzhari" }, { "key": "\u041C\u0430\u0434\u0436\u0430\u0440\u043E\u0432\u043E", "value": 29, "slug": "madzharovo" }, { "key": "\u041C\u0430\u0434\u0436\u0435\u0440\u0438\u0442\u043E", "value": 44, "slug": "madzherito" }, { "key": "\u041C\u0430\u0437\u0430\u0440\u0430\u0447\u0435\u0432\u043E", "value": 4, "slug": "mazarachevo" }, { "key": "\u041C\u0430\u0439\u043E\u0440 \u0423\u0437\u0443\u043D\u043E\u0432\u043E", "value": 5, "slug": "mayor-uzunovo" }, { "key": "\u041C\u0430\u0439\u0441\u043A\u043E", "value": 16, "slug": "maysko" }, { "key": "\u041C\u0430\u043A\u0430\u0440\u0438\u043E\u043F\u043E\u043B\u0441\u043A\u043E", "value": 25, "slug": "makariopolsko" }, { "key": "\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0446\u0438", "value": 5, "slug": "makedonci" }, { "key": "\u041C\u0430\u043A\u043E\u0432\u043E", "value": 2, "slug": "makovo" }, { "key": "\u041C\u0430\u043A\u043E\u0446\u0435\u0432\u043E", "value": 10, "slug": "makocevo" }, { "key": "\u041C\u0430\u043A\u0440\u0435\u0448", "value": 19, "slug": "makresh" }, { "key": "\u041C\u0430\u043B\u0430 \u0420\u0430\u043A\u043E\u0432\u0438\u0446\u0430", "value": 4, "slug": "mala-rakovica" }, { "key": "\u041C\u0430\u043B\u0430 \u0424\u0443\u0447\u0430", "value": 5, "slug": "mala-fucha" }, { "key": "\u041C\u0430\u043B\u0430 \u0446\u044A\u0440\u043A\u0432\u0430", "value": 30, "slug": "mala-crkva" }, { "key": "\u041C\u0430\u043B\u0435\u0432\u043E", "value": 35, "slug": "malevo" }, { "key": "\u041C\u0430\u043B\u0435\u043D\u043E\u0432\u043E", "value": 6, "slug": "malenovo" }, { "key": "\u041C\u0430\u043B\u0438 \u0414\u0440\u0435\u043D\u043E\u0432\u0435\u0446", "value": 1, "slug": "mali-drenovec" }, { "key": "\u041C\u0430\u043B\u0438 \u0438\u0437\u0432\u043E\u0440", "value": 7, "slug": "mali-izvor" }, { "key": "\u041C\u0430\u043B\u0438\u043D\u0430", "value": 13, "slug": "malina" }, { "key": "\u041C\u0430\u043B\u0438\u043D\u043E\u0432\u043E", "value": 29, "slug": "malinovo" }, { "key": "\u041C\u0430\u043B\u043A\u0430 \u0410\u0440\u0434\u0430", "value": 6, "slug": "malka-arda" }, { "key": "\u041C\u0430\u043B\u043A\u0430 \u0412\u0435\u0440\u0435\u044F", "value": 42, "slug": "malka-vereya" }, { "key": "\u041C\u0430\u043B\u043A\u0430 \u0416\u0435\u043B\u044F\u0437\u043D\u0430", "value": 3, "slug": "malka-zhelyazna" }, { "key": "\u041C\u0430\u043B\u043A\u0430 \u043F\u043E\u043B\u044F\u043D\u0430", "value": 16, "slug": "malka-polyana" }, { "key": "\u041C\u0430\u043B\u043A\u0430 \u0421\u043C\u043E\u043B\u043D\u0438\u0446\u0430", "value": 2, "slug": "malka-smolnica" }, { "key": "\u041C\u0430\u043B\u043A\u0430 \u0427\u0435\u0440\u043A\u043E\u0432\u043D\u0430", "value": 2, "slug": "malka-cherkovna" }, { "key": "\u041C\u0430\u043B\u043A\u0430 \u0427\u0438\u043D\u043A\u0430", "value": 3, "slug": "malka-chinka" }, { "key": "\u041C\u0430\u043B\u043A\u0438 \u0412\u043E\u0434\u0435\u043D", "value": 1, "slug": "malki-voden" }, { "key": "\u041C\u0430\u043B\u043A\u0438 \u0412\u044A\u0440\u0448\u0435\u0446", "value": 5, "slug": "malki-vrshec" }, { "key": "\u041C\u0430\u043B\u043A\u0438 \u0418\u0441\u043A\u044A\u0440", "value": 10, "slug": "malki-iskr" }, { "key": "\u041C\u0430\u043B\u043A\u0438 \u0447\u0438\u0444\u043B\u0438\u043A", "value": 6, "slug": "malki-chiflik" }, { "key": "\u041C\u0430\u043B\u043A\u043E \u0412\u0440\u0430\u043D\u043E\u0432\u043E", "value": 30, "slug": "malko-vranovo" }, { "key": "\u041C\u0430\u043B\u043A\u043E \u0433\u0440\u0430\u0434\u0438\u0449\u0435", "value": 21, "slug": "malko-gradishche" }, { "key": "\u041C\u0430\u043B\u043A\u043E \u0414\u0440\u044F\u043D\u043E\u0432\u043E", "value": 7, "slug": "malko-dryanovo" }, { "key": "\u041C\u0430\u043B\u043A\u043E \u0419\u043E\u043D\u043A\u043E\u0432\u043E", "value": 9, "slug": "malko-yonkovo" }, { "key": "\u041C\u0430\u043B\u043A\u043E \u041A\u0430\u0434\u0438\u0435\u0432\u043E", "value": 10, "slug": "malko-kadievo" }, { "key": "\u041C\u0430\u043B\u043A\u043E \u041A\u0438\u0440\u0438\u043B\u043E\u0432\u043E", "value": 1, "slug": "malko-kirilovo" }, { "key": "\u041C\u0430\u043B\u043A\u043E \u0441\u0435\u043B\u043E", "value": 4, "slug": "malko-selo" }, { "key": "\u041C\u0430\u043B\u043A\u043E \u0422\u0440\u044A\u043D\u043E\u0432\u043E", "value": 8, "slug": "malko-trnovo" }, { "key": "\u041C\u0430\u043B\u043A\u043E \u0422\u044A\u0440\u043D\u043E\u0432\u043E", "value": 181, "slug": "malko-trnovo" }, { "key": "\u041C\u0430\u043B\u043A\u043E \u0427\u043E\u0447\u043E\u0432\u0435\u043D\u0438", "value": 16, "slug": "malko-chochoveni" }, { "key": "\u041C\u0430\u043B\u043A\u043E \u0428\u0430\u0440\u043A\u043E\u0432\u043E", "value": 7, "slug": "malko-sharkovo" }, { "key": "\u041C\u0430\u043B\u043A\u043E\u0447", "value": 3, "slug": "malkoch" }, { "key": "\u041C\u0430\u043B\u043E \u0411\u0443\u0447\u0438\u043D\u043E", "value": 41, "slug": "malo-buchino" }, { "key": "\u041C\u0430\u043B\u043E \u041A\u043E\u043D\u0430\u0440\u0435", "value": 127, "slug": "malo-konare" }, { "key": "\u041C\u0430\u043B\u043E \u041A\u0440\u0443\u0448\u0435\u0432\u043E", "value": 1, "slug": "malo-krushevo" }, { "key": "\u041C\u0430\u043B\u043E \u041F\u0435\u0449\u0435\u043D\u0435", "value": 1, "slug": "malo-peshchene" }, { "key": "\u041C\u0430\u043B\u043E \u0441\u0435\u043B\u043E", "value": 16, "slug": "malo-selo" }, { "key": "\u041C\u0430\u043B\u043E\u0433\u0440\u0430\u0434\u0435\u0446", "value": 1, "slug": "malogradec" }, { "key": "\u041C\u0430\u043B\u043E\u043C\u0438\u0440", "value": 41, "slug": "malomir" }, { "key": "\u041C\u0430\u043B\u043E\u043C\u0438\u0440\u043E\u0432\u043E", "value": 20, "slug": "malomirovo" }, { "key": "\u041C\u0430\u043B\u043E\u0440\u0430\u0434", "value": 23, "slug": "malorad" }, { "key": "\u041C\u0430\u043B\u0447\u0438\u043A\u0430", "value": 48, "slug": "malchika" }, { "key": "\u041C\u0430\u043B\u044A\u043A \u0414\u0435\u0432\u0435\u0441\u0438\u043B", "value": 6, "slug": "malk-devesil" }, { "key": "\u041C\u0430\u043B\u044A\u043A \u0434\u043E\u043B", "value": 1, "slug": "malk-dol" }, { "key": "\u041C\u0430\u043B\u044A\u043A \u0438\u0437\u0432\u043E\u0440", "value": 37, "slug": "malk-izvor" }, { "key": "\u041C\u0430\u043B\u044A\u043A \u043C\u0430\u043D\u0430\u0441\u0442\u0438\u0440", "value": 23, "slug": "malk-manastir" }, { "key": "\u041C\u0430\u043B\u044A\u043A \u041F\u043E\u0440\u043E\u0432\u0435\u0446", "value": 12, "slug": "malk-porovec" }, { "key": "\u041C\u0430\u043B\u044A\u043A \u041F\u0440\u0435\u0441\u043B\u0430\u0432\u0435\u0446", "value": 15, "slug": "malk-preslavec" }, { "key": "\u041C\u0430\u043B\u044A\u043A \u0447\u0430\u0440\u0434\u0430\u043A", "value": 20, "slug": "malk-chardak" }, { "key": "\u041C\u0430\u043C\u0430\u0440\u0447\u0435\u0432\u043E", "value": 17, "slug": "mamarchevo" }, { "key": "\u043C\u0430\u043D. \u0420\u0438\u043B\u0441\u043A\u0438 \u043C\u0430\u043D\u0430\u0441\u0442\u0438\u0440", "value": 2, "slug": "man.-rilski-manastir" }, { "key": "\u041C\u0430\u043D\u0430\u0441\u0442\u0438\u0440", "value": 23, "slug": "manastir" }, { "key": "\u041C\u0430\u043D\u0430\u0441\u0442\u0438\u0440\u0438\u0449\u0435", "value": 18, "slug": "manastirishche" }, { "key": "\u041C\u0430\u043D\u0430\u0441\u0442\u0438\u0440\u0441\u043A\u043E", "value": 7, "slug": "manastirsko" }, { "key": "\u041C\u0430\u043D\u0430\u0441\u0442\u0438\u0440\u0446\u0438", "value": 14, "slug": "manastirci" }, { "key": "\u041C\u0430\u043D\u0434\u0440\u0430", "value": 6, "slug": "mandra" }, { "key": "\u041C\u0430\u043D\u0434\u0440\u0438\u0446\u0430", "value": 3, "slug": "mandrica" }, { "key": "\u041C\u0430\u043D\u043E\u043B\u0435", "value": 105, "slug": "manole" }, { "key": "\u041C\u0430\u043D\u043E\u043B\u0438\u0447", "value": 38, "slug": "manolich" }, { "key": "\u041C\u0430\u043D\u043E\u043B\u043E\u0432\u043E", "value": 23, "slug": "manolovo" }, { "key": "\u041C\u0430\u043D\u043E\u043B\u0441\u043A\u043E \u041A\u043E\u043D\u0430\u0440\u0435", "value": 31, "slug": "manolsko-konare" }, { "key": "\u041C\u0430\u043D\u043E\u044F", "value": 1, "slug": "manoya" }, { "key": "\u041C\u0430\u0440\u0430\u0448", "value": 41, "slug": "marash" }, { "key": "\u041C\u0430\u0440\u0438\u043A\u043E\u0441\u0442\u0438\u043D\u043E\u0432\u043E", "value": 108, "slug": "marikostinovo" }, { "key": "\u041C\u0430\u0440\u0438\u043D\u043A\u0430", "value": 108, "slug": "marinka" }, { "key": "\u041C\u0430\u0440\u0438\u043D\u043E \u043F\u043E\u043B\u0435", "value": 24, "slug": "marino-pole" }, { "key": "\u041C\u0430\u0440\u0438\u0446\u0430", "value": 29, "slug": "marica" }, { "key": "\u041C\u0430\u0440\u043A\u043E\u0432\u043E", "value": 327, "slug": "markovo" }, { "key": "\u041C\u0430\u0440\u043A\u043E\u0432\u043E \u0440\u0430\u0432\u043D\u0438\u0449\u0435", "value": 1, "slug": "markovo-ravnishche" }, { "key": "\u041C\u0430\u0440\u0442\u0435\u043D", "value": 267, "slug": "marten" }, { "key": "\u041C\u0430\u0440\u0442\u0438\u043D\u043E\u0432\u043E", "value": 2, "slug": "martinovo" }, { "key": "\u041C\u0430\u0440\u0443\u043B\u0435\u0432\u043E", "value": 1, "slug": "marulevo" }, { "key": "\u041C\u0430\u0440\u0447\u0435\u0432\u043E", "value": 19, "slug": "marchevo" }, { "key": "\u041C\u0430\u0440\u0447\u0438\u043D\u043E", "value": 4, "slug": "marchino" }, { "key": "\u041C\u0430\u0440\u044F\u043D", "value": 6, "slug": "maryan" }, { "key": "\u041C\u0430\u0441\u043B\u0430\u0440\u0435\u0432\u043E", "value": 32, "slug": "maslarevo" }, { "key": "\u041C\u0430\u0441\u043B\u0438\u043D\u043E\u0432\u043E", "value": 9, "slug": "maslinovo" }, { "key": "\u041C\u0430\u0445\u0430\u043B\u0430\u0442\u0430", "value": 2, "slug": "mahalata" }, { "key": "\u041C\u0430\u0446\u0430", "value": 3, "slug": "maca" }, { "key": "\u041C\u0435\u0434\u0432\u0435\u043D", "value": 23, "slug": "medven" }, { "key": "\u041C\u0435\u0434\u0435\u0432\u0446\u0438", "value": 1, "slug": "medevci" }, { "key": "\u041C\u0435\u0434\u0435\u043D \u043A\u043B\u0430\u0434\u0435\u043D\u0435\u0446", "value": 11, "slug": "meden-kladenec" }, { "key": "\u041C\u0435\u0434\u0435\u043D\u0438 \u043F\u043E\u043B\u044F\u043D\u0438", "value": 20, "slug": "medeni-polyani" }, { "key": "\u041C\u0435\u0434\u0435\u0448\u0435\u0432\u0446\u0438", "value": 1, "slug": "medeshevci" }, { "key": "\u041C\u0435\u0434\u043A\u043E\u0432\u0435\u0446", "value": 60, "slug": "medkovec" }, { "key": "\u041C\u0435\u0434\u043D\u0438\u043A\u0430\u0440\u043E\u0432\u043E", "value": 11, "slug": "mednikarovo" }, { "key": "\u041C\u0435\u0434\u043E\u0432\u0435\u043D\u0435", "value": 8, "slug": "medovene" }, { "key": "\u041C\u0435\u0434\u043E\u0432\u0435\u0446", "value": 53, "slug": "medovec" }, { "key": "\u041C\u0435\u0434\u043E\u0432\u0438\u043D\u0430", "value": 14, "slug": "medovina" }, { "key": "\u041C\u0435\u0434\u043E\u0432\u043D\u0438\u0446\u0430", "value": 4, "slug": "medovnica" }, { "key": "\u041C\u0435\u0434\u043E\u0432\u043E", "value": 50, "slug": "medovo" }, { "key": "\u041C\u0435\u0436\u0434\u0430", "value": 4, "slug": "mezhda" }, { "key": "\u041C\u0435\u0436\u0434\u0435\u043D", "value": 4, "slug": "mezhden" }, { "key": "\u041C\u0435\u0436\u0434\u0435\u043D\u0438", "value": 1, "slug": "mezhdeni" }, { "key": "\u041C\u0435\u0437\u0434\u0440\u0430", "value": 717, "slug": "mezdra" }, { "key": "\u041C\u0435\u0437\u0434\u0440\u0435\u044F", "value": 10, "slug": "mezdreya" }, { "key": "\u041C\u0435\u0437\u0435\u043A", "value": 23, "slug": "mezek" }, { "key": "\u041C\u0435\u043B\u043D\u0438\u043A", "value": 37, "slug": "melnik" }, { "key": "\u041C\u0435\u043B\u043D\u0438\u0446\u0430", "value": 23, "slug": "melnica" }, { "key": "\u041C\u0435\u043B\u044F\u043D\u0435", "value": 11, "slug": "melyane" }, { "key": "\u041C\u0435\u043D\u0433\u0438\u0448\u0435\u0432\u043E", "value": 16, "slug": "mengishevo" }, { "key": "\u041C\u0435\u043D\u0434\u043E\u0432\u043E", "value": 2, "slug": "mendovo" }, { "key": "\u041C\u0435\u043D\u0435\u043D\u043A\u044C\u043E\u0432\u043E", "value": 25, "slug": "menenkovo" }, { "key": "\u041C\u0435\u0440\u0434\u0430\u043D\u044F", "value": 33, "slug": "merdanya" }, { "key": "\u041C\u0435\u0440\u0438\u0447\u043B\u0435\u0440\u0438", "value": 56, "slug": "merichleri" }, { "key": "\u041C\u0435\u0441\u0442\u0430", "value": 5, "slug": "mesta" }, { "key": "\u041C\u0435\u0442\u043B\u0438\u0447\u0438\u043D\u0430", "value": 17, "slug": "metlichina" }, { "key": "\u041C\u0435\u0442\u043E\u0434\u0438\u0435\u0432\u043E", "value": 27, "slug": "metodievo" }, { "key": "\u041C\u0435\u0447\u043A\u0430", "value": 37, "slug": "mechka" }, { "key": "\u041C\u0435\u0447\u043A\u0430\u0440\u0435\u0432\u043E", "value": 22, "slug": "mechkarevo" }, { "key": "\u041C\u0435\u0449\u0438\u0446\u0430", "value": 46, "slug": "meshchica" }, { "key": "\u041C\u0438\u0437\u0438\u044F", "value": 119, "slug": "miziya" }, { "key": "\u041C\u0438\u0439\u043A\u043E\u0432\u0446\u0438", "value": 5, "slug": "miykovci" }, { "key": "\u041C\u0438\u043A\u0440\u0435", "value": 12, "slug": "mikre" }, { "key": "\u041C\u0438\u043A\u0440\u0435\u0432\u043E", "value": 89, "slug": "mikrevo" }, { "key": "\u041C\u0438\u043B\u0430\u0434\u0438\u043D\u043E\u0432\u043E", "value": 2, "slug": "miladinovo" }, { "key": "\u041C\u0438\u043B\u0430\u0434\u0438\u043D\u043E\u0432\u0446\u0438", "value": 40, "slug": "miladinovci" }, { "key": "\u041C\u0438\u043B\u0430\u043D\u043E\u0432\u043E", "value": 16, "slug": "milanovo" }, { "key": "\u041C\u0438\u043B\u0435\u0432\u043E", "value": 25, "slug": "milevo" }, { "key": "\u041C\u0438\u043B\u0435\u0432\u0446\u0438", "value": 2, "slug": "milevci" }, { "key": "\u041C\u0438\u043B\u043A\u043E\u0432\u0438\u0446\u0430", "value": 49, "slug": "milkovica" }, { "key": "\u041C\u0438\u043B\u043A\u043E\u0432\u0446\u0438", "value": 1, "slug": "milkovci" }, { "key": "\u041C\u0438\u043B\u043E\u0441\u043B\u0430\u0432\u0446\u0438", "value": 2, "slug": "miloslavci" }, { "key": "\u041C\u0438\u043D\u0434\u044F", "value": 16, "slug": "mindya" }, { "key": "\u041C\u0438\u043D\u0435\u0432\u0446\u0438", "value": 1, "slug": "minevci" }, { "key": "\u041C\u0438\u043D\u0435\u0440\u0430\u043B\u043D\u0438 \u0431\u0430\u043D\u0438", "value": 145, "slug": "mineralni-bani" }, { "key": "\u041C\u0438\u043D\u0437\u0443\u0445\u0430\u0440", "value": 15, "slug": "minzuhar" }, { "key": "\u041C\u0438\u0440\u043A\u043E\u0432\u043E", "value": 60, "slug": "mirkovo" }, { "key": "\u041C\u0438\u0440\u043E\u0432\u0435\u0446", "value": 8, "slug": "mirovec" }, { "key": "\u041C\u0438\u0440\u043E\u0432\u043E", "value": 44, "slug": "mirovo" }, { "key": "\u041C\u0438\u0440\u043E\u0432\u0446\u0438", "value": 9, "slug": "mirovci" }, { "key": "\u041C\u0438\u0440\u043E\u0432\u044F\u043D\u0435", "value": 129, "slug": "mirovyane" }, { "key": "\u041C\u0438\u0440\u043E\u043B\u044E\u0431\u043E\u0432\u043E", "value": 10, "slug": "mirolyubovo" }, { "key": "\u041C\u0438\u0440\u044F\u043D\u0446\u0438", "value": 24, "slug": "miryanci" }, { "key": "\u041C\u0438\u0442\u0438\u043D\u043E", "value": 10, "slug": "mitino" }, { "key": "\u041C\u0438\u0442\u043E\u0432\u0441\u043A\u0430", "value": 7, "slug": "mitovska" }, { "key": "\u041C\u0438\u0442\u0440\u043E\u0432\u0446\u0438", "value": 5, "slug": "mitrovci" }, { "key": "\u041C\u0438\u0445\u0430\u0439\u043B\u043E\u0432\u043E", "value": 30, "slug": "mihaylovo" }, { "key": "\u041C\u0438\u0445\u0430\u043B\u0438\u0447", "value": 13, "slug": "mihalich" }, { "key": "\u041C\u0438\u0445\u0430\u043B\u043A\u043E\u0432\u043E", "value": 28, "slug": "mihalkovo" }, { "key": "\u041C\u0438\u0445\u0430\u043B\u0446\u0438", "value": 33, "slug": "mihalci" }, { "key": "\u041C\u0438\u0445\u0438\u043B\u0446\u0438", "value": 9, "slug": "mihilci" }, { "key": "\u041C\u0438\u0445\u043D\u0435\u0432\u043E", "value": 35, "slug": "mihnevo" }, { "key": "\u041C\u0438\u0447\u043A\u043E\u0432\u0446\u0438", "value": 2, "slug": "michkovci" }, { "key": "\u041C\u0438\u0448\u0435\u0432\u0441\u043A\u043E", "value": 4, "slug": "mishevsko" }, { "key": "\u041C\u043B\u0430\u0434\u0430 \u0433\u0432\u0430\u0440\u0434\u0438\u044F", "value": 11, "slug": "mlada-gvardiya" }, { "key": "\u041C\u043B\u0430\u0434\u0435\u0436\u043A\u043E", "value": 8, "slug": "mladezhko" }, { "key": "\u041C\u043B\u0430\u0434\u0435\u043D", "value": 7, "slug": "mladen" }, { "key": "\u041C\u043B\u0430\u0434\u0438\u043D\u043E\u0432\u043E", "value": 7, "slug": "mladinovo" }, { "key": "\u041C\u043B\u0430\u0434\u043E\u0432\u043E", "value": 14, "slug": "mladovo" }, { "key": "\u041C\u043B\u0430\u043C\u043E\u043B\u043E\u0432\u043E", "value": 26, "slug": "mlamolovo" }, { "key": "\u041C\u043B\u0435\u043A\u0430\u0440\u0435\u0432\u043E", "value": 26, "slug": "mlekarevo" }, { "key": "\u041C\u043B\u0435\u0447\u0435\u0432\u043E", "value": 4, "slug": "mlechevo" }, { "key": "\u041C\u043B\u0435\u0447\u0438\u043D\u043E", "value": 15, "slug": "mlechino" }, { "key": "\u041C\u043E\u0433\u0438\u043B\u0430", "value": 57, "slug": "mogila" }, { "key": "\u041C\u043E\u0433\u0438\u043B\u0435\u0446", "value": 12, "slug": "mogilec" }, { "key": "\u041C\u043E\u0433\u0438\u043B\u0438\u043D\u043E", "value": 13, "slug": "mogilino" }, { "key": "\u041C\u043E\u0433\u0438\u043B\u0438\u0446\u0430", "value": 30, "slug": "mogilica" }, { "key": "\u041C\u043E\u0433\u0438\u043B\u0438\u0449\u0435", "value": 6, "slug": "mogilishche" }, { "key": "\u041C\u043E\u0433\u0438\u043B\u043E\u0432\u043E", "value": 11, "slug": "mogilovo" }, { "key": "\u041C\u043E\u0433\u0438\u043B\u044F\u043D\u0435", "value": 5, "slug": "mogilyane" }, { "key": "\u041C\u043E\u043A\u0440\u0435\u043D", "value": 27, "slug": "mokren" }, { "key": "\u041C\u043E\u043A\u0440\u0435\u0448", "value": 37, "slug": "mokresh" }, { "key": "\u041C\u043E\u043A\u0440\u0438\u0449\u0435", "value": 60, "slug": "mokrishche" }, { "key": "\u041C\u043E\u043C\u0438\u043D \u043F\u0440\u043E\u0445\u043E\u0434", "value": 57, "slug": "momin-prohod" }, { "key": "\u041C\u043E\u043C\u0438\u043D \u0441\u0431\u043E\u0440", "value": 9, "slug": "momin-sbor" }, { "key": "\u041C\u043E\u043C\u0438\u043D\u0430 \u043A\u043B\u0438\u0441\u0443\u0440\u0430", "value": 52, "slug": "momina-klisura" }, { "key": "\u041C\u043E\u043C\u0438\u043D\u0430 \u0446\u044A\u0440\u043A\u0432\u0430", "value": 10, "slug": "momina-crkva" }, { "key": "\u041C\u043E\u043C\u0438\u043D\u043E", "value": 11, "slug": "momino" }, { "key": "\u041C\u043E\u043C\u0438\u043D\u043E \u0441\u0435\u043B\u043E", "value": 24, "slug": "momino-selo" }, { "key": "\u041C\u043E\u043C\u0438\u043D\u0441\u043A\u043E", "value": 13, "slug": "mominsko" }, { "key": "\u041C\u043E\u043C\u043A\u043E\u0432\u043E", "value": 30, "slug": "momkovo" }, { "key": "\u041C\u043E\u043C\u0447\u0438\u043B\u0433\u0440\u0430\u0434", "value": 713, "slug": "momchilgrad" }, { "key": "\u041C\u043E\u043C\u0447\u0438\u043B\u043E\u0432\u043E", "value": 12, "slug": "momchilovo" }, { "key": "\u041C\u043E\u043C\u0447\u0438\u043B\u043E\u0432\u0446\u0438", "value": 77, "slug": "momchilovci" }, { "key": "\u041C\u041E\u041D\u0410\u041A\u041E,", "value": 1, "slug": "monako" }, { "key": "\u041C\u043E\u043D\u0442\u0430\u043D\u0430", "value": 3769, "slug": "montana" }, { "key": "\u041C\u043E\u0440\u0430\u0432\u0430", "value": 16, "slug": "morava" }, { "key": "\u041C\u043E\u0440\u0430\u0432\u0438\u0446\u0430", "value": 32, "slug": "moravica" }, { "key": "\u041C\u043E\u0440\u0430\u0432\u043A\u0430", "value": 5, "slug": "moravka" }, { "key": "\u041C\u043E\u0440\u0442\u0430\u0433\u043E\u043D\u043E\u0432\u043E", "value": 18, "slug": "mortagonovo" }, { "key": "\u041C\u043E\u0441\u043A\u043E\u0432\u0435\u0446", "value": 2, "slug": "moskovec" }, { "key": "\u041C\u043E\u0441\u043E\u043C\u0438\u0449\u0435", "value": 10, "slug": "mosomishche" }, { "key": "\u041C\u043E\u0441\u0442", "value": 25, "slug": "most" }, { "key": "\u041C\u043E\u0441\u0442\u0438\u0447", "value": 7, "slug": "mostich" }, { "key": "\u041C\u043E\u0441\u0442\u043E\u0432\u043E", "value": 1, "slug": "mostovo" }, { "key": "\u041C\u043E\u0449\u0430\u043D\u0435\u0446", "value": 3, "slug": "moshchanec" }, { "key": "\u041C\u0440\u0430\u043A\u0435\u0442\u0438\u043D\u0446\u0438", "value": 1, "slug": "mraketinci" }, { "key": "\u041C\u0440\u0430\u043C\u043E\u0440", "value": 187, "slug": "mramor" }, { "key": "\u041C\u0440\u0430\u043C\u043E\u0440\u0435\u043D", "value": 31, "slug": "mramoren" }, { "key": "\u041C\u0440\u0430\u0447\u0435\u043D\u0438\u043A", "value": 4, "slug": "mrachenik" }, { "key": "\u041C\u0440\u0435\u0436\u0438\u0447\u043A\u043E", "value": 20, "slug": "mrezhichko" }, { "key": "\u041C\u0443\u0433\u043B\u0430", "value": 9, "slug": "mugla" }, { "key": "\u041C\u0443\u0437\u0433\u0430", "value": 4, "slug": "muzga" }, { "key": "\u041C\u0443\u043B\u0434\u0430\u0432\u0430", "value": 57, "slug": "muldava" }, { "key": "\u041C\u0443\u0440\u0433\u043E\u0432\u043E", "value": 15, "slug": "murgovo" }, { "key": "\u041C\u0443\u0440\u0435\u043D\u043E", "value": 3, "slug": "mureno" }, { "key": "\u041C\u0443\u0440\u0441\u0430\u043B\u0435\u0432\u043E", "value": 15, "slug": "mursalevo" }, { "key": "\u041C\u0443\u0440\u0442\u0438\u043D\u0446\u0438", "value": 1, "slug": "murtinci" }, { "key": "\u041C\u0443\u0441\u0430\u0447\u0435\u0432\u043E", "value": 97, "slug": "musachevo" }, { "key": "\u041C\u0443\u0441\u0435\u043B\u0438\u0435\u0432\u043E", "value": 30, "slug": "muselievo" }, { "key": "\u041C\u0443\u0441\u0438\u043D\u0430", "value": 5, "slug": "musina" }, { "key": "\u041C\u0443\u0441\u043E\u043C\u0438\u0449\u0430", "value": 112, "slug": "musomishcha" }, { "key": "\u041C\u0443\u0441\u0442\u0440\u0430\u043A", "value": 10, "slug": "mustrak" }, { "key": "\u041C\u0443\u0445\u043E\u0432\u043E", "value": 1, "slug": "muhovo" }, { "key": "\u041C\u0443\u0446\u044F", "value": 2, "slug": "mucya" }, { "key": "\u041C\u044A\u0433\u043B\u0435\u043D", "value": 26, "slug": "mglen" }, { "key": "\u041C\u044A\u0433\u043B\u0435\u043D\u0435", "value": 1, "slug": "mglene" }, { "key": "\u041C\u044A\u0433\u043B\u0438\u0436", "value": 208, "slug": "mglizh" }, { "key": "\u041C\u044A\u0433\u043B\u0438\u0449\u0430", "value": 11, "slug": "mglishcha" }, { "key": "\u041C\u044A\u0434\u0440\u0435\u0432\u043E", "value": 25, "slug": "mdrevo" }, { "key": "\u041C\u044A\u0434\u0440\u0435\u0446", "value": 44, "slug": "mdrec" }, { "key": "\u041C\u044A\u0434\u0440\u0438\u043D\u043E", "value": 1, "slug": "mdrino" }, { "key": "\u041C\u044A\u0440\u0447\u0430\u0435\u0432\u043E", "value": 76, "slug": "mrchaevo" }, { "key": "\u041C\u044A\u0440\u0447\u0435\u0432\u043E", "value": 16, "slug": "mrchevo" }, { "key": "\u041C\u044A\u0442\u0435\u043D\u0438\u0446\u0430", "value": 5, "slug": "mtenica" }, { "key": "\u041D\u0430\u0432\u044A\u0441\u0435\u043D", "value": 5, "slug": "navsen" }, { "key": "\u041D\u0430\u0434\u0430\u0440\u0435\u0432\u043E", "value": 18, "slug": "nadarevo" }, { "key": "\u041D\u0430\u0434\u0435\u0436\u0434\u0435\u043D", "value": 11, "slug": "nadezhden" }, { "key": "\u041D\u0430\u0439\u0434\u0435\u043D \u0413\u0435\u0440\u043E\u0432\u043E", "value": 24, "slug": "nayden-gerovo" }, { "key": "\u041D\u0430\u0439\u0434\u0435\u043D\u043E\u0432\u043E", "value": 8, "slug": "naydenovo" }, { "key": "\u041D\u0430\u043D\u043E\u0432\u0438\u0446\u0430", "value": 22, "slug": "nanovica" }, { "key": "\u041D\u0430\u0440\u0435\u0447\u0435\u043D\u0441\u043A\u0438 \u0431\u0430\u043D\u0438", "value": 27, "slug": "narechenski-bani" }, { "key": "\u041D\u0430\u0441\u0430\u043B\u0435\u0432\u0446\u0438", "value": 2, "slug": "nasalevci" }, { "key": "\u041D\u0430\u0443\u043C", "value": 8, "slug": "naum" }, { "key": "\u041D\u0430\u0443\u0447\u0435\u043D\u0435", "value": 4, "slug": "nauchene" }, { "key": "\u041D\u0430\u0446\u043E\u0432\u0446\u0438", "value": 3, "slug": "nacovci" }, { "key": "\u041D\u0435\u0432\u0435\u0441\u0442\u0438\u043D\u043E", "value": 47, "slug": "nevestino" }, { "key": "\u041D\u0435\u0432\u0448\u0430", "value": 19, "slug": "nevsha" }, { "key": "\u041D\u0435\u0433\u043E\u0432\u0430\u043D", "value": 96, "slug": "negovan" }, { "key": "\u041D\u0435\u0433\u043E\u0432\u0430\u043D\u043E\u0432\u0446\u0438", "value": 14, "slug": "negovanovci" }, { "key": "\u041D\u0435\u0433\u043E\u0432\u0430\u043D\u0446\u0438", "value": 30, "slug": "negovanci" }, { "key": "\u041D\u0435\u0433\u0443\u0448\u0435\u0432\u043E", "value": 6, "slug": "negushevo" }, { "key": "\u041D\u0435\u0434\u0430\u043D", "value": 22, "slug": "nedan" }, { "key": "\u041D\u0435\u0434\u0435\u043B\u0435\u0432\u043E", "value": 10, "slug": "nedelevo" }, { "key": "\u041D\u0435\u0434\u0435\u043B\u0438\u043D\u043E", "value": 237, "slug": "nedelino" }, { "key": "\u041D\u0435\u0434\u0435\u043B\u043A\u043E\u0432\u0430 \u0413\u0440\u0430\u0449\u0438\u0446\u0430", "value": 1, "slug": "nedelkova-grashchica" }, { "key": "\u041D\u0435\u0434\u043E\u043A\u043B\u0430\u043D", "value": 6, "slug": "nedoklan" }, { "key": "\u041D\u0435\u0434\u044F\u043B\u0441\u043A\u043E", "value": 15, "slug": "nedyalsko" }, { "key": "\u041D\u0435\u0439\u043A\u043E\u0432\u043E", "value": 12, "slug": "neykovo" }, { "key": "\u041D\u0435\u043D\u043A\u043E\u0432\u043E", "value": 2, "slug": "nenkovo" }, { "key": "\u041D\u0435\u043D\u043E\u0432\u043E", "value": 4, "slug": "nenovo" }, { "key": "\u041D\u0435\u043E\u0444\u0438\u0442 \u0411\u043E\u0437\u0432\u0435\u043B\u0438\u0435\u0432\u043E", "value": 13, "slug": "neofit-bozvelievo" }, { "key": "\u041D\u0435\u043E\u0444\u0438\u0442 \u0420\u0438\u043B\u0441\u043A\u0438", "value": 42, "slug": "neofit-rilski" }, { "key": "\u041D\u0435\u0441\u0435\u0431\u044A\u0440", "value": 4250, "slug": "nesebr" }, { "key": "\u041D\u0435\u0441\u043B\u0430", "value": 3, "slug": "nesla" }, { "key": "\u041D\u0435\u0444\u0435\u043B\u0430", "value": 22, "slug": "nefela" }, { "key": "\u041D\u0435\u0448\u0435\u0432\u0446\u0438", "value": 1, "slug": "neshevci" }, { "key": "\u041D\u0438\u0432\u044F\u043D\u0438\u043D", "value": 3, "slug": "nivyanin" }, { "key": "\u041D\u0438\u043A\u043E\u043B\u0430 \u041A\u043E\u0437\u043B\u0435\u0432\u043E", "value": 20, "slug": "nikola-kozlevo" }, { "key": "\u041D\u0438\u043A\u043E\u043B\u0430\u0435\u0432\u043A\u0430", "value": 30, "slug": "nikolaevka" }, { "key": "\u041D\u0438\u043A\u043E\u043B\u0430\u0435\u0432\u043E", "value": 121, "slug": "nikolaevo" }, { "key": "\u041D\u0438\u043A\u043E\u043B\u0438\u0447\u0435\u0432\u0446\u0438", "value": 11, "slug": "nikolichevci" }, { "key": "\u041D\u0438\u043A\u043E\u043B\u043E\u0432\u043E", "value": 154, "slug": "nikolovo" }, { "key": "\u041D\u0438\u043A\u043E\u043B\u043E\u0432\u0446\u0438", "value": 1, "slug": "nikolovci" }, { "key": "\u041D\u0438\u043A\u043E\u043F\u043E\u043B", "value": 130, "slug": "nikopol" }, { "key": "\u041D\u0438\u043A\u0443\u0434\u0438\u043D", "value": 1, "slug": "nikudin" }, { "key": "\u041D\u0438\u043A\u044E\u043F", "value": 21, "slug": "nikyup" }, { "key": "\u041D\u0438\u0441\u043E\u0432\u043E", "value": 14, "slug": "nisovo" }, { "key": "\u041D\u043E\u0432\u0430 \u0431\u044F\u043B\u0430 \u0440\u0435\u043A\u0430", "value": 14, "slug": "nova-byala-reka" }, { "key": "\u041D\u043E\u0432\u0430 \u0412\u044A\u0440\u0431\u043E\u0432\u043A\u0430", "value": 40, "slug": "nova-vrbovka" }, { "key": "\u041D\u043E\u0432\u0430 \u0417\u0430\u0433\u043E\u0440\u0430", "value": 1392, "slug": "nova-zagora" }, { "key": "\u041D\u043E\u0432\u0430 \u041A\u0430\u043C\u0435\u043D\u0430", "value": 17, "slug": "nova-kamena" }, { "key": "\u041D\u043E\u0432\u0430 \u043B\u0438\u0432\u0430\u0434\u0430", "value": 1, "slug": "nova-livada" }, { "key": "\u041D\u043E\u0432\u0430 \u043C\u0430\u0445\u0430\u043B\u0430", "value": 146, "slug": "nova-mahala" }, { "key": "\u041D\u043E\u0432\u0430 \u041D\u0430\u0434\u0435\u0436\u0434\u0430", "value": 6, "slug": "nova-nadezhda" }, { "key": "\u041D\u043E\u0432\u0430 \u041F\u043E\u043F\u0438\u043D\u0430", "value": 3, "slug": "nova-popina" }, { "key": "\u041D\u043E\u0432\u0430 \u0427\u0435\u0440\u043D\u0430", "value": 48, "slug": "nova-cherna" }, { "key": "\u041D\u043E\u0432\u0430 \u0428\u0438\u043F\u043A\u0430", "value": 6, "slug": "nova-shipka" }, { "key": "\u041D\u043E\u0432\u0430\u043A\u043E\u0432\u043E", "value": 17, "slug": "novakovo" }, { "key": "\u041D\u043E\u0432\u0430\u043A\u043E\u0432\u0446\u0438", "value": 10, "slug": "novakovci" }, { "key": "\u041D\u043E\u0432\u0430\u0447\u0435\u0432\u043E", "value": 20, "slug": "novachevo" }, { "key": "\u041D\u043E\u0432\u0430\u0447\u0435\u043D\u0435", "value": 58, "slug": "novachene" }, { "key": "\u041D\u043E\u0432\u0433\u0440\u0430\u0434", "value": 23, "slug": "novgrad" }, { "key": "\u041D\u043E\u0432\u0438 \u0438\u0437\u0432\u043E\u0440", "value": 4, "slug": "novi-izvor" }, { "key": "\u041D\u043E\u0432\u0438 \u0418\u0441\u043A\u044A\u0440", "value": 848, "slug": "novi-iskr" }, { "key": "\u041D\u043E\u0432\u0438 \u043F\u0430\u0437\u0430\u0440", "value": 838, "slug": "novi-pazar" }, { "key": "\u041D\u043E\u0432\u0438 \u0445\u0430\u043D", "value": 182, "slug": "novi-han" }, { "key": "\u041D\u043E\u0432\u0438 \u0447\u0438\u0444\u043B\u0438\u043A", "value": 4, "slug": "novi-chiflik" }, { "key": "\u041D\u043E\u0432\u043E \u0433\u0440\u0430\u0434\u0438\u0449\u0435", "value": 9, "slug": "novo-gradishche" }, { "key": "\u041D\u043E\u0432\u043E \u0414\u0435\u043B\u0447\u0435\u0432\u043E", "value": 60, "slug": "novo-delchevo" }, { "key": "\u041D\u043E\u0432\u043E \u0416\u0435\u043B\u0435\u0437\u0430\u0440\u0435", "value": 3, "slug": "novo-zhelezare" }, { "key": "\u041D\u043E\u0432\u043E \u041A\u043E\u043D\u043E\u043C\u043B\u0430\u0434\u0438", "value": 2, "slug": "novo-konomladi" }, { "key": "\u041D\u043E\u0432\u043E \u041B\u0435\u0441\u043A\u0438", "value": 31, "slug": "novo-leski" }, { "key": "\u041D\u043E\u0432\u043E \u041E\u0440\u044F\u0445\u043E\u0432\u043E", "value": 16, "slug": "novo-oryahovo" }, { "key": "\u041D\u043E\u0432\u043E \u041F\u0430\u043D\u0438\u0447\u0430\u0440\u0435\u0432\u043E", "value": 32, "slug": "novo-panicharevo" }, { "key": "\u041D\u043E\u0432\u043E \u0441\u0435\u043B\u043E", "value": 183, "slug": "novo-selo" }, { "key": "\u041D\u043E\u0432\u043E \u0425\u043E\u0434\u0436\u043E\u0432\u043E", "value": 2, "slug": "novo-hodzhovo" }, { "key": "\u041D\u043E\u0432\u043E \u042F\u043D\u043A\u043E\u0432\u043E", "value": 1, "slug": "novo-yankovo" }, { "key": "\u041D\u043E\u0432\u043E\u0441\u0435\u043B", "value": 20, "slug": "novosel" }, { "key": "\u041D\u043E\u0432\u043E\u0441\u0435\u043B\u0435\u0446", "value": 31, "slug": "novoselec" }, { "key": "\u041D\u043E\u0432\u043E\u0441\u0435\u043B\u0446\u0438", "value": 27, "slug": "novoselci" }, { "key": "\u041D\u043E\u0435\u0432\u0446\u0438", "value": 11, "slug": "noevci" }, { "key": "\u041D\u043E\u0436\u0430\u0440\u0435\u0432\u043E", "value": 14, "slug": "nozharevo" }, { "key": "\u041D\u043E\u0436\u0430\u0440\u043E\u0432\u043E", "value": 5, "slug": "nozharovo" }, { "key": "\u041E\u0431\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435", "value": 23, "slug": "obedinenie" }, { "key": "\u041E\u0431\u0437\u043E\u0440", "value": 336, "slug": "obzor" }, { "key": "\u041E\u0431\u0438\u0434\u0438\u043C", "value": 1, "slug": "obidim" }, { "key": "\u041E\u0431\u0438\u0442\u0435\u043B", "value": 14, "slug": "obitel" }, { "key": "\u041E\u0431\u043D\u043E\u0432\u0430", "value": 62, "slug": "obnova" }, { "key": "\u041E\u0431\u043E\u0440\u0438\u0449\u0435", "value": 27, "slug": "oborishche" }, { "key": "\u041E\u0431\u0440\u0435\u0442\u0435\u043D\u0438\u043A", "value": 44, "slug": "obretenik" }, { "key": "\u041E\u0431\u0440\u043E\u0447\u0438\u0449\u0435", "value": 183, "slug": "obrochishche" }, { "key": "\u041E\u0431\u0440\u0443\u0447\u0438\u0449\u0435", "value": 74, "slug": "obruchishche" }, { "key": "\u041E\u0432\u0435\u043D", "value": 25, "slug": "oven" }, { "key": "\u041E\u0432\u043E\u0449\u0430\u0440\u0446\u0438", "value": 2, "slug": "ovoshcharci" }, { "key": "\u041E\u0432\u043E\u0449\u043D\u0438\u043A", "value": 87, "slug": "ovoshchnik" }, { "key": "\u041E\u0432\u0447\u0430 \u043C\u043E\u0433\u0438\u043B\u0430", "value": 35, "slug": "ovcha-mogila" }, { "key": "\u041E\u0432\u0447\u0430\u0433\u0430", "value": 6, "slug": "ovchaga" }, { "key": "\u041E\u0432\u0447\u0430\u0440\u0438", "value": 4, "slug": "ovchari" }, { "key": "\u041E\u0432\u0447\u0430\u0440\u043E\u0432\u043E", "value": 46, "slug": "ovcharovo" }, { "key": "\u041E\u0432\u0447\u0430\u0440\u0446\u0438", "value": 42, "slug": "ovcharci" }, { "key": "\u041E\u0432\u0447\u0435\u043F\u043E\u043B\u0446\u0438", "value": 17, "slug": "ovchepolci" }, { "key": "\u041E\u0432\u0447\u0438 \u043A\u043B\u0430\u0434\u0435\u043D\u0435\u0446", "value": 12, "slug": "ovchi-kladenec" }, { "key": "\u041E\u0433\u043B\u0435\u0434", "value": 3, "slug": "ogled" }, { "key": "\u041E\u0433\u043D\u0435\u043D", "value": 3, "slug": "ognen" }, { "key": "\u041E\u0433\u043D\u044F\u043D\u043E\u0432\u043E", "value": 185, "slug": "ognyanovo" }, { "key": "\u041E\u0433\u0440\u0430\u0434\u043D\u0430", "value": 1, "slug": "ogradna" }, { "key": "\u041E\u0434\u0440\u0430\u043D\u0438\u0446\u0430", "value": 2, "slug": "odranica" }, { "key": "\u041E\u0434\u0440\u0438\u043D\u0446\u0438", "value": 14, "slug": "odrinci" }, { "key": "\u041E\u0434\u044A\u0440\u043D\u0435", "value": 28, "slug": "odrne" }, { "key": "\u041E\u0434\u044A\u0440\u0446\u0438", "value": 11, "slug": "odrci" }, { "key": "\u041E\u043A\u043E\u043F", "value": 16, "slug": "okop" }, { "key": "\u041E\u043A\u043E\u0440\u0448", "value": 27, "slug": "okorsh" }, { "key": "\u041E\u043C\u0430\u043D", "value": 5, "slug": "oman" }, { "key": "\u041E\u043C\u0430\u0440\u0447\u0435\u0432\u043E", "value": 18, "slug": "omarchevo" }, { "key": "\u041E\u043C\u0443\u0440\u0442\u0430\u0433", "value": 552, "slug": "omurtag" }, { "key": "\u041E\u043D\u043E\u0433\u0443\u0440", "value": 4, "slug": "onogur" }, { "key": "\u041E\u043F\u0430\u043A\u0430", "value": 69, "slug": "opaka" }, { "key": "\u041E\u043F\u0430\u043D", "value": 16, "slug": "opan" }, { "key": "\u041E\u043F\u0430\u043D\u0435\u0446", "value": 57, "slug": "opanec" }, { "key": "\u041E\u043F\u0438\u0446\u0432\u0435\u0442", "value": 26, "slug": "opicvet" }, { "key": "\u041E\u043F\u043B\u0435\u0442\u043D\u044F", "value": 1, "slug": "opletnya" }, { "key": "\u041E\u043F\u044A\u043B\u0447\u0435\u043D\u0435\u0446", "value": 13, "slug": "oplchenec" }, { "key": "\u041E\u043F\u044A\u043B\u0447\u0435\u043D\u0441\u043A\u043E", "value": 36, "slug": "oplchensko" }, { "key": "\u041E\u0440\u0435\u0445", "value": 1, "slug": "oreh" }, { "key": "\u041E\u0440\u0435\u0445\u043E\u0432\u0438\u0446\u0430", "value": 46, "slug": "orehovica" }, { "key": "\u041E\u0440\u0435\u0445\u043E\u0432\u043E", "value": 8, "slug": "orehovo" }, { "key": "\u041E\u0440\u0435\u0448", "value": 35, "slug": "oresh" }, { "key": "\u041E\u0440\u0435\u0448\u0430\u043A", "value": 163, "slug": "oreshak" }, { "key": "\u041E\u0440\u0435\u0448\u0435", "value": 9, "slug": "oreshe" }, { "key": "\u041E\u0440\u0435\u0448\u0435\u043D\u0435", "value": 18, "slug": "oreshene" }, { "key": "\u041E\u0440\u0435\u0448\u0435\u0446", "value": 33, "slug": "oreshec" }, { "key": "\u041E\u0440\u0435\u0448\u043D\u0438\u043A", "value": 15, "slug": "oreshnik" }, { "key": "\u041E\u0440\u0435\u0448\u043D\u0438\u0446\u0430", "value": 2, "slug": "oreshnica" }, { "key": "\u041E\u0440\u0438\u0437\u0430\u0440\u0435", "value": 92, "slug": "orizare" }, { "key": "\u041E\u0440\u0438\u0437\u0430\u0440\u0438", "value": 80, "slug": "orizari" }, { "key": "\u041E\u0440\u0438\u0437\u043E\u0432\u043E", "value": 25, "slug": "orizovo" }, { "key": "\u041E\u0440\u043B\u0438\u043D\u0446\u0438", "value": 9, "slug": "orlinci" }, { "key": "\u041E\u0440\u043B\u0438\u0446\u0430", "value": 2, "slug": "orlica" }, { "key": "\u041E\u0440\u043B\u043E\u0432 \u0434\u043E\u043B", "value": 5, "slug": "orlov-dol" }, { "key": "\u041E\u0440\u043B\u043E\u0432\u0430 \u043C\u043E\u0433\u0438\u043B\u0430", "value": 11, "slug": "orlova-mogila" }, { "key": "\u041E\u0440\u043B\u043E\u0432\u0435\u0446", "value": 18, "slug": "orlovec" }, { "key": "\u041E\u0440\u043B\u043E\u0432\u043E", "value": 25, "slug": "orlovo" }, { "key": "\u041E\u0440\u043B\u043E\u0432\u0446\u0438", "value": 3, "slug": "orlovci" }, { "key": "\u041E\u0440\u043B\u044F\u043A", "value": 27, "slug": "orlyak" }, { "key": "\u041E\u0440\u043B\u044F\u043D\u0435", "value": 1, "slug": "orlyane" }, { "key": "\u041E\u0440\u0446\u0435\u0432\u043E", "value": 6, "slug": "orcevo" }, { "key": "\u041E\u0440\u044F\u0445\u043E\u0432\u0435\u0446", "value": 24, "slug": "oryahovec" }, { "key": "\u041E\u0440\u044F\u0445\u043E\u0432\u0438\u0446\u0430", "value": 18, "slug": "oryahovica" }, { "key": "\u041E\u0440\u044F\u0445\u043E\u0432\u043E", "value": 182, "slug": "oryahovo" }, { "key": "\u041E\u0441\u0435\u043B\u043D\u0430", "value": 13, "slug": "oselna" }, { "key": "\u041E\u0441\u0435\u043D", "value": 11, "slug": "osen" }, { "key": "\u041E\u0441\u0435\u043D\u0435\u0446", "value": 17, "slug": "osenec" }, { "key": "\u041E\u0441\u0435\u043D\u043E\u0432\u0435\u0446", "value": 4, "slug": "osenovec" }, { "key": "\u041E\u0441\u0435\u043D\u043E\u0432\u043B\u0430\u0433", "value": 6, "slug": "osenovlag" }, { "key": "\u041E\u0441\u0435\u043D\u043E\u0432\u043E", "value": 55, "slug": "osenovo" }, { "key": "\u041E\u0441\u0435\u0442\u0435\u043D\u043E\u0432\u043E", "value": 28, "slug": "osetenovo" }, { "key": "\u041E\u0441\u0438\u043A\u043E\u0432\u0438\u0446\u0430", "value": 17, "slug": "osikovica" }, { "key": "\u041E\u0441\u0438\u043A\u043E\u0432\u043E", "value": 31, "slug": "osikovo" }, { "key": "\u041E\u0441\u0438\u043A\u043E\u0432\u0441\u043A\u0430 \u041B\u0430\u043A\u0430\u0432\u0438\u0446\u0430", "value": 7, "slug": "osikovska-lakavica" }, { "key": "\u041E\u0441\u0438\u043D\u0430", "value": 14, "slug": "osina" }, { "key": "\u041E\u0441\u043B\u0435\u043D \u041A\u0440\u0438\u0432\u043E\u0434\u043E\u043B", "value": 1, "slug": "oslen-krivodol" }, { "key": "\u041E\u0441\u043C\u0430\u0440", "value": 22, "slug": "osmar" }, { "key": "\u041E\u0441\u043E\u0438\u0446\u0430", "value": 21, "slug": "osoica" }, { "key": "\u041E\u0441\u0442\u0440\u0430 \u043C\u043E\u0433\u0438\u043B\u0430", "value": 7, "slug": "ostra-mogila" }, { "key": "\u041E\u0441\u0442\u0440\u0435\u0446", "value": 8, "slug": "ostrec" }, { "key": "\u041E\u0441\u0442\u0440\u0438\u0446\u0430", "value": 22, "slug": "ostrica" }, { "key": "\u041E\u0441\u0442\u0440\u043E\u0432", "value": 17, "slug": "ostrov" }, { "key": "\u041E\u0441\u0442\u0440\u043E\u0432\u0435\u0446", "value": 2, "slug": "ostrovec" }, { "key": "\u041E\u0441\u0442\u0440\u043E\u0432\u0438\u0446\u0430", "value": 5, "slug": "ostrovica" }, { "key": "\u041E\u0441\u0442\u0440\u043E\u0432\u043E", "value": 67, "slug": "ostrovo" }, { "key": "\u041E\u0441\u0442\u0440\u043E\u0432\u0447\u0435", "value": 5, "slug": "ostrovche" }, { "key": "\u041E\u0441\u0442\u044A\u0440 \u043A\u0430\u043C\u044A\u043A", "value": 3, "slug": "ostr-kamk" }, { "key": "\u041E\u0442\u0435\u0446 \u041A\u0438\u0440\u0438\u043B\u043E\u0432\u043E", "value": 9, "slug": "otec-kirilovo" }, { "key": "\u041E\u0442\u0435\u0446 \u041F\u0430\u0438\u0441\u0438\u0435\u0432\u043E", "value": 4, "slug": "otec-paisievo" }, { "key": "\u041E\u0445\u043B\u044E\u0432\u0435\u0446", "value": 6, "slug": "ohlyuvec" }, { "key": "\u041E\u0445\u043E\u0434\u0435\u043D", "value": 9, "slug": "ohoden" }, { "key": "\u041E\u0445\u0440\u0438\u0434", "value": 12, "slug": "ohrid" }, { "key": "\u041E\u0447\u0438\u043D\u0434\u043E\u043B", "value": 1, "slug": "ochindol" }, { "key": "\u041E\u0447\u0443\u0448\u0430", "value": 1, "slug": "ochusha" }, { "key": "\u041E\u0448\u0430\u043D\u0438\u0442\u0435", "value": 1, "slug": "oshanite" }, { "key": "\u041E\u0449\u0430\u0432\u0430", "value": 2, "slug": "oshchava" }, { "key": "\u041F\u0430\u0432\u0435\u043B", "value": 20, "slug": "pavel" }, { "key": "\u041F\u0430\u0432\u0435\u043B \u0431\u0430\u043D\u044F", "value": 151, "slug": "pavel-banya" }, { "key": "\u041F\u0430\u0432\u0435\u043B\u0441\u043A\u043E", "value": 32, "slug": "pavelsko" }, { "key": "\u041F\u0430\u0432\u043B\u0438\u043A\u0435\u043D\u0438", "value": 839, "slug": "pavlikeni" }, { "key": "\u041F\u0430\u0432\u043E\u043B\u0447\u0435", "value": 12, "slug": "pavolche" }, { "key": "\u041F\u0430\u0434\u0435\u0448", "value": 13, "slug": "padesh" }, { "key": "\u041F\u0430\u0434\u0438\u043D\u0430", "value": 60, "slug": "padina" }, { "key": "\u041F\u0430\u0437\u0430\u0440\u0434\u0436\u0438\u043A", "value": 6976, "slug": "pazardzhik" }, { "key": "\u041F\u0430\u0437\u0430\u0440\u0446\u0438", "value": 3, "slug": "pazarci" }, { "key": "\u041F\u0430\u0438\u0441\u0438\u0435\u0432\u043E", "value": 34, "slug": "paisievo" }, { "key": "\u041F\u0430\u0438\u0441\u0438\u0439", "value": 11, "slug": "paisiy" }, { "key": "\u041F\u0430\u0439\u0434\u0443\u0448\u043A\u043E", "value": 5, "slug": "paydushko" }, { "key": "\u041F\u0430\u043B\u0430\u043C\u0430\u0440\u0446\u0430", "value": 55, "slug": "palamarca" }, { "key": "\u041F\u0430\u043B\u0430\u0442\u043E\u0432\u043E", "value": 3, "slug": "palatovo" }, { "key": "\u041F\u0430\u043B\u0430\u0443\u0437\u043E\u0432\u043E", "value": 7, "slug": "palauzovo" }, { "key": "\u041F\u0430\u043B\u0438\u043B\u0443\u043B\u0430", "value": 2, "slug": "palilula" }, { "key": "\u041F\u0430\u043B\u0438\u0446\u0438", "value": 8, "slug": "palici" }, { "key": "\u041F\u0430\u043C\u0438\u0434\u043E\u0432\u043E", "value": 17, "slug": "pamidovo" }, { "key": "\u041F\u0430\u043C\u0443\u043A\u0447\u0438\u0438", "value": 27, "slug": "pamukchii" }, { "key": "\u041F\u0430\u043D\u0430\u0433\u044E\u0440\u0438\u0449\u0435", "value": 1126, "slug": "panagyurishche" }, { "key": "\u041F\u0430\u043D\u0430\u0433\u044E\u0440\u0441\u043A\u0438 \u043A\u043E\u043B\u043E\u043D\u0438\u0438", "value": 4, "slug": "panagyurski-kolonii" }, { "key": "\u041F\u0430\u043D\u0430\u0439\u043E\u0442 \u0412\u043E\u043B\u043E\u0432\u043E", "value": 13, "slug": "panayot-volovo" }, { "key": "\u041F\u0430\u043D\u0430\u0439\u043E\u0442 \u0425\u0438\u0442\u043E\u0432\u043E", "value": 4, "slug": "panayot-hitovo" }, { "key": "\u041F\u0430\u043D\u0430\u0440\u0435\u0442\u043E\u0432\u0446\u0438", "value": 16, "slug": "panaretovci" }, { "key": "\u041F\u0430\u043D\u0438\u0446\u043E\u0432\u043E", "value": 11, "slug": "panicovo" }, { "key": "\u041F\u0430\u043D\u0438\u0447\u0430\u0440\u0435\u0432\u043E", "value": 1, "slug": "panicharevo" }, { "key": "\u041F\u0430\u043D\u0438\u0447\u0435\u0440\u0435\u0432\u043E", "value": 40, "slug": "panicherevo" }, { "key": "\u041F\u0430\u043D\u0438\u0447\u0435\u0440\u0438", "value": 25, "slug": "panicheri" }, { "key": "\u041F\u0430\u043D\u0438\u0447\u0438\u043D\u043E", "value": 1, "slug": "panichino" }, { "key": "\u041F\u0430\u043D\u0438\u0447\u0438\u0449\u0435", "value": 4, "slug": "panichishche" }, { "key": "\u041F\u0430\u043D\u0438\u0447\u043A\u043E\u0432\u043E", "value": 13, "slug": "panichkovo" }, { "key": "\u041F\u0430\u043D\u0447\u0430\u0440\u0435\u0432\u043E", "value": 215, "slug": "pancharevo" }, { "key": "\u041F\u0430\u043D\u0447\u0435\u0432\u043E", "value": 2, "slug": "panchevo" }, { "key": "\u041F\u0430\u043F\u0440\u0430\u0442", "value": 6, "slug": "paprat" }, { "key": "\u041F\u0430\u0440\u0430\u043C\u0443\u043D", "value": 10, "slug": "paramun" }, { "key": "\u041F\u0430\u0440\u0438\u043B", "value": 1, "slug": "paril" }, { "key": "\u041F\u0430\u0440\u0442\u0438\u0437\u0430\u043D\u0438", "value": 28, "slug": "partizani" }, { "key": "\u041F\u0430\u0440\u0442\u0438\u0437\u0430\u043D\u0438\u043D", "value": 10, "slug": "partizanin" }, { "key": "\u041F\u0430\u0440\u0447\u043E\u0432\u0446\u0438", "value": 1, "slug": "parchovci" }, { "key": "\u041F\u0430\u0441\u043A\u0430\u043B\u0435\u0432\u0435\u0446", "value": 17, "slug": "paskalevec" }, { "key": "\u041F\u0430\u0441\u043A\u0430\u043B\u0435\u0432\u043E", "value": 26, "slug": "paskalevo" }, { "key": "\u041F\u0430\u0441\u0442\u0440\u0430", "value": 8, "slug": "pastra" }, { "key": "\u041F\u0430\u0441\u0442\u0443\u0445", "value": 1, "slug": "pastuh" }, { "key": "\u041F\u0430\u0442\u0430\u043B\u0435\u043D\u0438\u0446\u0430", "value": 64, "slug": "patalenica" }, { "key": "\u041F\u0430\u0442\u0438\u0446\u0430", "value": 6, "slug": "patica" }, { "key": "\u041F\u0430\u0442\u0440\u0435\u0448", "value": 10, "slug": "patresh" }, { "key": "\u041F\u0430\u0442\u0440\u0438\u0430\u0440\u0445 \u0415\u0432\u0442\u0438\u043C\u043E\u0432\u043E", "value": 8, "slug": "patriarh-evtimovo" }, { "key": "\u041F\u0430\u0443\u043D\u043E\u0432\u043E", "value": 2, "slug": "paunovo" }, { "key": "\u041F\u0430\u0448\u0438\u043D\u0446\u0438", "value": 4, "slug": "pashinci" }, { "key": "\u041F\u0430\u0448\u043E\u0432\u0438", "value": 10, "slug": "pashovi" }, { "key": "\u041F\u0435\u0432\u0435\u0446", "value": 4, "slug": "pevec" }, { "key": "\u041F\u0435\u0432\u0446\u0438\u0442\u0435", "value": 3, "slug": "pevcite" }, { "key": "\u041F\u0435\u0439\u043D\u0430", "value": 1, "slug": "peyna" }, { "key": "\u041F\u0435\u0439\u0447\u0438\u043D\u043E\u0432\u043E", "value": 14, "slug": "peychinovo" }, { "key": "\u041F\u0435\u043B\u0430\u0442\u0438\u043A\u043E\u0432\u043E", "value": 1, "slug": "pelatikovo" }, { "key": "\u041F\u0435\u043B\u0438\u043D", "value": 5, "slug": "pelin" }, { "key": "\u041F\u0435\u043B\u0438\u0448\u0430\u0442", "value": 13, "slug": "pelishat" }, { "key": "\u041F\u0435\u043D\u044C\u043E\u0432\u043E", "value": 5, "slug": "penovo" }, { "key": "\u041F\u0435\u043F\u0435\u043B\u0438\u043D\u0430", "value": 3, "slug": "pepelina" }, { "key": "\u041F\u0435\u043F\u0435\u043B\u0438\u0449\u0435", "value": 8, "slug": "pepelishche" }, { "key": "\u041F\u0435\u0440\u0438\u043B\u043E\u0432\u0435\u0446", "value": 1, "slug": "perilovec" }, { "key": "\u041F\u0435\u0440\u043D\u0438\u043A", "value": 6704, "slug": "pernik" }, { "key": "\u041F\u0435\u0440\u043F\u0435\u0440\u0435\u043A", "value": 28, "slug": "perperek" }, { "key": "\u041F\u0435\u0440\u0443\u0449\u0438\u0446\u0430", "value": 246, "slug": "perushchica" }, { "key": "\u041F\u0435\u0441\u043D\u043E\u043F\u043E\u0439", "value": 11, "slug": "pesnopoy" }, { "key": "\u041F\u0435\u0442 \u043A\u043B\u0430\u0434\u0435\u043D\u0446\u0438", "value": 7, "slug": "pet-kladenci" }, { "key": "\u041F\u0435\u0442 \u043C\u043E\u0433\u0438\u043B\u0438", "value": 48, "slug": "pet-mogili" }, { "key": "\u041F\u0435\u0442\u0435\u043B\u043E\u0432\u043E", "value": 4, "slug": "petelovo" }, { "key": "\u041F\u0435\u0442\u043A\u043E \u041A\u0430\u0440\u0430\u0432\u0435\u043B\u043E\u0432\u043E", "value": 47, "slug": "petko-karavelovo" }, { "key": "\u041F\u0435\u0442\u043A\u043E \u0421\u043B\u0430\u0432\u0435\u0439\u043A\u043E\u0432", "value": 31, "slug": "petko-slaveykov" }, { "key": "\u041F\u0435\u0442\u043A\u043E\u0432\u043E", "value": 37, "slug": "petkovo" }, { "key": "\u041F\u0435\u0442\u043A\u043E\u0432\u0446\u0438", "value": 1, "slug": "petkovci" }, { "key": "\u041F\u0435\u0442\u043B\u0435\u0448\u043A\u043E\u0432\u043E", "value": 7, "slug": "petleshkovo" }, { "key": "\u041F\u0435\u0442\u043B\u0438\u043D\u043E", "value": 10, "slug": "petlino" }, { "key": "\u041F\u0435\u0442\u043E\u043A\u043B\u0430\u0434\u0435\u043D\u0446\u0438", "value": 7, "slug": "petokladenci" }, { "key": "\u041F\u0435\u0442\u0440\u0435\u0432\u0435\u043D\u0435", "value": 11, "slug": "petrevene" }, { "key": "\u041F\u0435\u0442\u0440\u0435\u043B\u0438\u043A", "value": 8, "slug": "petrelik" }, { "key": "\u041F\u0435\u0442\u0440\u0438\u043D\u043E", "value": 5, "slug": "petrino" }, { "key": "\u041F\u0435\u0442\u0440\u0438\u0447", "value": 7119, "slug": "petrich" }, { "key": "\u041F\u0435\u0442\u0440\u043E\u0432 \u0434\u043E\u043B", "value": 25, "slug": "petrov-dol" }, { "key": "\u041F\u0435\u0442\u0440\u043E\u0432\u043E", "value": 16, "slug": "petrovo" }, { "key": "\u041F\u0435\u0442\u044A\u0440\u043D\u0438\u0446\u0430", "value": 25, "slug": "petrnica" }, { "key": "\u041F\u0435\u0442\u044A\u0440\u0447", "value": 142, "slug": "petrch" }, { "key": "\u041F\u0435\u0447\u0435\u043D\u0438\u0446\u0430", "value": 10, "slug": "pechenica" }, { "key": "\u041F\u0435\u0447\u0438\u043D\u0441\u043A\u0430", "value": 2, "slug": "pechinska" }, { "key": "\u041F\u0435\u0448\u0430\u043A\u043E\u0432\u043E", "value": 1, "slug": "peshakovo" }, { "key": "\u041F\u0435\u0449\u0435\u0440\u0430", "value": 1070, "slug": "peshchera" }, { "key": "\u041F\u0435\u0449\u0435\u0440\u043D\u0430", "value": 6, "slug": "peshcherna" }, { "key": "\u041F\u0435\u0449\u0435\u0440\u0441\u043A\u043E", "value": 20, "slug": "peshchersko" }, { "key": "\u041F\u0438\u043F\u0435\u0440\u0435\u0432\u043E", "value": 12, "slug": "piperevo" }, { "key": "\u041F\u0438\u043F\u0435\u0440\u0438\u0446\u0430", "value": 1, "slug": "piperica" }, { "key": "\u041F\u0438\u043F\u0435\u0440\u043A\u043E\u0432 \u0447\u0438\u0444\u043B\u0438\u043A", "value": 51, "slug": "piperkov-chiflik" }, { "key": "\u041F\u0438\u043F\u0435\u0440\u043A\u043E\u0432\u043E", "value": 9, "slug": "piperkovo" }, { "key": "\u041F\u0438\u0440\u0433\u043E\u0432\u043E", "value": 90, "slug": "pirgovo" }, { "key": "\u041F\u0438\u0440\u0434\u043E\u043F", "value": 489, "slug": "pirdop" }, { "key": "\u041F\u0438\u0440\u0438\u043D", "value": 20, "slug": "pirin" }, { "key": "\u041F\u0438\u0440\u0438\u043D\u0435\u0446", "value": 2, "slug": "pirinec" }, { "key": "\u041F\u0438\u0440\u043D\u0435", "value": 17, "slug": "pirne" }, { "key": "\u041F\u0438\u0441\u0430\u043D\u0435\u0446", "value": 9, "slug": "pisanec" }, { "key": "\u041F\u0438\u0441\u0430\u0440\u0435\u0432\u043E", "value": 18, "slug": "pisarevo" }, { "key": "\u041F\u0438\u0441\u0430\u0440\u043E\u0432\u043E", "value": 26, "slug": "pisarovo" }, { "key": "\u041F\u0438\u0441\u043C\u0435\u043D\u043E\u0432\u043E", "value": 17, "slug": "pismenovo" }, { "key": "\u041F\u0438\u0442\u043E\u0432\u043E", "value": 8, "slug": "pitovo" }, { "key": "\u041F\u0438\u0448\u0443\u0440\u043A\u0430", "value": 2, "slug": "pishurka" }, { "key": "\u041F\u0438\u0449\u0438\u0433\u043E\u0432\u043E", "value": 29, "slug": "pishchigovo" }, { "key": "\u041F\u043B\u0430\u0437\u0438\u0449\u0435", "value": 1, "slug": "plazishche" }, { "key": "\u041F\u043B\u0430\u043A\u043E\u0432\u043E", "value": 13, "slug": "plakovo" }, { "key": "\u041F\u043B\u0430\u043D\u0430", "value": 6, "slug": "plana" }, { "key": "\u041F\u043B\u0430\u043D\u0438\u043D\u0438\u0446\u0430", "value": 50, "slug": "planinica" }, { "key": "\u041F\u043B\u0430\u043D\u0438\u043D\u043E\u0432\u043E", "value": 23, "slug": "planinovo" }, { "key": "\u041F\u043B\u0430\u0447\u0438\u0434\u043E\u043B", "value": 31, "slug": "plachidol" }, { "key": "\u041F\u043B\u0430\u0447\u043A\u043E\u0432\u0446\u0438", "value": 71, "slug": "plachkovci" }, { "key": "\u041F\u043B\u0435\u0432\u0435\u043D", "value": 9580, "slug": "pleven" }, { "key": "\u041F\u043B\u0435\u0432\u0443\u043D", "value": 7, "slug": "plevun" }, { "key": "\u041F\u043B\u0435\u043D\u0438\u043C\u0438\u0440", "value": 11, "slug": "plenimir" }, { "key": "\u041F\u043B\u0435\u0442\u0435\u043D\u0430", "value": 67, "slug": "pletena" }, { "key": "\u041F\u043B\u0435\u0448\u0438\u0432\u0435\u0446", "value": 5, "slug": "pleshivec" }, { "key": "\u041F\u043B\u0438\u0441\u043A\u0430", "value": 43, "slug": "pliska" }, { "key": "\u041F\u043B\u043E\u0432\u0434\u0438\u0432", "value": 43312, "slug": "plovdiv" }, { "key": "\u041F\u043B\u043E\u0432\u0434\u0438\u0432\u0446\u0438", "value": 5, "slug": "plovdivci" }, { "key": "\u041F\u043B\u043E\u0434\u043E\u0432\u0438\u0442\u043E\u0432\u043E", "value": 16, "slug": "plodovitovo" }, { "key": "\u041F\u043B\u043E\u0441\u043A\u0430 \u043C\u043E\u0433\u0438\u043B\u0430", "value": 9, "slug": "ploska-mogila" }, { "key": "\u041F\u043B\u043E\u0441\u043A\u0438", "value": 13, "slug": "ploski" }, { "key": "\u041F\u043B\u044A\u0441\u0442\u0438\u043D\u0430", "value": 11, "slug": "plstina" }, { "key": "\u041F\u043E\u0431\u0435\u0434\u0430", "value": 92, "slug": "pobeda" }, { "key": "\u041F\u043E\u0431\u0438\u0442 \u043A\u0430\u043C\u044A\u043A", "value": 18, "slug": "pobit-kamk" }, { "key": "\u041F\u043E\u0432\u0435\u0442", "value": 5, "slug": "povet" }, { "key": "\u041F\u043E\u0434\u0430\u0439\u0432\u0430", "value": 44, "slug": "podayva" }, { "key": "\u041F\u043E\u0434\u0432\u0438\u0441", "value": 94, "slug": "podvis" }, { "key": "\u041F\u043E\u0434\u0432\u0440\u044A\u0445", "value": 3, "slug": "podvrh" }, { "key": "\u041F\u043E\u0434\u0433\u043E\u0440\u0435", "value": 3, "slug": "podgore" }, { "key": "\u041F\u043E\u0434\u0433\u043E\u0440\u0435\u0446", "value": 7, "slug": "podgorec" }, { "key": "\u041F\u043E\u0434\u0433\u043E\u0440\u0438\u0435", "value": 1, "slug": "podgorie" }, { "key": "\u041F\u043E\u0434\u0433\u043E\u0440\u0438\u0446\u0430", "value": 15, "slug": "podgorica" }, { "key": "\u041F\u043E\u0434\u0433\u0443\u043C\u0435\u0440", "value": 36, "slug": "podgumer" }, { "key": "\u041F\u043E\u0434\u0435\u043C", "value": 33, "slug": "podem" }, { "key": "\u041F\u043E\u0434\u043A\u043E\u0432\u0430", "value": 21, "slug": "podkova" }, { "key": "\u041F\u043E\u0434\u043A\u0440\u0435\u043F\u0430", "value": 7, "slug": "podkrepa" }, { "key": "\u041F\u043E\u0434\u043B\u0435\u0441", "value": 10, "slug": "podles" }, { "key": "\u041F\u043E\u0434\u0440\u0443\u043C\u0447\u0435", "value": 2, "slug": "podrumche" }, { "key": "\u041F\u043E\u0434\u0441\u043B\u043E\u043D", "value": 29, "slug": "podslon" }, { "key": "\u041F\u043E\u0436\u0430\u0440\u0435\u0432\u043E", "value": 13, "slug": "pozharevo" }, { "key": "\u041F\u043E\u0438\u0431\u0440\u0435\u043D\u0435", "value": 2, "slug": "poibrene" }, { "key": "\u041F\u043E\u043A\u0440\u0430\u0439\u043D\u0430", "value": 41, "slug": "pokrayna" }, { "key": "\u041F\u043E\u043A\u0440\u043E\u0432\u043D\u0438\u043A", "value": 80, "slug": "pokrovnik" }, { "key": "\u041F\u043E\u043B\u0435\u043D\u0430", "value": 28, "slug": "polena" }, { "key": "\u041F\u043E\u043B\u0435\u043D\u0438\u0446\u0430", "value": 125, "slug": "polenica" }, { "key": "\u041F\u043E\u043B\u0435\u0442\u043A\u043E\u0432\u0446\u0438", "value": 1, "slug": "poletkovci" }, { "key": "\u041F\u043E\u043B\u0435\u0442\u043E", "value": 24, "slug": "poleto" }, { "key": "\u041F\u043E\u043B\u0438\u043A\u0440\u0430\u0438\u0449\u0435", "value": 105, "slug": "polikraishche" }, { "key": "\u041F\u043E\u043B\u043A\u043E\u0432\u043D\u0438\u043A \u0414\u044F\u043A\u043E\u0432\u043E", "value": 5, "slug": "polkovnik-dyakovo" }, { "key": "\u041F\u043E\u043B\u043A\u043E\u0432\u043D\u0438\u043A \u0416\u0435\u043B\u044F\u0437\u043E\u0432\u043E", "value": 17, "slug": "polkovnik-zhelyazovo" }, { "key": "\u041F\u043E\u043B\u043A\u043E\u0432\u043D\u0438\u043A \u0418\u0432\u0430\u043D\u043E\u0432\u043E", "value": 20, "slug": "polkovnik-ivanovo" }, { "key": "\u041F\u043E\u043B\u043A\u043E\u0432\u043D\u0438\u043A \u041B\u0430\u043C\u0431\u0440\u0438\u043D\u043E\u0432\u043E", "value": 1, "slug": "polkovnik-lambrinovo" }, { "key": "\u041F\u043E\u043B\u043A\u043E\u0432\u043D\u0438\u043A \u041C\u0438\u043D\u043A\u043E\u0432\u043E", "value": 11, "slug": "polkovnik-minkovo" }, { "key": "\u041F\u043E\u043B\u043A\u043E\u0432\u043D\u0438\u043A \u0421\u0430\u0432\u043E\u0432\u043E", "value": 2, "slug": "polkovnik-savovo" }, { "key": "\u041F\u043E\u043B\u043A\u043E\u0432\u043D\u0438\u043A \u0421\u0432\u0435\u0449\u0430\u0440\u043E\u0432\u043E", "value": 13, "slug": "polkovnik-sveshcharovo" }, { "key": "\u041F\u043E\u043B\u043A\u043E\u0432\u043D\u0438\u043A \u0421\u0435\u0440\u0430\u0444\u0438\u043C\u043E\u0432\u043E", "value": 20, "slug": "polkovnik-serafimovo" }, { "key": "\u041F\u043E\u043B\u043A\u043E\u0432\u043D\u0438\u043A \u0422\u0430\u0441\u043B\u0430\u043A\u043E\u0432\u043E", "value": 4, "slug": "polkovnik-taslakovo" }, { "key": "\u041F\u043E\u043B\u043A\u043E\u0432\u043D\u0438\u043A \u0427\u043E\u043B\u0430\u043A\u043E\u0432\u043E", "value": 1, "slug": "polkovnik-cholakovo" }, { "key": "\u041F\u043E\u043B\u0441\u043A\u0438 \u0413\u0440\u0430\u0434\u0435\u0446", "value": 14, "slug": "polski-gradec" }, { "key": "\u041F\u043E\u043B\u0441\u043A\u0438 \u0438\u0437\u0432\u043E\u0440", "value": 23, "slug": "polski-izvor" }, { "key": "\u041F\u043E\u043B\u0441\u043A\u0438 \u0421\u0435\u043D\u043E\u0432\u0435\u0446", "value": 30, "slug": "polski-senovec" }, { "key": "\u041F\u043E\u043B\u0441\u043A\u0438 \u0422\u0440\u044A\u043C\u0431\u0435\u0448", "value": 332, "slug": "polski-trmbesh" }, { "key": "\u041F\u043E\u043B\u0441\u043A\u043E \u041A\u043E\u0441\u043E\u0432\u043E", "value": 24, "slug": "polsko-kosovo" }, { "key": "\u041F\u043E\u043B\u0441\u043A\u043E \u041F\u044A\u0434\u0430\u0440\u0435\u0432\u043E", "value": 2, "slug": "polsko-pdarevo" }, { "key": "\u041F\u043E\u043B\u044F\u043D\u0430", "value": 17, "slug": "polyana" }, { "key": "\u041F\u043E\u043B\u044F\u043D\u0435\u0446", "value": 3, "slug": "polyanec" }, { "key": "\u041F\u043E\u043B\u044F\u043D\u043E\u0432\u043E", "value": 22, "slug": "polyanovo" }, { "key": "\u041F\u043E\u043B\u044F\u043D\u0446\u0438", "value": 6, "slug": "polyanci" }, { "key": "\u041F\u043E\u043B\u044F\u0446\u0438\u0442\u0435", "value": 11, "slug": "polyacite" }, { "key": "\u041F\u043E\u043C\u0435\u0436\u0434\u0438\u043D", "value": 1, "slug": "pomezhdin" }, { "key": "\u041F\u043E\u043C\u0435\u043D", "value": 5, "slug": "pomen" }, { "key": "\u041F\u043E\u043C\u043E\u0440\u0438\u0435", "value": 2299, "slug": "pomorie" }, { "key": "\u041F\u043E\u043C\u043E\u0449\u0438\u0446\u0430", "value": 6, "slug": "pomoshchica" }, { "key": "\u041F\u043E\u043C\u043E\u0449\u043D\u0438\u043A", "value": 6, "slug": "pomoshchnik" }, { "key": "\u041F\u043E\u043F\u0433\u0440\u0438\u0433\u043E\u0440\u043E\u0432\u043E", "value": 8, "slug": "popgrigorovo" }, { "key": "\u041F\u043E\u043F\u0433\u0440\u0443\u0435\u0432\u043E", "value": 11, "slug": "popgruevo" }, { "key": "\u041F\u043E\u043F\u0438\u043D\u0430", "value": 8, "slug": "popina" }, { "key": "\u041F\u043E\u043F\u0438\u043D\u0446\u0438", "value": 49, "slug": "popinci" }, { "key": "\u041F\u043E\u043F\u0438\u0446\u0430", "value": 40, "slug": "popica" }, { "key": "\u041F\u043E\u043F\u043E\u0432\u0435\u0446", "value": 3, "slug": "popovec" }, { "key": "\u041F\u043E\u043F\u043E\u0432\u0438\u0446\u0430", "value": 50, "slug": "popovica" }, { "key": "\u041F\u043E\u043F\u043E\u0432\u0438\u0447", "value": 13, "slug": "popovich" }, { "key": "\u041F\u043E\u043F\u043E\u0432\u043E", "value": 1064, "slug": "popovo" }, { "key": "\u041F\u043E\u043F\u043E\u0432\u0446\u0438", "value": 42, "slug": "popovci" }, { "key": "\u041F\u043E\u043F\u043E\u0432\u044F\u043D\u0435", "value": 7, "slug": "popovyane" }, { "key": "\u041F\u043E\u043F\u0440\u0443\u0441\u0435\u0432\u0446\u0438", "value": 1, "slug": "poprusevci" }, { "key": "\u041F\u043E\u043F\u0441\u043A\u0430", "value": 2, "slug": "popska" }, { "key": "\u041F\u043E\u0440\u0434\u0438\u043C", "value": 70, "slug": "pordim" }, { "key": "\u041F\u043E\u0440\u043E\u0438\u0449\u0435", "value": 12, "slug": "poroishche" }, { "key": "\u041F\u043E\u0440\u043E\u0439", "value": 42, "slug": "poroy" }, { "key": "\u041F\u043E\u0440\u043E\u0439\u043D\u0430", "value": 1, "slug": "poroyna" }, { "key": "\u041F\u043E\u0440\u043E\u0439\u043D\u043E", "value": 28, "slug": "poroyno" }, { "key": "\u041F\u043E\u0440\u043E\u043C\u0438\u043D\u043E\u0432\u043E", "value": 6, "slug": "porominovo" }, { "key": "\u041F\u043E\u0440\u0442\u0438\u0442\u043E\u0432\u0446\u0438", "value": 12, "slug": "portitovci" }, { "key": "\u041F\u043E\u0440\u0443\u0447\u0438\u043A \u041A\u044A\u0440\u0434\u0436\u0438\u0435\u0432\u043E", "value": 2, "slug": "poruchik-krdzhievo" }, { "key": "\u041F\u043E\u0440\u0443\u0447\u0438\u043A \u0427\u0443\u043D\u0447\u0435\u0432\u043E", "value": 3, "slug": "poruchik-chunchevo" }, { "key": "\u041F\u043E\u0441\u0430\u0431\u0438\u043D\u0430", "value": 2, "slug": "posabina" }, { "key": "\u041F\u043E\u0441\u0435\u0432", "value": 2, "slug": "posev" }, { "key": "\u041F\u043E\u0441\u0442\u043D\u0438\u043A", "value": 2, "slug": "postnik" }, { "key": "\u041F\u043E\u0442\u043E\u043F", "value": 1, "slug": "potop" }, { "key": "\u041F\u043E\u0442\u043E\u0447\u043D\u0438\u0446\u0430", "value": 3, "slug": "potochnica" }, { "key": "\u041F\u0440\u0430\u0432\u0434\u0430", "value": 51, "slug": "pravda" }, { "key": "\u041F\u0440\u0430\u0432\u0434\u0438\u043D\u043E", "value": 7, "slug": "pravdino" }, { "key": "\u041F\u0440\u0430\u0432\u0434\u043E\u043B\u044E\u0431", "value": 1, "slug": "pravdolyub" }, { "key": "\u041F\u0440\u0430\u0432\u0435\u043D\u0446\u0438", "value": 3, "slug": "pravenci" }, { "key": "\u041F\u0440\u0430\u0432\u0435\u0446", "value": 389, "slug": "pravec" }, { "key": "\u041F\u0440\u0430\u0432\u0435\u0448\u043A\u0430 \u041B\u0430\u043A\u0430\u0432\u0438\u0446\u0430", "value": 9, "slug": "praveshka-lakavica" }, { "key": "\u041F\u0440\u0430\u0432\u0438\u0449\u0435", "value": 5, "slug": "pravishche" }, { "key": "\u041F\u0440\u0430\u0432\u043E \u0431\u044A\u0440\u0434\u043E", "value": 1, "slug": "pravo-brdo" }, { "key": "\u041F\u0440\u0430\u0432\u043E\u0441\u043B\u0430\u0432", "value": 5, "slug": "pravoslav" }, { "key": "\u041F\u0440\u0430\u0432\u043E\u0441\u043B\u0430\u0432\u0435\u043D", "value": 10, "slug": "pravoslaven" }, { "key": "\u041F\u0440\u0430\u0443\u0436\u0434\u0430", "value": 1, "slug": "prauzhda" }, { "key": "\u041F\u0440\u0430\u0445\u0430\u043B\u0438", "value": 3, "slug": "prahali" }, { "key": "\u041F\u0440\u0435\u0432\u0430\u043B\u0430", "value": 18, "slug": "prevala" }, { "key": "\u041F\u0440\u0435\u043A\u043E\u043B\u043D\u0438\u0446\u0430", "value": 4, "slug": "prekolnica" }, { "key": "\u041F\u0440\u0435\u043B\u0435\u0437", "value": 12, "slug": "prelez" }, { "key": "\u041F\u0440\u0435\u043B\u043E\u043C", "value": 2, "slug": "prelom" }, { "key": "\u041F\u0440\u0435\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0446\u0438", "value": 9, "slug": "preobrazhenci" }, { "key": "\u041F\u0440\u0435\u0441\u0435\u043A\u0430", "value": 2, "slug": "preseka" }, { "key": "\u041F\u0440\u0435\u0441\u0435\u043B\u0435\u043D\u0446\u0438", "value": 24, "slug": "preselenci" }, { "key": "\u041F\u0440\u0435\u0441\u0435\u043B\u0435\u0446", "value": 9, "slug": "preselec" }, { "key": "\u041F\u0440\u0435\u0441\u0435\u043B\u043A\u0430", "value": 14, "slug": "preselka" }, { "key": "\u041F\u0440\u0435\u0441\u0438\u044F\u043D", "value": 5, "slug": "presiyan" }, { "key": "\u041F\u0440\u0435\u0441\u043B\u0430\u0432\u0435\u043D", "value": 25, "slug": "preslaven" }, { "key": "\u041F\u0440\u0435\u0441\u043B\u0430\u0432\u0435\u0446", "value": 3, "slug": "preslavec" }, { "key": "\u041F\u0440\u0435\u0441\u043B\u0430\u0432\u0446\u0438", "value": 12, "slug": "preslavci" }, { "key": "\u041F\u0440\u0435\u0441\u043F\u0430", "value": 9, "slug": "prespa" }, { "key": "\u041F\u0440\u0435\u0441\u044F\u043A", "value": 3, "slug": "presyak" }, { "key": "\u041F\u0440\u0435\u0441\u044F\u043A\u0430", "value": 11, "slug": "presyaka" }, { "key": "\u041F\u0440\u0438\u0431\u043E\u0439", "value": 3, "slug": "priboy" }, { "key": "\u041F\u0440\u0438\u043B\u0435\u043F", "value": 17, "slug": "prilep" }, { "key": "\u041F\u0440\u0438\u043B\u0435\u043F\u0446\u0438", "value": 26, "slug": "prilepci" }, { "key": "\u041F\u0440\u0438\u043C\u043E\u0440\u0441\u043A\u043E", "value": 668, "slug": "primorsko" }, { "key": "\u041F\u0440\u0438\u043C\u043E\u0440\u0446\u0438", "value": 12, "slug": "primorci" }, { "key": "\u041F\u0440\u0438\u043F\u0435\u043A", "value": 28, "slug": "pripek" }, { "key": "\u041F\u0440\u0438\u0441\u0430\u0434", "value": 22, "slug": "prisad" }, { "key": "\u041F\u0440\u0438\u0441\u0430\u0434\u0435\u0446", "value": 1, "slug": "prisadec" }, { "key": "\u041F\u0440\u0438\u0441\u0435\u043B\u0446\u0438", "value": 134, "slug": "priselci" }, { "key": "\u041F\u0440\u0438\u0441\u043E\u0432\u043E", "value": 43, "slug": "prisovo" }, { "key": "\u041F\u0440\u0438\u0441\u0442\u043E\u0435", "value": 39, "slug": "pristoe" }, { "key": "\u041F\u0440\u043E\u0431\u0443\u0434\u0430", "value": 9, "slug": "probuda" }, { "key": "\u041F\u0440\u043E\u0432\u0430\u0434\u0438\u044F", "value": 911, "slug": "provadiya" }, { "key": "\u041F\u0440\u043E\u0433\u043B\u0435\u0434", "value": 14, "slug": "progled" }, { "key": "\u041F\u0440\u043E\u0433\u0440\u0435\u0441", "value": 14, "slug": "progres" }, { "key": "\u041F\u0440\u043E\u0434\u0430\u043D\u043E\u0432\u0446\u0438", "value": 31, "slug": "prodanovci" }, { "key": "\u041F\u0440\u043E\u0434\u0430\u043D\u0447\u0430", "value": 1, "slug": "prodancha" }, { "key": "\u041F\u0440\u043E\u043B\u0430\u0437", "value": 3, "slug": "prolaz" }, { "key": "\u041F\u0440\u043E\u043B\u0435\u0437", "value": 4, "slug": "prolez" }, { "key": "\u041F\u0440\u043E\u043B\u0435\u0448\u0430", "value": 31, "slug": "prolesha" }, { "key": "\u041F\u0440\u043E\u043B\u043E\u043C", "value": 15, "slug": "prolom" }, { "key": "\u041F\u0440\u043E\u043F\u0430\u0441\u0442", "value": 3, "slug": "propast" }, { "key": "\u041F\u0440\u043E\u0441\u0435\u043D\u0430", "value": 12, "slug": "prosena" }, { "key": "\u041F\u0440\u043E\u0441\u0435\u043D\u0438\u043A", "value": 67, "slug": "prosenik" }, { "key": "\u041F\u0440\u043E\u0441\u0435\u0447\u0435\u043D", "value": 9, "slug": "prosechen" }, { "key": "\u041F\u0440\u043E\u0441\u0442\u043E\u0440\u043D\u043E", "value": 2, "slug": "prostorno" }, { "key": "\u041F\u0440\u043E\u0442\u043E\u043F\u043E\u043F\u0438\u043D\u0446\u0438", "value": 4, "slug": "protopopinci" }, { "key": "\u041F\u0440\u043E\u0444\u0435\u0441\u043E\u0440 \u0418\u0448\u0438\u0440\u043A\u043E\u0432\u043E", "value": 19, "slug": "profesor-ishirkovo" }, { "key": "\u041F\u0440\u043E\u0445\u043B\u0430\u0434\u0430", "value": 6, "slug": "prohlada" }, { "key": "\u041F\u0440\u043E\u0445\u043E\u0434", "value": 10, "slug": "prohod" }, { "key": "\u041F\u0440\u043E\u0445\u043E\u0440\u043E\u0432\u043E", "value": 1, "slug": "prohorovo" }, { "key": "\u041F\u0440\u044F\u043F\u043E\u0440\u0435\u0446", "value": 9, "slug": "pryaporec" }, { "key": "\u041F\u0442\u0438\u0447\u0430\u0440", "value": 2, "slug": "ptichar" }, { "key": "\u041F\u0442\u0438\u0447\u0435\u0432\u043E", "value": 4, "slug": "ptichevo" }, { "key": "\u041F\u0443\u0434\u0440\u0438\u044F", "value": 15, "slug": "pudriya" }, { "key": "\u041F\u0443\u0448\u0435\u0432\u043E", "value": 4, "slug": "pushevo" }, { "key": "\u041F\u0447\u0435\u043B\u0430", "value": 8, "slug": "pchela" }, { "key": "\u041F\u0447\u0435\u043B\u0430\u0440\u0438", "value": 11, "slug": "pchelari" }, { "key": "\u041F\u0447\u0435\u043B\u0430\u0440\u043E\u0432\u043E", "value": 17, "slug": "pchelarovo" }, { "key": "\u041F\u0447\u0435\u043B\u0438\u043D", "value": 33, "slug": "pchelin" }, { "key": "\u041F\u0447\u0435\u043B\u0438\u043D\u0430", "value": 5, "slug": "pchelina" }, { "key": "\u041F\u0447\u0435\u043B\u0438\u043D\u043E", "value": 17, "slug": "pchelino" }, { "key": "\u041F\u0447\u0435\u043B\u0438\u043D\u043E\u0432\u043E", "value": 4, "slug": "pchelinovo" }, { "key": "\u041F\u0447\u0435\u043B\u0438\u0449\u0435", "value": 38, "slug": "pchelishche" }, { "key": "\u041F\u0447\u0435\u043B\u043D\u0438\u043A", "value": 75, "slug": "pchelnik" }, { "key": "\u041F\u0448\u0435\u043D\u0438\u0447\u0435\u0432\u043E", "value": 9, "slug": "pshenichevo" }, { "key": "\u041F\u044A\u0434\u0430\u0440\u0435\u0432\u043E", "value": 19, "slug": "pdarevo" }, { "key": "\u041F\u044A\u0434\u0430\u0440\u0438\u043D\u043E", "value": 16, "slug": "pdarino" }, { "key": "\u041F\u044A\u0434\u0430\u0440\u0441\u043A\u043E", "value": 14, "slug": "pdarsko" }, { "key": "\u041F\u044A\u0440\u0432\u0430\u043D", "value": 7, "slug": "prvan" }, { "key": "\u041F\u044A\u0440\u0432\u0435\u043D\u0435\u0446", "value": 285, "slug": "prvenec" }, { "key": "\u041F\u044A\u0440\u0432\u0438\u0446\u0430", "value": 12, "slug": "prvica" }, { "key": "\u041F\u044A\u0440\u0432\u043E\u043C\u0430\u0439", "value": 1082, "slug": "prvomay" }, { "key": "\u041F\u044A\u0440\u0432\u043E\u043C\u0430\u0439\u0446\u0438", "value": 127, "slug": "prvomayci" }, { "key": "\u041F\u044A\u0441\u0442\u0440\u0435\u043D", "value": 5, "slug": "pstren" }, { "key": "\u041F\u044A\u0441\u0442\u0440\u043E\u0432\u043E", "value": 1, "slug": "pstrovo" }, { "key": "\u041F\u044A\u0441\u0442\u0440\u043E\u0433\u043E\u0440", "value": 6, "slug": "pstrogor" }, { "key": "\u041F\u044A\u0441\u0442\u0440\u043E\u043E\u043A", "value": 1, "slug": "pstrook" }, { "key": "\u041F\u044A\u0442\u043D\u0438\u043A\u043E\u0432\u043E", "value": 1, "slug": "ptnikovo" }, { "key": "\u041F\u044F\u0441\u044A\u0447\u0435\u0432\u043E", "value": 3, "slug": "pyaschevo" }, { "key": "\u0420\u0430\u0431\u0438\u0448\u0430", "value": 10, "slug": "rabisha" }, { "key": "\u0420\u0430\u0431\u043E\u0432\u043E", "value": 2, "slug": "rabovo" }, { "key": "\u0420\u0430\u0431\u0440\u043E\u0432\u043E", "value": 5, "slug": "rabrovo" }, { "key": "\u0420\u0430\u0432\u0430\u0434\u0438\u043D\u043E\u0432\u043E", "value": 54, "slug": "ravadinovo" }, { "key": "\u0420\u0430\u0432\u0434\u0430", "value": 657, "slug": "ravda" }, { "key": "\u0420\u0430\u0432\u0435\u043D", "value": 10, "slug": "raven" }, { "key": "\u0420\u0430\u0432\u043D\u0430", "value": 8, "slug": "ravna" }, { "key": "\u0420\u0430\u0432\u043D\u0430 \u0433\u043E\u0440\u0430", "value": 36, "slug": "ravna-gora" }, { "key": "\u0420\u0430\u0432\u043D\u0435\u0446", "value": 43, "slug": "ravnec" }, { "key": "\u0420\u0430\u0432\u043D\u0438\u043D\u0430\u0442\u0430", "value": 4, "slug": "ravninata" }, { "key": "\u0420\u0430\u0432\u043D\u0438\u0449\u0430", "value": 10, "slug": "ravnishcha" }, { "key": "\u0420\u0430\u0432\u043D\u0438\u0449\u0435", "value": 7, "slug": "ravnishche" }, { "key": "\u0420\u0430\u0432\u043D\u043E", "value": 20, "slug": "ravno" }, { "key": "\u0420\u0430\u0432\u043D\u043E \u043D\u0438\u0432\u0438\u0449\u0435", "value": 2, "slug": "ravno-nivishche" }, { "key": "\u0420\u0430\u0432\u043D\u043E \u043F\u043E\u043B\u0435", "value": 141, "slug": "ravno-pole" }, { "key": "\u0420\u0430\u0432\u043D\u043E\u0433\u043E\u0440", "value": 19, "slug": "ravnogor" }, { "key": "\u0420\u0430\u0434\u0430\u043D \u0432\u043E\u0439\u0432\u043E\u0434\u0430", "value": 10, "slug": "radan-voyvoda" }, { "key": "\u0420\u0430\u0434\u0430\u043D\u043E\u0432\u043E", "value": 50, "slug": "radanovo" }, { "key": "\u0420\u0430\u0434\u0435\u0432\u043E", "value": 11, "slug": "radevo" }, { "key": "\u0420\u0430\u0434\u0435\u0432\u0446\u0438", "value": 3, "slug": "radevci" }, { "key": "\u0420\u0430\u0434\u0435\u0446\u043A\u0438", "value": 3, "slug": "radecki" }, { "key": "\u0420\u0430\u0434\u0438\u0431\u043E\u0448", "value": 3, "slug": "radibosh" }, { "key": "\u0420\u0430\u0434\u0438\u0435\u0432\u043E", "value": 31, "slug": "radievo" }, { "key": "\u0420\u0430\u0434\u0438\u043B\u043E\u0432\u043E", "value": 58, "slug": "radilovo" }, { "key": "\u0420\u0430\u0434\u0438\u043D\u0433\u0440\u0430\u0434", "value": 20, "slug": "radingrad" }, { "key": "\u0420\u0430\u0434\u0438\u043D\u043E", "value": 1, "slug": "radino" }, { "key": "\u0420\u0430\u0434\u0438\u043D\u043E\u0432\u043E", "value": 73, "slug": "radinovo" }, { "key": "\u0420\u0430\u0434\u0438\u0448\u0435\u0432\u043E", "value": 13, "slug": "radishevo" }, { "key": "\u0420\u0430\u0434\u043A\u043E \u0414\u0438\u043C\u0438\u0442\u0440\u0438\u0435\u0432\u043E", "value": 16, "slug": "radko-dimitrievo" }, { "key": "\u0420\u0430\u0434\u043B\u043E\u0432\u0446\u0438", "value": 1, "slug": "radlovci" }, { "key": "\u0420\u0430\u0434\u043D\u0435\u0432\u043E", "value": 809, "slug": "radnevo" }, { "key": "\u0420\u0430\u0434\u043E\u0432\u0435\u043D\u0435", "value": 7, "slug": "radovene" }, { "key": "\u0420\u0430\u0434\u043E\u0432\u0435\u0446", "value": 10, "slug": "radovec" }, { "key": "\u0420\u0430\u0434\u043E\u0432\u043E", "value": 1, "slug": "radovo" }, { "key": "\u0420\u0430\u0434\u043E\u0439\u043D\u043E\u0432\u043E", "value": 4, "slug": "radoynovo" }, { "key": "\u0420\u0430\u0434\u043E\u043C\u0438\u0440", "value": 874, "slug": "radomir" }, { "key": "\u0420\u0430\u0434\u043E\u043C\u0438\u0440\u0446\u0438", "value": 21, "slug": "radomirci" }, { "key": "\u0420\u0430\u0434\u043E\u0442\u0438\u043D\u0430", "value": 6, "slug": "radotina" }, { "key": "\u0420\u0430\u0434\u0443\u0438\u043B", "value": 79, "slug": "raduil" }, { "key": "\u0420\u0430\u0434\u0443\u043D\u0446\u0438", "value": 3, "slug": "radunci" }, { "key": "\u0420\u0430\u0434\u044E\u0432\u0435\u043D\u0435", "value": 15, "slug": "radyuvene" }, { "key": "\u0420\u0430\u0436\u0434\u0430\u0432\u0438\u0446\u0430", "value": 6, "slug": "razhdavica" }, { "key": "\u0420\u0430\u0437\u0431\u043E\u0439\u043D\u0430", "value": 49, "slug": "razboyna" }, { "key": "\u0420\u0430\u0437\u0432\u0438\u0433\u043E\u0440\u043E\u0432\u043E", "value": 7, "slug": "razvigorovo" }, { "key": "\u0420\u0430\u0437\u0433\u0440\u0430\u0434", "value": 3210, "slug": "razgrad" }, { "key": "\u0420\u0430\u0437\u0434\u0435\u043B", "value": 25, "slug": "razdel" }, { "key": "\u0420\u0430\u0437\u0434\u0435\u043B\u043D\u0430", "value": 19, "slug": "razdelna" }, { "key": "\u0420\u0430\u0437\u0434\u0435\u043B\u0446\u0438", "value": 4, "slug": "razdelci" }, { "key": "\u0420\u0430\u0437\u0434\u043E\u043B", "value": 3, "slug": "razdol" }, { "key": "\u0420\u0430\u0437\u043B\u0438\u0432", "value": 24, "slug": "razliv" }, { "key": "\u0420\u0430\u0437\u043B\u043E\u0433", "value": 1212, "slug": "razlog" }, { "key": "\u0420\u0430\u0437\u0441\u043E\u0445\u0430", "value": 4, "slug": "razsoha" }, { "key": "\u0420\u0430\u0439\u043A\u043E\u0432\u0430 \u043C\u043E\u0433\u0438\u043B\u0430", "value": 1, "slug": "raykova-mogila" }, { "key": "\u0420\u0430\u0439\u043D\u0438\u043D\u043E", "value": 13, "slug": "raynino" }, { "key": "\u0420\u0430\u0439\u043D\u043E\u0432\u043E", "value": 1, "slug": "raynovo" }, { "key": "\u0420\u0430\u0439\u043D\u043E\u0432\u0446\u0438", "value": 9, "slug": "raynovci" }, { "key": "\u0420\u0430\u0439\u043E\u0432\u043E", "value": 28, "slug": "rayovo" }, { "key": "\u0420\u0430\u043A\u0435\u0432\u043E", "value": 31, "slug": "rakevo" }, { "key": "\u0420\u0430\u043A\u0438\u043B\u043E\u0432\u0446\u0438", "value": 4, "slug": "rakilovci" }, { "key": "\u0420\u0430\u043A\u0438\u0442\u0430", "value": 10, "slug": "rakita" }, { "key": "\u0420\u0430\u043A\u0438\u0442\u043D\u0430", "value": 5, "slug": "rakitna" }, { "key": "\u0420\u0430\u043A\u0438\u0442\u043D\u0438\u0446\u0430", "value": 27, "slug": "rakitnica" }, { "key": "\u0420\u0430\u043A\u0438\u0442\u043E\u0432\u043E", "value": 341, "slug": "rakitovo" }, { "key": "\u0420\u0430\u043A\u043B\u0438\u043D\u043E\u0432\u043E", "value": 2, "slug": "raklinovo" }, { "key": "\u0420\u0430\u043A\u043E\u0432\u0438\u0446\u0430", "value": 21, "slug": "rakovica" }, { "key": "\u0420\u0430\u043A\u043E\u0432\u0441\u043A\u0438", "value": 1009, "slug": "rakovski" }, { "key": "\u0420\u0430\u043A\u043E\u0432\u0441\u043A\u043E\u0432\u043E", "value": 14, "slug": "rakovskovo" }, { "key": "\u0420\u0430\u043B\u0435\u0432\u043E", "value": 8, "slug": "ralevo" }, { "key": "\u0420\u0430\u043B\u0438\u0446\u0430", "value": 4, "slug": "ralica" }, { "key": "\u0420\u0430\u043D\u0435\u043D\u0446\u0438", "value": 5, "slug": "ranenci" }, { "key": "\u0420\u0430\u043D\u0438 \u043B\u0438\u0441\u0442", "value": 23, "slug": "rani-list" }, { "key": "\u0420\u0430\u043D\u0438 \u043B\u0443\u0433", "value": 1, "slug": "rani-lug" }, { "key": "\u0420\u0430\u0441\u043D\u0438\u043A", "value": 10, "slug": "rasnik" }, { "key": "\u0420\u0430\u0441\u043E\u0432\u043E", "value": 41, "slug": "rasovo" }, { "key": "\u0420\u0430\u0441\u0442\u043D\u0438\u043A", "value": 9, "slug": "rastnik" }, { "key": "\u0420\u0430\u0445\u043E\u0432\u0446\u0438", "value": 4, "slug": "rahovci" }, { "key": "\u0420\u0430\u0447\u0435\u0432\u0446\u0438", "value": 2, "slug": "rachevci" }, { "key": "\u0420\u0430\u0448\u043A\u0430 \u0413\u0440\u0430\u0449\u0438\u0446\u0430", "value": 8, "slug": "rashka-grashchica" }, { "key": "\u0420\u0430\u0448\u043A\u043E\u0432\u043E", "value": 5, "slug": "rashkovo" }, { "key": "\u0420\u0430\u044E\u0432\u0446\u0438", "value": 6, "slug": "rayuvci" }, { "key": "\u0420\u0430\u044F\u043D\u043E\u0432\u0446\u0438", "value": 2, "slug": "rayanovci" }, { "key": "\u0420\u0435\u0431\u0440\u0435\u0432\u0446\u0438", "value": 3, "slug": "rebrevci" }, { "key": "\u0420\u0435\u0431\u0440\u043E\u0432\u043E", "value": 42, "slug": "rebrovo" }, { "key": "\u0420\u0435\u0431\u044A\u0440\u043A\u043E\u0432\u043E", "value": 18, "slug": "rebrkovo" }, { "key": "\u0420\u0435\u0434\u0438\u043D\u0430", "value": 1, "slug": "redina" }, { "key": "\u0420\u0435\u0436\u0430\u043D\u0446\u0438", "value": 3, "slug": "rezhanci" }, { "key": "\u0420\u0435\u0437\u0430\u0447", "value": 7, "slug": "rezach" }, { "key": "\u0420\u0435\u0437\u0431\u0430\u0440\u0446\u0438", "value": 44, "slug": "rezbarci" }, { "key": "\u0420\u0435\u0437\u043E\u0432\u043E", "value": 8, "slug": "rezovo" }, { "key": "\u0420\u0435\u043A\u0430", "value": 4, "slug": "reka" }, { "key": "\u0420\u0435\u043B\u044C\u043E\u0432\u043E", "value": 7, "slug": "relovo" }, { "key": "\u0420\u0435\u043F\u043B\u044F\u043D\u0430", "value": 5, "slug": "replyana" }, { "key": "\u0420\u0435\u0441\u0435\u043B\u0435\u0446", "value": 21, "slug": "reselec" }, { "key": "\u0420\u0435\u0441\u0435\u043D", "value": 66, "slug": "resen" }, { "key": "\u0420\u0435\u0441\u0438\u043B\u043E\u0432\u043E", "value": 37, "slug": "resilovo" }, { "key": "\u0420\u0435\u0447\u0438\u0446\u0430", "value": 23, "slug": "rechica" }, { "key": "\u0420\u0438\u0431\u0430\u0440\u0438\u0446\u0430", "value": 81, "slug": "ribarica" }, { "key": "\u0420\u0438\u0431\u0435\u043D", "value": 41, "slug": "riben" }, { "key": "\u0420\u0438\u0431\u043D\u0438\u0446\u0430", "value": 7, "slug": "ribnica" }, { "key": "\u0420\u0438\u0431\u043D\u043E\u0432\u043E", "value": 67, "slug": "ribnovo" }, { "key": "\u0420\u0438\u0434\u0438\u043D\u043E", "value": 6, "slug": "ridino" }, { "key": "\u0420\u0438\u0434\u043E\u0432\u043E", "value": 1, "slug": "ridovo" }, { "key": "\u0420\u0438\u043B\u0430", "value": 81, "slug": "rila" }, { "key": "\u0420\u0438\u043B\u0446\u0438", "value": 59, "slug": "rilci" }, { "key": "\u0420\u0438\u0441\u0438\u043C\u0430\u043D\u043E\u0432\u043E", "value": 1, "slug": "risimanovo" }, { "key": "\u0420\u0438\u0442\u044F", "value": 1, "slug": "ritya" }, { "key": "\u0420\u0438\u0448", "value": 25, "slug": "rish" }, { "key": "\u0420\u043E\u0431\u043E\u0432\u043E", "value": 1, "slug": "robovo" }, { "key": "\u0420\u043E\u0433\u0430\u0447", "value": 6, "slug": "rogach" }, { "key": "\u0420\u043E\u0433\u0430\u0447\u0435\u0432\u043E", "value": 51, "slug": "rogachevo" }, { "key": "\u0420\u043E\u0433\u043E\u0437\u0435\u043D", "value": 27, "slug": "rogozen" }, { "key": "\u0420\u043E\u0433\u043E\u0437\u0438\u043D\u0430", "value": 1, "slug": "rogozina" }, { "key": "\u0420\u043E\u0433\u043E\u0437\u0438\u043D\u043E\u0432\u043E", "value": 10, "slug": "rogozinovo" }, { "key": "\u0420\u043E\u0433\u043E\u0437\u0447\u0435", "value": 4, "slug": "rogozche" }, { "key": "\u0420\u043E\u0433\u043E\u0448", "value": 132, "slug": "rogosh" }, { "key": "\u0420\u043E\u0434\u0438\u043D\u0430", "value": 7, "slug": "rodina" }, { "key": "\u0420\u043E\u0436\u0434\u0435\u043D", "value": 7, "slug": "rozhden" }, { "key": "\u0420\u043E\u0436\u0435\u043D", "value": 4, "slug": "rozhen" }, { "key": "\u0420\u043E\u0437\u0430", "value": 70, "slug": "roza" }, { "key": "\u0420\u043E\u0437\u0438\u043D\u043E", "value": 106, "slug": "rozino" }, { "key": "\u0420\u043E\u0437\u043E\u0432\u0435\u0446", "value": 6, "slug": "rozovec" }, { "key": "\u0420\u043E\u0437\u043E\u0432\u043E", "value": 47, "slug": "rozovo" }, { "key": "\u0420\u043E\u043C\u0430\u043D", "value": 158, "slug": "roman" }, { "key": "\u0420\u043E\u0441\u0435\u043D", "value": 107, "slug": "rosen" }, { "key": "\u0420\u043E\u0441\u0435\u043D\u043E\u0432\u043E", "value": 14, "slug": "rosenovo" }, { "key": "\u0420\u043E\u0441\u0438\u043D\u0430", "value": 3, "slug": "rosina" }, { "key": "\u0420\u043E\u0441\u0438\u0446\u0430", "value": 33, "slug": "rosica" }, { "key": "\u0420\u043E\u0441\u043D\u043E", "value": 8, "slug": "rosno" }, { "key": "\u0420\u043E\u0441\u043E\u043C\u0430\u043D", "value": 2, "slug": "rosoman" }, { "key": "\u0420\u043E\u0445\u043B\u0435\u0432\u0430", "value": 3, "slug": "rohleva" }, { "key": "\u0420\u043E\u044F\u043A", "value": 10, "slug": "royak" }, { "key": "\u0420\u0443\u0434\u0430\u0440\u0446\u0438", "value": 74, "slug": "rudarci" }, { "key": "\u0420\u0443\u0434\u0438\u043D\u0430", "value": 5, "slug": "rudina" }, { "key": "\u0420\u0443\u0434\u043D\u0438\u043A", "value": 142, "slug": "rudnik" }, { "key": "\u0420\u0443\u0434\u043E\u0437\u0435\u043C", "value": 295, "slug": "rudozem" }, { "key": "\u0420\u0443\u0435\u0432\u0446\u0438", "value": 2, "slug": "ruevci" }, { "key": "\u0420\u0443\u0435\u043D", "value": 111, "slug": "ruen" }, { "key": "\u0420\u0443\u0435\u0446", "value": 18, "slug": "ruec" }, { "key": "\u0420\u0443\u0436\u0438\u043D\u0446\u0438", "value": 37, "slug": "ruzhinci" }, { "key": "\u0420\u0443\u0436\u0438\u0446\u0430", "value": 22, "slug": "ruzhica" }, { "key": "\u0420\u0443\u0439\u043D\u043E", "value": 17, "slug": "ruyno" }, { "key": "\u0420\u0443\u043C\u044F\u043D\u0446\u0435\u0432\u043E", "value": 33, "slug": "rumyancevo" }, { "key": "\u0420\u0443\u043D\u044F", "value": 3, "slug": "runya" }, { "key": "\u0420\u0443\u043F\u0438\u0442\u0435", "value": 40, "slug": "rupite" }, { "key": "\u0420\u0443\u043F\u043A\u0438\u0442\u0435", "value": 17, "slug": "rupkite" }, { "key": "\u0420\u0443\u043F\u0446\u0438", "value": 39, "slug": "rupci" }, { "key": "\u0420\u0443\u043F\u0447\u0430", "value": 9, "slug": "rupcha" }, { "key": "\u0420\u0443\u0441\u0430\u043B\u044F", "value": 15, "slug": "rusalya" }, { "key": "\u0420\u0443\u0441\u0435", "value": 17103, "slug": "ruse" }, { "key": "\u0420\u0443\u0441\u043A\u0430 \u0411\u0435\u043B\u0430", "value": 9, "slug": "ruska-bela" }, { "key": "\u0420\u0443\u0441\u043E\u043A\u0430\u0441\u0442\u0440\u043E", "value": 30, "slug": "rusokastro" }, { "key": "\u0420\u0443\u0445\u043E\u0432\u0446\u0438", "value": 2, "slug": "ruhovci" }, { "key": "\u0420\u044A\u0436\u0434\u0430\u043A", "value": 28, "slug": "rzhdak" }, { "key": "\u0420\u044A\u0436\u0435\u0432\u043E", "value": 4, "slug": "rzhevo" }, { "key": "\u0420\u044A\u0436\u0435\u0432\u043E \u041A\u043E\u043D\u0430\u0440\u0435", "value": 67, "slug": "rzhevo-konare" }, { "key": "\u0420\u044A\u0436\u0435\u043D\u0430", "value": 25, "slug": "rzhena" }, { "key": "\u0420\u044A\u0436\u0435\u043D\u043E\u0432\u043E", "value": 6, "slug": "rzhenovo" }, { "key": "\u0420\u044A\u0436\u0438\u0446\u0430", "value": 24, "slug": "rzhica" }, { "key": "\u0420\u044A\u0442\u043B\u0438\u043D\u0430", "value": 1, "slug": "rtlina" }, { "key": "\u0420\u044F\u0445\u043E\u0432\u043E", "value": 93, "slug": "ryahovo" }, { "key": "\u0420\u044F\u0445\u043E\u0432\u0446\u0438\u0442\u0435", "value": 39, "slug": "ryahovcite" }, { "key": "\u0421\u0430\u0432\u0430", "value": 18, "slug": "sava" }, { "key": "\u0421\u0430\u0432\u0438\u043D", "value": 8, "slug": "savin" }, { "key": "\u0421\u0430\u0432\u0438\u043D\u043E", "value": 8, "slug": "savino" }, { "key": "\u0421\u0430\u0434\u0438\u043D\u0430", "value": 24, "slug": "sadina" }, { "key": "\u0421\u0430\u0434\u043E\u0432\u0435\u0446", "value": 48, "slug": "sadovec" }, { "key": "\u0421\u0430\u0434\u043E\u0432\u0438\u043A", "value": 3, "slug": "sadovik" }, { "key": "\u0421\u0430\u0434\u043E\u0432\u043E", "value": 197, "slug": "sadovo" }, { "key": "\u0421\u0430\u043A\u0430\u0440\u0446\u0438", "value": 1, "slug": "sakarci" }, { "key": "\u0421\u0430\u043B\u0430\u0441\u0443\u043A\u0430", "value": 2, "slug": "salasuka" }, { "key": "\u0421\u0430\u043B\u043C\u0430\u043D\u043E\u0432\u043E", "value": 16, "slug": "salmanovo" }, { "key": "\u0421\u0430\u043C\u043E\u0432\u0438\u043B\u0430", "value": 1, "slug": "samovila" }, { "key": "\u0421\u0430\u043C\u043E\u0432\u043E\u0434\u0435\u043D\u0435", "value": 76, "slug": "samovodene" }, { "key": "\u0421\u0430\u043C\u043E\u0434\u0438\u0432\u0430", "value": 8, "slug": "samodiva" }, { "key": "\u0421\u0430\u043C\u043E\u043A\u0438\u0442\u043A\u0430", "value": 2, "slug": "samokitka" }, { "key": "\u0421\u0430\u043C\u043E\u043A\u043E\u0432", "value": 2744, "slug": "samokov" }, { "key": "\u0421\u0430\u043C\u043E\u0440\u0430\u043D\u043E\u0432\u043E", "value": 67, "slug": "samoranovo" }, { "key": "\u0421\u0430\u043C\u0443\u0438\u043B", "value": 58, "slug": "samuil" }, { "key": "\u0421\u0430\u043C\u0443\u0438\u043B\u043E\u0432\u043E", "value": 121, "slug": "samuilovo" }, { "key": "\u0421\u0430\u043D-\u0421\u0442\u0435\u0444\u0430\u043D\u043E", "value": 4, "slug": "san-stefano" }, { "key": "\u0421\u0430\u043D\u0430\u0434\u0438\u043D\u043E\u0432\u043E", "value": 3, "slug": "sanadinovo" }, { "key": "\u0421\u0430\u043D\u0434\u0430\u043D\u0441\u043A\u0438", "value": 4300, "slug": "sandanski" }, { "key": "\u0421\u0430\u043D\u0434\u0440\u043E\u0432\u043E", "value": 102, "slug": "sandrovo" }, { "key": "\u0421\u0430\u043F\u0430\u0440\u0435\u0432\u0430 \u0431\u0430\u043D\u044F", "value": 365, "slug": "sapareva-banya" }, { "key": "\u0421\u0430\u043F\u0430\u0440\u0435\u0432\u043E", "value": 55, "slug": "saparevo" }, { "key": "\u0421\u0430\u0440\u0430\u043D\u0441\u043A\u043E", "value": 4, "slug": "saransko" }, { "key": "\u0421\u0430\u0440\u0430\u043D\u0446\u0438", "value": 12, "slug": "saranci" }, { "key": "\u0421\u0430\u0440\u0430\u044F", "value": 42, "slug": "saraya" }, { "key": "\u0421\u0430\u0442\u043E\u0432\u0447\u0430", "value": 119, "slug": "satovcha" }, { "key": "\u0421\u0431\u043E\u0440", "value": 10, "slug": "sbor" }, { "key": "\u0421\u0431\u043E\u0440\u0438\u0449\u0435", "value": 49, "slug": "sborishche" }, { "key": "\u0421\u0432\u0430\u043B\u0435\u043D\u0438\u043A", "value": 27, "slug": "svalenik" }, { "key": "\u0421\u0432\u0435\u0436\u0435\u043D", "value": 17, "slug": "svezhen" }, { "key": "\u0421\u0432\u0435\u0442\u0430 \u041F\u0435\u0442\u043A\u0430", "value": 32, "slug": "sveta-petka" }, { "key": "\u0421\u0432\u0435\u0442\u0438 \u0412\u043B\u0430\u0441", "value": 1033, "slug": "sveti-vlas" }, { "key": "\u0421\u0432\u0435\u0442\u0438 \u041D\u0438\u043A\u043E\u043B\u0430", "value": 3, "slug": "sveti-nikola" }, { "key": "\u0421\u0432\u0435\u0442\u043B\u0435\u043D", "value": 20, "slug": "svetlen" }, { "key": "\u0421\u0432\u0435\u0442\u043B\u0438\u043D\u0430", "value": 34, "slug": "svetlina" }, { "key": "\u0421\u0432\u0435\u0442\u043B\u044F", "value": 10, "slug": "svetlya" }, { "key": "\u0421\u0432\u0435\u0442\u043E\u0432\u0440\u0430\u0447\u0435\u043D\u0435", "value": 143, "slug": "svetovrachene" }, { "key": "\u0421\u0432\u0435\u0442\u043E\u0441\u043B\u0430\u0432", "value": 10, "slug": "svetoslav" }, { "key": "\u0421\u0432\u0435\u0442\u043E\u0441\u043B\u0430\u0432\u0446\u0438", "value": 1, "slug": "svetoslavci" }, { "key": "\u0421\u0432\u0435\u0442\u0443\u043B\u043A\u0430", "value": 5, "slug": "svetulka" }, { "key": "\u0421\u0432\u0435\u0449\u0430\u0440\u0438", "value": 13, "slug": "sveshchari" }, { "key": "\u0421\u0432\u0438\u0434\u043D\u044F", "value": 42, "slug": "svidnya" }, { "key": "\u0421\u0432\u0438\u043B\u0435\u043D\u0433\u0440\u0430\u0434", "value": 1797, "slug": "svilengrad" }, { "key": "\u0421\u0432\u0438\u0440\u0430\u0447\u0438", "value": 8, "slug": "svirachi" }, { "key": "\u0421\u0432\u0438\u0440\u043A\u043E\u0432\u043E", "value": 8, "slug": "svirkovo" }, { "key": "\u0421\u0432\u0438\u0449\u043E\u0432", "value": 1589, "slug": "svishchov" }, { "key": "\u0421\u0432\u043E\u0431\u043E\u0434\u0430", "value": 54, "slug": "svoboda" }, { "key": "\u0421\u0432\u043E\u0431\u043E\u0434\u0435\u043D", "value": 4, "slug": "svoboden" }, { "key": "\u0421\u0432\u043E\u0431\u043E\u0434\u0438\u043D\u043E\u0432\u043E", "value": 8, "slug": "svobodinovo" }, { "key": "\u0421\u0432\u043E\u0433\u0435", "value": 600, "slug": "svoge" }, { "key": "\u0421\u0432\u043E\u0434\u0435", "value": 7, "slug": "svode" }, { "key": "\u0421\u0435\u0432\u0430\u0440", "value": 48, "slug": "sevar" }, { "key": "\u0421\u0435\u0432\u0435\u0440\u0446\u0438", "value": 3, "slug": "severci" }, { "key": "\u0421\u0435\u0432\u043B\u0438\u0435\u0432\u043E", "value": 2034, "slug": "sevlievo" }, { "key": "\u0421\u0435\u0434\u0435\u043B\u0435\u0446", "value": 1, "slug": "sedelec" }, { "key": "\u0421\u0435\u0434\u0435\u0444\u0447\u0435", "value": 1, "slug": "sedefche" }, { "key": "\u0421\u0435\u0434\u043B\u0430\u0440\u0435\u0432\u043E", "value": 1, "slug": "sedlarevo" }, { "key": "\u0421\u0435\u0434\u043B\u0430\u0440\u0438", "value": 9, "slug": "sedlari" }, { "key": "\u0421\u0435\u0434\u043B\u0430\u0440\u0446\u0438", "value": 4, "slug": "sedlarci" }, { "key": "\u0421\u0435\u0434\u043B\u043E\u0432\u0438\u043D\u0430", "value": 10, "slug": "sedlovina" }, { "key": "\u0421\u0435\u0434\u044F\u043D\u043A\u043E\u0432\u0446\u0438", "value": 3, "slug": "sedyankovci" }, { "key": "\u0421\u0435\u0439\u0434\u043E\u043B", "value": 13, "slug": "seydol" }, { "key": "\u0421\u0435\u043A\u0443\u043B\u043E\u0432\u043E", "value": 16, "slug": "sekulovo" }, { "key": "\u0421\u0435\u043B\u0430\u043D\u043E\u0432\u0446\u0438", "value": 85, "slug": "selanovci" }, { "key": "\u0421\u0435\u043B\u0438\u043C\u0438\u043D\u043E\u0432\u043E", "value": 47, "slug": "seliminovo" }, { "key": "\u0421\u0435\u043B\u0438\u0449\u0435", "value": 17, "slug": "selishche" }, { "key": "\u0421\u0435\u043B\u0438\u0449\u0435\u043D \u0434\u043E\u043B", "value": 2, "slug": "selishchen-dol" }, { "key": "\u0421\u0435\u043B\u0446\u0435", "value": 4, "slug": "selce" }, { "key": "\u0421\u0435\u043B\u0446\u0438", "value": 18, "slug": "selci" }, { "key": "\u0421\u0435\u043B\u0447\u0430", "value": 19, "slug": "selcha" }, { "key": "\u0421\u0435\u043B\u044F\u043D\u0438\u043D", "value": 5, "slug": "selyanin" }, { "key": "\u0421\u0435\u043C\u0435\u0440\u0434\u0436\u0438\u0435\u0432\u043E", "value": 38, "slug": "semerdzhievo" }, { "key": "\u0421\u0435\u043C\u0435\u0440\u0446\u0438", "value": 1, "slug": "semerci" }, { "key": "\u0421\u0435\u043C\u0447\u0438\u043D\u043E\u0432\u043E", "value": 45, "slug": "semchinovo" }, { "key": "\u0421\u0435\u043D\u043D\u0438\u043A", "value": 25, "slug": "sennik" }, { "key": "\u0421\u0435\u043D\u043E\u0432\u043E", "value": 34, "slug": "senovo" }, { "key": "\u0421\u0435\u043D\u043E\u043A\u043B\u0430\u0441", "value": 1, "slug": "senoklas" }, { "key": "\u0421\u0435\u043D\u043E\u043A\u043E\u0441", "value": 34, "slug": "senokos" }, { "key": "\u0421\u0435\u043F\u0442\u0435\u043C\u0432\u0440\u0438", "value": 488, "slug": "septemvri" }, { "key": "\u0421\u0435\u043F\u0442\u0435\u043C\u0432\u0440\u0438\u0439\u0446\u0438", "value": 46, "slug": "septemvriyci" }, { "key": "\u0421\u0435\u0441\u043B\u0430\u0432", "value": 36, "slug": "seslav" }, { "key": "\u0421\u0435\u0441\u0442\u0440\u0438\u043C\u043E", "value": 45, "slug": "sestrimo" }, { "key": "\u0421\u0435\u0441\u0442\u0440\u0438\u043D\u0441\u043A\u043E", "value": 2, "slug": "sestrinsko" }, { "key": "\u0421\u0435\u0447\u0438\u0449\u0435", "value": 3, "slug": "sechishche" }, { "key": "\u0421\u0438\u0432\u0430 \u0440\u0435\u043A\u0430", "value": 5, "slug": "siva-reka" }, { "key": "\u0421\u0438\u0432\u0438\u043D\u043E", "value": 3, "slug": "sivino" }, { "key": "\u0421\u0438\u0433\u043C\u0435\u043D", "value": 8, "slug": "sigmen" }, { "key": "\u0421\u0438\u043B\u0435\u043D", "value": 8, "slug": "silen" }, { "key": "\u0421\u0438\u043B\u0438\u0441\u0442\u0440\u0430", "value": 3289, "slug": "silistra" }, { "key": "\u0421\u0438\u043C\u0435\u043E\u043D\u043E\u0432\u0433\u0440\u0430\u0434", "value": 307, "slug": "simeonovgrad" }, { "key": "\u0421\u0438\u043C\u0435\u043E\u043D\u043E\u0432\u0435\u0446", "value": 41, "slug": "simeonovec" }, { "key": "\u0421\u0438\u043C\u0435\u043E\u043D\u043E\u0432\u043E", "value": 19, "slug": "simeonovo" }, { "key": "\u0421\u0438\u043C\u0438\u0442\u043B\u0438", "value": 469, "slug": "simitli" }, { "key": "\u0421\u0438\u043D\u0430\u0433\u043E\u0432\u0446\u0438", "value": 19, "slug": "sinagovci" }, { "key": "\u0421\u0438\u043D\u0430\u043F\u043E\u0432\u043E", "value": 18, "slug": "sinapovo" }, { "key": "\u0421\u0438\u043D\u0434\u0435\u043B", "value": 18, "slug": "sindel" }, { "key": "\u0421\u0438\u043D\u0434\u0435\u043B\u0446\u0438", "value": 8, "slug": "sindelci" }, { "key": "\u0421\u0438\u043D\u0435\u043C\u043E\u0440\u0435\u0446", "value": 61, "slug": "sinemorec" }, { "key": "\u0421\u0438\u043D\u0438 \u0432\u0438\u0440", "value": 5, "slug": "sini-vir" }, { "key": "\u0421\u0438\u043D\u0438 \u0440\u0438\u0434", "value": 22, "slug": "sini-rid" }, { "key": "\u0421\u0438\u043D\u0438\u0442\u043E\u0432\u043E", "value": 83, "slug": "sinitovo" }, { "key": "\u0421\u0438\u043D\u0447\u0435\u0446", "value": 2, "slug": "sinchec" }, { "key": "\u0421\u0438\u043D\u044C\u043E \u0431\u044A\u0440\u0434\u043E", "value": 6, "slug": "sino-brdo" }, { "key": "\u0421\u0438\u043D\u044F \u0432\u043E\u0434\u0430", "value": 19, "slug": "sinya-voda" }, { "key": "\u0421\u0438\u043F\u0435\u0439", "value": 30, "slug": "sipey" }, { "key": "\u0421\u0438\u0440\u0430\u043A\u043E\u0432\u043E", "value": 24, "slug": "sirakovo" }, { "key": "\u0421\u0438\u0440\u0438\u0449\u043D\u0438\u043A", "value": 11, "slug": "sirishchnik" }, { "key": "\u0421\u0438\u0442\u043E\u0432\u043E", "value": 58, "slug": "sitovo" }, { "key": "\u0421\u043A\u0430\u043B\u0430", "value": 8, "slug": "skala" }, { "key": "\u0421\u043A\u0430\u043B\u0430\u043A", "value": 32, "slug": "skalak" }, { "key": "\u0421\u043A\u0430\u043B\u0438\u043D\u0430", "value": 1, "slug": "skalina" }, { "key": "\u0421\u043A\u0430\u043B\u0438\u0446\u0430", "value": 27, "slug": "skalica" }, { "key": "\u0421\u043A\u0430\u043B\u0438\u0449\u0435", "value": 9, "slug": "skalishche" }, { "key": "\u0421\u043A\u0430\u043B\u043D\u0430 \u0433\u043B\u0430\u0432\u0430", "value": 5, "slug": "skalna-glava" }, { "key": "\u0421\u043A\u0430\u043B\u0441\u043A\u043E", "value": 12, "slug": "skalsko" }, { "key": "\u0421\u043A\u0430\u043D\u0434\u0430\u043B\u043E\u0442\u043E", "value": 4, "slug": "skandaloto" }, { "key": "\u0421\u043A\u043B\u0430\u0432\u0435", "value": 59, "slug": "sklave" }, { "key": "\u0421\u043A\u043E\u0431\u0435\u043B\u0435\u0432\u043E", "value": 70, "slug": "skobelevo" }, { "key": "\u0421\u043A\u0440\u0430\u0432\u0435\u043D\u0430", "value": 68, "slug": "skravena" }, { "key": "\u0421\u043A\u0440\u0435\u0431\u0430\u0442\u043D\u043E", "value": 14, "slug": "skrebatno" }, { "key": "\u0421\u043A\u0440\u0438\u043D\u043E", "value": 2, "slug": "skrino" }, { "key": "\u0421\u043A\u0440\u0438\u043D\u044F\u043D\u043E", "value": 7, "slug": "skrinyano" }, { "key": "\u0421\u043A\u0440\u044A\u0442", "value": 45, "slug": "skrt" }, { "key": "\u0421\u043A\u0443\u0442\u0430\u0440\u0435", "value": 144, "slug": "skutare" }, { "key": "\u0421\u043A\u044A\u0440\u0431\u0438\u043D\u043E", "value": 6, "slug": "skrbino" }, { "key": "\u0421\u043B\u0430\u0432\u0435\u0435\u0432\u043E", "value": 18, "slug": "slaveevo" }, { "key": "\u0421\u043B\u0430\u0432\u0435\u0439\u043A\u043E\u0432\u043E", "value": 18, "slug": "slaveykovo" }, { "key": "\u0421\u043B\u0430\u0432\u0435\u0439\u043D\u043E", "value": 10, "slug": "slaveyno" }, { "key": "\u0421\u043B\u0430\u0432\u043E\u0432\u0438\u0446\u0430", "value": 24, "slug": "slavovica" }, { "key": "\u0421\u043B\u0430\u0432\u043E\u0442\u0438\u043D", "value": 3, "slug": "slavotin" }, { "key": "\u0421\u043B\u0430\u0432\u0449\u0438\u0446\u0430", "value": 5, "slug": "slavshchica" }, { "key": "\u0421\u043B\u0430\u0432\u044F\u043D\u0438", "value": 15, "slug": "slavyani" }, { "key": "\u0421\u043B\u0430\u0432\u044F\u043D\u0438\u043D", "value": 2, "slug": "slavyanin" }, { "key": "\u0421\u043B\u0430\u0432\u044F\u043D\u043E\u0432\u043E", "value": 179, "slug": "slavyanovo" }, { "key": "\u0421\u043B\u0430\u0432\u044F\u043D\u0446\u0438", "value": 39, "slug": "slavyanci" }, { "key": "\u0421\u043B\u0430\u0434\u043A\u0430 \u0432\u043E\u0434\u0430", "value": 2, "slug": "sladka-voda" }, { "key": "\u0421\u043B\u0430\u0434\u0443\u043D", "value": 5, "slug": "sladun" }, { "key": "\u0421\u043B\u0430\u0434\u044A\u043A \u043A\u043B\u0430\u0434\u0435\u043D\u0435\u0446", "value": 1, "slug": "sladk-kladenec" }, { "key": "\u0421\u043B\u0430\u043A\u043E\u0432\u0446\u0438", "value": 9, "slug": "slakovci" }, { "key": "\u0421\u043B\u0430\u043C\u0438\u043D\u043E", "value": 7, "slug": "slamino" }, { "key": "\u0421\u043B\u0430\u043D\u0430 \u0431\u0430\u0440\u0430", "value": 13, "slug": "slana-bara" }, { "key": "\u0421\u043B\u0430\u043D\u043E\u0442\u0440\u044A\u043D", "value": 20, "slug": "slanotrn" }, { "key": "\u0421\u043B\u0430\u0442\u0438\u043D\u0430", "value": 53, "slug": "slatina" }, { "key": "\u0421\u043B\u0430\u0442\u0438\u043D\u043E", "value": 16, "slug": "slatino" }, { "key": "\u0421\u043B\u0430\u0449\u0435\u043D", "value": 68, "slug": "slashchen" }, { "key": "\u0421\u043B\u0438\u0432\u0430\u043A", "value": 6, "slug": "slivak" }, { "key": "\u0421\u043B\u0438\u0432\u0430\u0440\u043A\u0430", "value": 9, "slug": "slivarka" }, { "key": "\u0421\u043B\u0438\u0432\u0430\u0440\u043E\u0432\u043E", "value": 3, "slug": "slivarovo" }, { "key": "\u0421\u043B\u0438\u0432\u0430\u0442\u0430", "value": 1, "slug": "slivata" }, { "key": "\u0421\u043B\u0438\u0432\u0435\u043A", "value": 6, "slug": "slivek" }, { "key": "\u0421\u043B\u0438\u0432\u0435\u043D", "value": 8240, "slug": "sliven" }, { "key": "\u0421\u043B\u0438\u0432\u0435\u043D\u0446\u0438", "value": 4, "slug": "slivenci" }, { "key": "\u0421\u043B\u0438\u0432\u0438\u0442\u043E", "value": 2, "slug": "slivito" }, { "key": "\u0421\u043B\u0438\u0432\u043A\u0430", "value": 1, "slug": "slivka" }, { "key": "\u0421\u043B\u0438\u0432\u043D\u0438\u0446\u0430", "value": 664, "slug": "slivnica" }, { "key": "\u0421\u043B\u0438\u0432\u043E \u043F\u043E\u043B\u0435", "value": 127, "slug": "slivo-pole" }, { "key": "\u0421\u043B\u0438\u0432\u043E\u0432\u0438\u043A", "value": 5, "slug": "slivovik" }, { "key": "\u0421\u043B\u0438\u0432\u043E\u0432\u0438\u0446\u0430", "value": 1, "slug": "slivovica" }, { "key": "\u0421\u043B\u0438\u0432\u043E\u0432\u043E", "value": 2, "slug": "slivovo" }, { "key": "\u0421\u043B\u0438\u0448\u043E\u0432\u0446\u0438", "value": 1, "slug": "slishovci" }, { "key": "\u0421\u043B\u043E\u043A\u043E\u0449\u0438\u0446\u0430", "value": 58, "slug": "slokoshchica" }, { "key": "\u0421\u043B\u043E\u043C\u0435\u0440", "value": 7, "slug": "slomer" }, { "key": "\u0421\u043B\u044A\u043D\u0447\u0435\u0432\u043E", "value": 43, "slug": "slnchevo" }, { "key": "\u0421\u043B\u044A\u043D\u0447\u043E\u0433\u043B\u0435\u0434", "value": 17, "slug": "slnchogled" }, { "key": "\u0421\u043C\u0438\u043B\u0435\u0446", "value": 15, "slug": "smilec" }, { "key": "\u0421\u043C\u0438\u043B\u044F\u043D", "value": 108, "slug": "smilyan" }, { "key": "\u0421\u043C\u0438\u043D", "value": 3, "slug": "smin" }, { "key": "\u0421\u043C\u0438\u0440\u043D\u0435\u043D\u0441\u043A\u0438", "value": 112, "slug": "smirnenski" }, { "key": "\u0421\u043C\u0438\u0440\u043E\u0432 \u0434\u043E\u043B", "value": 7, "slug": "smirov-dol" }, { "key": "\u0421\u043C\u043E\u043B\u0435\u0432\u043E", "value": 8, "slug": "smolevo" }, { "key": "\u0421\u043C\u043E\u043B\u0438\u0447\u0430\u043D\u043E", "value": 4, "slug": "smolichano" }, { "key": "\u0421\u043C\u043E\u043B\u043D\u0438\u043A", "value": 2, "slug": "smolnik" }, { "key": "\u0421\u043C\u043E\u043B\u043D\u0438\u0446\u0430", "value": 14, "slug": "smolnica" }, { "key": "\u0421\u043C\u043E\u043B\u0441\u043A\u043E", "value": 6, "slug": "smolsko" }, { "key": "\u0421\u043C\u043E\u043B\u044F\u043D", "value": 3349, "slug": "smolyan" }, { "key": "\u0421\u043C\u043E\u043B\u044F\u043D\u043E\u0432\u0446\u0438", "value": 21, "slug": "smolyanovci" }, { "key": "\u0421\u043C\u043E\u0447\u0430\u043D", "value": 15, "slug": "smochan" }, { "key": "\u0421\u043C\u043E\u0447\u0435\u0432\u043E", "value": 2, "slug": "smochevo" }, { "key": "\u0421\u043C\u044F\u0434\u043E\u0432\u043E", "value": 183, "slug": "smyadovo" }, { "key": "\u0421\u043D\u0435\u0436\u0430", "value": 6, "slug": "snezha" }, { "key": "\u0421\u043D\u0435\u0436\u0438\u043D\u0430", "value": 11, "slug": "snezhina" }, { "key": "\u0421\u043D\u043E\u043F", "value": 11, "slug": "snop" }, { "key": "\u0421\u043D\u044F\u0433\u043E\u0432\u043E", "value": 42, "slug": "snyagovo" }, { "key": "\u0421\u043E\u0432\u0430\u0442\u0430", "value": 6, "slug": "sovata" }, { "key": "\u0421\u043E\u0432\u043E\u043B\u044F\u043D\u043E", "value": 25, "slug": "sovolyano" }, { "key": "\u0421\u043E\u0437\u043E\u043F\u043E\u043B", "value": 979, "slug": "sozopol" }, { "key": "\u0421\u043E\u043A\u043E\u043B", "value": 16, "slug": "sokol" }, { "key": "\u0421\u043E\u043A\u043E\u043B\u0430\u0440\u0435", "value": 12, "slug": "sokolare" }, { "key": "\u0421\u043E\u043A\u043E\u043B\u0430\u0440\u0446\u0438", "value": 11, "slug": "sokolarci" }, { "key": "\u0421\u043E\u043A\u043E\u043B\u0435\u0446", "value": 3, "slug": "sokolec" }, { "key": "\u0421\u043E\u043A\u043E\u043B\u0438\u043D\u043E", "value": 15, "slug": "sokolino" }, { "key": "\u0421\u043E\u043A\u043E\u043B\u0438\u0446\u0430", "value": 19, "slug": "sokolica" }, { "key": "\u0421\u043E\u043A\u043E\u043B\u043E\u0432\u043E", "value": 96, "slug": "sokolovo" }, { "key": "\u0421\u043E\u043A\u043E\u043B\u043E\u0432\u0446\u0438", "value": 10, "slug": "sokolovci" }, { "key": "\u0421\u043E\u043A\u043E\u043B\u044F\u043D\u0435", "value": 8, "slug": "sokolyane" }, { "key": "\u0421\u043E\u043B\u0438\u0449\u0430", "value": 2, "slug": "solishcha" }, { "key": "\u0421\u043E\u043B\u0438\u0449\u0435", "value": 11, "slug": "solishche" }, { "key": "\u0421\u043E\u043B\u043D\u0438\u043A", "value": 12, "slug": "solnik" }, { "key": "\u0421\u043E\u043C\u043E\u0432\u0438\u0442", "value": 12, "slug": "somovit" }, { "key": "\u0421\u043E\u043F\u0438\u0446\u0430", "value": 3, "slug": "sopica" }, { "key": "\u0421\u043E\u043F\u043E\u0442", "value": 573, "slug": "sopot" }, { "key": "\u0421\u043E\u043F\u043E\u0442\u043E\u0442", "value": 11, "slug": "sopotot" }, { "key": "\u0421\u043E\u0442\u0438\u0440\u044F", "value": 45, "slug": "sotirya" }, { "key": "\u0421\u043E\u0444\u0438\u0439\u0446\u0438", "value": 2, "slug": "sofiyci" }, { "key": "\u0421\u043E\u0444\u0438\u044F", "value": 192809, "slug": "sofiya" }, { "key": "\u0421\u043E\u0444\u0440\u043E\u043D\u0438\u0435\u0432\u043E", "value": 29, "slug": "sofronievo" }, { "key": "\u0421\u043F\u0430\u043D\u0447\u0435\u0432\u0446\u0438", "value": 9, "slug": "spanchevci" }, { "key": "\u0421\u043F\u0430\u0441\u043E\u0432\u043E", "value": 48, "slug": "spasovo" }, { "key": "\u0421\u043F\u0430\u0442\u043E\u0432\u043E", "value": 4, "slug": "spatovo" }, { "key": "\u0421\u043F\u0430\u0445\u0438\u0435\u0432\u043E", "value": 8, "slug": "spahievo" }, { "key": "\u0421\u0440\u0430\u0446\u0438\u043C\u0438\u0440", "value": 9, "slug": "sracimir" }, { "key": "\u0421\u0440\u0430\u0446\u0438\u043C\u0438\u0440\u043E\u0432\u043E", "value": 1, "slug": "sracimirovo" }, { "key": "\u0421\u0440\u0435\u0431\u044A\u0440\u043D\u0430", "value": 16, "slug": "srebrna" }, { "key": "\u0421\u0440\u0435\u0434\u0435\u0446", "value": 588, "slug": "sredec" }, { "key": "\u0421\u0440\u0435\u0434\u0438\u043D\u0430", "value": 3, "slug": "sredina" }, { "key": "\u0421\u0440\u0435\u0434\u0438\u043D\u043A\u0430", "value": 9, "slug": "sredinka" }, { "key": "\u0421\u0440\u0435\u0434\u0438\u0449\u0435", "value": 34, "slug": "sredishche" }, { "key": "\u0421\u0440\u0435\u0434\u043A\u043E\u0432\u0435\u0446", "value": 13, "slug": "sredkovec" }, { "key": "\u0421\u0440\u0435\u0434\u043D\u0430 \u043C\u0430\u0445\u0430\u043B\u0430", "value": 5, "slug": "sredna-mahala" }, { "key": "\u0421\u0440\u0435\u0434\u043D\u0435\u0432\u043E", "value": 6, "slug": "srednevo" }, { "key": "\u0421\u0440\u0435\u0434\u043D\u0438 \u043A\u043E\u043B\u0438\u0431\u0438", "value": 11, "slug": "sredni-kolibi" }, { "key": "\u0421\u0440\u0435\u0434\u043D\u043E \u0433\u0440\u0430\u0434\u0438\u0449\u0435", "value": 14, "slug": "sredno-gradishche" }, { "key": "\u0421\u0440\u0435\u0434\u043D\u043E \u0441\u0435\u043B\u043E", "value": 7, "slug": "sredno-selo" }, { "key": "\u0421\u0440\u0435\u0434\u043D\u043E\u0433\u043E\u0440\u043E\u0432\u043E", "value": 11, "slug": "srednogorovo" }, { "key": "\u0421\u0440\u0435\u0434\u043D\u043E\u0433\u043E\u0440\u0446\u0438", "value": 48, "slug": "srednogorci" }, { "key": "\u0421\u0440\u0435\u0434\u043D\u044F", "value": 10, "slug": "srednya" }, { "key": "\u0421\u0440\u0435\u0434\u043E\u0433\u0440\u0438\u0432", "value": 2, "slug": "sredogriv" }, { "key": "\u0421\u0440\u0435\u0434\u043E\u0440\u0435\u043A", "value": 4, "slug": "sredorek" }, { "key": "\u0421\u0440\u0435\u0434\u043E\u0441\u0435\u043B\u0446\u0438", "value": 11, "slug": "sredoselci" }, { "key": "\u0421\u0440\u0435\u0434\u0441\u043A\u043E", "value": 3, "slug": "sredsko" }, { "key": "\u0421\u0440\u0435\u043C", "value": 26, "slug": "srem" }, { "key": "\u0421\u0440\u044A\u043D\u0441\u043A\u043E", "value": 3, "slug": "srnsko" }, { "key": "\u0421\u0442\u0430\u0432\u0435\u0440\u0446\u0438", "value": 42, "slug": "staverci" }, { "key": "\u0421\u0442\u0430\u0435\u0432\u0446\u0438", "value": 1, "slug": "staevci" }, { "key": "\u0421\u0442\u0430\u043A\u0435\u0432\u0446\u0438", "value": 6, "slug": "stakevci" }, { "key": "\u0421\u0442\u0430\u043B\u0435\u0432\u043E", "value": 9, "slug": "stalevo" }, { "key": "\u0421\u0442\u0430\u043B\u0438\u0439\u0441\u043A\u0430 \u043C\u0430\u0445\u0430\u043B\u0430", "value": 26, "slug": "staliyska-mahala" }, { "key": "\u0421\u0442\u0430\u043C\u0431\u043E\u043B\u0438\u0439\u0441\u043A\u0438", "value": 700, "slug": "stamboliyski" }, { "key": "\u0421\u0442\u0430\u043C\u0431\u043E\u043B\u043E\u0432\u043E", "value": 134, "slug": "stambolovo" }, { "key": "\u0421\u0442\u0430\u043D", "value": 19, "slug": "stan" }, { "key": "\u0421\u0442\u0430\u043D\u0435\u0432\u043E", "value": 4, "slug": "stanevo" }, { "key": "\u0421\u0442\u0430\u043D\u0435\u0446", "value": 5, "slug": "stanec" }, { "key": "\u0421\u0442\u0430\u043D\u0438\u043D\u0446\u0438", "value": 1, "slug": "staninci" }, { "key": "\u0421\u0442\u0430\u043D\u043E\u0432\u0435\u0446", "value": 2, "slug": "stanovec" }, { "key": "\u0421\u0442\u0430\u043D\u0447\u043E\u0432 \u0445\u0430\u043D", "value": 1, "slug": "stanchov-han" }, { "key": "\u0421\u0442\u0430\u043D\u044C\u043E\u0432\u0446\u0438", "value": 1, "slug": "stanovci" }, { "key": "\u0421\u0442\u0430\u043D\u044F\u043D\u0446\u0438", "value": 11, "slug": "stanyanci" }, { "key": "\u0421\u0442\u0430\u0440\u0430 \u0417\u0430\u0433\u043E\u0440\u0430", "value": 15025, "slug": "stara-zagora" }, { "key": "\u0421\u0442\u0430\u0440\u0430 \u041A\u0440\u0435\u0441\u043D\u0430", "value": 2, "slug": "stara-kresna" }, { "key": "\u0421\u0442\u0430\u0440\u0430 \u0440\u0435\u043A\u0430", "value": 37, "slug": "stara-reka" }, { "key": "\u0421\u0442\u0430\u0440\u0430 \u0440\u0435\u0447\u043A\u0430", "value": 5, "slug": "stara-rechka" }, { "key": "\u0421\u0442\u0430\u0440\u0438 \u0447\u0430\u043B", "value": 1, "slug": "stari-chal" }, { "key": "\u0421\u0442\u0430\u0440\u043E \u0416\u0435\u043B\u0435\u0437\u0430\u0440\u0435", "value": 18, "slug": "staro-zhelezare" }, { "key": "\u0421\u0442\u0430\u0440\u043E \u041E\u0440\u044F\u0445\u043E\u0432\u043E", "value": 95, "slug": "staro-oryahovo" }, { "key": "\u0421\u0442\u0430\u0440\u043E \u0441\u0435\u043B\u0438\u0449\u0435", "value": 5, "slug": "staro-selishche" }, { "key": "\u0421\u0442\u0430\u0440\u043E \u0441\u0435\u043B\u043E", "value": 44, "slug": "staro-selo" }, { "key": "\u0421\u0442\u0430\u0440\u043E\u0432\u043E", "value": 2, "slug": "starovo" }, { "key": "\u0421\u0442\u0430\u0440\u043E\u0437\u0430\u0433\u043E\u0440\u0441\u043A\u0438 \u0431\u0430\u043D\u0438", "value": 20, "slug": "starozagorski-bani" }, { "key": "\u0421\u0442\u0430\u0440\u043E\u043F\u0430\u0442\u0438\u0446\u0430", "value": 8, "slug": "staropatica" }, { "key": "\u0421\u0442\u0430\u0440\u043E\u0441\u0435\u043B", "value": 28, "slug": "starosel" }, { "key": "\u0421\u0442\u0430\u0440\u043E\u0441\u0435\u043B\u0435\u0446", "value": 3, "slug": "staroselec" }, { "key": "\u0421\u0442\u0430\u0440\u043E\u0441\u0435\u043B\u0446\u0438", "value": 25, "slug": "staroselci" }, { "key": "\u0421\u0442\u0430\u0440\u0446\u0435\u0432\u043E", "value": 111, "slug": "starcevo" }, { "key": "\u0421\u0442\u0430\u0440\u0447\u0435\u0432\u043E", "value": 26, "slug": "starchevo" }, { "key": "\u0421\u0442\u0430\u0440\u0447\u0438\u0449\u0435", "value": 3, "slug": "starchishche" }, { "key": "\u0421\u0442\u0435\u0432\u0440\u0435\u043A", "value": 1, "slug": "stevrek" }, { "key": "\u0421\u0442\u0435\u0436\u0435\u0440\u043E\u0432\u043E", "value": 17, "slug": "stezherovo" }, { "key": "\u0421\u0442\u0435\u043D\u0441\u043A\u043E", "value": 1, "slug": "stensko" }, { "key": "\u0421\u0442\u0435\u0444\u0430\u043D \u041A\u0430\u0440\u0430\u0434\u0436\u0430", "value": 92, "slug": "stefan-karadzha" }, { "key": "\u0421\u0442\u0435\u0444\u0430\u043D \u041A\u0430\u0440\u0430\u0434\u0436\u043E\u0432\u043E", "value": 23, "slug": "stefan-karadzhovo" }, { "key": "\u0421\u0442\u0435\u0444\u0430\u043D \u0421\u0442\u0430\u043C\u0431\u043E\u043B\u043E\u0432\u043E", "value": 13, "slug": "stefan-stambolovo" }, { "key": "\u0421\u0442\u0435\u0444\u0430\u043D\u043E\u0432\u043E", "value": 63, "slug": "stefanovo" }, { "key": "\u0421\u0442\u043E\u0431", "value": 11, "slug": "stob" }, { "key": "\u0421\u0442\u043E\u0435\u0432\u043E", "value": 18, "slug": "stoevo" }, { "key": "\u0421\u0442\u043E\u0435\u0432\u0446\u0438", "value": 2, "slug": "stoevci" }, { "key": "\u0421\u0442\u043E\u0436\u0430", "value": 1, "slug": "stozha" }, { "key": "\u0421\u0442\u043E\u0436\u0435\u0440", "value": 62, "slug": "stozher" }, { "key": "\u0421\u0442\u043E\u0438\u043B \u0432\u043E\u0439\u0432\u043E\u0434\u0430", "value": 28, "slug": "stoil-voyvoda" }, { "key": "\u0421\u0442\u043E\u0438\u043B\u043E\u0432\u043E", "value": 8, "slug": "stoilovo" }, { "key": "\u0421\u0442\u043E\u0439\u043A\u0438\u0442\u0435", "value": 30, "slug": "stoykite" }, { "key": "\u0421\u0442\u043E\u0439\u043A\u043E\u0432\u043E", "value": 3, "slug": "stoykovo" }, { "key": "\u0421\u0442\u043E\u0439\u043D\u043E\u0432\u043E", "value": 1, "slug": "stoynovo" }, { "key": "\u0421\u0442\u043E\u0439\u0447\u043E\u0432\u0446\u0438", "value": 3, "slug": "stoychovci" }, { "key": "\u0421\u0442\u043E\u043A\u0438\u0442\u0435", "value": 11, "slug": "stokite" }, { "key": "\u0421\u0442\u043E\u043B\u0435\u0442\u043E\u0432\u043E", "value": 22, "slug": "stoletovo" }, { "key": "\u0421\u0442\u043E\u043B\u043D\u0438\u043A", "value": 23, "slug": "stolnik" }, { "key": "\u0421\u0442\u043E\u043B\u044A\u0442", "value": 9, "slug": "stolt" }, { "key": "\u0421\u0442\u043E\u043C\u0430\u043D\u0435\u0432\u043E", "value": 5, "slug": "stomanevo" }, { "key": "\u0421\u0442\u043E\u043C\u0430\u043D\u0435\u0446\u0438\u0442\u0435", "value": 2, "slug": "stomanecite" }, { "key": "\u0421\u0442\u043E\u043C\u0430\u043D\u0446\u0438", "value": 4, "slug": "stomanci" }, { "key": "\u0421\u0442\u043E\u044F\u043D \u041C\u0438\u0445\u0430\u0439\u043B\u043E\u0432\u0441\u043A\u0438", "value": 19, "slug": "stoyan-mihaylovski" }, { "key": "\u0421\u0442\u043E\u044F\u043D-\u0417\u0430\u0438\u043C\u043E\u0432\u043E", "value": 1, "slug": "stoyan-zaimovo" }, { "key": "\u0421\u0442\u043E\u044F\u043D\u043E\u0432\u0446\u0438", "value": 1, "slug": "stoyanovci" }, { "key": "\u0421\u0442\u0440\u0430\u0436\u0430", "value": 43, "slug": "strazha" }, { "key": "\u0421\u0442\u0440\u0430\u0436\u0435\u0432\u0446\u0438", "value": 1, "slug": "strazhevci" }, { "key": "\u0421\u0442\u0440\u0430\u0436\u0435\u0446", "value": 85, "slug": "strazhec" }, { "key": "\u0421\u0442\u0440\u0430\u0436\u0438\u0446\u0430", "value": 265, "slug": "strazhica" }, { "key": "\u0421\u0442\u0440\u0430\u0436\u043D\u0438\u0446\u0430", "value": 4, "slug": "strazhnica" }, { "key": "\u0421\u0442\u0440\u0430\u043B\u0434\u0436\u0430", "value": 302, "slug": "straldzha" }, { "key": "\u0421\u0442\u0440\u0430\u043D\u0434\u0436\u0430", "value": 3, "slug": "strandzha" }, { "key": "\u0421\u0442\u0440\u0430\u043D\u0434\u0436\u0435\u0432\u043E", "value": 5, "slug": "strandzhevo" }, { "key": "\u0421\u0442\u0440\u0430\u043D\u0441\u043A\u043E", "value": 12, "slug": "stransko" }, { "key": "\u0421\u0442\u0440\u0430\u0445\u0438\u043B", "value": 1, "slug": "strahil" }, { "key": "\u0421\u0442\u0440\u0430\u0445\u0438\u043B \u0432\u043E\u0439\u0432\u043E\u0434\u0430", "value": 3, "slug": "strahil-voyvoda" }, { "key": "\u0421\u0442\u0440\u0430\u0445\u0438\u043B\u0438\u0446\u0430", "value": 2, "slug": "strahilica" }, { "key": "\u0421\u0442\u0440\u0430\u0445\u0438\u043B\u043E\u0432\u043E", "value": 58, "slug": "strahilovo" }, { "key": "\u0421\u0442\u0440\u0430\u0446\u0438\u043D", "value": 41, "slug": "stracin" }, { "key": "\u0421\u0442\u0440\u0430\u0448\u0438\u043C\u0438\u0440", "value": 1, "slug": "strashimir" }, { "key": "\u0421\u0442\u0440\u0430\u0448\u0438\u043C\u0438\u0440\u043E\u0432\u043E", "value": 34, "slug": "strashimirovo" }, { "key": "\u0421\u0442\u0440\u0435\u043B\u0435\u0446", "value": 13, "slug": "strelec" }, { "key": "\u0421\u0442\u0440\u0435\u043B\u0446\u0438", "value": 37, "slug": "strelci" }, { "key": "\u0421\u0442\u0440\u0435\u043B\u0447\u0430", "value": 213, "slug": "strelcha" }, { "key": "\u0421\u0442\u0440\u0435\u043C\u043E\u0432\u043E", "value": 6, "slug": "stremovo" }, { "key": "\u0421\u0442\u0440\u0435\u043C\u0446\u0438", "value": 34, "slug": "stremci" }, { "key": "\u0421\u0442\u0440\u0438\u0436\u0431\u0430", "value": 3, "slug": "strizhba" }, { "key": "\u0421\u0442\u0440\u043E\u0435\u0432\u043E", "value": 109, "slug": "stroevo" }, { "key": "\u0421\u0442\u0440\u0443\u0438\u043D\u043E", "value": 8, "slug": "struino" }, { "key": "\u0421\u0442\u0440\u0443\u043C\u0430", "value": 20, "slug": "struma" }, { "key": "\u0421\u0442\u0440\u0443\u043C\u0435\u0448\u043D\u0438\u0446\u0430", "value": 15, "slug": "strumeshnica" }, { "key": "\u0421\u0442\u0440\u0443\u043C\u044F\u043D\u0438", "value": 90, "slug": "strumyani" }, { "key": "\u0421\u0442\u0440\u0443\u043F\u0435\u0446", "value": 6, "slug": "strupec" }, { "key": "\u0421\u0442\u0440\u0443\u044F", "value": 29, "slug": "struya" }, { "key": "\u0421\u0442\u0440\u044F\u043C\u0430", "value": 146, "slug": "stryama" }, { "key": "\u0421\u0442\u0443\u0431\u0435\u043B", "value": 19, "slug": "stubel" }, { "key": "\u0421\u0442\u0443\u0434\u0435\u043D \u0438\u0437\u0432\u043E\u0440", "value": 2, "slug": "studen-izvor" }, { "key": "\u0421\u0442\u0443\u0434\u0435\u043D\u0430", "value": 126, "slug": "studena" }, { "key": "\u0421\u0442\u0443\u0434\u0435\u043D\u0435\u0446", "value": 12, "slug": "studenec" }, { "key": "\u0421\u0442\u0443\u0434\u0435\u043D\u0438\u0446\u0430", "value": 7, "slug": "studenica" }, { "key": "\u0421\u0442\u0443\u0434\u0435\u043D\u043E \u0431\u0443\u0447\u0435", "value": 19, "slug": "studeno-buche" }, { "key": "\u0421\u0442\u044A\u0440\u0433\u0435\u043B", "value": 25, "slug": "strgel" }, { "key": "\u0421\u0442\u044A\u0440\u043C\u0435\u043D", "value": 5, "slug": "strmen" }, { "key": "\u0421\u0442\u044A\u0440\u043D\u0438\u0446\u0430", "value": 17, "slug": "strnica" }, { "key": "\u0421\u0443\u0432\u043E\u0440\u043E\u0432\u043E", "value": 229, "slug": "suvorovo" }, { "key": "\u0421\u0443\u0433\u0430\u0440\u0435\u0432\u043E", "value": 3, "slug": "sugarevo" }, { "key": "\u0421\u0443\u043B\u0438\u0446\u0430", "value": 5, "slug": "sulica" }, { "key": "\u0421\u0443\u043C\u0435\u0440", "value": 2, "slug": "sumer" }, { "key": "\u0421\u0443\u043D\u0433\u0443\u0440\u043B\u0430\u0440\u0435", "value": 219, "slug": "sungurlare" }, { "key": "\u0421\u0443\u0441\u0430\u043C", "value": 26, "slug": "susam" }, { "key": "\u0421\u0443\u0445\u0430 \u0440\u0435\u043A\u0430", "value": 10, "slug": "suha-reka" }, { "key": "\u0421\u0443\u0445\u0430\u0447\u0435", "value": 18, "slug": "suhache" }, { "key": "\u0421\u0443\u0445\u0438\u043D\u0434\u043E\u043B", "value": 114, "slug": "suhindol" }, { "key": "\u0421\u0443\u0445\u043E\u0432\u043E", "value": 2, "slug": "suhovo" }, { "key": "\u0421\u0443\u0445\u043E\u0434\u043E\u043B", "value": 36, "slug": "suhodol" }, { "key": "\u0421\u0443\u0445\u043E\u0437\u0435\u043C", "value": 9, "slug": "suhozem" }, { "key": "\u0421\u0443\u0448\u0435\u0432\u043E", "value": 21, "slug": "sushevo" }, { "key": "\u0421\u0443\u0448\u0438\u043D\u0430", "value": 4, "slug": "sushina" }, { "key": "\u0421\u0443\u0448\u0438\u0446\u0430", "value": 28, "slug": "sushica" }, { "key": "\u0421\u044A\u0431\u043E\u0442\u043A\u043E\u0432\u0446\u0438", "value": 2, "slug": "sbotkovci" }, { "key": "\u0421\u044A\u0431\u0440\u0430\u043D\u043E", "value": 10, "slug": "sbrano" }, { "key": "\u0421\u044A\u0434\u0438\u0435\u0432\u043E", "value": 36, "slug": "sdievo" }, { "key": "\u0421\u044A\u0434\u0438\u0439\u0441\u043A\u043E \u043F\u043E\u043B\u0435", "value": 3, "slug": "sdiysko-pole" }, { "key": "\u0421\u044A\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435", "value": 315, "slug": "sedinenie" }, { "key": "\u0421\u044A\u0440\u043D\u0435\u0432\u0435\u0446", "value": 9, "slug": "srnevec" }, { "key": "\u0421\u044A\u0440\u043D\u0435\u0432\u043E", "value": 78, "slug": "srnevo" }, { "key": "\u0421\u044A\u0440\u043D\u0435\u0433\u043E\u0440", "value": 8, "slug": "srnegor" }, { "key": "\u0421\u044A\u0440\u043D\u0435\u0446", "value": 5, "slug": "srnec" }, { "key": "\u0421\u044A\u0440\u043D\u0438\u043D\u043E", "value": 12, "slug": "srnino" }, { "key": "\u0421\u044A\u0440\u043D\u0438\u0446\u0430", "value": 346, "slug": "srnica" }, { "key": "\u0421\u044A\u0440\u043F\u043E\u0432\u043E", "value": 4, "slug": "srpovo" }, { "key": "\u0421\u044A\u0440\u0446\u0435\u0432\u043E", "value": 3, "slug": "srcevo" }, { "key": "\u0421\u044F\u043D\u043E\u0432\u043E", "value": 11, "slug": "syanovo" }, { "key": "\u0422\u0430\u0431\u0430\u043D", "value": 2, "slug": "taban" }, { "key": "\u0422\u0430\u0431\u0430\u0447\u043A\u0430", "value": 10, "slug": "tabachka" }, { "key": "\u0422\u0430\u0431\u0430\u0448\u043A\u0430", "value": 2, "slug": "tabashka" }, { "key": "\u0422\u0430\u0432\u0430\u043B\u0438\u0447\u0435\u0432\u043E", "value": 4, "slug": "tavalichevo" }, { "key": "\u0422\u0430\u0439\u043C\u0438\u0449\u0435", "value": 2, "slug": "taymishche" }, { "key": "\u0422\u0430\u043C\u0430\u0440\u0438\u043D\u043E", "value": 9, "slug": "tamarino" }, { "key": "\u0422\u0430\u0442\u0430\u0440\u0435\u0432\u043E", "value": 38, "slug": "tatarevo" }, { "key": "\u0422\u0430\u0442\u0430\u0440\u0438", "value": 2, "slug": "tatari" }, { "key": "\u0422\u0430\u0442\u0443\u043B", "value": 1, "slug": "tatul" }, { "key": "\u0422\u0432\u044A\u0440\u0434\u0438\u043D\u0446\u0438", "value": 1, "slug": "tvrdinci" }, { "key": "\u0422\u0432\u044A\u0440\u0434\u0438\u0446\u0430", "value": 321, "slug": "tvrdica" }, { "key": "\u0422\u0435\u043A\u0435\u0442\u043E", "value": 3, "slug": "teketo" }, { "key": "\u0422\u0435\u043B\u0435\u0440\u0438\u0433", "value": 18, "slug": "telerig" }, { "key": "\u0422\u0435\u043B\u0438\u0448", "value": 24, "slug": "telish" }, { "key": "\u0422\u0435\u043B\u0447\u0430\u0440\u043A\u0430", "value": 4, "slug": "telcharka" }, { "key": "\u0422\u0435\u043C\u0435\u043D\u0443\u0433\u0430", "value": 1, "slug": "temenuga" }, { "key": "\u0422\u0435\u043D\u0435\u0432\u043E", "value": 59, "slug": "tenevo" }, { "key": "\u0422\u0435\u043F\u043B\u0435\u043D", "value": 12, "slug": "teplen" }, { "key": "\u0422\u0435\u0440\u0432\u0435\u043B", "value": 357, "slug": "tervel" }, { "key": "\u0422\u0435\u0440\u0437\u0438\u0439\u0441\u043A\u043E", "value": 23, "slug": "terziysko" }, { "key": "\u0422\u0435\u0440\u0442\u0435\u0440", "value": 4, "slug": "terter" }, { "key": "\u0422\u0435\u0442\u0435\u0432\u0435\u043D", "value": 612, "slug": "teteven" }, { "key": "\u0422\u0435\u0442\u043E\u0432\u043E", "value": 57, "slug": "tetovo" }, { "key": "\u0422\u0435\u0448\u043E\u0432\u043E", "value": 11, "slug": "teshovo" }, { "key": "\u0422\u0438\u043A\u0430\u043B\u0435", "value": 4, "slug": "tikale" }, { "key": "\u0422\u0438\u043C\u0430\u0440\u0435\u0432\u043E", "value": 20, "slug": "timarevo" }, { "key": "\u0422\u0438\u043F\u0447\u0435\u043D\u0438\u0446\u0430", "value": 6, "slug": "tipchenica" }, { "key": "\u0422\u0438\u0445\u043E\u043C\u0438\u0440", "value": 30, "slug": "tihomir" }, { "key": "\u0422\u0438\u0445\u043E\u043C\u0438\u0440\u043E\u0432\u043E", "value": 2, "slug": "tihomirovo" }, { "key": "\u0422\u0438\u0447\u0430", "value": 38, "slug": "ticha" }, { "key": "\u0422\u0438\u0448\u0430\u043D\u043E\u0432\u043E", "value": 2, "slug": "tishanovo" }, { "key": "\u0422\u0438\u0448\u0435\u0432\u0438\u0446\u0430", "value": 12, "slug": "tishevica" }, { "key": "\u0422\u0438\u044F\u043D\u043E\u0432\u0446\u0438", "value": 2, "slug": "tiyanovci" }, { "key": "\u0422\u043B\u0430\u0447\u0435\u043D\u0435", "value": 14, "slug": "tlachene" }, { "key": "\u0422\u043E\u0434\u043E\u0440 \u0418\u043A\u043E\u043D\u043E\u043C\u043E\u0432\u043E", "value": 57, "slug": "todor-ikonomovo" }, { "key": "\u0422\u043E\u0434\u043E\u0440\u0438\u0447\u0435\u043D\u0435", "value": 12, "slug": "todorichene" }, { "key": "\u0422\u043E\u0434\u043E\u0440\u043E\u0432\u043E", "value": 40, "slug": "todorovo" }, { "key": "\u0422\u043E\u0434\u043E\u0440\u0447\u0435\u0442\u0430", "value": 1, "slug": "todorcheta" }, { "key": "\u0422\u043E\u0434\u044E\u0432\u0446\u0438", "value": 3, "slug": "todyuvci" }, { "key": "\u0422\u043E\u043A\u0430\u0447\u043A\u0430", "value": 4, "slug": "tokachka" }, { "key": "\u0422\u043E\u043B\u043E\u0432\u0438\u0446\u0430", "value": 3, "slug": "tolovica" }, { "key": "\u0422\u043E\u043C\u043F\u0441\u044A\u043D", "value": 19, "slug": "tompsn" }, { "key": "\u0422\u043E\u043F\u043E\u043B\u0430", "value": 23, "slug": "topola" }, { "key": "\u0422\u043E\u043F\u043E\u043B\u0438", "value": 204, "slug": "topoli" }, { "key": "\u0422\u043E\u043F\u043E\u043B\u0438 \u0434\u043E\u043B", "value": 4, "slug": "topoli-dol" }, { "key": "\u0422\u043E\u043F\u043E\u043B\u0438\u0446\u0430", "value": 64, "slug": "topolica" }, { "key": "\u0422\u043E\u043F\u043E\u043B\u043D\u0438\u0446\u0430", "value": 75, "slug": "topolnica" }, { "key": "\u0422\u043E\u043F\u043E\u043B\u043E\u0432\u0433\u0440\u0430\u0434", "value": 336, "slug": "topolovgrad" }, { "key": "\u0422\u043E\u043F\u043E\u043B\u043E\u0432\u0435\u0446", "value": 8, "slug": "topolovec" }, { "key": "\u0422\u043E\u043F\u043E\u043B\u043E\u0432\u043E", "value": 108, "slug": "topolovo" }, { "key": "\u0422\u043E\u043F\u043E\u043B\u0447\u0430\u043D\u0435", "value": 83, "slug": "topolchane" }, { "key": "\u0422\u043E\u043F\u043E\u043B\u044F\u043D\u0435", "value": 8, "slug": "topolyane" }, { "key": "\u0422\u043E\u043F\u0443\u0437\u0435\u0432\u043E", "value": 1, "slug": "topuzevo" }, { "key": "\u0422\u043E\u043F\u0447\u0438\u0438", "value": 11, "slug": "topchii" }, { "key": "\u0422\u043E\u043F\u0447\u0438\u0439\u0441\u043A\u043E", "value": 23, "slug": "topchiysko" }, { "key": "\u0422\u043E\u0440\u043E\u0441", "value": 50, "slug": "toros" }, { "key": "\u0422\u043E\u0442\u043B\u0435\u0431\u0435\u043D", "value": 21, "slug": "totleben" }, { "key": "\u0422\u043E\u0447\u0438\u043B\u0430\u0440\u0438", "value": 6, "slug": "tochilari" }, { "key": "\u0422\u043E\u0448\u0435\u0432\u0446\u0438", "value": 5, "slug": "toshevci" }, { "key": "\u0422\u0440\u0430\u0432\u0435", "value": 1, "slug": "trave" }, { "key": "\u0422\u0440\u0430\u0439\u043A\u043E\u0432\u043E", "value": 23, "slug": "traykovo" }, { "key": "\u0422\u0440\u0430\u043A\u0438\u0435\u0446", "value": 10, "slug": "trakiec" }, { "key": "\u0422\u0440\u0430\u043A\u0438\u044F", "value": 13, "slug": "trakiya" }, { "key": "\u0422\u0440\u0430\u043F\u0438\u0449\u0435", "value": 10, "slug": "trapishche" }, { "key": "\u0422\u0440\u0430\u043F\u043E\u043A\u043B\u043E\u0432\u043E", "value": 4, "slug": "trapoklovo" }, { "key": "\u0422\u0440\u0435\u0431\u0438\u0449\u0435", "value": 1, "slug": "trebishche" }, { "key": "\u0422\u0440\u0435\u043A\u043B\u044F\u043D\u043E", "value": 11, "slug": "treklyano" }, { "key": "\u0422\u0440\u0435\u043C", "value": 8, "slug": "trem" }, { "key": "\u0422\u0440\u0435\u0441\u043A\u0430\u0432\u0435\u0446", "value": 18, "slug": "treskavec" }, { "key": "\u0422\u0440\u0438 \u043A\u043B\u0430\u0434\u0435\u043D\u0446\u0438", "value": 16, "slug": "tri-kladenci" }, { "key": "\u0422\u0440\u0438 \u043C\u043E\u0433\u0438\u043B\u0438", "value": 14, "slug": "tri-mogili" }, { "key": "\u0422\u0440\u0438\u0432\u043E\u0434\u0438\u0446\u0438", "value": 39, "slug": "trivodici" }, { "key": "\u0422\u0440\u0438\u0433\u0440\u0430\u0434", "value": 47, "slug": "trigrad" }, { "key": "\u0422\u0440\u0438\u043B\u0438\u0441\u0442\u043D\u0438\u043A", "value": 25, "slug": "trilistnik" }, { "key": "\u0422\u0440\u0438\u0444\u043E\u043D\u043E\u0432\u043E", "value": 2, "slug": "trifonovo" }, { "key": "\u0422\u0440\u043E\u0438\u0446\u0430", "value": 9, "slug": "troica" }, { "key": "\u0422\u0440\u043E\u044F\u043D", "value": 1847, "slug": "troyan" }, { "key": "\u0422\u0440\u043E\u044F\u043D\u043E\u0432\u043E", "value": 52, "slug": "troyanovo" }, { "key": "\u0422\u0440\u0443\u0434", "value": 341, "slug": "trud" }, { "key": "\u0422\u0440\u0443\u0434\u043E\u0432\u0435\u0446", "value": 158, "slug": "trudovec" }, { "key": "\u0422\u0440\u044A\u0431\u0430\u0447", "value": 8, "slug": "trbach" }, { "key": "\u0422\u0440\u044A\u043D", "value": 139, "slug": "trn" }, { "key": "\u0422\u0440\u044A\u043D\u0430\u043A", "value": 31, "slug": "trnak" }, { "key": "\u0422\u0440\u044A\u043D\u0438\u0442\u043E", "value": 3, "slug": "trnito" }, { "key": "\u0422\u0440\u044A\u043D\u0438\u0446\u0430", "value": 2, "slug": "trnica" }, { "key": "\u0422\u0440\u044A\u043D\u043A\u043E\u0432\u043E", "value": 17, "slug": "trnkovo" }, { "key": "\u0422\u0440\u044A\u043D\u0447\u043E\u0432\u0438\u0446\u0430", "value": 19, "slug": "trnchovica" }, { "key": "\u0422\u0440\u044A\u0441\u0442\u0435\u043D\u0438\u043A", "value": 213, "slug": "trstenik" }, { "key": "\u0422\u0440\u044A\u0441\u0442\u0438\u043A\u0430", "value": 3, "slug": "trstika" }, { "key": "\u0422\u0440\u044A\u0441\u0442\u0438\u043A\u043E\u0432\u043E", "value": 67, "slug": "trstikovo" }, { "key": "\u0422\u0440\u044F\u0432\u043D\u0430", "value": 758, "slug": "tryavna" }, { "key": "\u0422\u0443\u0434\u0435\u043D", "value": 7, "slug": "tuden" }, { "key": "\u0422\u0443\u043B\u043E\u0432\u043E", "value": 40, "slug": "tulovo" }, { "key": "\u0422\u0443\u043C\u0431\u0430\u043B\u043E\u0432\u043E", "value": 3, "slug": "tumbalovo" }, { "key": "\u0422\u0443\u0440\u0438\u044F", "value": 20, "slug": "turiya" }, { "key": "\u0422\u0443\u0440\u043A\u0438\u043D\u0447\u0430", "value": 5, "slug": "turkincha" }, { "key": "\u0422\u0443\u0440\u043E\u043A\u043E\u0432\u0446\u0438", "value": 3, "slug": "turokovci" }, { "key": "\u0422\u0443\u0440\u044F\u043D", "value": 1, "slug": "turyan" }, { "key": "\u0422\u0443\u0442\u0440\u0430\u043A\u0430\u043D", "value": 515, "slug": "tutrakan" }, { "key": "\u0422\u0443\u0442\u0440\u0430\u043A\u0430\u043D\u0446\u0438", "value": 59, "slug": "tutrakanci" }, { "key": "\u0422\u0443\u0445\u043E\u0432\u0438\u0449\u0430", "value": 31, "slug": "tuhovishcha" }, { "key": "\u0422\u0443\u0447\u0435\u043D\u0438\u0446\u0430", "value": 4, "slug": "tuchenica" }, { "key": "\u0422\u0443\u0448\u043E\u0432\u0438\u0446\u0430", "value": 12, "slug": "tushovica" }, { "key": "\u0422\u044A\u0436\u0430", "value": 44, "slug": "tzha" }, { "key": "\u0422\u044A\u043A\u0430\u0447", "value": 15, "slug": "tkach" }, { "key": "\u0422\u044A\u043D\u043A\u0430 \u0431\u0430\u0440\u0430", "value": 1, "slug": "tnka-bara" }, { "key": "\u0422\u044A\u043D\u043A\u043E\u0432\u043E", "value": 166, "slug": "tnkovo" }, { "key": "\u0422\u044A\u043D\u043A\u043E\u0442\u043E", "value": 1, "slug": "tnkoto" }, { "key": "\u0422\u044A\u0440\u0433\u043E\u0432\u0438\u0449\u0435", "value": 3465, "slug": "trgovishche" }, { "key": "\u0422\u044A\u0440\u043D\u0430", "value": 1, "slug": "trna" }, { "key": "\u0422\u044A\u0440\u043D\u0430\u0432\u0430", "value": 86, "slug": "trnava" }, { "key": "\u0422\u044A\u0440\u043D\u0430\u043A", "value": 48, "slug": "trnak" }, { "key": "\u0422\u044A\u0440\u043D\u0435\u043D\u0435", "value": 12, "slug": "trnene" }, { "key": "\u0422\u044A\u0440\u043D\u0438\u0447\u0435\u043D\u0438", "value": 20, "slug": "trnicheni" }, { "key": "\u0422\u044A\u0440\u043D\u043E\u0432\u0446\u0430", "value": 18, "slug": "trnovca" }, { "key": "\u0422\u044A\u0440\u043D\u043E\u0432\u0446\u0438", "value": 6, "slug": "trnovci" }, { "key": "\u0422\u044A\u0440\u043D\u044F\u043D\u0435", "value": 6, "slug": "trnyane" }, { "key": "\u0422\u044A\u0440\u0445\u043E\u0432\u043E", "value": 4, "slug": "trhovo" }, { "key": "\u0422\u044A\u0440\u044A\u043D", "value": 31, "slug": "trn" }, { "key": "\u0422\u044E\u043B\u0435\u043D\u043E\u0432\u043E", "value": 5, "slug": "tyulenovo" }, { "key": "\u0422\u044E\u0440\u043A\u043C\u0435\u043D", "value": 13, "slug": "tyurkmen" }, { "key": "\u0422\u044E\u0442\u044E\u043D\u0447\u0435", "value": 5, "slug": "tyutyunche" }, { "key": "\u0422\u044F\u043D\u0435\u0432\u043E", "value": 10, "slug": "tyanevo" }, { "key": "\u0423\u0433\u043B\u0435\u0434\u043D\u043E", "value": 1, "slug": "ugledno" }, { "key": "\u0423\u0433\u043B\u044F\u0440\u0446\u0438", "value": 4, "slug": "uglyarci" }, { "key": "\u0423\u0433\u044A\u0440\u0447\u0438\u043D", "value": 115, "slug": "ugrchin" }, { "key": "\u0423\u0437\u043E\u0432\u043E", "value": 2, "slug": "uzovo" }, { "key": "\u0423\u0437\u0443\u043D\u0434\u0436\u043E\u0432\u043E", "value": 55, "slug": "uzundzhovo" }, { "key": "\u0423\u0437\u0443\u043D\u0438\u0442\u0435", "value": 2, "slug": "uzunite" }, { "key": "\u0423\u043C\u0430\u0440\u0435\u0432\u0446\u0438", "value": 11, "slug": "umarevci" }, { "key": "\u0423\u0440\u043E\u0432\u0435\u043D\u0435", "value": 5, "slug": "urovene" }, { "key": "\u0423\u0441\u043E\u0439\u043A\u0430", "value": 12, "slug": "usoyka" }, { "key": "\u0423\u0441\u0442\u0438\u043D\u0430", "value": 75, "slug": "ustina" }, { "key": "\u0423\u0441\u0442\u0440\u0435\u043C", "value": 35, "slug": "ustrem" }, { "key": "\u0423\u0441\u0442\u0440\u0435\u043D", "value": 8, "slug": "ustren" }, { "key": "\u0423\u0445\u043B\u043E\u0432\u0438\u0446\u0430", "value": 1, "slug": "uhlovica" }, { "key": "\u0423\u0448\u0438", "value": 2, "slug": "ushi" }, { "key": "\u0423\u0448\u0438\u043D\u0446\u0438", "value": 24, "slug": "ushinci" }, { "key": "\u0424\u0430\u0437\u0430\u043D\u043E\u0432\u043E", "value": 4, "slug": "fazanovo" }, { "key": "\u0424\u0430\u043A\u0438\u044F", "value": 8, "slug": "fakiya" }, { "key": "\u0424\u0430\u0442\u043E\u0432\u043E", "value": 1, "slug": "fatovo" }, { "key": "\u0424\u0435\u043B\u0434\u0444\u0435\u0431\u0435\u043B \u0414\u0435\u043D\u043A\u043E\u0432\u043E", "value": 9, "slug": "feldfebel-denkovo" }, { "key": "\u0424\u0438\u043B\u0430\u0440\u0435\u0442\u043E\u0432\u043E", "value": 14, "slug": "filaretovo" }, { "key": "\u0424\u0438\u043B\u0438\u043F\u043E\u0432\u043E", "value": 25, "slug": "filipovo" }, { "key": "\u0424\u0438\u043B\u0438\u043F\u043E\u0432\u0446\u0438", "value": 5, "slug": "filipovci" }, { "key": "\u0424\u043B\u043E\u0440\u0435\u043D\u0442\u0438\u043D", "value": 6, "slug": "florentin" }, { "key": "\u0424\u043E\u0442\u0438\u043D\u043E\u0432\u043E", "value": 39, "slug": "fotinovo" }, { "key": "\u0424\u0440\u043E\u043B\u043E\u0448", "value": 1, "slug": "frolosh" }, { "key": "\u0424\u0443\u0440\u0435\u043D", "value": 16, "slug": "furen" }, { "key": "\u0424\u044A\u0440\u0433\u043E\u0432\u043E", "value": 10, "slug": "frgovo" }, { "key": "\u0424\u044A\u0440\u0435\u0432\u0446\u0438", "value": 1, "slug": "frevci" }, { "key": "\u0425\u0430\u0434\u0436\u0438 \u0414\u0438\u043C\u0438\u0442\u044A\u0440", "value": 12, "slug": "hadzhi-dimitr" }, { "key": "\u0425\u0430\u0434\u0436\u0438\u0434\u0438\u043C\u0438\u0442\u0440\u043E\u0432\u043E", "value": 123, "slug": "hadzhidimitrovo" }, { "key": "\u0425\u0430\u0434\u0436\u0438\u0434\u0438\u043C\u043E\u0432\u043E", "value": 174, "slug": "hadzhidimovo" }, { "key": "\u0425\u0430\u0434\u0436\u0438\u0435\u0432\u043E", "value": 50, "slug": "hadzhievo" }, { "key": "\u0425\u0430\u0434\u0436\u0438\u0438\u0442\u0435", "value": 11, "slug": "hadzhiite" }, { "key": "\u0425\u0430\u0434\u0436\u0438\u0439\u0441\u043A\u043E", "value": 11, "slug": "hadzhiysko" }, { "key": "\u0425\u0430\u0439\u0440\u0435\u0434\u0438\u043D", "value": 76, "slug": "hayredin" }, { "key": "\u0425\u0430\u043D \u0410\u0441\u043F\u0430\u0440\u0443\u0445\u043E\u0432\u043E", "value": 37, "slug": "han-asparuhovo" }, { "key": "\u0425\u0430\u043D \u041A\u0440\u0443\u043C", "value": 22, "slug": "han-krum" }, { "key": "\u0425\u0430\u043D\u043E\u0432\u043E", "value": 16, "slug": "hanovo" }, { "key": "\u0425\u0430\u0440\u0430\u0447\u0435\u0440\u0438\u0442\u0435", "value": 3, "slug": "haracherite" }, { "key": "\u0425\u0430\u0440\u0432\u0430\u043B\u043E\u0432\u0446\u0438", "value": 1, "slug": "harvalovci" }, { "key": "\u0425\u0430\u0440\u043C\u0430\u043D\u043B\u0438", "value": 1495, "slug": "harmanli" }, { "key": "\u0425\u0430\u0441\u043A\u043E\u0432\u043E", "value": 8322, "slug": "haskovo" }, { "key": "\u0425\u0432\u043E\u0439\u043D\u0430", "value": 48, "slug": "hvoyna" }, { "key": "\u0425\u0432\u043E\u0441\u0442\u044F\u043D\u0435", "value": 31, "slug": "hvostyane" }, { "key": "\u0425\u0435\u0440\u0430\u043A\u043E\u0432\u043E", "value": 27, "slug": "herakovo" }, { "key": "\u0425\u0438\u0440\u0435\u0432\u043E", "value": 6, "slug": "hirevo" }, { "key": "\u0425\u0438\u0441\u0430\u0440\u044F", "value": 552, "slug": "hisarya" }, { "key": "\u0425\u0438\u0442\u043E\u0432\u043E", "value": 9, "slug": "hitovo" }, { "key": "\u0425\u0438\u0442\u0440\u0438\u043D\u043E", "value": 49, "slug": "hitrino" }, { "key": "\u0425\u043B\u0435\u0432\u0435\u043D\u0435", "value": 18, "slug": "hlevene" }, { "key": "\u0425\u043B\u044F\u0431\u043E\u0432\u043E", "value": 20, "slug": "hlyabovo" }, { "key": "\u0425\u041E\u041D\u041A\u041E\u041D\u0413,", "value": 6, "slug": "honkong" }, { "key": "\u0425\u043E\u0442\u0430\u043D\u0446\u0430", "value": 24, "slug": "hotanca" }, { "key": "\u0425\u043E\u0442\u043D\u0438\u0446\u0430", "value": 19, "slug": "hotnica" }, { "key": "\u0425\u043E\u0442\u043E\u0432\u043E", "value": 1, "slug": "hotovo" }, { "key": "\u0425\u0440\u0430\u0431\u0440\u0438\u043D\u043E", "value": 46, "slug": "hrabrino" }, { "key": "\u0425\u0440\u0430\u0431\u0440\u043E\u0432\u043E", "value": 27, "slug": "hrabrovo" }, { "key": "\u0425\u0440\u0430\u0431\u044A\u0440\u0441\u043A\u043E", "value": 30, "slug": "hrabrsko" }, { "key": "\u0425\u0440\u0438\u0441\u0442\u0438\u044F\u043D\u043E\u0432\u043E", "value": 12, "slug": "hristiyanovo" }, { "key": "\u0425\u0440\u0438\u0441\u0442\u043E \u0414\u0430\u043D\u043E\u0432\u043E", "value": 28, "slug": "hristo-danovo" }, { "key": "\u0425\u0440\u0438\u0441\u0442\u043E\u0432\u0446\u0438", "value": 2, "slug": "hristovci" }, { "key": "\u0425\u0440\u0438\u0449\u0435\u043D\u0438", "value": 94, "slug": "hrishcheni" }, { "key": "\u0425\u0440\u043E\u043C\u0438\u0446\u0430", "value": 1, "slug": "hromica" }, { "key": "\u0425\u0443\u0431\u0430\u0432\u0435\u043D\u0435", "value": 3, "slug": "hubavene" }, { "key": "\u0425\u0443\u043C\u0430", "value": 9, "slug": "huma" }, { "key": "\u0425\u0443\u0445\u043B\u0430", "value": 2, "slug": "huhla" }, { "key": "\u0425\u044A\u0440\u043B\u0435\u0446", "value": 55, "slug": "hrlec" }, { "key": "\u0425\u044A\u0440\u0441\u043E\u0432\u043E", "value": 32, "slug": "hrsovo" }, { "key": "\u0426\u0430\u043B\u0430\u043F\u0438\u0446\u0430", "value": 219, "slug": "calapica" }, { "key": "\u0426\u0430\u043D\u0438 \u0413\u0438\u043D\u0447\u0435\u0432\u043E", "value": 5, "slug": "cani-ginchevo" }, { "key": "\u0426\u0430\u043F\u0430\u0440\u0435\u0432\u043E", "value": 3, "slug": "caparevo" }, { "key": "\u0426\u0430\u0440 \u0410\u0441\u0435\u043D", "value": 38, "slug": "car-asen" }, { "key": "\u0426\u0430\u0440 \u041A\u0430\u043B\u043E\u044F\u043D", "value": 121, "slug": "car-kaloyan" }, { "key": "\u0426\u0430\u0440 \u0421\u0430\u043C\u0443\u0438\u043B", "value": 14, "slug": "car-samuil" }, { "key": "\u0426\u0430\u0440 \u0421\u0438\u043C\u0435\u043E\u043D\u043E\u0432\u043E", "value": 5, "slug": "car-simeonovo" }, { "key": "\u0426\u0430\u0440 \u0428\u0438\u0448\u043C\u0430\u043D\u043E\u0432\u043E", "value": 9, "slug": "car-shishmanovo" }, { "key": "\u0426\u0430\u0440-\u041F\u0435\u0442\u0440\u043E\u0432\u043E", "value": 9, "slug": "car-petrovo" }, { "key": "\u0426\u0430\u0440\u0430\u0446\u043E\u0432\u043E", "value": 191, "slug": "caracovo" }, { "key": "\u0426\u0430\u0440\u0435\u0432 \u0431\u0440\u043E\u0434", "value": 37, "slug": "carev-brod" }, { "key": "\u0426\u0430\u0440\u0435\u0432 \u0434\u043E\u043B", "value": 3, "slug": "carev-dol" }, { "key": "\u0426\u0430\u0440\u0435\u0432\u0430 \u043B\u0438\u0432\u0430\u0434\u0430", "value": 42, "slug": "careva-livada" }, { "key": "\u0426\u0430\u0440\u0435\u0432\u0430 \u043F\u043E\u043B\u044F\u043D\u0430", "value": 20, "slug": "careva-polyana" }, { "key": "\u0426\u0430\u0440\u0435\u0432\u0435\u0446", "value": 64, "slug": "carevec" }, { "key": "\u0426\u0430\u0440\u0435\u0432\u043E", "value": 755, "slug": "carevo" }, { "key": "\u0426\u0430\u0440\u0435\u0432\u0446\u0438", "value": 22, "slug": "carevci" }, { "key": "\u0426\u0430\u0440\u0438\u043C\u0438\u0440", "value": 46, "slug": "carimir" }, { "key": "\u0426\u0430\u0440\u0438\u0447\u0438\u043D\u043E", "value": 25, "slug": "carichino" }, { "key": "\u0426\u0430\u0440\u0441\u043A\u0438 \u0438\u0437\u0432\u043E\u0440", "value": 15, "slug": "carski-izvor" }, { "key": "\u0426\u0430\u0446\u0430\u0440\u043E\u0432\u0446\u0438", "value": 5, "slug": "cacarovci" }, { "key": "\u0426\u0432\u0435\u0442\u0438\u043D\u043E", "value": 3, "slug": "cvetino" }, { "key": "\u0426\u0432\u0435\u0442\u043A\u043E\u0432\u0430 \u0431\u0430\u0440\u0430", "value": 1, "slug": "cvetkova-bara" }, { "key": "\u0426\u0435\u043B\u0438\u043D\u0430", "value": 1, "slug": "celina" }, { "key": "\u0426\u0435\u043D\u0438\u043D\u043E", "value": 3, "slug": "cenino" }, { "key": "\u0426\u0435\u043D\u043E\u0432\u043E", "value": 65, "slug": "cenovo" }, { "key": "\u0426\u0435\u0440\u0435\u0442\u0435\u043B\u0435\u0432\u043E", "value": 15, "slug": "ceretelevo" }, { "key": "\u0426\u0435\u0440\u043A\u043E\u0432\u0441\u043A\u0438", "value": 3, "slug": "cerkovski" }, { "key": "\u0426\u0435\u0440\u043E\u0432\u0430 \u043A\u043E\u0440\u0438\u044F", "value": 14, "slug": "cerova-koriya" }, { "key": "\u0426\u0435\u0440\u043E\u0432\u0435\u0446", "value": 1, "slug": "cerovec" }, { "key": "\u0426\u0435\u0440\u043E\u0432\u0438\u0449\u0435", "value": 8, "slug": "cerovishche" }, { "key": "\u0426\u0435\u0440\u043E\u0432\u043E", "value": 105, "slug": "cerovo" }, { "key": "\u0426\u0438\u0440\u043A\u0430", "value": 4, "slug": "cirka" }, { "key": "\u0426\u043E\u043D\u0435\u0432\u043E", "value": 85, "slug": "conevo" }, { "key": "\u0426\u0440\u044A\u043D\u0447\u0430", "value": 57, "slug": "crncha" }, { "key": "\u0426\u044A\u0440\u0432\u0435\u043D\u044F\u043D\u043E", "value": 4, "slug": "crvenyano" }, { "key": "\u0426\u044A\u0440\u0432\u0438\u0449\u0435", "value": 2, "slug": "crvishche" }, { "key": "\u0426\u044A\u0440\u043A\u0432\u0430", "value": 27, "slug": "crkva" }, { "key": "\u0426\u044A\u0440\u043A\u0432\u0438\u0446\u0430", "value": 16, "slug": "crkvica" }, { "key": "\u0426\u044A\u0440\u043A\u0432\u0438\u0449\u0435", "value": 10, "slug": "crkvishche" }, { "key": "\u0427\u0430\u0432\u0434\u0430\u0440", "value": 64, "slug": "chavdar" }, { "key": "\u0427\u0430\u0432\u0434\u0430\u0440\u0446\u0438", "value": 2, "slug": "chavdarci" }, { "key": "\u0427\u0430\u0439\u043A\u0430", "value": 6, "slug": "chayka" }, { "key": "\u0427\u0430\u043A\u0430\u043B\u0430\u0440\u043E\u0432\u043E", "value": 39, "slug": "chakalarovo" }, { "key": "\u0427\u0430\u043A\u0430\u043B\u0438", "value": 3, "slug": "chakali" }, { "key": "\u0427\u0430\u043B\u0430", "value": 4, "slug": "chala" }, { "key": "\u0427\u0430\u043B\u044A\u043A\u043E\u0432\u0438", "value": 23, "slug": "chalkovi" }, { "key": "\u0427\u0430\u043C\u043B\u0430", "value": 1, "slug": "chamla" }, { "key": "\u0427\u0430\u0440\u0433\u0430\u043D", "value": 47, "slug": "chargan" }, { "key": "\u0427\u0430\u0440\u0434\u0430", "value": 14, "slug": "charda" }, { "key": "\u0427\u0430\u0440\u043A\u043E\u0432\u043E", "value": 9, "slug": "charkovo" }, { "key": "\u0427\u0435\u043A\u0430\u043D\u0446\u0438", "value": 1, "slug": "chekanci" }, { "key": "\u0427\u0435\u043A\u0430\u043D\u0447\u0435\u0432\u043E", "value": 11, "slug": "chekanchevo" }, { "key": "\u0427\u0435\u043B\u043D\u0438\u043A", "value": 6, "slug": "chelnik" }, { "key": "\u0427\u0435\u043B\u043E\u043F\u0435\u043A", "value": 15, "slug": "chelopek" }, { "key": "\u0427\u0435\u043B\u043E\u043F\u0435\u0447", "value": 107, "slug": "chelopech" }, { "key": "\u0427\u0435\u043B\u043E\u043F\u0435\u0447\u0435\u043D\u0435", "value": 3, "slug": "chelopechene" }, { "key": "\u0427\u0435\u043B\u044E\u0441\u0442\u043D\u0438\u0446\u0430", "value": 3, "slug": "chelyustnica" }, { "key": "\u0427\u0435\u043C\u0438\u0448", "value": 5, "slug": "chemish" }, { "key": "\u0427\u0435\u043F\u0435\u043B\u0430\u0440\u0435", "value": 484, "slug": "chepelare" }, { "key": "\u0427\u0435\u043F\u0438\u043D\u043E", "value": 1, "slug": "chepino" }, { "key": "\u0427\u0435\u043F\u0438\u043D\u0446\u0438", "value": 278, "slug": "chepinci" }, { "key": "\u0427\u0435\u0440\u0432\u0435\u043D", "value": 58, "slug": "cherven" }, { "key": "\u0427\u0435\u0440\u0432\u0435\u043D \u0431\u0440\u0435\u0433", "value": 40, "slug": "cherven-breg" }, { "key": "\u0427\u0435\u0440\u0432\u0435\u043D \u0431\u0440\u044F\u0433", "value": 791, "slug": "cherven-bryag" }, { "key": "\u0427\u0435\u0440\u0432\u0435\u043D\u0430", "value": 8, "slug": "chervena" }, { "key": "\u0427\u0435\u0440\u0432\u0435\u043D\u0430 \u0432\u043E\u0434\u0430", "value": 78, "slug": "chervena-voda" }, { "key": "\u0427\u0435\u0440\u0432\u0435\u043D\u0430 \u043C\u043E\u0433\u0438\u043B\u0430", "value": 7, "slug": "chervena-mogila" }, { "key": "\u0427\u0435\u0440\u0432\u0435\u043D\u0430\u043A\u043E\u0432\u043E", "value": 10, "slug": "chervenakovo" }, { "key": "\u0427\u0435\u0440\u0432\u0435\u043D\u0446\u0438", "value": 25, "slug": "chervenci" }, { "key": "\u0427\u0435\u0440\u0433\u0430\u043D\u043E\u0432\u043E", "value": 43, "slug": "cherganovo" }, { "key": "\u0427\u0435\u0440\u0435\u043D\u0447\u0430", "value": 8, "slug": "cherencha" }, { "key": "\u0427\u0435\u0440\u0435\u043F\u043E\u0432\u043E", "value": 6, "slug": "cherepovo" }, { "key": "\u0427\u0435\u0440\u0435\u0448\u0430", "value": 16, "slug": "cheresha" }, { "key": "\u0427\u0435\u0440\u0435\u0448\u0438\u0446\u0430", "value": 3, "slug": "chereshica" }, { "key": "\u0427\u0435\u0440\u0435\u0448\u043E\u0432\u043E", "value": 13, "slug": "chereshovo" }, { "key": "\u0427\u0435\u0440\u043A\u0430\u0441\u043A\u0438", "value": 2, "slug": "cherkaski" }, { "key": "\u0427\u0435\u0440\u043A\u043E\u0432\u0438\u0446\u0430", "value": 11, "slug": "cherkovica" }, { "key": "\u0427\u0435\u0440\u043A\u043E\u0432\u043D\u0430", "value": 45, "slug": "cherkovna" }, { "key": "\u0427\u0435\u0440\u043A\u043E\u0432\u043E", "value": 9, "slug": "cherkovo" }, { "key": "\u0427\u0435\u0440\u043D\u0430", "value": 24, "slug": "cherna" }, { "key": "\u0427\u0435\u0440\u043D\u0430 \u0433\u043E\u0440\u0430", "value": 23, "slug": "cherna-gora" }, { "key": "\u0427\u0435\u0440\u043D\u0430 \u041C\u0435\u0441\u0442\u0430", "value": 7, "slug": "cherna-mesta" }, { "key": "\u0427\u0435\u0440\u043D\u0430 \u043C\u043E\u0433\u0438\u043B\u0430", "value": 12, "slug": "cherna-mogila" }, { "key": "\u0427\u0435\u0440\u043D\u0430 \u043D\u0438\u0432\u0430", "value": 2, "slug": "cherna-niva" }, { "key": "\u0427\u0435\u0440\u043D\u0430 \u0441\u043A\u0430\u043B\u0430", "value": 1, "slug": "cherna-skala" }, { "key": "\u0427\u0435\u0440\u043D\u0435\u0432\u043E", "value": 71, "slug": "chernevo" }, { "key": "\u0427\u0435\u0440\u043D\u0435\u0432\u0446\u0438", "value": 3, "slug": "chernevci" }, { "key": "\u0427\u0435\u0440\u043D\u0438 \u0431\u0440\u044F\u0433", "value": 4, "slug": "cherni-bryag" }, { "key": "\u0427\u0435\u0440\u043D\u0438 \u0412\u0438\u0442", "value": 23, "slug": "cherni-vit" }, { "key": "\u0427\u0435\u0440\u043D\u0438 \u0432\u0440\u044A\u0445", "value": 52, "slug": "cherni-vrh" }, { "key": "\u0427\u0435\u0440\u043D\u0438 \u041E\u0441\u044A\u043C", "value": 83, "slug": "cherni-osm" }, { "key": "\u0427\u0435\u0440\u043D\u0438\u043A", "value": 89, "slug": "chernik" }, { "key": "\u0427\u0435\u0440\u043D\u0438\u0446\u0430", "value": 9, "slug": "chernica" }, { "key": "\u0427\u0435\u0440\u043D\u0438\u0447\u0435", "value": 53, "slug": "cherniche" }, { "key": "\u0427\u0435\u0440\u043D\u0438\u0447\u0435\u0432\u043E", "value": 31, "slug": "chernichevo" }, { "key": "\u0427\u0435\u0440\u043D\u0438\u0447\u0438\u043D\u043E", "value": 2, "slug": "chernichino" }, { "key": "\u0427\u0435\u0440\u043D\u043E \u043C\u043E\u0440\u0435", "value": 86, "slug": "cherno-more" }, { "key": "\u0427\u0435\u0440\u043D\u043E \u043F\u043E\u043B\u0435", "value": 4, "slug": "cherno-pole" }, { "key": "\u0427\u0435\u0440\u043D\u043E\u0432\u0440\u044A\u0445", "value": 6, "slug": "chernovrh" }, { "key": "\u0427\u0435\u0440\u043D\u043E\u0433\u043B\u0430\u0432\u0446\u0438", "value": 15, "slug": "chernoglavci" }, { "key": "\u0427\u0435\u0440\u043D\u043E\u0433\u043E\u0440", "value": 7, "slug": "chernogor" }, { "key": "\u0427\u0435\u0440\u043D\u043E\u0433\u043E\u0440\u043E\u0432\u043E", "value": 78, "slug": "chernogorovo" }, { "key": "\u0427\u0435\u0440\u043D\u043E\u0433\u0440\u0430\u0434", "value": 16, "slug": "chernograd" }, { "key": "\u0427\u0435\u0440\u043D\u043E\u0434\u044A\u0431", "value": 9, "slug": "chernodb" }, { "key": "\u0427\u0435\u0440\u043D\u043E\u0437\u0435\u043C", "value": 4, "slug": "chernozem" }, { "key": "\u0427\u0435\u0440\u043D\u043E\u0437\u0435\u043C\u0435\u043D", "value": 28, "slug": "chernozemen" }, { "key": "\u0427\u0435\u0440\u043D\u043E\u043A\u0430\u043F\u0446\u0438", "value": 7, "slug": "chernokapci" }, { "key": "\u0427\u0435\u0440\u043D\u043E\u043B\u0438\u043A", "value": 30, "slug": "chernolik" }, { "key": "\u0427\u0435\u0440\u043D\u043E\u043C\u043E\u0440\u0435\u0446", "value": 340, "slug": "chernomorec" }, { "key": "\u0427\u0435\u0440\u043D\u043E\u043C\u043E\u0440\u0446\u0438", "value": 1, "slug": "chernomorci" }, { "key": "\u0427\u0435\u0440\u043D\u043E\u043E\u043A", "value": 7, "slug": "chernook" }, { "key": "\u0427\u0435\u0440\u043D\u043E\u043E\u043A\u0438", "value": 1, "slug": "chernooki" }, { "key": "\u0427\u0435\u0440\u043D\u043E\u043E\u043A\u043E\u0432\u043E", "value": 23, "slug": "chernookovo" }, { "key": "\u0427\u0435\u0440\u043D\u043E\u043E\u0447\u0435\u043D\u0435", "value": 35, "slug": "chernoochene" }, { "key": "\u0427\u0435\u0440\u043D\u044C\u043E\u0432\u043E", "value": 20, "slug": "chernovo" }, { "key": "\u0427\u0435\u0441\u0442\u0438\u043C\u0435\u043D\u0441\u043A\u043E", "value": 2, "slug": "chestimensko" }, { "key": "\u0427\u0435\u0442\u0438\u0440\u0446\u0438", "value": 8, "slug": "chetirci" }, { "key": "\u0427\u0435\u0445\u043B\u0430\u0440\u0435", "value": 2, "slug": "chehlare" }, { "key": "\u0427\u0435\u0448\u043C\u0430", "value": 1, "slug": "cheshma" }, { "key": "\u0427\u0435\u0448\u043D\u0435\u0433\u0438\u0440\u043E\u0432\u043E", "value": 95, "slug": "cheshnegirovo" }, { "key": "\u0427\u0438\u0431\u0430\u043E\u0432\u0446\u0438", "value": 6, "slug": "chibaovci" }, { "key": "\u0427\u0438\u043B\u0438\u043A", "value": 6, "slug": "chilik" }, { "key": "\u0427\u0438\u043B\u043D\u043E\u0432", "value": 15, "slug": "chilnov" }, { "key": "\u0427\u0438\u043D\u0442\u0443\u043B\u043E\u0432\u043E", "value": 28, "slug": "chintulovo" }, { "key": "\u0427\u0438\u043F\u0440\u043E\u0432\u0446\u0438", "value": 94, "slug": "chiprovci" }, { "key": "\u0427\u0438\u0440\u0435\u043D", "value": 24, "slug": "chiren" }, { "key": "\u0427\u0438\u0440\u043F\u0430\u043D", "value": 824, "slug": "chirpan" }, { "key": "\u0427\u0438\u0442\u0430\u043A\u043E\u0432\u0446\u0438", "value": 1, "slug": "chitakovci" }, { "key": "\u0427\u0438\u0444\u043B\u0438\u043A", "value": 54, "slug": "chiflik" }, { "key": "\u0427\u0438\u0447\u0435\u0432\u043E", "value": 2, "slug": "chichevo" }, { "key": "\u0427\u043E\u0431\u0430", "value": 34, "slug": "choba" }, { "key": "\u0427\u043E\u0431\u0430\u043D\u043A\u0430", "value": 5, "slug": "chobanka" }, { "key": "\u0427\u043E\u043A\u043C\u0430\u043D\u043E\u0432\u043E", "value": 6, "slug": "chokmanovo" }, { "key": "\u0427\u043E\u043A\u043E\u0431\u0430", "value": 12, "slug": "chokoba" }, { "key": "\u0427\u043E\u043B\u0430\u043A\u043E\u0432\u0430", "value": 3, "slug": "cholakova" }, { "key": "\u0427\u043E\u043C\u0430\u043A\u043E\u0432\u0446\u0438", "value": 28, "slug": "chomakovci" }, { "key": "\u0427\u043E\u0440\u0431\u0430\u0434\u0436\u0438\u0439\u0441\u043A\u043E", "value": 73, "slug": "chorbadzhiysko" }, { "key": "\u0427\u043E\u0440\u0443\u043B", "value": 4, "slug": "chorul" }, { "key": "\u0427\u0443\u0431\u0440\u0430", "value": 30, "slug": "chubra" }, { "key": "\u0427\u0443\u0431\u0440\u0438\u043A\u0430", "value": 5, "slug": "chubrika" }, { "key": "\u0427\u0443\u0434\u043E\u043C\u0438\u0440", "value": 7, "slug": "chudomir" }, { "key": "\u0427\u0443\u0439\u043F\u0435\u0442\u043B\u043E\u0432\u043E", "value": 3, "slug": "chuypetlovo" }, { "key": "\u0427\u0443\u043A\u0430\u0440\u043A\u0430", "value": 10, "slug": "chukarka" }, { "key": "\u0427\u0443\u043A\u043E\u0432\u0435\u0437\u0435\u0440", "value": 1, "slug": "chukovezer" }, { "key": "\u0427\u0443\u043A\u043E\u0432\u0435\u0446", "value": 9, "slug": "chukovec" }, { "key": "\u0427\u0443\u043A\u043E\u0432\u043E", "value": 6, "slug": "chukovo" }, { "key": "\u0427\u0443\u043F\u0440\u0435\u043D\u0435", "value": 16, "slug": "chuprene" }, { "key": "\u0427\u0443\u0440\u0435\u043A", "value": 14, "slug": "churek" }, { "key": "\u0427\u0443\u0440\u0435\u043D", "value": 1, "slug": "churen" }, { "key": "\u0427\u0443\u0440\u0438\u0447\u0435\u043D\u0438", "value": 2, "slug": "churicheni" }, { "key": "\u0427\u0443\u0440\u043A\u0430", "value": 1, "slug": "churka" }, { "key": "\u0427\u0443\u0440\u0443\u043A\u043E\u0432\u043E", "value": 1, "slug": "churukovo" }, { "key": "\u0427\u0443\u0447\u0443\u043B\u0438\u0433\u043E\u0432\u043E", "value": 11, "slug": "chuchuligovo" }, { "key": "\u0428\u0430\u0431\u043B\u0430", "value": 259, "slug": "shabla" }, { "key": "\u0428\u0430\u043D\u043E\u0432\u043E", "value": 12, "slug": "shanovo" }, { "key": "\u0428\u0430\u0440\u0430\u043D\u0438", "value": 4, "slug": "sharani" }, { "key": "\u0428\u0430\u0440\u0435\u043D\u0441\u043A\u0430", "value": 5, "slug": "sharenska" }, { "key": "\u0428\u0430\u0440\u043A\u043E\u0432\u043E", "value": 2, "slug": "sharkovo" }, { "key": "\u0428\u0430\u0442\u0440\u043E\u0432\u043E", "value": 1, "slug": "shatrovo" }, { "key": "\u0428\u0435\u0439\u043D\u043E\u0432\u043E", "value": 62, "slug": "sheynovo" }, { "key": "\u0428\u0435\u043C\u0448\u0435\u0432\u043E", "value": 27, "slug": "shemshevo" }, { "key": "\u0428\u0435\u0440\u0435\u043C\u0435\u0442\u044F", "value": 10, "slug": "sheremetya" }, { "key": "\u0428\u0438\u0432\u0430\u0440\u043E\u0432\u043E", "value": 10, "slug": "shivarovo" }, { "key": "\u0428\u0438\u0432\u0430\u0447\u0435\u0432\u043E", "value": 113, "slug": "shivachevo" }, { "key": "\u0428\u0438\u043B\u043A\u043E\u0432\u0446\u0438", "value": 1, "slug": "shilkovci" }, { "key": "\u0428\u0438\u043F\u043A\u0430", "value": 115, "slug": "shipka" }, { "key": "\u0428\u0438\u043F\u043A\u043E\u0432\u043E", "value": 43, "slug": "shipkovo" }, { "key": "\u0428\u0438\u043F\u043E\u0447\u0430\u043D\u0435", "value": 4, "slug": "shipochane" }, { "key": "\u0428\u0438\u043F\u043E\u0447\u0430\u043D\u043E", "value": 2, "slug": "shipochano" }, { "key": "\u0428\u0438\u0440\u043E\u043A\u0430 \u043B\u044A\u043A\u0430", "value": 24, "slug": "shiroka-lka" }, { "key": "\u0428\u0438\u0440\u043E\u043A\u0430 \u043F\u043E\u043B\u044F\u043D\u0430", "value": 10, "slug": "shiroka-polyana" }, { "key": "\u0428\u0438\u0440\u043E\u043A\u0438 \u0434\u043E\u043B", "value": 55, "slug": "shiroki-dol" }, { "key": "\u0428\u0438\u0440\u043E\u043A\u043E \u043F\u043E\u043B\u0435", "value": 24, "slug": "shiroko-pole" }, { "key": "\u0428\u0438\u0440\u043E\u043A\u043E\u0432\u043E", "value": 11, "slug": "shirokovo" }, { "key": "\u0428\u0438\u0448\u0435\u043D\u0446\u0438", "value": 1, "slug": "shishenci" }, { "key": "\u0428\u0438\u0448\u043A\u043E\u0432\u0438\u0446\u0430", "value": 1, "slug": "shishkovica" }, { "key": "\u0428\u0438\u0448\u043A\u043E\u0432\u0446\u0438", "value": 16, "slug": "shishkovci" }, { "key": "\u0428\u0438\u0448\u043C\u0430\u043D\u043E\u0432\u043E", "value": 7, "slug": "shishmanovo" }, { "key": "\u0428\u0438\u0448\u043C\u0430\u043D\u0446\u0438", "value": 30, "slug": "shishmanci" }, { "key": "\u0428\u0438\u044F\u043A\u043E\u0432\u043E", "value": 7, "slug": "shiyakovo" }, { "key": "\u0428\u043A\u043E\u0440\u043F\u0438\u043B\u043E\u0432\u0446\u0438", "value": 53, "slug": "shkorpilovci" }, { "key": "\u0428\u043E\u0434\u0435\u043A\u043E\u0432\u0446\u0438", "value": 1, "slug": "shodekovci" }, { "key": "\u0428\u043E\u043F\u0446\u0438", "value": 5, "slug": "shopci" }, { "key": "\u0428\u0443\u043C\u0430", "value": 12, "slug": "shuma" }, { "key": "\u0428\u0443\u043C\u0430\u0442\u0430", "value": 19, "slug": "shumata" }, { "key": "\u0428\u0443\u043C\u0435\u043D", "value": 7408, "slug": "shumen" }, { "key": "\u0428\u0443\u043C\u0435\u043D\u0446\u0438", "value": 7, "slug": "shumenci" }, { "key": "\u0428\u0443\u043C\u043D\u0430\u0442\u0438\u0446\u0430", "value": 7, "slug": "shumnatica" }, { "key": "\u0429\u0435\u0440\u043D\u0430", "value": 2, "slug": "shcherna" }, { "key": "\u0429\u0438\u043F\u0441\u043A\u043E", "value": 7, "slug": "shchipsko" }, { "key": "\u0429\u0438\u0442", "value": 4, "slug": "shchit" }, { "key": "\u0429\u0440\u044A\u043A\u043B\u0435\u0432\u043E", "value": 107, "slug": "shchrklevo" }, { "key": "\u0429\u044A\u0440\u043A\u043E\u0432\u043E", "value": 10, "slug": "shchrkovo" }, { "key": "\u042A\u0433\u043B\u0435\u043D", "value": 30, "slug": "glen" }, { "key": "\u042E\u0433\u043E\u0432\u043E", "value": 2, "slug": "yugovo" }, { "key": "\u042E\u0434\u0435\u043B\u043D\u0438\u043A", "value": 27, "slug": "yudelnik" }, { "key": "\u042E\u043B\u0438\u0435\u0432\u043E", "value": 28, "slug": "yulievo" }, { "key": "\u042E\u043D\u0430\u043A", "value": 16, "slug": "yunak" }, { "key": "\u042E\u043D\u0430\u0446\u0438\u0442\u0435", "value": 58, "slug": "yunacite" }, { "key": "\u042E\u043D\u0434\u043E\u043B\u0430", "value": 21, "slug": "yundola" }, { "key": "\u042E\u043D\u0435\u0446", "value": 33, "slug": "yunec" }, { "key": "\u042E\u043F\u0435\u0440", "value": 11, "slug": "yuper" }, { "key": "\u042E\u0440\u0443\u043A\u043E\u0432\u043E", "value": 33, "slug": "yurukovo" }, { "key": "\u042F\u0431\u043B\u0430\u043D\u0438\u0446\u0430", "value": 172, "slug": "yablanica" }, { "key": "\u042F\u0431\u043B\u0430\u043D\u043E\u0432\u043E", "value": 139, "slug": "yablanovo" }, { "key": "\u042F\u0431\u044A\u043B\u043A\u043E\u0432\u0435\u0446", "value": 6, "slug": "yablkovec" }, { "key": "\u042F\u0431\u044A\u043B\u043A\u043E\u0432\u043E", "value": 83, "slug": "yablkovo" }, { "key": "\u042F\u0431\u044A\u043B\u0447\u0435\u0432\u043E", "value": 36, "slug": "yablchevo" }, { "key": "\u042F\u0431\u044A\u043B\u0447\u0435\u043D\u0438", "value": 2, "slug": "yablcheni" }, { "key": "\u042F\u0432\u043E\u0440\u0435\u0446", "value": 34, "slug": "yavorec" }, { "key": "\u042F\u0432\u043E\u0440\u043D\u0438\u0446\u0430", "value": 19, "slug": "yavornica" }, { "key": "\u042F\u0432\u043E\u0440\u043E\u0432\u043E", "value": 6, "slug": "yavorovo" }, { "key": "\u042F\u0432\u0440\u043E\u0432\u043E", "value": 11, "slug": "yavrovo" }, { "key": "\u042F\u0433\u043D\u0438\u043B\u043E", "value": 11, "slug": "yagnilo" }, { "key": "\u042F\u0433\u043E\u0434\u0430", "value": 98, "slug": "yagoda" }, { "key": "\u042F\u0433\u043E\u0434\u0438\u043D\u0430", "value": 36, "slug": "yagodina" }, { "key": "\u042F\u0433\u043E\u0434\u043E\u0432\u043E", "value": 190, "slug": "yagodovo" }, { "key": "\u042F\u0437\u0434\u0430\u0447", "value": 3, "slug": "yazdach" }, { "key": "\u042F\u043A\u0438\u043C \u0413\u0440\u0443\u0435\u0432\u043E", "value": 8, "slug": "yakim-gruevo" }, { "key": "\u042F\u043A\u0438\u043C\u043E\u0432\u043E", "value": 56, "slug": "yakimovo" }, { "key": "\u042F\u043A\u043E\u0432\u0446\u0438", "value": 7, "slug": "yakovci" }, { "key": "\u042F\u043A\u043E\u0440\u0443\u0434\u0430", "value": 324, "slug": "yakoruda" }, { "key": "\u042F\u043B\u0431\u043E\u0442\u0438\u043D\u0430", "value": 2, "slug": "yalbotina" }, { "key": "\u042F\u043B\u043E\u0432\u043E", "value": 2, "slug": "yalovo" }, { "key": "\u042F\u043C\u0431\u043E\u043B", "value": 6247, "slug": "yambol" }, { "key": "\u042F\u043C\u0438\u043D\u043E", "value": 8, "slug": "yamino" }, { "key": "\u042F\u043C\u043D\u0430", "value": 3, "slug": "yamna" }, { "key": "\u042F\u043D\u0430", "value": 66, "slug": "yana" }, { "key": "\u042F\u043D\u0438\u043D\u043E", "value": 3, "slug": "yanino" }, { "key": "\u042F\u043D\u043A\u043E\u0432\u043E", "value": 18, "slug": "yankovo" }, { "key": "\u042F\u043D\u043A\u043E\u0432\u0446\u0438", "value": 6, "slug": "yankovci" }, { "key": "\u042F\u043D\u043E\u0432\u043E", "value": 6, "slug": "yanovo" }, { "key": "\u042F\u043D\u0442\u0440\u0430", "value": 15, "slug": "yantra" }, { "key": "\u042F\u043D\u044C\u043E\u0432\u0435\u0446", "value": 1, "slug": "yanovec" }, { "key": "\u042F\u0440\u0434\u0436\u0438\u043B\u043E\u0432\u0446\u0438", "value": 29, "slug": "yardzhilovci" }, { "key": "\u042F\u0440\u0435\u0431\u0438\u0446\u0430", "value": 37, "slug": "yarebica" }, { "key": "\u042F\u0440\u0435\u0431\u0438\u0447\u043D\u0430", "value": 19, "slug": "yarebichna" }, { "key": "\u042F\u0440\u043B\u043E\u0432\u043E", "value": 10, "slug": "yarlovo" }, { "key": "\u042F\u0440\u043B\u043E\u0432\u0446\u0438", "value": 2, "slug": "yarlovci" }, { "key": "\u042F\u0441\u0435\u043D", "value": 101, "slug": "yasen" }, { "key": "\u042F\u0441\u0435\u043D\u0438\u0442\u0435", "value": 1, "slug": "yasenite" }, { "key": "\u042F\u0441\u0435\u043D\u043A\u043E\u0432\u043E", "value": 57, "slug": "yasenkovo" }, { "key": "\u042F\u0441\u0435\u043D\u043E\u0432\u0435\u0446", "value": 97, "slug": "yasenovec" }, { "key": "\u042F\u0441\u0435\u043D\u043E\u0432\u043E", "value": 26, "slug": "yasenovo" }, { "key": "\u042F\u0441\u043D\u0430 \u043F\u043E\u043B\u044F\u043D\u0430", "value": 35, "slug": "yasna-polyana" }, { "key": "\u042F\u0441\u043D\u043E \u043F\u043E\u043B\u0435", "value": 12, "slug": "yasno-pole" }, { "key": "\u042F\u0441\u0442\u0440\u0435\u0431", "value": 11, "slug": "yastreb" }, { "key": "\u042F\u0441\u0442\u0440\u0435\u0431\u0438\u043D\u043E", "value": 2, "slug": "yastrebino" }, { "key": "\u042F\u0441\u0442\u0440\u0435\u0431\u043D\u0430", "value": 2, "slug": "yastrebna" }, { "key": "\u042F\u0441\u0442\u0440\u0435\u0431\u043E\u0432\u043E", "value": 28, "slug": "yastrebovo" }, { "key": "\u042F\u0445\u0438\u043D\u043E\u0432\u043E", "value": 111, "slug": "yahinovo" }];
    $$Astro$c = createAstro();
    $$Footer = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro$c, $$props, $$slots);
      Astro2.self = $$Footer;
      return renderTemplate`${maybeRenderHead()}<footer class="relative"> <div class="grid grid-cols-2 sm:grid-cols-5 md:grid-cols-6 pb-6 gap-3 container mx-auto px-4"> <div class="z-10 text-sm"> <h3 class="headingbottom">Services</h3> <a class="block" href="/vicove">Вицове</a> <a class="block" href="/news">Новини</a> <a class="block" href="https://userz.net/">FAQ AI</a> <a class="block" href="/business">Бизнес</a> </div> <div class="z-10 text-sm text-right sm:text-left"> <div class="headingbottom">&nbsp;</div><a class="block" href="/movies">Филми</a> <a class="block" href="/tw">Туитър ДБ (бета)</a><a class="block" href="https://rudixops.com/">DevOps</a> </div> <div class="z-10 text-sm text-right sm:text-left hidden sm:block"></div> <div class="z-10 text-sm text-right sm:text-left hidden md:block"></div> <div class="z-10 text-sm"> <h3 class="headingbottom">Company</h3><a class="block" href="/other/about">За</a><a class="block" href="/other/contact">Контакт</a> </div> <div class="z-10 text-sm"> <h3 class="headingbottom text-right">Legal</h3><a class="block text-right" href="/other/terms">Terms of use</a><a class="block text-right" href="/other/privacy">Privacy policy</a> </div> </div> <div class="w-full absolute z-0 bottom-0"> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320" class="w-full z-10 hidden dark:block"> <path fill="#00b894" d="m0 224 48 10.7C96 245 192 267 288 240c96-27 192-101 288-96s192 91 288 101.3c96 10.7 192-53.3 288-90.6 96-37.7 192-47.7 240-53.4l48-5.3v224H0Z"></path> </svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320" class="w-full z-10 dark:hidden block"> <path fill="#2d3748" d="m0 224 48 10.7C96 245 192 267 288 240c96-27 192-101 288-96s192 91 288 101.3c96 10.7 192-53.3 288-90.6 96-37.7 192-47.7 240-53.4l48-5.3v224H0Z"></path> </svg> <div class="flex justify-center items-center text-xs text-gray-600 z-10 absolute w-full bottom-2 drop-shadow-md dark:text-white">
2023 kloun | All Rights Reserved ®
</div> </div> </footer>`;
    }, "/home/runner/work/monext/monext/apps/kloun/src/components/Footer.astro", void 0);
    __freeze$2 = Object.freeze;
    __defProp$2 = Object.defineProperty;
    __template$2 = (cooked, raw) => __freeze$2(__defProp$2(cooked, "raw", { value: __freeze$2(raw || cooked.slice()) }));
    $$Astro$b = createAstro();
    $$Astronav = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro$b, $$props, $$slots);
      Astro2.self = $$Astronav;
      const { closeOnClick = false } = Astro2.props;
      return renderTemplate(_a$2 || (_a$2 = __template$2(["", " <script>(function(){", '\n["DOMContentLoaded", "astro:after-swap"].forEach((event) => {\n  document.addEventListener(event, addListeners);\n});\n\n// Function to clone and replace elements\nfunction cloneAndReplace(element) {\n  const clone = element.cloneNode(true);\n  element.parentNode.replaceChild(clone, element);\n}\n\nfunction addListeners() {\n  // Clean up existing listeners\n  const oldMenuButton = document.getElementById("astronav-menu");\n  if (oldMenuButton) {\n    cloneAndReplace(oldMenuButton);\n  }\n\n  const oldDropdownMenus = document.querySelectorAll(".astronav-dropdown");\n  oldDropdownMenus.forEach((menu) => {\n    cloneAndReplace(menu);\n  });\n\n  // Mobile nav toggle\n  const menuButton = document.getElementById("astronav-menu");\n  menuButton && menuButton.addEventListener("click", toggleMobileNav);\n\n  // Dropdown menus\n  const dropdownMenus = document.querySelectorAll(".astronav-dropdown");\n  dropdownMenus.forEach((menu) => {\n    const button = menu.querySelector("button");\n    button &&\n      button.addEventListener("click", (event) =>\n        toggleDropdownMenu(event, menu, dropdownMenus)\n      );\n\n    // Handle Submenu Dropdowns\n    const dropDownSubmenus = menu.querySelectorAll(\n      ".astronav-dropdown-submenu"\n    );\n\n    dropDownSubmenus.forEach((submenu) => {\n      const submenuButton = submenu.querySelector("button");\n      submenuButton &&\n        submenuButton.addEventListener("click", (event) => {\n          event.stopImmediatePropagation();\n          toggleSubmenuDropdown(event, submenu);\n        });\n    });\n  });\n\n  // Clicking away from dropdown will remove the dropdown class\n  document.addEventListener("click", closeAllDropdowns);\n\n  if (closeOnClick) {\n    handleCloseOnClick();\n  }\n}\n\nfunction toggleMobileNav() {\n  [...document.querySelectorAll(".astronav-toggle")].forEach((el) => {\n    el.classList.toggle("hidden");\n  });\n}\n\nfunction toggleDropdownMenu(event, menu, dropdownMenus) {\n  toggleMenu(menu);\n\n  // Close one dropdown when selecting another\n  Array.from(dropdownMenus)\n    .filter((el) => el !== menu && !menu.contains(el))\n    .forEach(closeMenu);\n\n  event.stopPropagation();\n}\n\nfunction toggleSubmenuDropdown(event, submenu) {\n  event.stopPropagation();\n  toggleMenu(submenu);\n\n  // Close sibling submenus at the same nesting level\n  const siblingSubmenus = submenu\n    .closest(".astronav-dropdown")\n    .querySelectorAll(".astronav-dropdown-submenu");\n  Array.from(siblingSubmenus)\n    .filter((el) => el !== submenu && !submenu.contains(el))\n    .forEach(closeMenu);\n}\n\nfunction closeAllDropdowns(event) {\n  const dropdownMenus = document.querySelectorAll(".dropdown-toggle");\n  const dropdownParent = document.querySelectorAll(\n    ".astronav-dropdown, .astronav-dropdown-submenu"\n  );\n  const isButtonInsideDropdown = [\n    ...document.querySelectorAll(\n      ".astronav-dropdown button, .astronav-dropdown-submenu button, #astronav-menu"\n    ),\n  ].some((button) => button.contains(event.target));\n  if (!isButtonInsideDropdown) {\n    dropdownMenus.forEach((d) => {\n      // console.log("I ran", d);\n      // if (!d.contains(event.target)) {\n      d.classList.remove("open");\n      d.removeAttribute("open");\n      d.classList.add("hidden");\n      // }\n    });\n    dropdownParent.forEach((d) => {\n      d.classList.remove("open");\n      d.removeAttribute("open");\n      d.setAttribute("aria-expanded", "false");\n    });\n  }\n}\n\nfunction toggleMenu(menu) {\n  menu.classList.toggle("open");\n  const expanded = menu.getAttribute("aria-expanded") === "true";\n  menu.setAttribute("aria-expanded", expanded ? "false" : "true");\n  menu.hasAttribute("open")\n    ? menu.removeAttribute("open")\n    : menu.setAttribute("open", "");\n\n  const dropdownToggle = menu.querySelector(".dropdown-toggle");\n  const dropdownExpanded = dropdownToggle.getAttribute("aria-expanded");\n  dropdownToggle.classList.toggle("hidden");\n  dropdownToggle.setAttribute(\n    "aria-expanded",\n    dropdownExpanded === "true" ? "false" : "true"\n  );\n}\n\nfunction closeMenu(menu) {\n  // console.log("closing", menu);\n  menu.classList.remove("open");\n  menu.removeAttribute("open");\n  menu.setAttribute("aria-expanded", "false");\n  const dropdownToggles = menu.querySelectorAll(".dropdown-toggle");\n  dropdownToggles.forEach((toggle) => {\n    toggle.classList.add("hidden");\n    toggle.setAttribute("aria-expanded", "false");\n  });\n}\n\nfunction handleCloseOnClick() {\n  const navMenuItems = document.querySelector(".astronav-items");\n  const navToggle = document.getElementById("astronav-menu");\n  const navLink = navMenuItems && navMenuItems.querySelectorAll("a");\n\n  const MenuIcons = navToggle.querySelectorAll(".astronav-toggle");\n\n  navLink &&\n    navLink.forEach((item) => {\n      item.addEventListener("click", () => {\n        navMenuItems?.classList.add("hidden");\n        MenuIcons.forEach((el) => {\n          el.classList.toggle("hidden");\n        });\n      });\n    });\n}\n})();<\/script>'])), renderSlot($$result, $$slots["default"]), defineScriptVars({ closeOnClick }));
    }, "/home/runner/work/monext/monext/node_modules/astro-navbar/src/Astronav.astro", void 0);
    $$Astro$a = createAstro();
    $$MenuIcon = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro$a, $$props, $$slots);
      Astro2.self = $$MenuIcon;
      const { class: className } = Astro2.props;
      return renderTemplate`${maybeRenderHead()}<button id="astronav-menu" aria-label="Toggle Menu"> ${renderSlot($$result, $$slots["default"], renderTemplate` <svg fill="currentColor"${addAttribute([className], "class:list")} width="24" height="24" viewBox="0 0 24 24" xmlns="https://www.w3.org/2000/svg"> <title>Toggle Menu</title> <path class="astronav-close-icon astronav-toggle hidden" fill-rule="evenodd" clip-rule="evenodd" d="M18.278 16.864a1 1 0 01-1.414 1.414l-4.829-4.828-4.828 4.828a1 1 0 01-1.414-1.414l4.828-4.829-4.828-4.828a1 1 0 011.414-1.414l4.829 4.828 4.828-4.828a1 1 0 111.414 1.414l-4.828 4.829 4.828 4.828z"></path> <path class="astronav-open-icon astronav-toggle" fill-rule="evenodd" d="M4 5h16a1 1 0 010 2H4a1 1 0 110-2zm0 6h16a1 1 0 010 2H4a1 1 0 010-2zm0 6h16a1 1 0 010 2H4a1 1 0 010-2z"></path> </svg> `)} </button>`;
    }, "/home/runner/work/monext/monext/node_modules/astro-navbar/src/components/MenuIcon.astro", void 0);
    $$Astro$9 = createAstro();
    $$OpenIcon = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro$9, $$props, $$slots);
      Astro2.self = $$OpenIcon;
      const { class: className } = Astro2.props;
      return renderTemplate`${maybeRenderHead()}<span${addAttribute(["astronav-open-icon astronav-toggle", className], "class:list")}>${renderSlot($$result, $$slots["default"])}</span>`;
    }, "/home/runner/work/monext/monext/node_modules/astro-navbar/src/components/OpenIcon.astro", void 0);
    $$Astro$8 = createAstro();
    $$CloseIcon = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro$8, $$props, $$slots);
      Astro2.self = $$CloseIcon;
      const { class: className } = Astro2.props;
      return renderTemplate`${maybeRenderHead()}<span${addAttribute(["astronav-close-icon astronav-toggle hidden", className], "class:list")}>${renderSlot($$result, $$slots["default"])}</span>`;
    }, "/home/runner/work/monext/monext/node_modules/astro-navbar/src/components/CloseIcon.astro", void 0);
    $$Astro$7 = createAstro();
    $$MenuItems = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro$7, $$props, $$slots);
      Astro2.self = $$MenuItems;
      const { class: className } = Astro2.props;
      return renderTemplate`${maybeRenderHead()}<nav${addAttribute(["astronav-items astronav-toggle", className], "class:list")}> ${renderSlot($$result, $$slots["default"])} </nav>`;
    }, "/home/runner/work/monext/monext/node_modules/astro-navbar/src/components/MenuItems.astro", void 0);
    $$Astro$6 = createAstro();
    $$Dropdown = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro$6, $$props, $$slots);
      Astro2.self = $$Dropdown;
      const { class: className } = Astro2.props;
      return renderTemplate`${maybeRenderHead()}<menu${addAttribute(["astronav-dropdown", className], "class:list")} aria-expanded="false">${renderSlot($$result, $$slots["default"])}</menu>`;
    }, "/home/runner/work/monext/monext/node_modules/astro-navbar/src/components/Dropdown.astro", void 0);
    $$Astro$5 = createAstro();
    $$DropdownSubmenu = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro$5, $$props, $$slots);
      Astro2.self = $$DropdownSubmenu;
      const { class: className } = Astro2.props;
      return renderTemplate`${maybeRenderHead()}<div${addAttribute(["astronav-dropdown-submenu", className], "class:list")} aria-expanded="false"> ${renderSlot($$result, $$slots["default"])} </div>`;
    }, "/home/runner/work/monext/monext/node_modules/astro-navbar/src/components/DropdownSubmenu.astro", void 0);
    $$Astro$4 = createAstro();
    $$DropdownItems = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro$4, $$props, $$slots);
      Astro2.self = $$DropdownItems;
      const { class: className } = Astro2.props;
      return renderTemplate`${maybeRenderHead()}<div${addAttribute(["astronav-dropdown dropdown-toggle hidden", className], "class:list")} aria-expanded="false"> ${renderSlot($$result, $$slots["default"])} </div>`;
    }, "/home/runner/work/monext/monext/node_modules/astro-navbar/src/components/DropdownItems.astro", void 0);
    __freeze$1 = Object.freeze;
    __defProp$1 = Object.defineProperty;
    __template$1 = (cooked, raw) => __freeze$1(__defProp$1(cooked, "raw", { value: __freeze$1(raw || cooked.slice()) }));
    $$Astro$3 = createAstro();
    $$StickyHeader = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro$3, $$props, $$slots);
      Astro2.self = $$StickyHeader;
      const {
        scrollY = 100,
        defaultClass = "",
        activeClass = "",
        class: className = ""
      } = Astro2.props;
      return renderTemplate(_a$1 || (_a$1 = __template$1(["", "<header", "> ", " </header> <script>(function(){", '\nlet scrollPos = 0;\nlet ticking = false;\n\nfunction OnScroll(scrollPos) {\n  const headers = document.querySelectorAll(".astronav-sticky-header");\n  const classArray = activeClass.split(" ");\n  const replaceArray = defaultClass.split(" ");\n\n  headers.forEach((header) => {\n    if (scrollPos > scrollY) {\n      header.classList.remove(...replaceArray);\n      header.classList.add("is-active", ...classArray);\n      header.setAttribute("active", "");\n    }\n    //reduce the scrollY to avoid flickering when scrolling up\n    if (scrollPos < Math.max(scrollY - 20, 0)) {\n      header.classList.remove("is-active", ...classArray);\n      header.classList.add(...replaceArray);\n      header.removeAttribute("active");\n    }\n  });\n}\n\n// Scroll event throttling as per MDN\n// https://developer.mozilla.org/en-US/docs/Web/API/Document/scroll_event\n\ndocument.addEventListener("scroll", (event) => {\n  scrollPos = window.scrollY;\n  if (!ticking) {\n    window.requestAnimationFrame(() => {\n      OnScroll(scrollPos);\n      ticking = false;\n    });\n\n    ticking = true;\n  }\n});\n})();<\/script>'])), maybeRenderHead(), addAttribute(["astronav-sticky-header", className, defaultClass], "class:list"), renderSlot($$result, $$slots["default"]), defineScriptVars({ scrollY, defaultClass, activeClass }));
    }, "/home/runner/work/monext/monext/node_modules/astro-navbar/src/components/StickyHeader.astro", void 0);
    $$Astro$2 = createAstro();
    $$Header = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro$2, $$props, $$slots);
      Astro2.self = $$Header;
      const menuitems = [
        {
          title: "\u041D\u043E\u0432\u0438\u043D\u0438",
          path: "/news/1"
        },
        {
          title: "TwetBase",
          path: "/tw"
        },
        {
          title: "\u0412\u0438\u0446\u043E\u0432\u0435",
          path: "/vicove"
        },
        {
          title: "Contact",
          path: "/contact"
        }
      ];
      return renderTemplate`${maybeRenderHead()}<header class="flex flex-col lg:flex-row justify-between items-center my-5 sticky top-0 backdrop-blur-sm z-10 p-4"> ${renderComponent($$result, "Astronav", $$Astronav, {}, { "default": ($$result2) => renderTemplate` <div class="flex w-full lg:w-auto items-center justify-between"> <a href="/" class="text-lg flex items-center"> <img src="/logo1.png" class="w-12 h-12 mr-2"> <span class="font-bold text-slate-300">kloun</span><span class="text-slate-200">lol</span> </a> <div class="block lg:hidden"> ${renderComponent($$result2, "MenuIcon", $$MenuIcon, { "class": "w-4 h-4 text-gray-800" })} </div> </div> ${renderComponent($$result2, "MenuItems", $$MenuItems, { "class": "hidden w-full lg:w-auto mt-2 lg:flex lg:mt-0" }, { "default": ($$result3) => renderTemplate` <ul class="flex flex-col lg:flex-row lg:gap-3"> ${menuitems.map((item) => renderTemplate`<li> <a${addAttribute(item.path, "href")} class="flex lg:px-3 py-2 text-gray-600 hover:text-gray-900"> ${item.title} </a> </li>`)} </ul> <div class="lg:hidden flex items-center mt-3 gap-4"> <!-- <a href="#" style="muted">Log in</a>
				<a href="#">Sign up</a> --> </div> ` })} ` })} <div> <div class="hidden lg:flex items-center gap-4"> <a href="#">&nbsp;</a> <a href="#">&nbsp;</a> </div> </div> </header>`;
    }, "/home/runner/work/monext/monext/apps/kloun/src/components/Header.astro", void 0);
    __freeze = Object.freeze;
    __defProp2 = Object.defineProperty;
    __template = (cooked, raw) => __freeze(__defProp2(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
    $$Astro$12 = createAstro();
    $$Layout = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro$12, $$props, $$slots);
      Astro2.self = $$Layout;
      const { title, description, image, hideFooter } = Astro2.props;
      const currentPath = "https://kloun.lol" + Astro2.url.pathname;
      return renderTemplate(_b || (_b = __template(['<html lang="bg"> <head><meta charset="UTF-8"><meta name="viewport" content="width=device-width"><link rel="icon" type="image/svg+xml" href="/favicon.svg"><title>', '</title><meta name="description"', '><link rel="canonical"', '><meta name="twitter:card" content="summary_large_image"><meta name="twitter:site" content="@site"><meta name="twitter:creator" content="@handle"><meta property="fb:app_id" content="281985576166744"><meta property="og:title"', '><meta property="og:description"', '><meta property="og:url"', '><meta property="og:type" content="article"><meta property="og:image"', '><meta property="og:image:alt" content="Og Image Alt"><meta property="og:image:type" content="image/jpeg"><meta property="og:image:width" content="800"><meta property="og:image:height" content="600"><meta property="og:site_name" content="kloun.lol"><meta name="theme-color" media="(prefers-color-scheme: light)" content="light">', "", '</head> <body> <div class="flex-col flex min-h-screen"> ', ' <div class="container mx-auto  px-4 sm:px-6 lg:px-8 grow"> ', " </div> ", ' <div id="fb-root"></div> <script async src="https://www.googletagmanager.com/gtag/js?id=G-PDX6T8DTFR"><\/script> <script id="rendered-js">\n			function fbshare(url) {\n				window.open(\n					"http://www.facebook.com/sharer.php?u=" +\n					encodeURIComponent(url),\n					"sharer",\n					"toolbar=0,status=0,width=626,height=436"\n				);\n				return false;\n			}\n			window.dataLayer = window.dataLayer || [];\n\n			function gtag() {\n				dataLayer.push(arguments);\n			}\n			gtag("js", new Date());\n			gtag("config", "G-PDX6T8DTFR");\n		<\/script>  </div> </body> </html>'])), title, addAttribute(description || "Zero in on  social media presence by checking out their  profiles, featuring photos and engaging content", "content"), addAttribute(currentPath, "href"), addAttribute(title, "content"), addAttribute(description, "content"), addAttribute(currentPath, "content"), addAttribute(image || "https://kloun.lol/images/og.jpg", "content"), !hideFooter && renderTemplate(_a || (_a = __template(['<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-5476404733919333" crossorigin="anonymous"><\/script>']))), renderHead(), renderComponent($$result, "Header", $$Header, {}), renderSlot($$result, $$slots["default"]), renderComponent($$result, "Footer", $$Footer, {}));
    }, "/home/runner/work/monext/monext/apps/kloun/src/layouts/Layout.astro", void 0);
    $$Astro2 = createAstro();
    prerender3 = false;
    $$ = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro2, $$props, $$slots);
      Astro2.self = $$;
      const { business: business2 } = Astro2.params;
      console.log(business2);
      const x = business2 ? business2.split("/") : ["a"];
      let resp;
      let pagenum = 1;
      let items = 0;
      let slug = "";
      let cats;
      let firms;
      if (business2?.includes("/")) {
        pagenum = x[1] ? Number(x[1].replace(/\//g, "")) : 1;
        slug = x[0];
        const skip = pagenum * 100 - 100;
        const key = businesses.find((xx) => xx.slug === x[0])?.key || "\u0421\u043E\u0444\u0438\u044F";
        const datax = db.view("company/companiesbg", {
          reduce: false,
          key: encodeURI(key),
          limit: 100,
          skip,
          update: "lazy",
          cache: 864e3
        });
        const itemsx = db.view("company/companiesbg", {
          reduce: true,
          key: encodeURI(key),
          limit: 1,
          group: false,
          update: "lazy",
          cache: 864e3
        });
        resp = await Promise.all([datax, itemsx]).then((values) => {
          return {
            firms: values[0].rows,
            items: values[1].value
          };
        });
        items = resp.items;
        firms = resp.firms;
      } else {
        cats = businesses.filter((i) => i.value > 1200).sort((a, z) => z.value - a.value);
      }
      return renderTemplate`${renderComponent($$result, "Layout", $$Layout, { "title": ` Twitter ecosphere ${pagenum}`, "description": `Twitter ecosphere   ` }, { "default": ($$result2) => renderTemplate`${!business2 ? renderTemplate`${maybeRenderHead()}<div class="flex w-full flex-wrap gap-3"> ${cats?.map((city) => renderTemplate`${renderComponent($$result2, "CatButton", $$CatButton, { "title": city.key, "url": "/business/" + city.slug + "/1", "count": city.value })}`)} </div>` : renderTemplate`<div> <div class="my-5 flex w-full flex-wrap gap-2"> ${firms.map(({ value }) => renderTemplate`${renderComponent($$result2, "CatButton", $$CatButton, { "title": value, "url": "#" + value })}`)} </div> ${renderComponent($$result2, "Pagination", $$Pagination, { "items": items, "currentPage": pagenum, "pageSize": 100, "prefix": "/business/" + slug + "/" })} </div>`}` })}`;
    }, "/home/runner/work/monext/monext/apps/kloun/src/pages/business/[...business].astro", void 0);
    $$file = "/home/runner/work/monext/monext/apps/kloun/src/pages/business/[...business].astro";
    $$url = "/business/[...business]";
    ____business_ = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      default: $$,
      file: $$file,
      prerender: prerender3,
      url: $$url
    }, Symbol.toStringTag, { value: "Module" }));
  }
});

// dist/$server_build/chunks/_.._CEcPGdZk.mjs
var CEcPGdZk_exports = {};
__export(CEcPGdZk_exports, {
  page: () => page4,
  renderers: () => renderers
});
var page4;
var init_CEcPGdZk = __esm({
  "dist/$server_build/chunks/_.._CEcPGdZk.mjs"() {
    "use strict";
    init_renderers();
    page4 = () => Promise.resolve().then(() => (init_RxTcdYg8(), RxTcdYg8_exports)).then((n) => n._);
  }
});

// ../../node_modules/drizzle-orm/entity.js
function is(value, type) {
  if (!value || typeof value !== "object") {
    return false;
  }
  if (value instanceof type) {
    return true;
  }
  if (!Object.prototype.hasOwnProperty.call(type, entityKind)) {
    throw new Error(
      `Class "${type.name ?? "<unknown>"}" doesn't look like a Drizzle entity. If this is incorrect and the class is provided by Drizzle, please report this as a bug.`
    );
  }
  let cls = value.constructor;
  if (cls) {
    while (cls) {
      if (entityKind in cls && cls[entityKind] === type[entityKind]) {
        return true;
      }
      cls = Object.getPrototypeOf(cls);
    }
  }
  return false;
}
var entityKind, hasOwnEntityKind;
var init_entity = __esm({
  "../../node_modules/drizzle-orm/entity.js"() {
    entityKind = Symbol.for("drizzle:entityKind");
    hasOwnEntityKind = Symbol.for("drizzle:hasOwnEntityKind");
  }
});

// ../../node_modules/drizzle-orm/logger.js
var ConsoleLogWriter, DefaultLogger, NoopLogger;
var init_logger = __esm({
  "../../node_modules/drizzle-orm/logger.js"() {
    init_entity();
    ConsoleLogWriter = class {
      static [entityKind] = "ConsoleLogWriter";
      write(message) {
        console.log(message);
      }
    };
    DefaultLogger = class {
      static [entityKind] = "DefaultLogger";
      writer;
      constructor(config) {
        this.writer = config?.writer ?? new ConsoleLogWriter();
      }
      logQuery(query, params) {
        const stringifiedParams = params.map((p) => {
          try {
            return JSON.stringify(p);
          } catch {
            return String(p);
          }
        });
        const paramsStr = stringifiedParams.length ? ` -- params: [${stringifiedParams.join(", ")}]` : "";
        this.writer.write(`Query: ${query}${paramsStr}`);
      }
    };
    NoopLogger = class {
      static [entityKind] = "NoopLogger";
      logQuery() {
      }
    };
  }
});

// ../../node_modules/drizzle-orm/query-promise.js
var QueryPromise;
var init_query_promise = __esm({
  "../../node_modules/drizzle-orm/query-promise.js"() {
    init_entity();
    QueryPromise = class {
      static [entityKind] = "QueryPromise";
      [Symbol.toStringTag] = "QueryPromise";
      catch(onRejected) {
        return this.then(void 0, onRejected);
      }
      finally(onFinally) {
        return this.then(
          (value) => {
            onFinally?.();
            return value;
          },
          (reason) => {
            onFinally?.();
            throw reason;
          }
        );
      }
      then(onFulfilled, onRejected) {
        return this.execute().then(onFulfilled, onRejected);
      }
    };
  }
});

// ../../node_modules/drizzle-orm/table.js
function isTable(table) {
  return typeof table === "object" && table !== null && IsDrizzleTable in table;
}
function getTableName(table) {
  return table[TableName];
}
var TableName, Schema, Columns, OriginalName, BaseName, IsAlias, ExtraConfigBuilder, IsDrizzleTable, Table;
var init_table = __esm({
  "../../node_modules/drizzle-orm/table.js"() {
    init_entity();
    TableName = Symbol.for("drizzle:Name");
    Schema = Symbol.for("drizzle:Schema");
    Columns = Symbol.for("drizzle:Columns");
    OriginalName = Symbol.for("drizzle:OriginalName");
    BaseName = Symbol.for("drizzle:BaseName");
    IsAlias = Symbol.for("drizzle:IsAlias");
    ExtraConfigBuilder = Symbol.for("drizzle:ExtraConfigBuilder");
    IsDrizzleTable = Symbol.for("drizzle:IsDrizzleTable");
    Table = class {
      static [entityKind] = "Table";
      /** @internal */
      static Symbol = {
        Name: TableName,
        Schema,
        OriginalName,
        Columns,
        BaseName,
        IsAlias,
        ExtraConfigBuilder
      };
      /**
       * @internal
       * Can be changed if the table is aliased.
       */
      [TableName];
      /**
       * @internal
       * Used to store the original name of the table, before any aliasing.
       */
      [OriginalName];
      /** @internal */
      [Schema];
      /** @internal */
      [Columns];
      /**
       *  @internal
       * Used to store the table name before the transformation via the `tableCreator` functions.
       */
      [BaseName];
      /** @internal */
      [IsAlias] = false;
      /** @internal */
      [ExtraConfigBuilder] = void 0;
      [IsDrizzleTable] = true;
      constructor(name, schema, baseName) {
        this[TableName] = this[OriginalName] = name;
        this[Schema] = schema;
        this[BaseName] = baseName;
      }
    };
  }
});

// ../../node_modules/drizzle-orm/tracing-utils.js
function iife(fn, ...args) {
  return fn(...args);
}
var init_tracing_utils = __esm({
  "../../node_modules/drizzle-orm/tracing-utils.js"() {
  }
});

// ../../node_modules/drizzle-orm/version.js
var version;
var init_version = __esm({
  "../../node_modules/drizzle-orm/version.js"() {
    version = "0.30.4";
  }
});

// ../../node_modules/drizzle-orm/tracing.js
var otel, rawTracer, tracer;
var init_tracing = __esm({
  "../../node_modules/drizzle-orm/tracing.js"() {
    init_tracing_utils();
    init_version();
    tracer = {
      startActiveSpan(name, fn) {
        if (!otel) {
          return fn();
        }
        if (!rawTracer) {
          rawTracer = otel.trace.getTracer("drizzle-orm", version);
        }
        return iife(
          (otel2, rawTracer2) => rawTracer2.startActiveSpan(
            name,
            (span) => {
              try {
                return fn(span);
              } catch (e) {
                span.setStatus({
                  code: otel2.SpanStatusCode.ERROR,
                  message: e instanceof Error ? e.message : "Unknown error"
                  // eslint-disable-line no-instanceof/no-instanceof
                });
                throw e;
              } finally {
                span.end();
              }
            }
          ),
          otel,
          rawTracer
        );
      }
    };
  }
});

// ../../node_modules/drizzle-orm/column.js
var Column;
var init_column = __esm({
  "../../node_modules/drizzle-orm/column.js"() {
    init_entity();
    Column = class {
      constructor(table, config) {
        this.table = table;
        this.config = config;
        this.name = config.name;
        this.notNull = config.notNull;
        this.default = config.default;
        this.defaultFn = config.defaultFn;
        this.hasDefault = config.hasDefault;
        this.primary = config.primaryKey;
        this.isUnique = config.isUnique;
        this.uniqueName = config.uniqueName;
        this.uniqueType = config.uniqueType;
        this.dataType = config.dataType;
        this.columnType = config.columnType;
      }
      static [entityKind] = "Column";
      name;
      primary;
      notNull;
      default;
      defaultFn;
      hasDefault;
      isUnique;
      uniqueName;
      uniqueType;
      dataType;
      columnType;
      enumValues = void 0;
      config;
      mapFromDriverValue(value) {
        return value;
      }
      mapToDriverValue(value) {
        return value;
      }
    };
  }
});

// ../../node_modules/drizzle-orm/subquery.js
var SubqueryConfig, Subquery, WithSubquery;
var init_subquery = __esm({
  "../../node_modules/drizzle-orm/subquery.js"() {
    init_entity();
    SubqueryConfig = Symbol.for("drizzle:SubqueryConfig");
    Subquery = class {
      static [entityKind] = "Subquery";
      /** @internal */
      [SubqueryConfig];
      constructor(sql2, selection, alias, isWith = false) {
        this[SubqueryConfig] = {
          sql: sql2,
          selection,
          alias,
          isWith
        };
      }
      // getSQL(): SQL<unknown> {
      // 	return new SQL([this]);
      // }
    };
    WithSubquery = class extends Subquery {
      static [entityKind] = "WithSubquery";
    };
  }
});

// ../../node_modules/drizzle-orm/view-common.js
var ViewBaseConfig;
var init_view_common = __esm({
  "../../node_modules/drizzle-orm/view-common.js"() {
    ViewBaseConfig = Symbol.for("drizzle:ViewBaseConfig");
  }
});

// ../../node_modules/drizzle-orm/sql/sql.js
function isSQLWrapper(value) {
  return typeof value === "object" && value !== null && "getSQL" in value && typeof value.getSQL === "function";
}
function mergeQueries(queries2) {
  const result = { sql: "", params: [] };
  for (const query of queries2) {
    result.sql += query.sql;
    result.params.push(...query.params);
    if (query.typings?.length) {
      if (!result.typings) {
        result.typings = [];
      }
      result.typings.push(...query.typings);
    }
  }
  return result;
}
function isDriverValueEncoder(value) {
  return typeof value === "object" && value !== null && "mapToDriverValue" in value && typeof value.mapToDriverValue === "function";
}
function sql(strings, ...params) {
  const queryChunks = [];
  if (params.length > 0 || strings.length > 0 && strings[0] !== "") {
    queryChunks.push(new StringChunk(strings[0]));
  }
  for (const [paramIndex, param2] of params.entries()) {
    queryChunks.push(param2, new StringChunk(strings[paramIndex + 1]));
  }
  return new SQL(queryChunks);
}
function fillPlaceholders(params, values) {
  return params.map((p) => {
    if (is(p, Placeholder)) {
      if (!(p.name in values)) {
        throw new Error(`No value for placeholder "${p.name}" was provided`);
      }
      return values[p.name];
    }
    return p;
  });
}
var FakePrimitiveParam, StringChunk, SQL, Name, noopDecoder, noopEncoder, noopMapper, Param, Placeholder, View;
var init_sql = __esm({
  "../../node_modules/drizzle-orm/sql/sql.js"() {
    init_entity();
    init_subquery();
    init_tracing();
    init_view_common();
    init_column();
    init_table();
    FakePrimitiveParam = class {
      static [entityKind] = "FakePrimitiveParam";
    };
    StringChunk = class {
      static [entityKind] = "StringChunk";
      value;
      constructor(value) {
        this.value = Array.isArray(value) ? value : [value];
      }
      getSQL() {
        return new SQL([this]);
      }
    };
    SQL = class _SQL {
      constructor(queryChunks) {
        this.queryChunks = queryChunks;
      }
      static [entityKind] = "SQL";
      /** @internal */
      decoder = noopDecoder;
      shouldInlineParams = false;
      append(query) {
        this.queryChunks.push(...query.queryChunks);
        return this;
      }
      toQuery(config) {
        return tracer.startActiveSpan("drizzle.buildSQL", (span) => {
          const query = this.buildQueryFromSourceParams(this.queryChunks, config);
          span?.setAttributes({
            "drizzle.query.text": query.sql,
            "drizzle.query.params": JSON.stringify(query.params)
          });
          return query;
        });
      }
      buildQueryFromSourceParams(chunks, _config) {
        const config = Object.assign({}, _config, {
          inlineParams: _config.inlineParams || this.shouldInlineParams,
          paramStartIndex: _config.paramStartIndex || { value: 0 }
        });
        const {
          escapeName,
          escapeParam,
          prepareTyping,
          inlineParams,
          paramStartIndex
        } = config;
        return mergeQueries(chunks.map((chunk) => {
          if (is(chunk, StringChunk)) {
            return { sql: chunk.value.join(""), params: [] };
          }
          if (is(chunk, Name)) {
            return { sql: escapeName(chunk.value), params: [] };
          }
          if (chunk === void 0) {
            return { sql: "", params: [] };
          }
          if (Array.isArray(chunk)) {
            const result = [new StringChunk("(")];
            for (const [i, p] of chunk.entries()) {
              result.push(p);
              if (i < chunk.length - 1) {
                result.push(new StringChunk(", "));
              }
            }
            result.push(new StringChunk(")"));
            return this.buildQueryFromSourceParams(result, config);
          }
          if (is(chunk, _SQL)) {
            return this.buildQueryFromSourceParams(chunk.queryChunks, {
              ...config,
              inlineParams: inlineParams || chunk.shouldInlineParams
            });
          }
          if (is(chunk, Table)) {
            const schemaName = chunk[Table.Symbol.Schema];
            const tableName = chunk[Table.Symbol.Name];
            return {
              sql: schemaName === void 0 ? escapeName(tableName) : escapeName(schemaName) + "." + escapeName(tableName),
              params: []
            };
          }
          if (is(chunk, Column)) {
            return { sql: escapeName(chunk.table[Table.Symbol.Name]) + "." + escapeName(chunk.name), params: [] };
          }
          if (is(chunk, View)) {
            const schemaName = chunk[ViewBaseConfig].schema;
            const viewName = chunk[ViewBaseConfig].name;
            return {
              sql: schemaName === void 0 ? escapeName(viewName) : escapeName(schemaName) + "." + escapeName(viewName),
              params: []
            };
          }
          if (is(chunk, Param)) {
            const mappedValue = chunk.value === null ? null : chunk.encoder.mapToDriverValue(chunk.value);
            if (is(mappedValue, _SQL)) {
              return this.buildQueryFromSourceParams([mappedValue], config);
            }
            if (inlineParams) {
              return { sql: this.mapInlineParam(mappedValue, config), params: [] };
            }
            let typings;
            if (prepareTyping !== void 0) {
              typings = [prepareTyping(chunk.encoder)];
            }
            return { sql: escapeParam(paramStartIndex.value++, mappedValue), params: [mappedValue], typings };
          }
          if (is(chunk, Placeholder)) {
            return { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk] };
          }
          if (is(chunk, _SQL.Aliased) && chunk.fieldAlias !== void 0) {
            return { sql: escapeName(chunk.fieldAlias), params: [] };
          }
          if (is(chunk, Subquery)) {
            if (chunk[SubqueryConfig].isWith) {
              return { sql: escapeName(chunk[SubqueryConfig].alias), params: [] };
            }
            return this.buildQueryFromSourceParams([
              new StringChunk("("),
              chunk[SubqueryConfig].sql,
              new StringChunk(") "),
              new Name(chunk[SubqueryConfig].alias)
            ], config);
          }
          if (isSQLWrapper(chunk)) {
            return this.buildQueryFromSourceParams([
              new StringChunk("("),
              chunk.getSQL(),
              new StringChunk(")")
            ], config);
          }
          if (inlineParams) {
            return { sql: this.mapInlineParam(chunk, config), params: [] };
          }
          return { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk] };
        }));
      }
      mapInlineParam(chunk, { escapeString: escapeString2 }) {
        if (chunk === null) {
          return "null";
        }
        if (typeof chunk === "number" || typeof chunk === "boolean") {
          return chunk.toString();
        }
        if (typeof chunk === "string") {
          return escapeString2(chunk);
        }
        if (typeof chunk === "object") {
          const mappedValueAsString = chunk.toString();
          if (mappedValueAsString === "[object Object]") {
            return escapeString2(JSON.stringify(chunk));
          }
          return escapeString2(mappedValueAsString);
        }
        throw new Error("Unexpected param value: " + chunk);
      }
      getSQL() {
        return this;
      }
      as(alias) {
        if (alias === void 0) {
          return this;
        }
        return new _SQL.Aliased(this, alias);
      }
      mapWith(decoder3) {
        this.decoder = typeof decoder3 === "function" ? { mapFromDriverValue: decoder3 } : decoder3;
        return this;
      }
      inlineParams() {
        this.shouldInlineParams = true;
        return this;
      }
    };
    Name = class {
      constructor(value) {
        this.value = value;
      }
      static [entityKind] = "Name";
      brand;
      getSQL() {
        return new SQL([this]);
      }
    };
    noopDecoder = {
      mapFromDriverValue: (value) => value
    };
    noopEncoder = {
      mapToDriverValue: (value) => value
    };
    noopMapper = {
      ...noopDecoder,
      ...noopEncoder
    };
    Param = class {
      /**
       * @param value - Parameter value
       * @param encoder - Encoder to convert the value to a driver parameter
       */
      constructor(value, encoder2 = noopEncoder) {
        this.value = value;
        this.encoder = encoder2;
      }
      static [entityKind] = "Param";
      brand;
      getSQL() {
        return new SQL([this]);
      }
    };
    ((sql2) => {
      function empty() {
        return new SQL([]);
      }
      sql2.empty = empty;
      function fromList(list) {
        return new SQL(list);
      }
      sql2.fromList = fromList;
      function raw(str) {
        return new SQL([new StringChunk(str)]);
      }
      sql2.raw = raw;
      function join(chunks, separator) {
        const result = [];
        for (const [i, chunk] of chunks.entries()) {
          if (i > 0 && separator !== void 0) {
            result.push(separator);
          }
          result.push(chunk);
        }
        return new SQL(result);
      }
      sql2.join = join;
      function identifier(value) {
        return new Name(value);
      }
      sql2.identifier = identifier;
      function placeholder2(name2) {
        return new Placeholder(name2);
      }
      sql2.placeholder = placeholder2;
      function param2(value, encoder2) {
        return new Param(value, encoder2);
      }
      sql2.param = param2;
    })(sql || (sql = {}));
    ((SQL2) => {
      class Aliased {
        constructor(sql2, fieldAlias) {
          this.sql = sql2;
          this.fieldAlias = fieldAlias;
        }
        static [entityKind] = "SQL.Aliased";
        /** @internal */
        isSelectionField = false;
        getSQL() {
          return this.sql;
        }
        /** @internal */
        clone() {
          return new Aliased(this.sql, this.fieldAlias);
        }
      }
      SQL2.Aliased = Aliased;
    })(SQL || (SQL = {}));
    Placeholder = class {
      constructor(name2) {
        this.name = name2;
      }
      static [entityKind] = "Placeholder";
      getSQL() {
        return new SQL([this]);
      }
    };
    View = class {
      static [entityKind] = "View";
      /** @internal */
      [ViewBaseConfig];
      constructor({ name: name2, schema, selectedFields, query }) {
        this[ViewBaseConfig] = {
          name: name2,
          originalName: name2,
          schema,
          selectedFields,
          query,
          isExisting: !query,
          isAlias: false
        };
      }
      getSQL() {
        return new SQL([this]);
      }
    };
    Column.prototype.getSQL = function() {
      return new SQL([this]);
    };
    Table.prototype.getSQL = function() {
      return new SQL([this]);
    };
    Subquery.prototype.getSQL = function() {
      return new SQL([this]);
    };
  }
});

// ../../node_modules/drizzle-orm/utils.js
function mapResultRow(columns, row, joinsNotNullableMap) {
  const nullifyMap = {};
  const result = columns.reduce(
    (result2, { path, field }, columnIndex) => {
      let decoder3;
      if (is(field, Column)) {
        decoder3 = field;
      } else if (is(field, SQL)) {
        decoder3 = field.decoder;
      } else {
        decoder3 = field.sql.decoder;
      }
      let node = result2;
      for (const [pathChunkIndex, pathChunk] of path.entries()) {
        if (pathChunkIndex < path.length - 1) {
          if (!(pathChunk in node)) {
            node[pathChunk] = {};
          }
          node = node[pathChunk];
        } else {
          const rawValue = row[columnIndex];
          const value = node[pathChunk] = rawValue === null ? null : decoder3.mapFromDriverValue(rawValue);
          if (joinsNotNullableMap && is(field, Column) && path.length === 2) {
            const objectName = path[0];
            if (!(objectName in nullifyMap)) {
              nullifyMap[objectName] = value === null ? getTableName(field.table) : false;
            } else if (typeof nullifyMap[objectName] === "string" && nullifyMap[objectName] !== getTableName(field.table)) {
              nullifyMap[objectName] = false;
            }
          }
        }
      }
      return result2;
    },
    {}
  );
  if (joinsNotNullableMap && Object.keys(nullifyMap).length > 0) {
    for (const [objectName, tableName] of Object.entries(nullifyMap)) {
      if (typeof tableName === "string" && !joinsNotNullableMap[tableName]) {
        result[objectName] = null;
      }
    }
  }
  return result;
}
function orderSelectedFields(fields, pathPrefix) {
  return Object.entries(fields).reduce((result, [name, field]) => {
    if (typeof name !== "string") {
      return result;
    }
    const newPath = pathPrefix ? [...pathPrefix, name] : [name];
    if (is(field, Column) || is(field, SQL) || is(field, SQL.Aliased)) {
      result.push({ path: newPath, field });
    } else if (is(field, Table)) {
      result.push(...orderSelectedFields(field[Table.Symbol.Columns], newPath));
    } else {
      result.push(...orderSelectedFields(field, newPath));
    }
    return result;
  }, []);
}
function haveSameKeys(left, right) {
  const leftKeys = Object.keys(left);
  const rightKeys = Object.keys(right);
  if (leftKeys.length !== rightKeys.length) {
    return false;
  }
  for (const [index, key] of leftKeys.entries()) {
    if (key !== rightKeys[index]) {
      return false;
    }
  }
  return true;
}
function mapUpdateSet(table, values) {
  const entries = Object.entries(values).filter(([, value]) => value !== void 0).map(([key, value]) => {
    if (is(value, SQL)) {
      return [key, value];
    } else {
      return [key, new Param(value, table[Table.Symbol.Columns][key])];
    }
  });
  if (entries.length === 0) {
    throw new Error("No values to set");
  }
  return Object.fromEntries(entries);
}
function applyMixins(baseClass, extendedClasses) {
  for (const extendedClass of extendedClasses) {
    for (const name of Object.getOwnPropertyNames(extendedClass.prototype)) {
      if (name === "constructor")
        continue;
      Object.defineProperty(
        baseClass.prototype,
        name,
        Object.getOwnPropertyDescriptor(extendedClass.prototype, name) || /* @__PURE__ */ Object.create(null)
      );
    }
  }
}
function getTableColumns(table) {
  return table[Table.Symbol.Columns];
}
function getTableLikeName(table) {
  return is(table, Subquery) ? table[SubqueryConfig].alias : is(table, View) ? table[ViewBaseConfig].name : is(table, SQL) ? void 0 : table[Table.Symbol.IsAlias] ? table[Table.Symbol.Name] : table[Table.Symbol.BaseName];
}
var init_utils = __esm({
  "../../node_modules/drizzle-orm/utils.js"() {
    init_column();
    init_entity();
    init_sql();
    init_subquery();
    init_table();
    init_view_common();
  }
});

// ../../node_modules/drizzle-orm/pg-core/query-builders/delete.js
var PgDeleteBase;
var init_delete = __esm({
  "../../node_modules/drizzle-orm/pg-core/query-builders/delete.js"() {
    init_entity();
    init_query_promise();
    init_table();
    init_tracing();
    init_utils();
    PgDeleteBase = class extends QueryPromise {
      constructor(table, session, dialect, withList) {
        super();
        this.session = session;
        this.dialect = dialect;
        this.config = { table, withList };
      }
      static [entityKind] = "PgDelete";
      config;
      /**
       * Adds a `where` clause to the query.
       *
       * Calling this method will delete only those rows that fulfill a specified condition.
       *
       * See docs: {@link https://orm.drizzle.team/docs/delete}
       *
       * @param where the `where` clause.
       *
       * @example
       * You can use conditional operators and `sql function` to filter the rows to be deleted.
       *
       * ```ts
       * // Delete all cars with green color
       * await db.delete(cars).where(eq(cars.color, 'green'));
       * // or
       * await db.delete(cars).where(sql`${cars.color} = 'green'`)
       * ```
       *
       * You can logically combine conditional operators with `and()` and `or()` operators:
       *
       * ```ts
       * // Delete all BMW cars with a green color
       * await db.delete(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));
       *
       * // Delete all cars with the green or blue color
       * await db.delete(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));
       * ```
       */
      where(where) {
        this.config.where = where;
        return this;
      }
      returning(fields = this.config.table[Table.Symbol.Columns]) {
        this.config.returning = orderSelectedFields(fields);
        return this;
      }
      /** @internal */
      getSQL() {
        return this.dialect.buildDeleteQuery(this.config);
      }
      toSQL() {
        const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());
        return rest;
      }
      /** @internal */
      _prepare(name) {
        return tracer.startActiveSpan("drizzle.prepareQuery", () => {
          return this.session.prepareQuery(this.dialect.sqlToQuery(this.getSQL()), this.config.returning, name, true);
        });
      }
      prepare(name) {
        return this._prepare(name);
      }
      execute = (placeholderValues) => {
        return tracer.startActiveSpan("drizzle.operation", () => {
          return this._prepare().execute(placeholderValues);
        });
      };
      $dynamic() {
        return this;
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/query-builders/insert.js
var PgInsertBuilder, PgInsertBase;
var init_insert = __esm({
  "../../node_modules/drizzle-orm/pg-core/query-builders/insert.js"() {
    init_entity();
    init_query_promise();
    init_sql();
    init_table();
    init_tracing();
    init_utils();
    PgInsertBuilder = class {
      constructor(table, session, dialect, withList) {
        this.table = table;
        this.session = session;
        this.dialect = dialect;
        this.withList = withList;
      }
      static [entityKind] = "PgInsertBuilder";
      values(values) {
        values = Array.isArray(values) ? values : [values];
        if (values.length === 0) {
          throw new Error("values() must be called with at least one value");
        }
        const mappedValues = values.map((entry) => {
          const result = {};
          const cols = this.table[Table.Symbol.Columns];
          for (const colKey of Object.keys(entry)) {
            const colValue = entry[colKey];
            result[colKey] = is(colValue, SQL) ? colValue : new Param(colValue, cols[colKey]);
          }
          return result;
        });
        return new PgInsertBase(this.table, mappedValues, this.session, this.dialect, this.withList);
      }
    };
    PgInsertBase = class extends QueryPromise {
      constructor(table, values, session, dialect, withList) {
        super();
        this.session = session;
        this.dialect = dialect;
        this.config = { table, values, withList };
      }
      static [entityKind] = "PgInsert";
      config;
      returning(fields = this.config.table[Table.Symbol.Columns]) {
        this.config.returning = orderSelectedFields(fields);
        return this;
      }
      /**
       * Adds an `on conflict do nothing` clause to the query.
       *
       * Calling this method simply avoids inserting a row as its alternative action.
       *
       * See docs: {@link https://orm.drizzle.team/docs/insert#on-conflict-do-nothing}
       *
       * @param config The `target` and `where` clauses.
       *
       * @example
       * ```ts
       * // Insert one row and cancel the insert if there's a conflict
       * await db.insert(cars)
       *   .values({ id: 1, brand: 'BMW' })
       *   .onConflictDoNothing();
       *
       * // Explicitly specify conflict target
       * await db.insert(cars)
       *   .values({ id: 1, brand: 'BMW' })
       *   .onConflictDoNothing({ target: cars.id });
       * ```
       */
      onConflictDoNothing(config = {}) {
        if (config.target === void 0) {
          this.config.onConflict = sql`do nothing`;
        } else {
          let targetColumn = "";
          targetColumn = Array.isArray(config.target) ? config.target.map((it) => this.dialect.escapeName(it.name)).join(",") : this.dialect.escapeName(config.target.name);
          const whereSql = config.where ? sql` where ${config.where}` : void 0;
          this.config.onConflict = sql`(${sql.raw(targetColumn)}) do nothing${whereSql}`;
        }
        return this;
      }
      /**
       * Adds an `on conflict do update` clause to the query.
       *
       * Calling this method will update the existing row that conflicts with the row proposed for insertion as its alternative action.
       *
       * See docs: {@link https://orm.drizzle.team/docs/insert#upserts-and-conflicts}
       *
       * @param config The `target`, `set` and `where` clauses.
       *
       * @example
       * ```ts
       * // Update the row if there's a conflict
       * await db.insert(cars)
       *   .values({ id: 1, brand: 'BMW' })
       *   .onConflictDoUpdate({
       *     target: cars.id,
       *     set: { brand: 'Porsche' }
       *   });
       *
       * // Upsert with 'where' clause
       * await db.insert(cars)
       *   .values({ id: 1, brand: 'BMW' })
       *   .onConflictDoUpdate({
       *     target: cars.id,
       *     set: { brand: 'newBMW' },
       *     where: sql`${cars.createdAt} > '2023-01-01'::date`,
       *   });
       * ```
       */
      onConflictDoUpdate(config) {
        const whereSql = config.where ? sql` where ${config.where}` : void 0;
        const setSql = this.dialect.buildUpdateSet(this.config.table, mapUpdateSet(this.config.table, config.set));
        let targetColumn = "";
        targetColumn = Array.isArray(config.target) ? config.target.map((it) => this.dialect.escapeName(it.name)).join(",") : this.dialect.escapeName(config.target.name);
        this.config.onConflict = sql`(${sql.raw(targetColumn)}) do update set ${setSql}${whereSql}`;
        return this;
      }
      /** @internal */
      getSQL() {
        return this.dialect.buildInsertQuery(this.config);
      }
      toSQL() {
        const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());
        return rest;
      }
      /** @internal */
      _prepare(name) {
        return tracer.startActiveSpan("drizzle.prepareQuery", () => {
          return this.session.prepareQuery(this.dialect.sqlToQuery(this.getSQL()), this.config.returning, name, true);
        });
      }
      prepare(name) {
        return this._prepare(name);
      }
      execute = (placeholderValues) => {
        return tracer.startActiveSpan("drizzle.operation", () => {
          return this._prepare().execute(placeholderValues);
        });
      };
      $dynamic() {
        return this;
      }
    };
  }
});

// ../../node_modules/drizzle-orm/alias.js
function aliasedTable(table, tableAlias) {
  return new Proxy(table, new TableAliasProxyHandler(tableAlias, false));
}
function aliasedTableColumn(column, tableAlias) {
  return new Proxy(
    column,
    new ColumnAliasProxyHandler(new Proxy(column.table, new TableAliasProxyHandler(tableAlias, false)))
  );
}
function mapColumnsInAliasedSQLToAlias(query, alias) {
  return new SQL.Aliased(mapColumnsInSQLToAlias(query.sql, alias), query.fieldAlias);
}
function mapColumnsInSQLToAlias(query, alias) {
  return sql.join(query.queryChunks.map((c) => {
    if (is(c, Column)) {
      return aliasedTableColumn(c, alias);
    }
    if (is(c, SQL)) {
      return mapColumnsInSQLToAlias(c, alias);
    }
    if (is(c, SQL.Aliased)) {
      return mapColumnsInAliasedSQLToAlias(c, alias);
    }
    return c;
  }));
}
var ColumnAliasProxyHandler, TableAliasProxyHandler, RelationTableAliasProxyHandler;
var init_alias = __esm({
  "../../node_modules/drizzle-orm/alias.js"() {
    init_column();
    init_entity();
    init_sql();
    init_table();
    init_view_common();
    ColumnAliasProxyHandler = class {
      constructor(table) {
        this.table = table;
      }
      static [entityKind] = "ColumnAliasProxyHandler";
      get(columnObj, prop) {
        if (prop === "table") {
          return this.table;
        }
        return columnObj[prop];
      }
    };
    TableAliasProxyHandler = class {
      constructor(alias, replaceOriginalName) {
        this.alias = alias;
        this.replaceOriginalName = replaceOriginalName;
      }
      static [entityKind] = "TableAliasProxyHandler";
      get(target, prop) {
        if (prop === Table.Symbol.IsAlias) {
          return true;
        }
        if (prop === Table.Symbol.Name) {
          return this.alias;
        }
        if (this.replaceOriginalName && prop === Table.Symbol.OriginalName) {
          return this.alias;
        }
        if (prop === ViewBaseConfig) {
          return {
            ...target[ViewBaseConfig],
            name: this.alias,
            isAlias: true
          };
        }
        if (prop === Table.Symbol.Columns) {
          const columns = target[Table.Symbol.Columns];
          if (!columns) {
            return columns;
          }
          const proxiedColumns = {};
          Object.keys(columns).map((key) => {
            proxiedColumns[key] = new Proxy(
              columns[key],
              new ColumnAliasProxyHandler(new Proxy(target, this))
            );
          });
          return proxiedColumns;
        }
        const value = target[prop];
        if (is(value, Column)) {
          return new Proxy(value, new ColumnAliasProxyHandler(new Proxy(target, this)));
        }
        return value;
      }
    };
    RelationTableAliasProxyHandler = class {
      constructor(alias) {
        this.alias = alias;
      }
      static [entityKind] = "RelationTableAliasProxyHandler";
      get(target, prop) {
        if (prop === "sourceTable") {
          return aliasedTable(target.sourceTable, this.alias);
        }
        return target[prop];
      }
    };
  }
});

// ../../node_modules/drizzle-orm/errors.js
var DrizzleError, TransactionRollbackError;
var init_errors = __esm({
  "../../node_modules/drizzle-orm/errors.js"() {
    init_entity();
    DrizzleError = class extends Error {
      static [entityKind] = "DrizzleError";
      constructor({ message, cause }) {
        super(message);
        this.name = "DrizzleError";
        this.cause = cause;
      }
    };
    TransactionRollbackError = class extends DrizzleError {
      static [entityKind] = "TransactionRollbackError";
      constructor() {
        super({ message: "Rollback" });
      }
    };
  }
});

// ../../node_modules/drizzle-orm/column-builder.js
var ColumnBuilder;
var init_column_builder = __esm({
  "../../node_modules/drizzle-orm/column-builder.js"() {
    init_entity();
    ColumnBuilder = class {
      static [entityKind] = "ColumnBuilder";
      config;
      constructor(name, dataType, columnType) {
        this.config = {
          name,
          notNull: false,
          default: void 0,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: void 0,
          uniqueType: void 0,
          dataType,
          columnType
        };
      }
      /**
       * Changes the data type of the column. Commonly used with `json` columns. Also, useful for branded types.
       *
       * @example
       * ```ts
       * const users = pgTable('users', {
       * 	id: integer('id').$type<UserId>().primaryKey(),
       * 	details: json('details').$type<UserDetails>().notNull(),
       * });
       * ```
       */
      $type() {
        return this;
      }
      /**
       * Adds a `not null` clause to the column definition.
       *
       * Affects the `select` model of the table - columns *without* `not null` will be nullable on select.
       */
      notNull() {
        this.config.notNull = true;
        return this;
      }
      /**
       * Adds a `default <value>` clause to the column definition.
       *
       * Affects the `insert` model of the table - columns *with* `default` are optional on insert.
       *
       * If you need to set a dynamic default value, use {@link $defaultFn} instead.
       */
      default(value) {
        this.config.default = value;
        this.config.hasDefault = true;
        return this;
      }
      /**
       * Adds a dynamic default value to the column.
       * The function will be called when the row is inserted, and the returned value will be used as the column value.
       *
       * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.
       */
      $defaultFn(fn) {
        this.config.defaultFn = fn;
        this.config.hasDefault = true;
        return this;
      }
      /**
       * Alias for {@link $defaultFn}.
       */
      $default = this.$defaultFn;
      /**
       * Adds a `primary key` clause to the column definition. This implicitly makes the column `not null`.
       *
       * In SQLite, `integer primary key` implicitly makes the column auto-incrementing.
       */
      primaryKey() {
        this.config.primaryKey = true;
        this.config.notNull = true;
        return this;
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/table.js
function pgTableWithSchema(name, columns, extraConfig, schema, baseName = name) {
  const rawTable = new PgTable(name, schema, baseName);
  const builtColumns = Object.fromEntries(
    Object.entries(columns).map(([name2, colBuilderBase]) => {
      const colBuilder = colBuilderBase;
      const column = colBuilder.build(rawTable);
      rawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));
      return [name2, column];
    })
  );
  const table = Object.assign(rawTable, builtColumns);
  table[Table.Symbol.Columns] = builtColumns;
  if (extraConfig) {
    table[PgTable.Symbol.ExtraConfigBuilder] = extraConfig;
  }
  return table;
}
var InlineForeignKeys, PgTable, pgTable;
var init_table2 = __esm({
  "../../node_modules/drizzle-orm/pg-core/table.js"() {
    init_entity();
    init_table();
    InlineForeignKeys = Symbol.for("drizzle:PgInlineForeignKeys");
    PgTable = class extends Table {
      static [entityKind] = "PgTable";
      /** @internal */
      static Symbol = Object.assign({}, Table.Symbol, {
        InlineForeignKeys
      });
      /**@internal */
      [InlineForeignKeys] = [];
      /** @internal */
      [Table.Symbol.ExtraConfigBuilder] = void 0;
    };
    pgTable = (name, columns, extraConfig) => {
      return pgTableWithSchema(name, columns, extraConfig, void 0);
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/foreign-keys.js
var ForeignKeyBuilder, ForeignKey;
var init_foreign_keys = __esm({
  "../../node_modules/drizzle-orm/pg-core/foreign-keys.js"() {
    init_entity();
    init_table2();
    ForeignKeyBuilder = class {
      static [entityKind] = "PgForeignKeyBuilder";
      /** @internal */
      reference;
      /** @internal */
      _onUpdate = "no action";
      /** @internal */
      _onDelete = "no action";
      constructor(config, actions) {
        this.reference = () => {
          const { name, columns, foreignColumns } = config();
          return { name, columns, foreignTable: foreignColumns[0].table, foreignColumns };
        };
        if (actions) {
          this._onUpdate = actions.onUpdate;
          this._onDelete = actions.onDelete;
        }
      }
      onUpdate(action) {
        this._onUpdate = action === void 0 ? "no action" : action;
        return this;
      }
      onDelete(action) {
        this._onDelete = action === void 0 ? "no action" : action;
        return this;
      }
      /** @internal */
      build(table) {
        return new ForeignKey(table, this);
      }
    };
    ForeignKey = class {
      constructor(table, builder) {
        this.table = table;
        this.reference = builder.reference;
        this.onUpdate = builder._onUpdate;
        this.onDelete = builder._onDelete;
      }
      static [entityKind] = "PgForeignKey";
      reference;
      onUpdate;
      onDelete;
      getName() {
        const { name, columns, foreignColumns } = this.reference();
        const columnNames = columns.map((column) => column.name);
        const foreignColumnNames = foreignColumns.map((column) => column.name);
        const chunks = [
          this.table[PgTable.Symbol.Name],
          ...columnNames,
          foreignColumns[0].table[PgTable.Symbol.Name],
          ...foreignColumnNames
        ];
        return name ?? `${chunks.join("_")}_fk`;
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/unique-constraint.js
function uniqueKeyName(table, columns) {
  return `${table[PgTable.Symbol.Name]}_${columns.join("_")}_unique`;
}
var UniqueConstraintBuilder, UniqueOnConstraintBuilder, UniqueConstraint;
var init_unique_constraint = __esm({
  "../../node_modules/drizzle-orm/pg-core/unique-constraint.js"() {
    init_entity();
    init_table2();
    UniqueConstraintBuilder = class {
      constructor(columns, name) {
        this.name = name;
        this.columns = columns;
      }
      static [entityKind] = "PgUniqueConstraintBuilder";
      /** @internal */
      columns;
      /** @internal */
      nullsNotDistinctConfig = false;
      nullsNotDistinct() {
        this.nullsNotDistinctConfig = true;
        return this;
      }
      /** @internal */
      build(table) {
        return new UniqueConstraint(table, this.columns, this.nullsNotDistinctConfig, this.name);
      }
    };
    UniqueOnConstraintBuilder = class {
      static [entityKind] = "PgUniqueOnConstraintBuilder";
      /** @internal */
      name;
      constructor(name) {
        this.name = name;
      }
      on(...columns) {
        return new UniqueConstraintBuilder(columns, this.name);
      }
    };
    UniqueConstraint = class {
      constructor(table, columns, nullsNotDistinct, name) {
        this.table = table;
        this.columns = columns;
        this.name = name ?? uniqueKeyName(this.table, this.columns.map((column) => column.name));
        this.nullsNotDistinct = nullsNotDistinct;
      }
      static [entityKind] = "PgUniqueConstraint";
      columns;
      name;
      nullsNotDistinct = false;
      getName() {
        return this.name;
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/utils/array.js
function parsePgArrayValue(arrayString, startFrom, inQuotes) {
  for (let i = startFrom; i < arrayString.length; i++) {
    const char = arrayString[i];
    if (char === "\\") {
      i++;
      continue;
    }
    if (char === '"') {
      return [arrayString.slice(startFrom, i).replace(/\\/g, ""), i + 1];
    }
    if (inQuotes) {
      continue;
    }
    if (char === "," || char === "}") {
      return [arrayString.slice(startFrom, i).replace(/\\/g, ""), i];
    }
  }
  return [arrayString.slice(startFrom).replace(/\\/g, ""), arrayString.length];
}
function parsePgNestedArray(arrayString, startFrom = 0) {
  const result = [];
  let i = startFrom;
  let lastCharIsComma = false;
  while (i < arrayString.length) {
    const char = arrayString[i];
    if (char === ",") {
      if (lastCharIsComma || i === startFrom) {
        result.push("");
      }
      lastCharIsComma = true;
      i++;
      continue;
    }
    lastCharIsComma = false;
    if (char === "\\") {
      i += 2;
      continue;
    }
    if (char === '"') {
      const [value2, startFrom2] = parsePgArrayValue(arrayString, i + 1, true);
      result.push(value2);
      i = startFrom2;
      continue;
    }
    if (char === "}") {
      return [result, i + 1];
    }
    if (char === "{") {
      const [value2, startFrom2] = parsePgNestedArray(arrayString, i + 1);
      result.push(value2);
      i = startFrom2;
      continue;
    }
    const [value, newStartFrom] = parsePgArrayValue(arrayString, i, false);
    result.push(value);
    i = newStartFrom;
  }
  return [result, i];
}
function parsePgArray(arrayString) {
  const [result] = parsePgNestedArray(arrayString, 1);
  return result;
}
function makePgArray(array) {
  return `{${array.map((item) => {
    if (Array.isArray(item)) {
      return makePgArray(item);
    }
    if (typeof item === "string") {
      return `"${item.replace(/\\/g, "\\\\").replace(/"/g, '\\"')}"`;
    }
    return `${item}`;
  }).join(",")}}`;
}
var init_array = __esm({
  "../../node_modules/drizzle-orm/pg-core/utils/array.js"() {
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/common.js
var PgColumnBuilder, PgColumn, PgArrayBuilder, PgArray;
var init_common = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/common.js"() {
    init_column_builder();
    init_column();
    init_entity();
    init_foreign_keys();
    init_tracing_utils();
    init_unique_constraint();
    init_array();
    PgColumnBuilder = class extends ColumnBuilder {
      foreignKeyConfigs = [];
      static [entityKind] = "PgColumnBuilder";
      array(size) {
        return new PgArrayBuilder(this.config.name, this, size);
      }
      references(ref, actions = {}) {
        this.foreignKeyConfigs.push({ ref, actions });
        return this;
      }
      unique(name, config) {
        this.config.isUnique = true;
        this.config.uniqueName = name;
        this.config.uniqueType = config?.nulls;
        return this;
      }
      /** @internal */
      buildForeignKeys(column, table) {
        return this.foreignKeyConfigs.map(({ ref, actions }) => {
          return iife(
            (ref2, actions2) => {
              const builder = new ForeignKeyBuilder(() => {
                const foreignColumn = ref2();
                return { columns: [column], foreignColumns: [foreignColumn] };
              });
              if (actions2.onUpdate) {
                builder.onUpdate(actions2.onUpdate);
              }
              if (actions2.onDelete) {
                builder.onDelete(actions2.onDelete);
              }
              return builder.build(table);
            },
            ref,
            actions
          );
        });
      }
    };
    PgColumn = class extends Column {
      constructor(table, config) {
        if (!config.uniqueName) {
          config.uniqueName = uniqueKeyName(table, [config.name]);
        }
        super(table, config);
        this.table = table;
      }
      static [entityKind] = "PgColumn";
    };
    PgArrayBuilder = class extends PgColumnBuilder {
      static [entityKind] = "PgArrayBuilder";
      constructor(name, baseBuilder, size) {
        super(name, "array", "PgArray");
        this.config.baseBuilder = baseBuilder;
        this.config.size = size;
      }
      /** @internal */
      build(table) {
        const baseColumn = this.config.baseBuilder.build(table);
        return new PgArray(
          table,
          this.config,
          baseColumn
        );
      }
    };
    PgArray = class _PgArray extends PgColumn {
      constructor(table, config, baseColumn, range) {
        super(table, config);
        this.baseColumn = baseColumn;
        this.range = range;
        this.size = config.size;
      }
      size;
      static [entityKind] = "PgArray";
      getSQLType() {
        return `${this.baseColumn.getSQLType()}[${typeof this.size === "number" ? this.size : ""}]`;
      }
      mapFromDriverValue(value) {
        if (typeof value === "string") {
          value = parsePgArray(value);
        }
        return value.map((v) => this.baseColumn.mapFromDriverValue(v));
      }
      mapToDriverValue(value, isNestedArray = false) {
        const a = value.map(
          (v) => v === null ? null : is(this.baseColumn, _PgArray) ? this.baseColumn.mapToDriverValue(v, true) : this.baseColumn.mapToDriverValue(v)
        );
        if (isNestedArray)
          return a;
        return makePgArray(a);
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/bigint.js
var PgBigInt53Builder, PgBigInt53, PgBigInt64Builder, PgBigInt64;
var init_bigint = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/bigint.js"() {
    init_entity();
    init_common();
    PgBigInt53Builder = class extends PgColumnBuilder {
      static [entityKind] = "PgBigInt53Builder";
      constructor(name) {
        super(name, "number", "PgBigInt53");
      }
      /** @internal */
      build(table) {
        return new PgBigInt53(table, this.config);
      }
    };
    PgBigInt53 = class extends PgColumn {
      static [entityKind] = "PgBigInt53";
      getSQLType() {
        return "bigint";
      }
      mapFromDriverValue(value) {
        if (typeof value === "number") {
          return value;
        }
        return Number(value);
      }
    };
    PgBigInt64Builder = class extends PgColumnBuilder {
      static [entityKind] = "PgBigInt64Builder";
      constructor(name) {
        super(name, "bigint", "PgBigInt64");
      }
      /** @internal */
      build(table) {
        return new PgBigInt64(
          table,
          this.config
        );
      }
    };
    PgBigInt64 = class extends PgColumn {
      static [entityKind] = "PgBigInt64";
      getSQLType() {
        return "bigint";
      }
      // eslint-disable-next-line unicorn/prefer-native-coercion-functions
      mapFromDriverValue(value) {
        return BigInt(value);
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/bigserial.js
var PgBigSerial53Builder, PgBigSerial53, PgBigSerial64Builder, PgBigSerial64;
var init_bigserial = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/bigserial.js"() {
    init_entity();
    init_common();
    PgBigSerial53Builder = class extends PgColumnBuilder {
      static [entityKind] = "PgBigSerial53Builder";
      constructor(name) {
        super(name, "number", "PgBigSerial53");
        this.config.hasDefault = true;
        this.config.notNull = true;
      }
      /** @internal */
      build(table) {
        return new PgBigSerial53(
          table,
          this.config
        );
      }
    };
    PgBigSerial53 = class extends PgColumn {
      static [entityKind] = "PgBigSerial53";
      getSQLType() {
        return "bigserial";
      }
      mapFromDriverValue(value) {
        if (typeof value === "number") {
          return value;
        }
        return Number(value);
      }
    };
    PgBigSerial64Builder = class extends PgColumnBuilder {
      static [entityKind] = "PgBigSerial64Builder";
      constructor(name) {
        super(name, "bigint", "PgBigSerial64");
        this.config.hasDefault = true;
      }
      /** @internal */
      build(table) {
        return new PgBigSerial64(
          table,
          this.config
        );
      }
    };
    PgBigSerial64 = class extends PgColumn {
      static [entityKind] = "PgBigSerial64";
      getSQLType() {
        return "bigserial";
      }
      // eslint-disable-next-line unicorn/prefer-native-coercion-functions
      mapFromDriverValue(value) {
        return BigInt(value);
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/boolean.js
var PgBooleanBuilder, PgBoolean;
var init_boolean = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/boolean.js"() {
    init_entity();
    init_common();
    PgBooleanBuilder = class extends PgColumnBuilder {
      static [entityKind] = "PgBooleanBuilder";
      constructor(name) {
        super(name, "boolean", "PgBoolean");
      }
      /** @internal */
      build(table) {
        return new PgBoolean(table, this.config);
      }
    };
    PgBoolean = class extends PgColumn {
      static [entityKind] = "PgBoolean";
      getSQLType() {
        return "boolean";
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/char.js
var PgCharBuilder, PgChar;
var init_char = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/char.js"() {
    init_entity();
    init_common();
    PgCharBuilder = class extends PgColumnBuilder {
      static [entityKind] = "PgCharBuilder";
      constructor(name, config) {
        super(name, "string", "PgChar");
        this.config.length = config.length;
        this.config.enumValues = config.enum;
      }
      /** @internal */
      build(table) {
        return new PgChar(table, this.config);
      }
    };
    PgChar = class extends PgColumn {
      static [entityKind] = "PgChar";
      length = this.config.length;
      enumValues = this.config.enumValues;
      getSQLType() {
        return this.length === void 0 ? `char` : `char(${this.length})`;
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/cidr.js
var PgCidrBuilder, PgCidr;
var init_cidr = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/cidr.js"() {
    init_entity();
    init_common();
    PgCidrBuilder = class extends PgColumnBuilder {
      static [entityKind] = "PgCidrBuilder";
      constructor(name) {
        super(name, "string", "PgCidr");
      }
      /** @internal */
      build(table) {
        return new PgCidr(table, this.config);
      }
    };
    PgCidr = class extends PgColumn {
      static [entityKind] = "PgCidr";
      getSQLType() {
        return "cidr";
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/custom.js
var PgCustomColumnBuilder, PgCustomColumn;
var init_custom = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/custom.js"() {
    init_entity();
    init_common();
    PgCustomColumnBuilder = class extends PgColumnBuilder {
      static [entityKind] = "PgCustomColumnBuilder";
      constructor(name, fieldConfig, customTypeParams) {
        super(name, "custom", "PgCustomColumn");
        this.config.fieldConfig = fieldConfig;
        this.config.customTypeParams = customTypeParams;
      }
      /** @internal */
      build(table) {
        return new PgCustomColumn(
          table,
          this.config
        );
      }
    };
    PgCustomColumn = class extends PgColumn {
      static [entityKind] = "PgCustomColumn";
      sqlName;
      mapTo;
      mapFrom;
      constructor(table, config) {
        super(table, config);
        this.sqlName = config.customTypeParams.dataType(config.fieldConfig);
        this.mapTo = config.customTypeParams.toDriver;
        this.mapFrom = config.customTypeParams.fromDriver;
      }
      getSQLType() {
        return this.sqlName;
      }
      mapFromDriverValue(value) {
        return typeof this.mapFrom === "function" ? this.mapFrom(value) : value;
      }
      mapToDriverValue(value) {
        return typeof this.mapTo === "function" ? this.mapTo(value) : value;
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/date.common.js
var PgDateColumnBaseBuilder;
var init_date_common = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/date.common.js"() {
    init_entity();
    init_sql();
    init_common();
    PgDateColumnBaseBuilder = class extends PgColumnBuilder {
      static [entityKind] = "PgDateColumnBaseBuilder";
      defaultNow() {
        return this.default(sql`now()`);
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/date.js
var PgDateBuilder, PgDate, PgDateStringBuilder, PgDateString;
var init_date = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/date.js"() {
    init_entity();
    init_common();
    init_date_common();
    PgDateBuilder = class extends PgDateColumnBaseBuilder {
      static [entityKind] = "PgDateBuilder";
      constructor(name) {
        super(name, "date", "PgDate");
      }
      /** @internal */
      build(table) {
        return new PgDate(table, this.config);
      }
    };
    PgDate = class extends PgColumn {
      static [entityKind] = "PgDate";
      getSQLType() {
        return "date";
      }
      mapFromDriverValue(value) {
        return new Date(value);
      }
      mapToDriverValue(value) {
        return value.toISOString();
      }
    };
    PgDateStringBuilder = class extends PgDateColumnBaseBuilder {
      static [entityKind] = "PgDateStringBuilder";
      constructor(name) {
        super(name, "string", "PgDateString");
      }
      /** @internal */
      build(table) {
        return new PgDateString(
          table,
          this.config
        );
      }
    };
    PgDateString = class extends PgColumn {
      static [entityKind] = "PgDateString";
      getSQLType() {
        return "date";
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/double-precision.js
var PgDoublePrecisionBuilder, PgDoublePrecision;
var init_double_precision = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/double-precision.js"() {
    init_entity();
    init_common();
    PgDoublePrecisionBuilder = class extends PgColumnBuilder {
      static [entityKind] = "PgDoublePrecisionBuilder";
      constructor(name) {
        super(name, "number", "PgDoublePrecision");
      }
      /** @internal */
      build(table) {
        return new PgDoublePrecision(
          table,
          this.config
        );
      }
    };
    PgDoublePrecision = class extends PgColumn {
      static [entityKind] = "PgDoublePrecision";
      getSQLType() {
        return "double precision";
      }
      mapFromDriverValue(value) {
        if (typeof value === "string") {
          return Number.parseFloat(value);
        }
        return value;
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/enum.js
var isPgEnumSym, PgEnumColumnBuilder, PgEnumColumn;
var init_enum = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/enum.js"() {
    init_entity();
    init_common();
    isPgEnumSym = Symbol.for("drizzle:isPgEnum");
    PgEnumColumnBuilder = class extends PgColumnBuilder {
      static [entityKind] = "PgEnumColumnBuilder";
      constructor(name, enumInstance) {
        super(name, "string", "PgEnumColumn");
        this.config.enum = enumInstance;
      }
      /** @internal */
      build(table) {
        return new PgEnumColumn(
          table,
          this.config
        );
      }
    };
    PgEnumColumn = class extends PgColumn {
      static [entityKind] = "PgEnumColumn";
      enum = this.config.enum;
      enumValues = this.config.enum.enumValues;
      constructor(table, config) {
        super(table, config);
        this.enum = config.enum;
      }
      getSQLType() {
        return this.enum.enumName;
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/inet.js
var PgInetBuilder, PgInet;
var init_inet = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/inet.js"() {
    init_entity();
    init_common();
    PgInetBuilder = class extends PgColumnBuilder {
      static [entityKind] = "PgInetBuilder";
      constructor(name) {
        super(name, "string", "PgInet");
      }
      /** @internal */
      build(table) {
        return new PgInet(table, this.config);
      }
    };
    PgInet = class extends PgColumn {
      static [entityKind] = "PgInet";
      getSQLType() {
        return "inet";
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/integer.js
function integer(name) {
  return new PgIntegerBuilder(name);
}
var PgIntegerBuilder, PgInteger;
var init_integer = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/integer.js"() {
    init_entity();
    init_common();
    PgIntegerBuilder = class extends PgColumnBuilder {
      static [entityKind] = "PgIntegerBuilder";
      constructor(name) {
        super(name, "number", "PgInteger");
      }
      /** @internal */
      build(table) {
        return new PgInteger(table, this.config);
      }
    };
    PgInteger = class extends PgColumn {
      static [entityKind] = "PgInteger";
      getSQLType() {
        return "integer";
      }
      mapFromDriverValue(value) {
        if (typeof value === "string") {
          return Number.parseInt(value);
        }
        return value;
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/interval.js
var PgIntervalBuilder, PgInterval;
var init_interval = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/interval.js"() {
    init_entity();
    init_common();
    PgIntervalBuilder = class extends PgColumnBuilder {
      static [entityKind] = "PgIntervalBuilder";
      constructor(name, intervalConfig) {
        super(name, "string", "PgInterval");
        this.config.intervalConfig = intervalConfig;
      }
      /** @internal */
      build(table) {
        return new PgInterval(table, this.config);
      }
    };
    PgInterval = class extends PgColumn {
      static [entityKind] = "PgInterval";
      fields = this.config.intervalConfig.fields;
      precision = this.config.intervalConfig.precision;
      getSQLType() {
        const fields = this.fields ? ` ${this.fields}` : "";
        const precision = this.precision ? `(${this.precision})` : "";
        return `interval${fields}${precision}`;
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/json.js
function json(name) {
  return new PgJsonBuilder(name);
}
var PgJsonBuilder, PgJson;
var init_json = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/json.js"() {
    init_entity();
    init_common();
    PgJsonBuilder = class extends PgColumnBuilder {
      static [entityKind] = "PgJsonBuilder";
      constructor(name) {
        super(name, "json", "PgJson");
      }
      /** @internal */
      build(table) {
        return new PgJson(table, this.config);
      }
    };
    PgJson = class extends PgColumn {
      static [entityKind] = "PgJson";
      constructor(table, config) {
        super(table, config);
      }
      getSQLType() {
        return "json";
      }
      mapToDriverValue(value) {
        return JSON.stringify(value);
      }
      mapFromDriverValue(value) {
        if (typeof value === "string") {
          try {
            return JSON.parse(value);
          } catch {
            return value;
          }
        }
        return value;
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/jsonb.js
var PgJsonbBuilder, PgJsonb;
var init_jsonb = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/jsonb.js"() {
    init_entity();
    init_common();
    PgJsonbBuilder = class extends PgColumnBuilder {
      static [entityKind] = "PgJsonbBuilder";
      constructor(name) {
        super(name, "json", "PgJsonb");
      }
      /** @internal */
      build(table) {
        return new PgJsonb(table, this.config);
      }
    };
    PgJsonb = class extends PgColumn {
      static [entityKind] = "PgJsonb";
      constructor(table, config) {
        super(table, config);
      }
      getSQLType() {
        return "jsonb";
      }
      mapToDriverValue(value) {
        return JSON.stringify(value);
      }
      mapFromDriverValue(value) {
        if (typeof value === "string") {
          try {
            return JSON.parse(value);
          } catch {
            return value;
          }
        }
        return value;
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/macaddr.js
var PgMacaddrBuilder, PgMacaddr;
var init_macaddr = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/macaddr.js"() {
    init_entity();
    init_common();
    PgMacaddrBuilder = class extends PgColumnBuilder {
      static [entityKind] = "PgMacaddrBuilder";
      constructor(name) {
        super(name, "string", "PgMacaddr");
      }
      /** @internal */
      build(table) {
        return new PgMacaddr(table, this.config);
      }
    };
    PgMacaddr = class extends PgColumn {
      static [entityKind] = "PgMacaddr";
      getSQLType() {
        return "macaddr";
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/macaddr8.js
var PgMacaddr8Builder, PgMacaddr8;
var init_macaddr8 = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/macaddr8.js"() {
    init_entity();
    init_common();
    PgMacaddr8Builder = class extends PgColumnBuilder {
      static [entityKind] = "PgMacaddr8Builder";
      constructor(name) {
        super(name, "string", "PgMacaddr8");
      }
      /** @internal */
      build(table) {
        return new PgMacaddr8(table, this.config);
      }
    };
    PgMacaddr8 = class extends PgColumn {
      static [entityKind] = "PgMacaddr8";
      getSQLType() {
        return "macaddr8";
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/numeric.js
var PgNumericBuilder, PgNumeric;
var init_numeric = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/numeric.js"() {
    init_entity();
    init_common();
    PgNumericBuilder = class extends PgColumnBuilder {
      static [entityKind] = "PgNumericBuilder";
      constructor(name, precision, scale) {
        super(name, "string", "PgNumeric");
        this.config.precision = precision;
        this.config.scale = scale;
      }
      /** @internal */
      build(table) {
        return new PgNumeric(table, this.config);
      }
    };
    PgNumeric = class extends PgColumn {
      static [entityKind] = "PgNumeric";
      precision;
      scale;
      constructor(table, config) {
        super(table, config);
        this.precision = config.precision;
        this.scale = config.scale;
      }
      getSQLType() {
        if (this.precision !== void 0 && this.scale !== void 0) {
          return `numeric(${this.precision}, ${this.scale})`;
        } else if (this.precision === void 0) {
          return "numeric";
        } else {
          return `numeric(${this.precision})`;
        }
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/real.js
var PgRealBuilder, PgReal;
var init_real = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/real.js"() {
    init_entity();
    init_common();
    PgRealBuilder = class extends PgColumnBuilder {
      static [entityKind] = "PgRealBuilder";
      constructor(name, length) {
        super(name, "number", "PgReal");
        this.config.length = length;
      }
      /** @internal */
      build(table) {
        return new PgReal(table, this.config);
      }
    };
    PgReal = class extends PgColumn {
      static [entityKind] = "PgReal";
      constructor(table, config) {
        super(table, config);
      }
      getSQLType() {
        return "real";
      }
      mapFromDriverValue = (value) => {
        if (typeof value === "string") {
          return Number.parseFloat(value);
        }
        return value;
      };
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/serial.js
var PgSerialBuilder, PgSerial;
var init_serial = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/serial.js"() {
    init_entity();
    init_common();
    PgSerialBuilder = class extends PgColumnBuilder {
      static [entityKind] = "PgSerialBuilder";
      constructor(name) {
        super(name, "number", "PgSerial");
        this.config.hasDefault = true;
        this.config.notNull = true;
      }
      /** @internal */
      build(table) {
        return new PgSerial(table, this.config);
      }
    };
    PgSerial = class extends PgColumn {
      static [entityKind] = "PgSerial";
      getSQLType() {
        return "serial";
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/smallint.js
var PgSmallIntBuilder, PgSmallInt;
var init_smallint = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/smallint.js"() {
    init_entity();
    init_common();
    PgSmallIntBuilder = class extends PgColumnBuilder {
      static [entityKind] = "PgSmallIntBuilder";
      constructor(name) {
        super(name, "number", "PgSmallInt");
      }
      /** @internal */
      build(table) {
        return new PgSmallInt(table, this.config);
      }
    };
    PgSmallInt = class extends PgColumn {
      static [entityKind] = "PgSmallInt";
      getSQLType() {
        return "smallint";
      }
      mapFromDriverValue = (value) => {
        if (typeof value === "string") {
          return Number(value);
        }
        return value;
      };
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/smallserial.js
var PgSmallSerialBuilder, PgSmallSerial;
var init_smallserial = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/smallserial.js"() {
    init_entity();
    init_common();
    PgSmallSerialBuilder = class extends PgColumnBuilder {
      static [entityKind] = "PgSmallSerialBuilder";
      constructor(name) {
        super(name, "number", "PgSmallSerial");
        this.config.hasDefault = true;
        this.config.notNull = true;
      }
      /** @internal */
      build(table) {
        return new PgSmallSerial(
          table,
          this.config
        );
      }
    };
    PgSmallSerial = class extends PgColumn {
      static [entityKind] = "PgSmallSerial";
      getSQLType() {
        return "smallserial";
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/text.js
function text(name, config = {}) {
  return new PgTextBuilder(name, config);
}
var PgTextBuilder, PgText;
var init_text = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/text.js"() {
    init_entity();
    init_common();
    PgTextBuilder = class extends PgColumnBuilder {
      static [entityKind] = "PgTextBuilder";
      constructor(name, config) {
        super(name, "string", "PgText");
        this.config.enumValues = config.enum;
      }
      /** @internal */
      build(table) {
        return new PgText(table, this.config);
      }
    };
    PgText = class extends PgColumn {
      static [entityKind] = "PgText";
      enumValues = this.config.enumValues;
      getSQLType() {
        return "text";
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/time.js
var PgTimeBuilder, PgTime;
var init_time = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/time.js"() {
    init_entity();
    init_common();
    init_date_common();
    PgTimeBuilder = class extends PgDateColumnBaseBuilder {
      constructor(name, withTimezone, precision) {
        super(name, "string", "PgTime");
        this.withTimezone = withTimezone;
        this.precision = precision;
        this.config.withTimezone = withTimezone;
        this.config.precision = precision;
      }
      static [entityKind] = "PgTimeBuilder";
      /** @internal */
      build(table) {
        return new PgTime(table, this.config);
      }
    };
    PgTime = class extends PgColumn {
      static [entityKind] = "PgTime";
      withTimezone;
      precision;
      constructor(table, config) {
        super(table, config);
        this.withTimezone = config.withTimezone;
        this.precision = config.precision;
      }
      getSQLType() {
        const precision = this.precision === void 0 ? "" : `(${this.precision})`;
        return `time${precision}${this.withTimezone ? " with time zone" : ""}`;
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/timestamp.js
var PgTimestampBuilder, PgTimestamp, PgTimestampStringBuilder, PgTimestampString;
var init_timestamp = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/timestamp.js"() {
    init_entity();
    init_common();
    init_date_common();
    PgTimestampBuilder = class extends PgDateColumnBaseBuilder {
      static [entityKind] = "PgTimestampBuilder";
      constructor(name, withTimezone, precision) {
        super(name, "date", "PgTimestamp");
        this.config.withTimezone = withTimezone;
        this.config.precision = precision;
      }
      /** @internal */
      build(table) {
        return new PgTimestamp(table, this.config);
      }
    };
    PgTimestamp = class extends PgColumn {
      static [entityKind] = "PgTimestamp";
      withTimezone;
      precision;
      constructor(table, config) {
        super(table, config);
        this.withTimezone = config.withTimezone;
        this.precision = config.precision;
      }
      getSQLType() {
        const precision = this.precision === void 0 ? "" : ` (${this.precision})`;
        return `timestamp${precision}${this.withTimezone ? " with time zone" : ""}`;
      }
      mapFromDriverValue = (value) => {
        return new Date(this.withTimezone ? value : value + "+0000");
      };
      mapToDriverValue = (value) => {
        return value.toISOString();
      };
    };
    PgTimestampStringBuilder = class extends PgDateColumnBaseBuilder {
      static [entityKind] = "PgTimestampStringBuilder";
      constructor(name, withTimezone, precision) {
        super(name, "string", "PgTimestampString");
        this.config.withTimezone = withTimezone;
        this.config.precision = precision;
      }
      /** @internal */
      build(table) {
        return new PgTimestampString(
          table,
          this.config
        );
      }
    };
    PgTimestampString = class extends PgColumn {
      static [entityKind] = "PgTimestampString";
      withTimezone;
      precision;
      constructor(table, config) {
        super(table, config);
        this.withTimezone = config.withTimezone;
        this.precision = config.precision;
      }
      getSQLType() {
        const precision = this.precision === void 0 ? "" : `(${this.precision})`;
        return `timestamp${precision}${this.withTimezone ? " with time zone" : ""}`;
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/uuid.js
var PgUUIDBuilder, PgUUID;
var init_uuid = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/uuid.js"() {
    init_entity();
    init_sql();
    init_common();
    PgUUIDBuilder = class extends PgColumnBuilder {
      static [entityKind] = "PgUUIDBuilder";
      constructor(name) {
        super(name, "string", "PgUUID");
      }
      /**
       * Adds `default gen_random_uuid()` to the column definition.
       */
      defaultRandom() {
        return this.default(sql`gen_random_uuid()`);
      }
      /** @internal */
      build(table) {
        return new PgUUID(table, this.config);
      }
    };
    PgUUID = class extends PgColumn {
      static [entityKind] = "PgUUID";
      getSQLType() {
        return "uuid";
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/varchar.js
var PgVarcharBuilder, PgVarchar;
var init_varchar = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/varchar.js"() {
    init_entity();
    init_common();
    PgVarcharBuilder = class extends PgColumnBuilder {
      static [entityKind] = "PgVarcharBuilder";
      constructor(name, config) {
        super(name, "string", "PgVarchar");
        this.config.length = config.length;
        this.config.enumValues = config.enum;
      }
      /** @internal */
      build(table) {
        return new PgVarchar(table, this.config);
      }
    };
    PgVarchar = class extends PgColumn {
      static [entityKind] = "PgVarchar";
      length = this.config.length;
      enumValues = this.config.enumValues;
      getSQLType() {
        return this.length === void 0 ? `varchar` : `varchar(${this.length})`;
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/columns/index.js
var init_columns = __esm({
  "../../node_modules/drizzle-orm/pg-core/columns/index.js"() {
    init_bigint();
    init_bigserial();
    init_boolean();
    init_char();
    init_cidr();
    init_common();
    init_custom();
    init_date();
    init_double_precision();
    init_enum();
    init_inet();
    init_integer();
    init_interval();
    init_json();
    init_jsonb();
    init_macaddr();
    init_macaddr8();
    init_numeric();
    init_real();
    init_serial();
    init_smallint();
    init_smallserial();
    init_text();
    init_time();
    init_timestamp();
    init_uuid();
    init_varchar();
  }
});

// ../../node_modules/drizzle-orm/pg-core/primary-keys.js
var PrimaryKeyBuilder, PrimaryKey;
var init_primary_keys = __esm({
  "../../node_modules/drizzle-orm/pg-core/primary-keys.js"() {
    init_entity();
    init_table2();
    PrimaryKeyBuilder = class {
      static [entityKind] = "PgPrimaryKeyBuilder";
      /** @internal */
      columns;
      /** @internal */
      name;
      constructor(columns, name) {
        this.columns = columns;
        this.name = name;
      }
      /** @internal */
      build(table) {
        return new PrimaryKey(table, this.columns, this.name);
      }
    };
    PrimaryKey = class {
      constructor(table, columns, name) {
        this.table = table;
        this.columns = columns;
        this.name = name;
      }
      static [entityKind] = "PgPrimaryKey";
      columns;
      name;
      getName() {
        return this.name ?? `${this.table[PgTable.Symbol.Name]}_${this.columns.map((column) => column.name).join("_")}_pk`;
      }
    };
  }
});

// ../../node_modules/drizzle-orm/sql/expressions/conditions.js
function bindIfParam(value, column) {
  if (isDriverValueEncoder(column) && !isSQLWrapper(value) && !is(value, Param) && !is(value, Placeholder) && !is(value, Column) && !is(value, Table) && !is(value, View)) {
    return new Param(value, column);
  }
  return value;
}
function and(...unfilteredConditions) {
  const conditions = unfilteredConditions.filter(
    (c) => c !== void 0
  );
  if (conditions.length === 0) {
    return void 0;
  }
  if (conditions.length === 1) {
    return new SQL(conditions);
  }
  return new SQL([
    new StringChunk("("),
    sql.join(conditions, new StringChunk(" and ")),
    new StringChunk(")")
  ]);
}
function or(...unfilteredConditions) {
  const conditions = unfilteredConditions.filter(
    (c) => c !== void 0
  );
  if (conditions.length === 0) {
    return void 0;
  }
  if (conditions.length === 1) {
    return new SQL(conditions);
  }
  return new SQL([
    new StringChunk("("),
    sql.join(conditions, new StringChunk(" or ")),
    new StringChunk(")")
  ]);
}
function not(condition) {
  return sql`not ${condition}`;
}
function inArray(column, values) {
  if (Array.isArray(values)) {
    if (values.length === 0) {
      throw new Error("inArray requires at least one value");
    }
    return sql`${column} in ${values.map((v) => bindIfParam(v, column))}`;
  }
  return sql`${column} in ${bindIfParam(values, column)}`;
}
function notInArray(column, values) {
  if (Array.isArray(values)) {
    if (values.length === 0) {
      throw new Error("notInArray requires at least one value");
    }
    return sql`${column} not in ${values.map((v) => bindIfParam(v, column))}`;
  }
  return sql`${column} not in ${bindIfParam(values, column)}`;
}
function isNull(value) {
  return sql`${value} is null`;
}
function isNotNull(value) {
  return sql`${value} is not null`;
}
function exists(subquery) {
  return sql`exists ${subquery}`;
}
function notExists(subquery) {
  return sql`not exists ${subquery}`;
}
function between(column, min, max) {
  return sql`${column} between ${bindIfParam(min, column)} and ${bindIfParam(
    max,
    column
  )}`;
}
function notBetween(column, min, max) {
  return sql`${column} not between ${bindIfParam(
    min,
    column
  )} and ${bindIfParam(max, column)}`;
}
function like(column, value) {
  return sql`${column} like ${value}`;
}
function notLike(column, value) {
  return sql`${column} not like ${value}`;
}
function ilike(column, value) {
  return sql`${column} ilike ${value}`;
}
function notIlike(column, value) {
  return sql`${column} not ilike ${value}`;
}
var eq, ne, gt, gte, lt, lte;
var init_conditions = __esm({
  "../../node_modules/drizzle-orm/sql/expressions/conditions.js"() {
    init_column();
    init_entity();
    init_table();
    init_sql();
    eq = (left, right) => {
      return sql`${left} = ${bindIfParam(right, left)}`;
    };
    ne = (left, right) => {
      return sql`${left} <> ${bindIfParam(right, left)}`;
    };
    gt = (left, right) => {
      return sql`${left} > ${bindIfParam(right, left)}`;
    };
    gte = (left, right) => {
      return sql`${left} >= ${bindIfParam(right, left)}`;
    };
    lt = (left, right) => {
      return sql`${left} < ${bindIfParam(right, left)}`;
    };
    lte = (left, right) => {
      return sql`${left} <= ${bindIfParam(right, left)}`;
    };
  }
});

// ../../node_modules/drizzle-orm/sql/expressions/select.js
function asc(column) {
  return sql`${column} asc`;
}
function desc(column) {
  return sql`${column} desc`;
}
var init_select = __esm({
  "../../node_modules/drizzle-orm/sql/expressions/select.js"() {
    init_sql();
  }
});

// ../../node_modules/drizzle-orm/sql/expressions/index.js
var init_expressions = __esm({
  "../../node_modules/drizzle-orm/sql/expressions/index.js"() {
    init_conditions();
    init_select();
  }
});

// ../../node_modules/drizzle-orm/relations.js
function getOperators() {
  return {
    and,
    between,
    eq,
    exists,
    gt,
    gte,
    ilike,
    inArray,
    isNull,
    isNotNull,
    like,
    lt,
    lte,
    ne,
    not,
    notBetween,
    notExists,
    notLike,
    notIlike,
    notInArray,
    or,
    sql
  };
}
function getOrderByOperators() {
  return {
    sql,
    asc,
    desc
  };
}
function extractTablesRelationalConfig(schema, configHelpers) {
  if (Object.keys(schema).length === 1 && "default" in schema && !is(schema["default"], Table)) {
    schema = schema["default"];
  }
  const tableNamesMap = {};
  const relationsBuffer = {};
  const tablesConfig = {};
  for (const [key, value] of Object.entries(schema)) {
    if (isTable(value)) {
      const dbName = value[Table.Symbol.Name];
      const bufferedRelations = relationsBuffer[dbName];
      tableNamesMap[dbName] = key;
      tablesConfig[key] = {
        tsName: key,
        dbName: value[Table.Symbol.Name],
        schema: value[Table.Symbol.Schema],
        columns: value[Table.Symbol.Columns],
        relations: bufferedRelations?.relations ?? {},
        primaryKey: bufferedRelations?.primaryKey ?? []
      };
      for (const column of Object.values(
        value[Table.Symbol.Columns]
      )) {
        if (column.primary) {
          tablesConfig[key].primaryKey.push(column);
        }
      }
      const extraConfig = value[Table.Symbol.ExtraConfigBuilder]?.(value);
      if (extraConfig) {
        for (const configEntry of Object.values(extraConfig)) {
          if (is(configEntry, PrimaryKeyBuilder)) {
            tablesConfig[key].primaryKey.push(...configEntry.columns);
          }
        }
      }
    } else if (is(value, Relations)) {
      const dbName = value.table[Table.Symbol.Name];
      const tableName = tableNamesMap[dbName];
      const relations2 = value.config(
        configHelpers(value.table)
      );
      let primaryKey;
      for (const [relationName, relation] of Object.entries(relations2)) {
        if (tableName) {
          const tableConfig = tablesConfig[tableName];
          tableConfig.relations[relationName] = relation;
          if (primaryKey) {
            tableConfig.primaryKey.push(...primaryKey);
          }
        } else {
          if (!(dbName in relationsBuffer)) {
            relationsBuffer[dbName] = {
              relations: {},
              primaryKey
            };
          }
          relationsBuffer[dbName].relations[relationName] = relation;
        }
      }
    }
  }
  return { tables: tablesConfig, tableNamesMap };
}
function createOne(sourceTable) {
  return function one(table, config) {
    return new One(
      sourceTable,
      table,
      config,
      config?.fields.reduce((res, f) => res && f.notNull, true) ?? false
    );
  };
}
function createMany(sourceTable) {
  return function many(referencedTable, config) {
    return new Many(sourceTable, referencedTable, config);
  };
}
function normalizeRelation(schema, tableNamesMap, relation) {
  if (is(relation, One) && relation.config) {
    return {
      fields: relation.config.fields,
      references: relation.config.references
    };
  }
  const referencedTableTsName = tableNamesMap[relation.referencedTable[Table.Symbol.Name]];
  if (!referencedTableTsName) {
    throw new Error(
      `Table "${relation.referencedTable[Table.Symbol.Name]}" not found in schema`
    );
  }
  const referencedTableConfig = schema[referencedTableTsName];
  if (!referencedTableConfig) {
    throw new Error(`Table "${referencedTableTsName}" not found in schema`);
  }
  const sourceTable = relation.sourceTable;
  const sourceTableTsName = tableNamesMap[sourceTable[Table.Symbol.Name]];
  if (!sourceTableTsName) {
    throw new Error(
      `Table "${sourceTable[Table.Symbol.Name]}" not found in schema`
    );
  }
  const reverseRelations = [];
  for (const referencedTableRelation of Object.values(
    referencedTableConfig.relations
  )) {
    if (relation.relationName && relation !== referencedTableRelation && referencedTableRelation.relationName === relation.relationName || !relation.relationName && referencedTableRelation.referencedTable === relation.sourceTable) {
      reverseRelations.push(referencedTableRelation);
    }
  }
  if (reverseRelations.length > 1) {
    throw relation.relationName ? new Error(
      `There are multiple relations with name "${relation.relationName}" in table "${referencedTableTsName}"`
    ) : new Error(
      `There are multiple relations between "${referencedTableTsName}" and "${relation.sourceTable[Table.Symbol.Name]}". Please specify relation name`
    );
  }
  if (reverseRelations[0] && is(reverseRelations[0], One) && reverseRelations[0].config) {
    return {
      fields: reverseRelations[0].config.references,
      references: reverseRelations[0].config.fields
    };
  }
  throw new Error(
    `There is not enough information to infer relation "${sourceTableTsName}.${relation.fieldName}"`
  );
}
function createTableRelationsHelpers(sourceTable) {
  return {
    one: createOne(sourceTable),
    many: createMany(sourceTable)
  };
}
function mapRelationalRow(tablesConfig, tableConfig, row, buildQueryResultSelection, mapColumnValue = (value) => value) {
  const result = {};
  for (const [
    selectionItemIndex,
    selectionItem
  ] of buildQueryResultSelection.entries()) {
    if (selectionItem.isJson) {
      const relation = tableConfig.relations[selectionItem.tsKey];
      const rawSubRows = row[selectionItemIndex];
      const subRows = typeof rawSubRows === "string" ? JSON.parse(rawSubRows) : rawSubRows;
      result[selectionItem.tsKey] = is(relation, One) ? subRows && mapRelationalRow(
        tablesConfig,
        tablesConfig[selectionItem.relationTableTsKey],
        subRows,
        selectionItem.selection,
        mapColumnValue
      ) : subRows.map(
        (subRow) => mapRelationalRow(
          tablesConfig,
          tablesConfig[selectionItem.relationTableTsKey],
          subRow,
          selectionItem.selection,
          mapColumnValue
        )
      );
    } else {
      const value = mapColumnValue(row[selectionItemIndex]);
      const field = selectionItem.field;
      let decoder3;
      if (is(field, Column)) {
        decoder3 = field;
      } else if (is(field, SQL)) {
        decoder3 = field.decoder;
      } else {
        decoder3 = field.sql.decoder;
      }
      result[selectionItem.tsKey] = value === null ? null : decoder3.mapFromDriverValue(value);
    }
  }
  return result;
}
var Relation, Relations, One, Many;
var init_relations = __esm({
  "../../node_modules/drizzle-orm/relations.js"() {
    init_table();
    init_column();
    init_entity();
    init_primary_keys();
    init_expressions();
    init_sql();
    Relation = class {
      constructor(sourceTable, referencedTable, relationName) {
        this.sourceTable = sourceTable;
        this.referencedTable = referencedTable;
        this.relationName = relationName;
        this.referencedTableName = referencedTable[Table.Symbol.Name];
      }
      static [entityKind] = "Relation";
      referencedTableName;
      fieldName;
    };
    Relations = class {
      constructor(table, config) {
        this.table = table;
        this.config = config;
      }
      static [entityKind] = "Relations";
    };
    One = class _One extends Relation {
      constructor(sourceTable, referencedTable, config, isNullable) {
        super(sourceTable, referencedTable, config?.relationName);
        this.config = config;
        this.isNullable = isNullable;
      }
      static [entityKind] = "One";
      withFieldName(fieldName) {
        const relation = new _One(
          this.sourceTable,
          this.referencedTable,
          this.config,
          this.isNullable
        );
        relation.fieldName = fieldName;
        return relation;
      }
    };
    Many = class _Many extends Relation {
      constructor(sourceTable, referencedTable, config) {
        super(sourceTable, referencedTable, config?.relationName);
        this.config = config;
      }
      static [entityKind] = "Many";
      withFieldName(fieldName) {
        const relation = new _Many(
          this.sourceTable,
          this.referencedTable,
          this.config
        );
        relation.fieldName = fieldName;
        return relation;
      }
    };
  }
});

// ../../node_modules/drizzle-orm/sql/functions/aggregate.js
var init_aggregate = __esm({
  "../../node_modules/drizzle-orm/sql/functions/aggregate.js"() {
  }
});

// ../../node_modules/drizzle-orm/sql/functions/index.js
var init_functions = __esm({
  "../../node_modules/drizzle-orm/sql/functions/index.js"() {
    init_aggregate();
  }
});

// ../../node_modules/drizzle-orm/sql/index.js
var init_sql2 = __esm({
  "../../node_modules/drizzle-orm/sql/index.js"() {
    init_expressions();
    init_functions();
    init_sql();
  }
});

// ../../node_modules/drizzle-orm/pg-core/view-base.js
var PgViewBase;
var init_view_base = __esm({
  "../../node_modules/drizzle-orm/pg-core/view-base.js"() {
    init_entity();
    init_sql();
    PgViewBase = class extends View {
      static [entityKind] = "PgViewBase";
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/dialect.js
var PgDialect;
var init_dialect = __esm({
  "../../node_modules/drizzle-orm/pg-core/dialect.js"() {
    init_alias();
    init_column();
    init_entity();
    init_errors();
    init_columns();
    init_table2();
    init_relations();
    init_sql2();
    init_sql();
    init_subquery();
    init_table();
    init_utils();
    init_view_common();
    init_view_base();
    PgDialect = class {
      static [entityKind] = "PgDialect";
      async migrate(migrations, session, config) {
        const migrationsTable = typeof config === "string" ? "__drizzle_migrations" : config.migrationsTable ?? "__drizzle_migrations";
        const migrationsSchema = typeof config === "string" ? "drizzle" : config.migrationsSchema ?? "drizzle";
        const migrationTableCreate = sql`
			CREATE TABLE IF NOT EXISTS ${sql.identifier(migrationsSchema)}.${sql.identifier(migrationsTable)} (
				id SERIAL PRIMARY KEY,
				hash text NOT NULL,
				created_at bigint
			)
		`;
        await session.execute(sql`CREATE SCHEMA IF NOT EXISTS ${sql.identifier(migrationsSchema)}`);
        await session.execute(migrationTableCreate);
        const dbMigrations = await session.all(
          sql`select id, hash, created_at from ${sql.identifier(migrationsSchema)}.${sql.identifier(migrationsTable)} order by created_at desc limit 1`
        );
        const lastDbMigration = dbMigrations[0];
        await session.transaction(async (tx) => {
          for await (const migration of migrations) {
            if (!lastDbMigration || Number(lastDbMigration.created_at) < migration.folderMillis) {
              for (const stmt of migration.sql) {
                await tx.execute(sql.raw(stmt));
              }
              await tx.execute(
                sql`insert into ${sql.identifier(migrationsSchema)}.${sql.identifier(migrationsTable)} ("hash", "created_at") values(${migration.hash}, ${migration.folderMillis})`
              );
            }
          }
        });
      }
      escapeName(name) {
        return `"${name}"`;
      }
      escapeParam(num) {
        return `$${num + 1}`;
      }
      escapeString(str) {
        return `'${str.replace(/'/g, "''")}'`;
      }
      buildWithCTE(queries2) {
        if (!queries2?.length)
          return void 0;
        const withSqlChunks = [sql`with `];
        for (const [i, w] of queries2.entries()) {
          withSqlChunks.push(sql`${sql.identifier(w[SubqueryConfig].alias)} as (${w[SubqueryConfig].sql})`);
          if (i < queries2.length - 1) {
            withSqlChunks.push(sql`, `);
          }
        }
        withSqlChunks.push(sql` `);
        return sql.join(withSqlChunks);
      }
      buildDeleteQuery({ table, where, returning, withList }) {
        const withSql = this.buildWithCTE(withList);
        const returningSql = returning ? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}` : void 0;
        const whereSql = where ? sql` where ${where}` : void 0;
        return sql`${withSql}delete from ${table}${whereSql}${returningSql}`;
      }
      buildUpdateSet(table, set) {
        const setEntries = Object.entries(set);
        const setSize = setEntries.length;
        return sql.join(
          setEntries.flatMap(([colName, value], i) => {
            const col = table[Table.Symbol.Columns][colName];
            const res = sql`${sql.identifier(col.name)} = ${value}`;
            if (i < setSize - 1) {
              return [res, sql.raw(", ")];
            }
            return [res];
          })
        );
      }
      buildUpdateQuery({ table, set, where, returning, withList }) {
        const withSql = this.buildWithCTE(withList);
        const setSql = this.buildUpdateSet(table, set);
        const returningSql = returning ? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}` : void 0;
        const whereSql = where ? sql` where ${where}` : void 0;
        return sql`${withSql}update ${table} set ${setSql}${whereSql}${returningSql}`;
      }
      /**
       * Builds selection SQL with provided fields/expressions
       *
       * Examples:
       *
       * `select <selection> from`
       *
       * `insert ... returning <selection>`
       *
       * If `isSingleTable` is true, then columns won't be prefixed with table name
       */
      buildSelection(fields, { isSingleTable = false } = {}) {
        const columnsLen = fields.length;
        const chunks = fields.flatMap(({ field }, i) => {
          const chunk = [];
          if (is(field, SQL.Aliased) && field.isSelectionField) {
            chunk.push(sql.identifier(field.fieldAlias));
          } else if (is(field, SQL.Aliased) || is(field, SQL)) {
            const query = is(field, SQL.Aliased) ? field.sql : field;
            if (isSingleTable) {
              chunk.push(
                new SQL(
                  query.queryChunks.map((c) => {
                    if (is(c, PgColumn)) {
                      return sql.identifier(c.name);
                    }
                    return c;
                  })
                )
              );
            } else {
              chunk.push(query);
            }
            if (is(field, SQL.Aliased)) {
              chunk.push(sql` as ${sql.identifier(field.fieldAlias)}`);
            }
          } else if (is(field, Column)) {
            if (isSingleTable) {
              chunk.push(sql.identifier(field.name));
            } else {
              chunk.push(field);
            }
          }
          if (i < columnsLen - 1) {
            chunk.push(sql`, `);
          }
          return chunk;
        });
        return sql.join(chunks);
      }
      buildSelectQuery({
        withList,
        fields,
        fieldsFlat,
        where,
        having,
        table,
        joins,
        orderBy,
        groupBy,
        limit,
        offset,
        lockingClause,
        distinct,
        setOperators
      }) {
        const fieldsList = fieldsFlat ?? orderSelectedFields(fields);
        for (const f of fieldsList) {
          if (is(f.field, Column) && getTableName(f.field.table) !== (is(table, Subquery) ? table[SubqueryConfig].alias : is(table, PgViewBase) ? table[ViewBaseConfig].name : is(table, SQL) ? void 0 : getTableName(table)) && !((table2) => joins?.some(
            ({ alias }) => alias === (table2[Table.Symbol.IsAlias] ? getTableName(table2) : table2[Table.Symbol.BaseName])
          ))(f.field.table)) {
            const tableName = getTableName(f.field.table);
            throw new Error(
              `Your "${f.path.join("->")}" field references a column "${tableName}"."${f.field.name}", but the table "${tableName}" is not part of the query! Did you forget to join it?`
            );
          }
        }
        const isSingleTable = !joins || joins.length === 0;
        const withSql = this.buildWithCTE(withList);
        let distinctSql;
        if (distinct) {
          distinctSql = distinct === true ? sql` distinct` : sql` distinct on (${sql.join(distinct.on, sql`, `)})`;
        }
        const selection = this.buildSelection(fieldsList, { isSingleTable });
        const tableSql = (() => {
          if (is(table, Table) && table[Table.Symbol.OriginalName] !== table[Table.Symbol.Name]) {
            let fullName = sql`${sql.identifier(table[Table.Symbol.OriginalName])}`;
            if (table[Table.Symbol.Schema]) {
              fullName = sql`${sql.identifier(table[Table.Symbol.Schema])}.${fullName}`;
            }
            return sql`${fullName} ${sql.identifier(table[Table.Symbol.Name])}`;
          }
          return table;
        })();
        const joinsArray = [];
        if (joins) {
          for (const [index, joinMeta] of joins.entries()) {
            if (index === 0) {
              joinsArray.push(sql` `);
            }
            const table2 = joinMeta.table;
            const lateralSql = joinMeta.lateral ? sql` lateral` : void 0;
            if (is(table2, PgTable)) {
              const tableName = table2[PgTable.Symbol.Name];
              const tableSchema = table2[PgTable.Symbol.Schema];
              const origTableName = table2[PgTable.Symbol.OriginalName];
              const alias = tableName === origTableName ? void 0 : joinMeta.alias;
              joinsArray.push(
                sql`${sql.raw(joinMeta.joinType)} join${lateralSql} ${tableSchema ? sql`${sql.identifier(tableSchema)}.` : void 0}${sql.identifier(origTableName)}${alias && sql` ${sql.identifier(alias)}`} on ${joinMeta.on}`
              );
            } else if (is(table2, View)) {
              const viewName = table2[ViewBaseConfig].name;
              const viewSchema = table2[ViewBaseConfig].schema;
              const origViewName = table2[ViewBaseConfig].originalName;
              const alias = viewName === origViewName ? void 0 : joinMeta.alias;
              joinsArray.push(
                sql`${sql.raw(joinMeta.joinType)} join${lateralSql} ${viewSchema ? sql`${sql.identifier(viewSchema)}.` : void 0}${sql.identifier(origViewName)}${alias && sql` ${sql.identifier(alias)}`} on ${joinMeta.on}`
              );
            } else {
              joinsArray.push(
                sql`${sql.raw(joinMeta.joinType)} join${lateralSql} ${table2} on ${joinMeta.on}`
              );
            }
            if (index < joins.length - 1) {
              joinsArray.push(sql` `);
            }
          }
        }
        const joinsSql = sql.join(joinsArray);
        const whereSql = where ? sql` where ${where}` : void 0;
        const havingSql = having ? sql` having ${having}` : void 0;
        let orderBySql;
        if (orderBy && orderBy.length > 0) {
          orderBySql = sql` order by ${sql.join(orderBy, sql`, `)}`;
        }
        let groupBySql;
        if (groupBy && groupBy.length > 0) {
          groupBySql = sql` group by ${sql.join(groupBy, sql`, `)}`;
        }
        const limitSql = limit ? sql` limit ${limit}` : void 0;
        const offsetSql = offset ? sql` offset ${offset}` : void 0;
        const lockingClauseSql = sql.empty();
        if (lockingClause) {
          const clauseSql = sql` for ${sql.raw(lockingClause.strength)}`;
          if (lockingClause.config.of) {
            clauseSql.append(
              sql` of ${sql.join(
                Array.isArray(lockingClause.config.of) ? lockingClause.config.of : [lockingClause.config.of],
                sql`, `
              )}`
            );
          }
          if (lockingClause.config.noWait) {
            clauseSql.append(sql` no wait`);
          } else if (lockingClause.config.skipLocked) {
            clauseSql.append(sql` skip locked`);
          }
          lockingClauseSql.append(clauseSql);
        }
        const finalQuery = sql`${withSql}select${distinctSql} ${selection} from ${tableSql}${joinsSql}${whereSql}${groupBySql}${havingSql}${orderBySql}${limitSql}${offsetSql}${lockingClauseSql}`;
        if (setOperators.length > 0) {
          return this.buildSetOperations(finalQuery, setOperators);
        }
        return finalQuery;
      }
      buildSetOperations(leftSelect, setOperators) {
        const [setOperator, ...rest] = setOperators;
        if (!setOperator) {
          throw new Error("Cannot pass undefined values to any set operator");
        }
        if (rest.length === 0) {
          return this.buildSetOperationQuery({ leftSelect, setOperator });
        }
        return this.buildSetOperations(
          this.buildSetOperationQuery({ leftSelect, setOperator }),
          rest
        );
      }
      buildSetOperationQuery({
        leftSelect,
        setOperator: { type, isAll, rightSelect, limit, orderBy, offset }
      }) {
        const leftChunk = sql`(${leftSelect.getSQL()}) `;
        const rightChunk = sql`(${rightSelect.getSQL()})`;
        let orderBySql;
        if (orderBy && orderBy.length > 0) {
          const orderByValues = [];
          for (const singleOrderBy of orderBy) {
            if (is(singleOrderBy, PgColumn)) {
              orderByValues.push(sql.identifier(singleOrderBy.name));
            } else if (is(singleOrderBy, SQL)) {
              for (let i = 0; i < singleOrderBy.queryChunks.length; i++) {
                const chunk = singleOrderBy.queryChunks[i];
                if (is(chunk, PgColumn)) {
                  singleOrderBy.queryChunks[i] = sql.identifier(chunk.name);
                }
              }
              orderByValues.push(sql`${singleOrderBy}`);
            } else {
              orderByValues.push(sql`${singleOrderBy}`);
            }
          }
          orderBySql = sql` order by ${sql.join(orderByValues, sql`, `)} `;
        }
        const limitSql = limit ? sql` limit ${limit}` : void 0;
        const operatorChunk = sql.raw(`${type} ${isAll ? "all " : ""}`);
        const offsetSql = offset ? sql` offset ${offset}` : void 0;
        return sql`${leftChunk}${operatorChunk}${rightChunk}${orderBySql}${limitSql}${offsetSql}`;
      }
      buildInsertQuery({ table, values, onConflict, returning, withList }) {
        const valuesSqlList = [];
        const columns = table[Table.Symbol.Columns];
        const colEntries = Object.entries(columns);
        const insertOrder = colEntries.map(([, column]) => sql.identifier(column.name));
        for (const [valueIndex, value] of values.entries()) {
          const valueList = [];
          for (const [fieldName, col] of colEntries) {
            const colValue = value[fieldName];
            if (colValue === void 0 || is(colValue, Param) && colValue.value === void 0) {
              if (col.defaultFn !== void 0) {
                const defaultFnResult = col.defaultFn();
                const defaultValue = is(defaultFnResult, SQL) ? defaultFnResult : sql.param(defaultFnResult, col);
                valueList.push(defaultValue);
              } else {
                valueList.push(sql`default`);
              }
            } else {
              valueList.push(colValue);
            }
          }
          valuesSqlList.push(valueList);
          if (valueIndex < values.length - 1) {
            valuesSqlList.push(sql`, `);
          }
        }
        const withSql = this.buildWithCTE(withList);
        const valuesSql = sql.join(valuesSqlList);
        const returningSql = returning ? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}` : void 0;
        const onConflictSql = onConflict ? sql` on conflict ${onConflict}` : void 0;
        return sql`${withSql}insert into ${table} ${insertOrder} values ${valuesSql}${onConflictSql}${returningSql}`;
      }
      buildRefreshMaterializedViewQuery({ view: view2, concurrently, withNoData }) {
        const concurrentlySql = concurrently ? sql` concurrently` : void 0;
        const withNoDataSql = withNoData ? sql` with no data` : void 0;
        return sql`refresh materialized view${concurrentlySql} ${view2}${withNoDataSql}`;
      }
      prepareTyping(encoder2) {
        if (is(encoder2, PgJsonb) || is(encoder2, PgJson)) {
          return "json";
        } else if (is(encoder2, PgNumeric)) {
          return "decimal";
        } else if (is(encoder2, PgTime)) {
          return "time";
        } else if (is(encoder2, PgTimestamp)) {
          return "timestamp";
        } else if (is(encoder2, PgDate)) {
          return "date";
        } else if (is(encoder2, PgUUID)) {
          return "uuid";
        } else {
          return "none";
        }
      }
      sqlToQuery(sql2) {
        return sql2.toQuery({
          escapeName: this.escapeName,
          escapeParam: this.escapeParam,
          escapeString: this.escapeString,
          prepareTyping: this.prepareTyping
        });
      }
      // buildRelationalQueryWithPK({
      // 	fullSchema,
      // 	schema,
      // 	tableNamesMap,
      // 	table,
      // 	tableConfig,
      // 	queryConfig: config,
      // 	tableAlias,
      // 	isRoot = false,
      // 	joinOn,
      // }: {
      // 	fullSchema: Record<string, unknown>;
      // 	schema: TablesRelationalConfig;
      // 	tableNamesMap: Record<string, string>;
      // 	table: PgTable;
      // 	tableConfig: TableRelationalConfig;
      // 	queryConfig: true | DBQueryConfig<'many', true>;
      // 	tableAlias: string;
      // 	isRoot?: boolean;
      // 	joinOn?: SQL;
      // }): BuildRelationalQueryResult<PgTable, PgColumn> {
      // 	// For { "<relation>": true }, return a table with selection of all columns
      // 	if (config === true) {
      // 		const selectionEntries = Object.entries(tableConfig.columns);
      // 		const selection: BuildRelationalQueryResult<PgTable, PgColumn>['selection'] = selectionEntries.map((
      // 			[key, value],
      // 		) => ({
      // 			dbKey: value.name,
      // 			tsKey: key,
      // 			field: value as PgColumn,
      // 			relationTableTsKey: undefined,
      // 			isJson: false,
      // 			selection: [],
      // 		}));
      // 		return {
      // 			tableTsKey: tableConfig.tsName,
      // 			sql: table,
      // 			selection,
      // 		};
      // 	}
      // 	// let selection: BuildRelationalQueryResult<PgTable, PgColumn>['selection'] = [];
      // 	// let selectionForBuild = selection;
      // 	const aliasedColumns = Object.fromEntries(
      // 		Object.entries(tableConfig.columns).map(([key, value]) => [key, aliasedTableColumn(value, tableAlias)]),
      // 	);
      // 	const aliasedRelations = Object.fromEntries(
      // 		Object.entries(tableConfig.relations).map(([key, value]) => [key, aliasedRelation(value, tableAlias)]),
      // 	);
      // 	const aliasedFields = Object.assign({}, aliasedColumns, aliasedRelations);
      // 	let where, hasUserDefinedWhere;
      // 	if (config.where) {
      // 		const whereSql = typeof config.where === 'function' ? config.where(aliasedFields, operators) : config.where;
      // 		where = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);
      // 		hasUserDefinedWhere = !!where;
      // 	}
      // 	where = and(joinOn, where);
      // 	// const fieldsSelection: { tsKey: string; value: PgColumn | SQL.Aliased; isExtra?: boolean }[] = [];
      // 	let joins: Join[] = [];
      // 	let selectedColumns: string[] = [];
      // 	// Figure out which columns to select
      // 	if (config.columns) {
      // 		let isIncludeMode = false;
      // 		for (const [field, value] of Object.entries(config.columns)) {
      // 			if (value === undefined) {
      // 				continue;
      // 			}
      // 			if (field in tableConfig.columns) {
      // 				if (!isIncludeMode && value === true) {
      // 					isIncludeMode = true;
      // 				}
      // 				selectedColumns.push(field);
      // 			}
      // 		}
      // 		if (selectedColumns.length > 0) {
      // 			selectedColumns = isIncludeMode
      // 				? selectedColumns.filter((c) => config.columns?.[c] === true)
      // 				: Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));
      // 		}
      // 	} else {
      // 		// Select all columns if selection is not specified
      // 		selectedColumns = Object.keys(tableConfig.columns);
      // 	}
      // 	// for (const field of selectedColumns) {
      // 	// 	const column = tableConfig.columns[field]! as PgColumn;
      // 	// 	fieldsSelection.push({ tsKey: field, value: column });
      // 	// }
      // 	let initiallySelectedRelations: {
      // 		tsKey: string;
      // 		queryConfig: true | DBQueryConfig<'many', false>;
      // 		relation: Relation;
      // 	}[] = [];
      // 	// let selectedRelations: BuildRelationalQueryResult<PgTable, PgColumn>['selection'] = [];
      // 	// Figure out which relations to select
      // 	if (config.with) {
      // 		initiallySelectedRelations = Object.entries(config.with)
      // 			.filter((entry): entry is [typeof entry[0], NonNullable<typeof entry[1]>] => !!entry[1])
      // 			.map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey]! }));
      // 	}
      // 	const manyRelations = initiallySelectedRelations.filter((r) =>
      // 		is(r.relation, Many)
      // 		&& (schema[tableNamesMap[r.relation.referencedTable[Table.Symbol.Name]]!]?.primaryKey.length ?? 0) > 0
      // 	);
      // 	// If this is the last Many relation (or there are no Many relations), we are on the innermost subquery level
      // 	const isInnermostQuery = manyRelations.length < 2;
      // 	const selectedExtras: {
      // 		tsKey: string;
      // 		value: SQL.Aliased;
      // 	}[] = [];
      // 	// Figure out which extras to select
      // 	if (isInnermostQuery && config.extras) {
      // 		const extras = typeof config.extras === 'function'
      // 			? config.extras(aliasedFields, { sql })
      // 			: config.extras;
      // 		for (const [tsKey, value] of Object.entries(extras)) {
      // 			selectedExtras.push({
      // 				tsKey,
      // 				value: mapColumnsInAliasedSQLToAlias(value, tableAlias),
      // 			});
      // 		}
      // 	}
      // 	// Transform `fieldsSelection` into `selection`
      // 	// `fieldsSelection` shouldn't be used after this point
      // 	// for (const { tsKey, value, isExtra } of fieldsSelection) {
      // 	// 	selection.push({
      // 	// 		dbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey]!.name,
      // 	// 		tsKey,
      // 	// 		field: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,
      // 	// 		relationTableTsKey: undefined,
      // 	// 		isJson: false,
      // 	// 		isExtra,
      // 	// 		selection: [],
      // 	// 	});
      // 	// }
      // 	let orderByOrig = typeof config.orderBy === 'function'
      // 		? config.orderBy(aliasedFields, orderByOperators)
      // 		: config.orderBy ?? [];
      // 	if (!Array.isArray(orderByOrig)) {
      // 		orderByOrig = [orderByOrig];
      // 	}
      // 	const orderBy = orderByOrig.map((orderByValue) => {
      // 		if (is(orderByValue, Column)) {
      // 			return aliasedTableColumn(orderByValue, tableAlias) as PgColumn;
      // 		}
      // 		return mapColumnsInSQLToAlias(orderByValue, tableAlias);
      // 	});
      // 	const limit = isInnermostQuery ? config.limit : undefined;
      // 	const offset = isInnermostQuery ? config.offset : undefined;
      // 	// For non-root queries without additional config except columns, return a table with selection
      // 	if (
      // 		!isRoot
      // 		&& initiallySelectedRelations.length === 0
      // 		&& selectedExtras.length === 0
      // 		&& !where
      // 		&& orderBy.length === 0
      // 		&& limit === undefined
      // 		&& offset === undefined
      // 	) {
      // 		return {
      // 			tableTsKey: tableConfig.tsName,
      // 			sql: table,
      // 			selection: selectedColumns.map((key) => ({
      // 				dbKey: tableConfig.columns[key]!.name,
      // 				tsKey: key,
      // 				field: tableConfig.columns[key] as PgColumn,
      // 				relationTableTsKey: undefined,
      // 				isJson: false,
      // 				selection: [],
      // 			})),
      // 		};
      // 	}
      // 	const selectedRelationsWithoutPK:
      // 	// Process all relations without primary keys, because they need to be joined differently and will all be on the same query level
      // 	for (
      // 		const {
      // 			tsKey: selectedRelationTsKey,
      // 			queryConfig: selectedRelationConfigValue,
      // 			relation,
      // 		} of initiallySelectedRelations
      // 	) {
      // 		const normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);
      // 		const relationTableName = relation.referencedTable[Table.Symbol.Name];
      // 		const relationTableTsName = tableNamesMap[relationTableName]!;
      // 		const relationTable = schema[relationTableTsName]!;
      // 		if (relationTable.primaryKey.length > 0) {
      // 			continue;
      // 		}
      // 		const relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;
      // 		const joinOn = and(
      // 			...normalizedRelation.fields.map((field, i) =>
      // 				eq(
      // 					aliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),
      // 					aliasedTableColumn(field, tableAlias),
      // 				)
      // 			),
      // 		);
      // 		const builtRelation = this.buildRelationalQueryWithoutPK({
      // 			fullSchema,
      // 			schema,
      // 			tableNamesMap,
      // 			table: fullSchema[relationTableTsName] as PgTable,
      // 			tableConfig: schema[relationTableTsName]!,
      // 			queryConfig: selectedRelationConfigValue,
      // 			tableAlias: relationTableAlias,
      // 			joinOn,
      // 			nestedQueryRelation: relation,
      // 		});
      // 		const field = sql`${sql.identifier(relationTableAlias)}.${sql.identifier('data')}`.as(selectedRelationTsKey);
      // 		joins.push({
      // 			on: sql`true`,
      // 			table: new Subquery(builtRelation.sql as SQL, {}, relationTableAlias),
      // 			alias: relationTableAlias,
      // 			joinType: 'left',
      // 			lateral: true,
      // 		});
      // 		selectedRelations.push({
      // 			dbKey: selectedRelationTsKey,
      // 			tsKey: selectedRelationTsKey,
      // 			field,
      // 			relationTableTsKey: relationTableTsName,
      // 			isJson: true,
      // 			selection: builtRelation.selection,
      // 		});
      // 	}
      // 	const oneRelations = initiallySelectedRelations.filter((r): r is typeof r & { relation: One } =>
      // 		is(r.relation, One)
      // 	);
      // 	// Process all One relations with PKs, because they can all be joined on the same level
      // 	for (
      // 		const {
      // 			tsKey: selectedRelationTsKey,
      // 			queryConfig: selectedRelationConfigValue,
      // 			relation,
      // 		} of oneRelations
      // 	) {
      // 		const normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);
      // 		const relationTableName = relation.referencedTable[Table.Symbol.Name];
      // 		const relationTableTsName = tableNamesMap[relationTableName]!;
      // 		const relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;
      // 		const relationTable = schema[relationTableTsName]!;
      // 		if (relationTable.primaryKey.length === 0) {
      // 			continue;
      // 		}
      // 		const joinOn = and(
      // 			...normalizedRelation.fields.map((field, i) =>
      // 				eq(
      // 					aliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),
      // 					aliasedTableColumn(field, tableAlias),
      // 				)
      // 			),
      // 		);
      // 		const builtRelation = this.buildRelationalQueryWithPK({
      // 			fullSchema,
      // 			schema,
      // 			tableNamesMap,
      // 			table: fullSchema[relationTableTsName] as PgTable,
      // 			tableConfig: schema[relationTableTsName]!,
      // 			queryConfig: selectedRelationConfigValue,
      // 			tableAlias: relationTableAlias,
      // 			joinOn,
      // 		});
      // 		const field = sql`case when ${sql.identifier(relationTableAlias)} is null then null else json_build_array(${
      // 			sql.join(
      // 				builtRelation.selection.map(({ field }) =>
      // 					is(field, SQL.Aliased)
      // 						? sql`${sql.identifier(relationTableAlias)}.${sql.identifier(field.fieldAlias)}`
      // 						: is(field, Column)
      // 						? aliasedTableColumn(field, relationTableAlias)
      // 						: field
      // 				),
      // 				sql`, `,
      // 			)
      // 		}) end`.as(selectedRelationTsKey);
      // 		const isLateralJoin = is(builtRelation.sql, SQL);
      // 		joins.push({
      // 			on: isLateralJoin ? sql`true` : joinOn,
      // 			table: is(builtRelation.sql, SQL)
      // 				? new Subquery(builtRelation.sql, {}, relationTableAlias)
      // 				: aliasedTable(builtRelation.sql, relationTableAlias),
      // 			alias: relationTableAlias,
      // 			joinType: 'left',
      // 			lateral: is(builtRelation.sql, SQL),
      // 		});
      // 		selectedRelations.push({
      // 			dbKey: selectedRelationTsKey,
      // 			tsKey: selectedRelationTsKey,
      // 			field,
      // 			relationTableTsKey: relationTableTsName,
      // 			isJson: true,
      // 			selection: builtRelation.selection,
      // 		});
      // 	}
      // 	let distinct: PgSelectConfig['distinct'];
      // 	let tableFrom: PgTable | Subquery = table;
      // 	// Process first Many relation - each one requires a nested subquery
      // 	const manyRelation = manyRelations[0];
      // 	if (manyRelation) {
      // 		const {
      // 			tsKey: selectedRelationTsKey,
      // 			queryConfig: selectedRelationQueryConfig,
      // 			relation,
      // 		} = manyRelation;
      // 		distinct = {
      // 			on: tableConfig.primaryKey.map((c) => aliasedTableColumn(c as PgColumn, tableAlias)),
      // 		};
      // 		const normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);
      // 		const relationTableName = relation.referencedTable[Table.Symbol.Name];
      // 		const relationTableTsName = tableNamesMap[relationTableName]!;
      // 		const relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;
      // 		const joinOn = and(
      // 			...normalizedRelation.fields.map((field, i) =>
      // 				eq(
      // 					aliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),
      // 					aliasedTableColumn(field, tableAlias),
      // 				)
      // 			),
      // 		);
      // 		const builtRelationJoin = this.buildRelationalQueryWithPK({
      // 			fullSchema,
      // 			schema,
      // 			tableNamesMap,
      // 			table: fullSchema[relationTableTsName] as PgTable,
      // 			tableConfig: schema[relationTableTsName]!,
      // 			queryConfig: selectedRelationQueryConfig,
      // 			tableAlias: relationTableAlias,
      // 			joinOn,
      // 		});
      // 		const builtRelationSelectionField = sql`case when ${
      // 			sql.identifier(relationTableAlias)
      // 		} is null then '[]' else json_agg(json_build_array(${
      // 			sql.join(
      // 				builtRelationJoin.selection.map(({ field }) =>
      // 					is(field, SQL.Aliased)
      // 						? sql`${sql.identifier(relationTableAlias)}.${sql.identifier(field.fieldAlias)}`
      // 						: is(field, Column)
      // 						? aliasedTableColumn(field, relationTableAlias)
      // 						: field
      // 				),
      // 				sql`, `,
      // 			)
      // 		})) over (partition by ${sql.join(distinct.on, sql`, `)}) end`.as(selectedRelationTsKey);
      // 		const isLateralJoin = is(builtRelationJoin.sql, SQL);
      // 		joins.push({
      // 			on: isLateralJoin ? sql`true` : joinOn,
      // 			table: isLateralJoin
      // 				? new Subquery(builtRelationJoin.sql as SQL, {}, relationTableAlias)
      // 				: aliasedTable(builtRelationJoin.sql as PgTable, relationTableAlias),
      // 			alias: relationTableAlias,
      // 			joinType: 'left',
      // 			lateral: isLateralJoin,
      // 		});
      // 		// Build the "from" subquery with the remaining Many relations
      // 		const builtTableFrom = this.buildRelationalQueryWithPK({
      // 			fullSchema,
      // 			schema,
      // 			tableNamesMap,
      // 			table,
      // 			tableConfig,
      // 			queryConfig: {
      // 				...config,
      // 				where: undefined,
      // 				orderBy: undefined,
      // 				limit: undefined,
      // 				offset: undefined,
      // 				with: manyRelations.slice(1).reduce<NonNullable<typeof config['with']>>(
      // 					(result, { tsKey, queryConfig: configValue }) => {
      // 						result[tsKey] = configValue;
      // 						return result;
      // 					},
      // 					{},
      // 				),
      // 			},
      // 			tableAlias,
      // 		});
      // 		selectedRelations.push({
      // 			dbKey: selectedRelationTsKey,
      // 			tsKey: selectedRelationTsKey,
      // 			field: builtRelationSelectionField,
      // 			relationTableTsKey: relationTableTsName,
      // 			isJson: true,
      // 			selection: builtRelationJoin.selection,
      // 		});
      // 		// selection = builtTableFrom.selection.map((item) =>
      // 		// 	is(item.field, SQL.Aliased)
      // 		// 		? { ...item, field: sql`${sql.identifier(tableAlias)}.${sql.identifier(item.field.fieldAlias)}` }
      // 		// 		: item
      // 		// );
      // 		// selectionForBuild = [{
      // 		// 	dbKey: '*',
      // 		// 	tsKey: '*',
      // 		// 	field: sql`${sql.identifier(tableAlias)}.*`,
      // 		// 	selection: [],
      // 		// 	isJson: false,
      // 		// 	relationTableTsKey: undefined,
      // 		// }];
      // 		// const newSelectionItem: (typeof selection)[number] = {
      // 		// 	dbKey: selectedRelationTsKey,
      // 		// 	tsKey: selectedRelationTsKey,
      // 		// 	field,
      // 		// 	relationTableTsKey: relationTableTsName,
      // 		// 	isJson: true,
      // 		// 	selection: builtRelationJoin.selection,
      // 		// };
      // 		// selection.push(newSelectionItem);
      // 		// selectionForBuild.push(newSelectionItem);
      // 		tableFrom = is(builtTableFrom.sql, PgTable)
      // 			? builtTableFrom.sql
      // 			: new Subquery(builtTableFrom.sql, {}, tableAlias);
      // 	}
      // 	if (selectedColumns.length === 0 && selectedRelations.length === 0 && selectedExtras.length === 0) {
      // 		throw new DrizzleError(`No fields selected for table "${tableConfig.tsName}" ("${tableAlias}")`);
      // 	}
      // 	let selection: BuildRelationalQueryResult<PgTable, PgColumn>['selection'];
      // 	function prepareSelectedColumns() {
      // 		return selectedColumns.map((key) => ({
      // 			dbKey: tableConfig.columns[key]!.name,
      // 			tsKey: key,
      // 			field: tableConfig.columns[key] as PgColumn,
      // 			relationTableTsKey: undefined,
      // 			isJson: false,
      // 			selection: [],
      // 		}));
      // 	}
      // 	function prepareSelectedExtras() {
      // 		return selectedExtras.map((item) => ({
      // 			dbKey: item.value.fieldAlias,
      // 			tsKey: item.tsKey,
      // 			field: item.value,
      // 			relationTableTsKey: undefined,
      // 			isJson: false,
      // 			selection: [],
      // 		}));
      // 	}
      // 	if (isRoot) {
      // 		selection = [
      // 			...prepareSelectedColumns(),
      // 			...prepareSelectedExtras(),
      // 		];
      // 	}
      // 	if (hasUserDefinedWhere || orderBy.length > 0) {
      // 		tableFrom = new Subquery(
      // 			this.buildSelectQuery({
      // 				table: is(tableFrom, PgTable) ? aliasedTable(tableFrom, tableAlias) : tableFrom,
      // 				fields: {},
      // 				fieldsFlat: selectionForBuild.map(({ field }) => ({
      // 					path: [],
      // 					field: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,
      // 				})),
      // 				joins,
      // 				distinct,
      // 			}),
      // 			{},
      // 			tableAlias,
      // 		);
      // 		selectionForBuild = selection.map((item) =>
      // 			is(item.field, SQL.Aliased)
      // 				? { ...item, field: sql`${sql.identifier(tableAlias)}.${sql.identifier(item.field.fieldAlias)}` }
      // 				: item
      // 		);
      // 		joins = [];
      // 		distinct = undefined;
      // 	}
      // 	const result = this.buildSelectQuery({
      // 		table: is(tableFrom, PgTable) ? aliasedTable(tableFrom, tableAlias) : tableFrom,
      // 		fields: {},
      // 		fieldsFlat: selectionForBuild.map(({ field }) => ({
      // 			path: [],
      // 			field: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,
      // 		})),
      // 		where,
      // 		limit,
      // 		offset,
      // 		joins,
      // 		orderBy,
      // 		distinct,
      // 	});
      // 	return {
      // 		tableTsKey: tableConfig.tsName,
      // 		sql: result,
      // 		selection,
      // 	};
      // }
      buildRelationalQueryWithoutPK({
        fullSchema,
        schema,
        tableNamesMap,
        table,
        tableConfig,
        queryConfig: config,
        tableAlias,
        nestedQueryRelation,
        joinOn
      }) {
        let selection = [];
        let limit, offset, orderBy = [], where;
        const joins = [];
        if (config === true) {
          const selectionEntries = Object.entries(tableConfig.columns);
          selection = selectionEntries.map(([key, value]) => ({
            dbKey: value.name,
            tsKey: key,
            field: aliasedTableColumn(value, tableAlias),
            relationTableTsKey: void 0,
            isJson: false,
            selection: []
          }));
        } else {
          const aliasedColumns = Object.fromEntries(
            Object.entries(tableConfig.columns).map(([key, value]) => [key, aliasedTableColumn(value, tableAlias)])
          );
          if (config.where) {
            const whereSql = typeof config.where === "function" ? config.where(aliasedColumns, getOperators()) : config.where;
            where = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);
          }
          const fieldsSelection = [];
          let selectedColumns = [];
          if (config.columns) {
            let isIncludeMode = false;
            for (const [field, value] of Object.entries(config.columns)) {
              if (value === void 0) {
                continue;
              }
              if (field in tableConfig.columns) {
                if (!isIncludeMode && value === true) {
                  isIncludeMode = true;
                }
                selectedColumns.push(field);
              }
            }
            if (selectedColumns.length > 0) {
              selectedColumns = isIncludeMode ? selectedColumns.filter((c) => config.columns?.[c] === true) : Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));
            }
          } else {
            selectedColumns = Object.keys(tableConfig.columns);
          }
          for (const field of selectedColumns) {
            const column = tableConfig.columns[field];
            fieldsSelection.push({ tsKey: field, value: column });
          }
          let selectedRelations = [];
          if (config.with) {
            selectedRelations = Object.entries(config.with).filter((entry) => !!entry[1]).map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey] }));
          }
          let extras;
          if (config.extras) {
            extras = typeof config.extras === "function" ? config.extras(aliasedColumns, { sql }) : config.extras;
            for (const [tsKey, value] of Object.entries(extras)) {
              fieldsSelection.push({
                tsKey,
                value: mapColumnsInAliasedSQLToAlias(value, tableAlias)
              });
            }
          }
          for (const { tsKey, value } of fieldsSelection) {
            selection.push({
              dbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey].name,
              tsKey,
              field: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,
              relationTableTsKey: void 0,
              isJson: false,
              selection: []
            });
          }
          let orderByOrig = typeof config.orderBy === "function" ? config.orderBy(aliasedColumns, getOrderByOperators()) : config.orderBy ?? [];
          if (!Array.isArray(orderByOrig)) {
            orderByOrig = [orderByOrig];
          }
          orderBy = orderByOrig.map((orderByValue) => {
            if (is(orderByValue, Column)) {
              return aliasedTableColumn(orderByValue, tableAlias);
            }
            return mapColumnsInSQLToAlias(orderByValue, tableAlias);
          });
          limit = config.limit;
          offset = config.offset;
          for (const {
            tsKey: selectedRelationTsKey,
            queryConfig: selectedRelationConfigValue,
            relation
          } of selectedRelations) {
            const normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);
            const relationTableName = relation.referencedTable[Table.Symbol.Name];
            const relationTableTsName = tableNamesMap[relationTableName];
            const relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;
            const joinOn2 = and(
              ...normalizedRelation.fields.map(
                (field2, i) => eq(
                  aliasedTableColumn(normalizedRelation.references[i], relationTableAlias),
                  aliasedTableColumn(field2, tableAlias)
                )
              )
            );
            const builtRelation = this.buildRelationalQueryWithoutPK({
              fullSchema,
              schema,
              tableNamesMap,
              table: fullSchema[relationTableTsName],
              tableConfig: schema[relationTableTsName],
              queryConfig: is(relation, One) ? selectedRelationConfigValue === true ? { limit: 1 } : { ...selectedRelationConfigValue, limit: 1 } : selectedRelationConfigValue,
              tableAlias: relationTableAlias,
              joinOn: joinOn2,
              nestedQueryRelation: relation
            });
            const field = sql`${sql.identifier(relationTableAlias)}.${sql.identifier("data")}`.as(selectedRelationTsKey);
            joins.push({
              on: sql`true`,
              table: new Subquery(builtRelation.sql, {}, relationTableAlias),
              alias: relationTableAlias,
              joinType: "left",
              lateral: true
            });
            selection.push({
              dbKey: selectedRelationTsKey,
              tsKey: selectedRelationTsKey,
              field,
              relationTableTsKey: relationTableTsName,
              isJson: true,
              selection: builtRelation.selection
            });
          }
        }
        if (selection.length === 0) {
          throw new DrizzleError({ message: `No fields selected for table "${tableConfig.tsName}" ("${tableAlias}")` });
        }
        let result;
        where = and(joinOn, where);
        if (nestedQueryRelation) {
          let field = sql`json_build_array(${sql.join(
            selection.map(
              ({ field: field2, tsKey, isJson }) => isJson ? sql`${sql.identifier(`${tableAlias}_${tsKey}`)}.${sql.identifier("data")}` : is(field2, SQL.Aliased) ? field2.sql : field2
            ),
            sql`, `
          )})`;
          if (is(nestedQueryRelation, Many)) {
            field = sql`coalesce(json_agg(${field}${orderBy.length > 0 ? sql` order by ${sql.join(orderBy, sql`, `)}` : void 0}), '[]'::json)`;
          }
          const nestedSelection = [{
            dbKey: "data",
            tsKey: "data",
            field: field.as("data"),
            isJson: true,
            relationTableTsKey: tableConfig.tsName,
            selection
          }];
          const needsSubquery = limit !== void 0 || offset !== void 0 || orderBy.length > 0;
          if (needsSubquery) {
            result = this.buildSelectQuery({
              table: aliasedTable(table, tableAlias),
              fields: {},
              fieldsFlat: [{
                path: [],
                field: sql.raw("*")
              }],
              where,
              limit,
              offset,
              orderBy,
              setOperators: []
            });
            where = void 0;
            limit = void 0;
            offset = void 0;
            orderBy = [];
          } else {
            result = aliasedTable(table, tableAlias);
          }
          result = this.buildSelectQuery({
            table: is(result, PgTable) ? result : new Subquery(result, {}, tableAlias),
            fields: {},
            fieldsFlat: nestedSelection.map(({ field: field2 }) => ({
              path: [],
              field: is(field2, Column) ? aliasedTableColumn(field2, tableAlias) : field2
            })),
            joins,
            where,
            limit,
            offset,
            orderBy,
            setOperators: []
          });
        } else {
          result = this.buildSelectQuery({
            table: aliasedTable(table, tableAlias),
            fields: {},
            fieldsFlat: selection.map(({ field }) => ({
              path: [],
              field: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field
            })),
            joins,
            where,
            limit,
            offset,
            orderBy,
            setOperators: []
          });
        }
        return {
          tableTsKey: tableConfig.tsName,
          sql: result,
          selection
        };
      }
    };
  }
});

// ../../node_modules/drizzle-orm/selection-proxy.js
var SelectionProxyHandler;
var init_selection_proxy = __esm({
  "../../node_modules/drizzle-orm/selection-proxy.js"() {
    init_alias();
    init_column();
    init_entity();
    init_sql();
    init_subquery();
    init_view_common();
    SelectionProxyHandler = class _SelectionProxyHandler {
      static [entityKind] = "SelectionProxyHandler";
      config;
      constructor(config) {
        this.config = { ...config };
      }
      get(subquery, prop) {
        if (prop === SubqueryConfig) {
          return {
            ...subquery[SubqueryConfig],
            selection: new Proxy(
              subquery[SubqueryConfig].selection,
              this
            )
          };
        }
        if (prop === ViewBaseConfig) {
          return {
            ...subquery[ViewBaseConfig],
            selectedFields: new Proxy(
              subquery[ViewBaseConfig].selectedFields,
              this
            )
          };
        }
        if (typeof prop === "symbol") {
          return subquery[prop];
        }
        const columns = is(subquery, Subquery) ? subquery[SubqueryConfig].selection : is(subquery, View) ? subquery[ViewBaseConfig].selectedFields : subquery;
        const value = columns[prop];
        if (is(value, SQL.Aliased)) {
          if (this.config.sqlAliasedBehavior === "sql" && !value.isSelectionField) {
            return value.sql;
          }
          const newValue = value.clone();
          newValue.isSelectionField = true;
          return newValue;
        }
        if (is(value, SQL)) {
          if (this.config.sqlBehavior === "sql") {
            return value;
          }
          throw new Error(
            `You tried to reference "${prop}" field from a subquery, which is a raw SQL field, but it doesn't have an alias declared. Please add an alias to the field using ".as('alias')" method.`
          );
        }
        if (is(value, Column)) {
          if (this.config.alias) {
            return new Proxy(
              value,
              new ColumnAliasProxyHandler(
                new Proxy(
                  value.table,
                  new TableAliasProxyHandler(this.config.alias, this.config.replaceOriginalName ?? false)
                )
              )
            );
          }
          return value;
        }
        if (typeof value !== "object" || value === null) {
          return value;
        }
        return new Proxy(value, new _SelectionProxyHandler(this.config));
      }
    };
  }
});

// ../../node_modules/drizzle-orm/query-builders/query-builder.js
var TypedQueryBuilder;
var init_query_builder = __esm({
  "../../node_modules/drizzle-orm/query-builders/query-builder.js"() {
    init_entity();
    TypedQueryBuilder = class {
      static [entityKind] = "TypedQueryBuilder";
      /** @internal */
      getSelectedFields() {
        return this._.selectedFields;
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/query-builders/select.js
function createSetOperator(type, isAll) {
  return (leftSelect, rightSelect, ...restSelects) => {
    const setOperators = [rightSelect, ...restSelects].map((select) => ({
      type,
      isAll,
      rightSelect: select
    }));
    for (const setOperator of setOperators) {
      if (!haveSameKeys(leftSelect.getSelectedFields(), setOperator.rightSelect.getSelectedFields())) {
        throw new Error(
          "Set operator error (union / intersect / except): selected fields are not the same or are in a different order"
        );
      }
    }
    return leftSelect.addSetOperators(setOperators);
  };
}
var PgSelectBuilder, PgSelectQueryBuilderBase, PgSelectBase, getPgSetOperators, union, unionAll, intersect, intersectAll, except, exceptAll;
var init_select2 = __esm({
  "../../node_modules/drizzle-orm/pg-core/query-builders/select.js"() {
    init_entity();
    init_view_base();
    init_query_builder();
    init_query_promise();
    init_selection_proxy();
    init_sql();
    init_subquery();
    init_table();
    init_tracing();
    init_utils();
    init_utils();
    init_view_common();
    PgSelectBuilder = class {
      static [entityKind] = "PgSelectBuilder";
      fields;
      session;
      dialect;
      withList = [];
      distinct;
      constructor(config) {
        this.fields = config.fields;
        this.session = config.session;
        this.dialect = config.dialect;
        if (config.withList) {
          this.withList = config.withList;
        }
        this.distinct = config.distinct;
      }
      /**
       * Specify the table, subquery, or other target that you're
       * building a select query against.
       *
       * {@link https://www.postgresql.org/docs/current/sql-select.html#SQL-FROM | Postgres from documentation}
       */
      from(source) {
        const isPartialSelect = !!this.fields;
        let fields;
        if (this.fields) {
          fields = this.fields;
        } else if (is(source, Subquery)) {
          fields = Object.fromEntries(
            Object.keys(source[SubqueryConfig].selection).map((key) => [key, source[key]])
          );
        } else if (is(source, PgViewBase)) {
          fields = source[ViewBaseConfig].selectedFields;
        } else if (is(source, SQL)) {
          fields = {};
        } else {
          fields = getTableColumns(source);
        }
        return new PgSelectBase({
          table: source,
          fields,
          isPartialSelect,
          session: this.session,
          dialect: this.dialect,
          withList: this.withList,
          distinct: this.distinct
        });
      }
    };
    PgSelectQueryBuilderBase = class extends TypedQueryBuilder {
      static [entityKind] = "PgSelectQueryBuilder";
      _;
      config;
      joinsNotNullableMap;
      tableName;
      isPartialSelect;
      session;
      dialect;
      constructor({ table, fields, isPartialSelect, session, dialect, withList, distinct }) {
        super();
        this.config = {
          withList,
          table,
          fields: { ...fields },
          distinct,
          setOperators: []
        };
        this.isPartialSelect = isPartialSelect;
        this.session = session;
        this.dialect = dialect;
        this._ = {
          selectedFields: fields
        };
        this.tableName = getTableLikeName(table);
        this.joinsNotNullableMap = typeof this.tableName === "string" ? { [this.tableName]: true } : {};
      }
      createJoin(joinType) {
        return (table, on) => {
          const baseTableName = this.tableName;
          const tableName = getTableLikeName(table);
          if (typeof tableName === "string" && this.config.joins?.some((join) => join.alias === tableName)) {
            throw new Error(`Alias "${tableName}" is already used in this query`);
          }
          if (!this.isPartialSelect) {
            if (Object.keys(this.joinsNotNullableMap).length === 1 && typeof baseTableName === "string") {
              this.config.fields = {
                [baseTableName]: this.config.fields
              };
            }
            if (typeof tableName === "string" && !is(table, SQL)) {
              const selection = is(table, Subquery) ? table[SubqueryConfig].selection : is(table, View) ? table[ViewBaseConfig].selectedFields : table[Table.Symbol.Columns];
              this.config.fields[tableName] = selection;
            }
          }
          if (typeof on === "function") {
            on = on(
              new Proxy(
                this.config.fields,
                new SelectionProxyHandler({ sqlAliasedBehavior: "sql", sqlBehavior: "sql" })
              )
            );
          }
          if (!this.config.joins) {
            this.config.joins = [];
          }
          this.config.joins.push({ on, table, joinType, alias: tableName });
          if (typeof tableName === "string") {
            switch (joinType) {
              case "left": {
                this.joinsNotNullableMap[tableName] = false;
                break;
              }
              case "right": {
                this.joinsNotNullableMap = Object.fromEntries(
                  Object.entries(this.joinsNotNullableMap).map(([key]) => [key, false])
                );
                this.joinsNotNullableMap[tableName] = true;
                break;
              }
              case "inner": {
                this.joinsNotNullableMap[tableName] = true;
                break;
              }
              case "full": {
                this.joinsNotNullableMap = Object.fromEntries(
                  Object.entries(this.joinsNotNullableMap).map(([key]) => [key, false])
                );
                this.joinsNotNullableMap[tableName] = false;
                break;
              }
            }
          }
          return this;
        };
      }
      /**
       * Executes a `left join` operation by adding another table to the current query.
       *
       * Calling this method associates each row of the table with the corresponding row from the joined table, if a match is found. If no matching row exists, it sets all columns of the joined table to null.
       *
       * See docs: {@link https://orm.drizzle.team/docs/joins#left-join}
       *
       * @param table the table to join.
       * @param on the `on` clause.
       *
       * @example
       *
       * ```ts
       * // Select all users and their pets
       * const usersWithPets: { user: User; pets: Pet | null }[] = await db.select()
       *   .from(users)
       *   .leftJoin(pets, eq(users.id, pets.ownerId))
       *
       * // Select userId and petId
       * const usersIdsAndPetIds: { userId: number; petId: number | null }[] = await db.select({
       *   userId: users.id,
       *   petId: pets.id,
       * })
       *   .from(users)
       *   .leftJoin(pets, eq(users.id, pets.ownerId))
       * ```
       */
      leftJoin = this.createJoin("left");
      /**
       * Executes a `right join` operation by adding another table to the current query.
       *
       * Calling this method associates each row of the joined table with the corresponding row from the main table, if a match is found. If no matching row exists, it sets all columns of the main table to null.
       *
       * See docs: {@link https://orm.drizzle.team/docs/joins#right-join}
       *
       * @param table the table to join.
       * @param on the `on` clause.
       *
       * @example
       *
       * ```ts
       * // Select all users and their pets
       * const usersWithPets: { user: User | null; pets: Pet }[] = await db.select()
       *   .from(users)
       *   .rightJoin(pets, eq(users.id, pets.ownerId))
       *
       * // Select userId and petId
       * const usersIdsAndPetIds: { userId: number | null; petId: number }[] = await db.select({
       *   userId: users.id,
       *   petId: pets.id,
       * })
       *   .from(users)
       *   .rightJoin(pets, eq(users.id, pets.ownerId))
       * ```
       */
      rightJoin = this.createJoin("right");
      /**
       * Executes an `inner join` operation, creating a new table by combining rows from two tables that have matching values.
       *
       * Calling this method retrieves rows that have corresponding entries in both joined tables. Rows without matching entries in either table are excluded, resulting in a table that includes only matching pairs.
       *
       * See docs: {@link https://orm.drizzle.team/docs/joins#inner-join}
       *
       * @param table the table to join.
       * @param on the `on` clause.
       *
       * @example
       *
       * ```ts
       * // Select all users and their pets
       * const usersWithPets: { user: User; pets: Pet }[] = await db.select()
       *   .from(users)
       *   .innerJoin(pets, eq(users.id, pets.ownerId))
       *
       * // Select userId and petId
       * const usersIdsAndPetIds: { userId: number; petId: number }[] = await db.select({
       *   userId: users.id,
       *   petId: pets.id,
       * })
       *   .from(users)
       *   .innerJoin(pets, eq(users.id, pets.ownerId))
       * ```
       */
      innerJoin = this.createJoin("inner");
      /**
       * Executes a `full join` operation by combining rows from two tables into a new table.
       *
       * Calling this method retrieves all rows from both main and joined tables, merging rows with matching values and filling in `null` for non-matching columns.
       *
       * See docs: {@link https://orm.drizzle.team/docs/joins#full-join}
       *
       * @param table the table to join.
       * @param on the `on` clause.
       *
       * @example
       *
       * ```ts
       * // Select all users and their pets
       * const usersWithPets: { user: User | null; pets: Pet | null }[] = await db.select()
       *   .from(users)
       *   .fullJoin(pets, eq(users.id, pets.ownerId))
       *
       * // Select userId and petId
       * const usersIdsAndPetIds: { userId: number | null; petId: number | null }[] = await db.select({
       *   userId: users.id,
       *   petId: pets.id,
       * })
       *   .from(users)
       *   .fullJoin(pets, eq(users.id, pets.ownerId))
       * ```
       */
      fullJoin = this.createJoin("full");
      createSetOperator(type, isAll) {
        return (rightSelection) => {
          const rightSelect = typeof rightSelection === "function" ? rightSelection(getPgSetOperators()) : rightSelection;
          if (!haveSameKeys(this.getSelectedFields(), rightSelect.getSelectedFields())) {
            throw new Error(
              "Set operator error (union / intersect / except): selected fields are not the same or are in a different order"
            );
          }
          this.config.setOperators.push({ type, isAll, rightSelect });
          return this;
        };
      }
      /**
       * Adds `union` set operator to the query.
       *
       * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.
       *
       * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}
       *
       * @example
       *
       * ```ts
       * // Select all unique names from customers and users tables
       * await db.select({ name: users.name })
       *   .from(users)
       *   .union(
       *     db.select({ name: customers.name }).from(customers)
       *   );
       * // or
       * import { union } from 'drizzle-orm/pg-core'
       *
       * await union(
       *   db.select({ name: users.name }).from(users),
       *   db.select({ name: customers.name }).from(customers)
       * );
       * ```
       */
      union = this.createSetOperator("union", false);
      /**
       * Adds `union all` set operator to the query.
       *
       * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.
       *
       * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}
       *
       * @example
       *
       * ```ts
       * // Select all transaction ids from both online and in-store sales
       * await db.select({ transaction: onlineSales.transactionId })
       *   .from(onlineSales)
       *   .unionAll(
       *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)
       *   );
       * // or
       * import { unionAll } from 'drizzle-orm/pg-core'
       *
       * await unionAll(
       *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),
       *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)
       * );
       * ```
       */
      unionAll = this.createSetOperator("union", true);
      /**
       * Adds `intersect` set operator to the query.
       *
       * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.
       *
       * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}
       *
       * @example
       *
       * ```ts
       * // Select course names that are offered in both departments A and B
       * await db.select({ courseName: depA.courseName })
       *   .from(depA)
       *   .intersect(
       *     db.select({ courseName: depB.courseName }).from(depB)
       *   );
       * // or
       * import { intersect } from 'drizzle-orm/pg-core'
       *
       * await intersect(
       *   db.select({ courseName: depA.courseName }).from(depA),
       *   db.select({ courseName: depB.courseName }).from(depB)
       * );
       * ```
       */
      intersect = this.createSetOperator("intersect", false);
      /**
       * Adds `intersect all` set operator to the query.
       *
       * Calling this method will retain only the rows that are present in both result sets including all duplicates.
       *
       * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect-all}
       *
       * @example
       *
       * ```ts
       * // Select all products and quantities that are ordered by both regular and VIP customers
       * await db.select({
       *   productId: regularCustomerOrders.productId,
       *   quantityOrdered: regularCustomerOrders.quantityOrdered
       * })
       * .from(regularCustomerOrders)
       * .intersectAll(
       *   db.select({
       *     productId: vipCustomerOrders.productId,
       *     quantityOrdered: vipCustomerOrders.quantityOrdered
       *   })
       *   .from(vipCustomerOrders)
       * );
       * // or
       * import { intersectAll } from 'drizzle-orm/pg-core'
       *
       * await intersectAll(
       *   db.select({
       *     productId: regularCustomerOrders.productId,
       *     quantityOrdered: regularCustomerOrders.quantityOrdered
       *   })
       *   .from(regularCustomerOrders),
       *   db.select({
       *     productId: vipCustomerOrders.productId,
       *     quantityOrdered: vipCustomerOrders.quantityOrdered
       *   })
       *   .from(vipCustomerOrders)
       * );
       * ```
       */
      intersectAll = this.createSetOperator("intersect", true);
      /**
       * Adds `except` set operator to the query.
       *
       * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.
       *
       * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}
       *
       * @example
       *
       * ```ts
       * // Select all courses offered in department A but not in department B
       * await db.select({ courseName: depA.courseName })
       *   .from(depA)
       *   .except(
       *     db.select({ courseName: depB.courseName }).from(depB)
       *   );
       * // or
       * import { except } from 'drizzle-orm/pg-core'
       *
       * await except(
       *   db.select({ courseName: depA.courseName }).from(depA),
       *   db.select({ courseName: depB.courseName }).from(depB)
       * );
       * ```
       */
      except = this.createSetOperator("except", false);
      /**
       * Adds `except all` set operator to the query.
       *
       * Calling this method will retrieve all rows from the left query, except for the rows that are present in the result set of the right query.
       *
       * See docs: {@link https://orm.drizzle.team/docs/set-operations#except-all}
       *
       * @example
       *
       * ```ts
       * // Select all products that are ordered by regular customers but not by VIP customers
       * await db.select({
       *   productId: regularCustomerOrders.productId,
       *   quantityOrdered: regularCustomerOrders.quantityOrdered,
       * })
       * .from(regularCustomerOrders)
       * .exceptAll(
       *   db.select({
       *     productId: vipCustomerOrders.productId,
       *     quantityOrdered: vipCustomerOrders.quantityOrdered,
       *   })
       *   .from(vipCustomerOrders)
       * );
       * // or
       * import { exceptAll } from 'drizzle-orm/pg-core'
       *
       * await exceptAll(
       *   db.select({
       *     productId: regularCustomerOrders.productId,
       *     quantityOrdered: regularCustomerOrders.quantityOrdered
       *   })
       *   .from(regularCustomerOrders),
       *   db.select({
       *     productId: vipCustomerOrders.productId,
       *     quantityOrdered: vipCustomerOrders.quantityOrdered
       *   })
       *   .from(vipCustomerOrders)
       * );
       * ```
       */
      exceptAll = this.createSetOperator("except", true);
      /** @internal */
      addSetOperators(setOperators) {
        this.config.setOperators.push(...setOperators);
        return this;
      }
      /**
       * Adds a `where` clause to the query.
       *
       * Calling this method will select only those rows that fulfill a specified condition.
       *
       * See docs: {@link https://orm.drizzle.team/docs/select#filtering}
       *
       * @param where the `where` clause.
       *
       * @example
       * You can use conditional operators and `sql function` to filter the rows to be selected.
       *
       * ```ts
       * // Select all cars with green color
       * await db.select().from(cars).where(eq(cars.color, 'green'));
       * // or
       * await db.select().from(cars).where(sql`${cars.color} = 'green'`)
       * ```
       *
       * You can logically combine conditional operators with `and()` and `or()` operators:
       *
       * ```ts
       * // Select all BMW cars with a green color
       * await db.select().from(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));
       *
       * // Select all cars with the green or blue color
       * await db.select().from(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));
       * ```
       */
      where(where) {
        if (typeof where === "function") {
          where = where(
            new Proxy(
              this.config.fields,
              new SelectionProxyHandler({ sqlAliasedBehavior: "sql", sqlBehavior: "sql" })
            )
          );
        }
        this.config.where = where;
        return this;
      }
      /**
       * Adds a `having` clause to the query.
       *
       * Calling this method will select only those rows that fulfill a specified condition. It is typically used with aggregate functions to filter the aggregated data based on a specified condition.
       *
       * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}
       *
       * @param having the `having` clause.
       *
       * @example
       *
       * ```ts
       * // Select all brands with more than one car
       * await db.select({
       * 	brand: cars.brand,
       * 	count: sql<number>`cast(count(${cars.id}) as int)`,
       * })
       *   .from(cars)
       *   .groupBy(cars.brand)
       *   .having(({ count }) => gt(count, 1));
       * ```
       */
      having(having) {
        if (typeof having === "function") {
          having = having(
            new Proxy(
              this.config.fields,
              new SelectionProxyHandler({ sqlAliasedBehavior: "sql", sqlBehavior: "sql" })
            )
          );
        }
        this.config.having = having;
        return this;
      }
      groupBy(...columns) {
        if (typeof columns[0] === "function") {
          const groupBy = columns[0](
            new Proxy(
              this.config.fields,
              new SelectionProxyHandler({ sqlAliasedBehavior: "alias", sqlBehavior: "sql" })
            )
          );
          this.config.groupBy = Array.isArray(groupBy) ? groupBy : [groupBy];
        } else {
          this.config.groupBy = columns;
        }
        return this;
      }
      orderBy(...columns) {
        if (typeof columns[0] === "function") {
          const orderBy = columns[0](
            new Proxy(
              this.config.fields,
              new SelectionProxyHandler({ sqlAliasedBehavior: "alias", sqlBehavior: "sql" })
            )
          );
          const orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];
          if (this.config.setOperators.length > 0) {
            this.config.setOperators.at(-1).orderBy = orderByArray;
          } else {
            this.config.orderBy = orderByArray;
          }
        } else {
          const orderByArray = columns;
          if (this.config.setOperators.length > 0) {
            this.config.setOperators.at(-1).orderBy = orderByArray;
          } else {
            this.config.orderBy = orderByArray;
          }
        }
        return this;
      }
      /**
       * Adds a `limit` clause to the query.
       *
       * Calling this method will set the maximum number of rows that will be returned by this query.
       *
       * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}
       *
       * @param limit the `limit` clause.
       *
       * @example
       *
       * ```ts
       * // Get the first 10 people from this query.
       * await db.select().from(people).limit(10);
       * ```
       */
      limit(limit) {
        if (this.config.setOperators.length > 0) {
          this.config.setOperators.at(-1).limit = limit;
        } else {
          this.config.limit = limit;
        }
        return this;
      }
      /**
       * Adds an `offset` clause to the query.
       *
       * Calling this method will skip a number of rows when returning results from this query.
       *
       * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}
       *
       * @param offset the `offset` clause.
       *
       * @example
       *
       * ```ts
       * // Get the 10th-20th people from this query.
       * await db.select().from(people).offset(10).limit(10);
       * ```
       */
      offset(offset) {
        if (this.config.setOperators.length > 0) {
          this.config.setOperators.at(-1).offset = offset;
        } else {
          this.config.offset = offset;
        }
        return this;
      }
      /**
       * Adds a `for` clause to the query.
       *
       * Calling this method will specify a lock strength for this query that controls how strictly it acquires exclusive access to the rows being queried.
       *
       * See docs: {@link https://www.postgresql.org/docs/current/sql-select.html#SQL-FOR-UPDATE-SHARE}
       *
       * @param strength the lock strength.
       * @param config the lock configuration.
       */
      for(strength, config = {}) {
        this.config.lockingClause = { strength, config };
        return this;
      }
      /** @internal */
      getSQL() {
        return this.dialect.buildSelectQuery(this.config);
      }
      toSQL() {
        const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());
        return rest;
      }
      as(alias) {
        return new Proxy(
          new Subquery(this.getSQL(), this.config.fields, alias),
          new SelectionProxyHandler({ alias, sqlAliasedBehavior: "alias", sqlBehavior: "error" })
        );
      }
      /** @internal */
      getSelectedFields() {
        return new Proxy(
          this.config.fields,
          new SelectionProxyHandler({ alias: this.tableName, sqlAliasedBehavior: "alias", sqlBehavior: "error" })
        );
      }
      $dynamic() {
        return this;
      }
    };
    PgSelectBase = class extends PgSelectQueryBuilderBase {
      static [entityKind] = "PgSelect";
      /** @internal */
      _prepare(name) {
        const { session, config, dialect, joinsNotNullableMap } = this;
        if (!session) {
          throw new Error("Cannot execute a query on a query builder. Please use a database instance instead.");
        }
        return tracer.startActiveSpan("drizzle.prepareQuery", () => {
          const fieldsList = orderSelectedFields(config.fields);
          const query = session.prepareQuery(dialect.sqlToQuery(this.getSQL()), fieldsList, name, true);
          query.joinsNotNullableMap = joinsNotNullableMap;
          return query;
        });
      }
      /**
       * Create a prepared statement for this query. This allows
       * the database to remember this query for the given session
       * and call it by name, rather than specifying the full query.
       *
       * {@link https://www.postgresql.org/docs/current/sql-prepare.html | Postgres prepare documentation}
       */
      prepare(name) {
        return this._prepare(name);
      }
      execute = (placeholderValues) => {
        return tracer.startActiveSpan("drizzle.operation", () => {
          return this._prepare().execute(placeholderValues);
        });
      };
    };
    applyMixins(PgSelectBase, [QueryPromise]);
    getPgSetOperators = () => ({
      union,
      unionAll,
      intersect,
      intersectAll,
      except,
      exceptAll
    });
    union = createSetOperator("union", false);
    unionAll = createSetOperator("union", true);
    intersect = createSetOperator("intersect", false);
    intersectAll = createSetOperator("intersect", true);
    except = createSetOperator("except", false);
    exceptAll = createSetOperator("except", true);
  }
});

// ../../node_modules/drizzle-orm/pg-core/query-builders/query-builder.js
var QueryBuilder;
var init_query_builder2 = __esm({
  "../../node_modules/drizzle-orm/pg-core/query-builders/query-builder.js"() {
    init_entity();
    init_dialect();
    init_selection_proxy();
    init_subquery();
    init_select2();
    QueryBuilder = class {
      static [entityKind] = "PgQueryBuilder";
      dialect;
      $with(alias) {
        const queryBuilder = this;
        return {
          as(qb) {
            if (typeof qb === "function") {
              qb = qb(queryBuilder);
            }
            return new Proxy(
              new WithSubquery(qb.getSQL(), qb.getSelectedFields(), alias, true),
              new SelectionProxyHandler({ alias, sqlAliasedBehavior: "alias", sqlBehavior: "error" })
            );
          }
        };
      }
      with(...queries2) {
        const self2 = this;
        function select(fields) {
          return new PgSelectBuilder({
            fields: fields ?? void 0,
            session: void 0,
            dialect: self2.getDialect(),
            withList: queries2
          });
        }
        function selectDistinct(fields) {
          return new PgSelectBuilder({
            fields: fields ?? void 0,
            session: void 0,
            dialect: self2.getDialect(),
            distinct: true
          });
        }
        function selectDistinctOn(on, fields) {
          return new PgSelectBuilder({
            fields: fields ?? void 0,
            session: void 0,
            dialect: self2.getDialect(),
            distinct: { on }
          });
        }
        return { select, selectDistinct, selectDistinctOn };
      }
      select(fields) {
        return new PgSelectBuilder({
          fields: fields ?? void 0,
          session: void 0,
          dialect: this.getDialect()
        });
      }
      selectDistinct(fields) {
        return new PgSelectBuilder({
          fields: fields ?? void 0,
          session: void 0,
          dialect: this.getDialect(),
          distinct: true
        });
      }
      selectDistinctOn(on, fields) {
        return new PgSelectBuilder({
          fields: fields ?? void 0,
          session: void 0,
          dialect: this.getDialect(),
          distinct: { on }
        });
      }
      // Lazy load dialect to avoid circular dependency
      getDialect() {
        if (!this.dialect) {
          this.dialect = new PgDialect();
        }
        return this.dialect;
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/query-builders/refresh-materialized-view.js
var PgRefreshMaterializedView;
var init_refresh_materialized_view = __esm({
  "../../node_modules/drizzle-orm/pg-core/query-builders/refresh-materialized-view.js"() {
    init_entity();
    init_query_promise();
    init_tracing();
    PgRefreshMaterializedView = class extends QueryPromise {
      constructor(view2, session, dialect) {
        super();
        this.session = session;
        this.dialect = dialect;
        this.config = { view: view2 };
      }
      static [entityKind] = "PgRefreshMaterializedView";
      config;
      concurrently() {
        if (this.config.withNoData !== void 0) {
          throw new Error("Cannot use concurrently and withNoData together");
        }
        this.config.concurrently = true;
        return this;
      }
      withNoData() {
        if (this.config.concurrently !== void 0) {
          throw new Error("Cannot use concurrently and withNoData together");
        }
        this.config.withNoData = true;
        return this;
      }
      /** @internal */
      getSQL() {
        return this.dialect.buildRefreshMaterializedViewQuery(this.config);
      }
      toSQL() {
        const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());
        return rest;
      }
      /** @internal */
      _prepare(name) {
        return tracer.startActiveSpan("drizzle.prepareQuery", () => {
          return this.session.prepareQuery(this.dialect.sqlToQuery(this.getSQL()), void 0, name, true);
        });
      }
      prepare(name) {
        return this._prepare(name);
      }
      execute = (placeholderValues) => {
        return tracer.startActiveSpan("drizzle.operation", () => {
          return this._prepare().execute(placeholderValues);
        });
      };
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/query-builders/select.types.js
var init_select_types = __esm({
  "../../node_modules/drizzle-orm/pg-core/query-builders/select.types.js"() {
  }
});

// ../../node_modules/drizzle-orm/pg-core/query-builders/update.js
var PgUpdateBuilder, PgUpdateBase;
var init_update = __esm({
  "../../node_modules/drizzle-orm/pg-core/query-builders/update.js"() {
    init_entity();
    init_query_promise();
    init_table();
    init_utils();
    PgUpdateBuilder = class {
      constructor(table, session, dialect, withList) {
        this.table = table;
        this.session = session;
        this.dialect = dialect;
        this.withList = withList;
      }
      static [entityKind] = "PgUpdateBuilder";
      set(values) {
        return new PgUpdateBase(
          this.table,
          mapUpdateSet(this.table, values),
          this.session,
          this.dialect,
          this.withList
        );
      }
    };
    PgUpdateBase = class extends QueryPromise {
      constructor(table, set, session, dialect, withList) {
        super();
        this.session = session;
        this.dialect = dialect;
        this.config = { set, table, withList };
      }
      static [entityKind] = "PgUpdate";
      config;
      /**
       * Adds a 'where' clause to the query.
       *
       * Calling this method will update only those rows that fulfill a specified condition.
       *
       * See docs: {@link https://orm.drizzle.team/docs/update}
       *
       * @param where the 'where' clause.
       *
       * @example
       * You can use conditional operators and `sql function` to filter the rows to be updated.
       *
       * ```ts
       * // Update all cars with green color
       * await db.update(cars).set({ color: 'red' })
       *   .where(eq(cars.color, 'green'));
       * // or
       * await db.update(cars).set({ color: 'red' })
       *   .where(sql`${cars.color} = 'green'`)
       * ```
       *
       * You can logically combine conditional operators with `and()` and `or()` operators:
       *
       * ```ts
       * // Update all BMW cars with a green color
       * await db.update(cars).set({ color: 'red' })
       *   .where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));
       *
       * // Update all cars with the green or blue color
       * await db.update(cars).set({ color: 'red' })
       *   .where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));
       * ```
       */
      where(where) {
        this.config.where = where;
        return this;
      }
      returning(fields = this.config.table[Table.Symbol.Columns]) {
        this.config.returning = orderSelectedFields(fields);
        return this;
      }
      /** @internal */
      getSQL() {
        return this.dialect.buildUpdateQuery(this.config);
      }
      toSQL() {
        const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());
        return rest;
      }
      /** @internal */
      _prepare(name) {
        return this.session.prepareQuery(this.dialect.sqlToQuery(this.getSQL()), this.config.returning, name, true);
      }
      prepare(name) {
        return this._prepare(name);
      }
      execute = (placeholderValues) => {
        return this._prepare().execute(placeholderValues);
      };
      $dynamic() {
        return this;
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/query-builders/index.js
var init_query_builders = __esm({
  "../../node_modules/drizzle-orm/pg-core/query-builders/index.js"() {
    init_delete();
    init_insert();
    init_query_builder2();
    init_refresh_materialized_view();
    init_select2();
    init_select_types();
    init_update();
  }
});

// ../../node_modules/drizzle-orm/pg-core/query-builders/query.js
var RelationalQueryBuilder, PgRelationalQuery;
var init_query = __esm({
  "../../node_modules/drizzle-orm/pg-core/query-builders/query.js"() {
    init_entity();
    init_query_promise();
    init_relations();
    init_tracing();
    RelationalQueryBuilder = class {
      constructor(fullSchema, schema, tableNamesMap, table, tableConfig, dialect, session) {
        this.fullSchema = fullSchema;
        this.schema = schema;
        this.tableNamesMap = tableNamesMap;
        this.table = table;
        this.tableConfig = tableConfig;
        this.dialect = dialect;
        this.session = session;
      }
      static [entityKind] = "PgRelationalQueryBuilder";
      findMany(config) {
        return new PgRelationalQuery(
          this.fullSchema,
          this.schema,
          this.tableNamesMap,
          this.table,
          this.tableConfig,
          this.dialect,
          this.session,
          config ? config : {},
          "many"
        );
      }
      findFirst(config) {
        return new PgRelationalQuery(
          this.fullSchema,
          this.schema,
          this.tableNamesMap,
          this.table,
          this.tableConfig,
          this.dialect,
          this.session,
          config ? { ...config, limit: 1 } : { limit: 1 },
          "first"
        );
      }
    };
    PgRelationalQuery = class extends QueryPromise {
      constructor(fullSchema, schema, tableNamesMap, table, tableConfig, dialect, session, config, mode) {
        super();
        this.fullSchema = fullSchema;
        this.schema = schema;
        this.tableNamesMap = tableNamesMap;
        this.table = table;
        this.tableConfig = tableConfig;
        this.dialect = dialect;
        this.session = session;
        this.config = config;
        this.mode = mode;
      }
      static [entityKind] = "PgRelationalQuery";
      /** @internal */
      _prepare(name) {
        return tracer.startActiveSpan("drizzle.prepareQuery", () => {
          const { query, builtQuery } = this._toSQL();
          return this.session.prepareQuery(
            builtQuery,
            void 0,
            name,
            true,
            (rawRows, mapColumnValue) => {
              const rows = rawRows.map(
                (row) => mapRelationalRow(this.schema, this.tableConfig, row, query.selection, mapColumnValue)
              );
              if (this.mode === "first") {
                return rows[0];
              }
              return rows;
            }
          );
        });
      }
      prepare(name) {
        return this._prepare(name);
      }
      _getQuery() {
        return this.dialect.buildRelationalQueryWithoutPK({
          fullSchema: this.fullSchema,
          schema: this.schema,
          tableNamesMap: this.tableNamesMap,
          table: this.table,
          tableConfig: this.tableConfig,
          queryConfig: this.config,
          tableAlias: this.tableConfig.tsName
        });
      }
      /** @internal */
      getSQL() {
        return this._getQuery().sql;
      }
      _toSQL() {
        const query = this._getQuery();
        const builtQuery = this.dialect.sqlToQuery(query.sql);
        return { query, builtQuery };
      }
      toSQL() {
        return this._toSQL().builtQuery;
      }
      execute() {
        return tracer.startActiveSpan("drizzle.operation", () => {
          return this._prepare().execute();
        });
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/query-builders/raw.js
var PgRaw;
var init_raw = __esm({
  "../../node_modules/drizzle-orm/pg-core/query-builders/raw.js"() {
    init_entity();
    init_query_promise();
    PgRaw = class extends QueryPromise {
      constructor(execute, sql2, query, mapBatchResult) {
        super();
        this.execute = execute;
        this.sql = sql2;
        this.query = query;
        this.mapBatchResult = mapBatchResult;
      }
      static [entityKind] = "PgRaw";
      /** @internal */
      getSQL() {
        return this.sql;
      }
      getQuery() {
        return this.query;
      }
      mapResult(result, isFromBatch) {
        return isFromBatch ? this.mapBatchResult(result) : result;
      }
      _prepare() {
        return this;
      }
      /** @internal */
      isResponseInArrayMode() {
        return false;
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/db.js
var PgDatabase;
var init_db = __esm({
  "../../node_modules/drizzle-orm/pg-core/db.js"() {
    init_entity();
    init_query_builders();
    init_selection_proxy();
    init_subquery();
    init_query();
    init_raw();
    init_refresh_materialized_view();
    PgDatabase = class {
      constructor(dialect, session, schema) {
        this.dialect = dialect;
        this.session = session;
        this._ = schema ? { schema: schema.schema, tableNamesMap: schema.tableNamesMap } : { schema: void 0, tableNamesMap: {} };
        this.query = {};
        if (this._.schema) {
          for (const [tableName, columns] of Object.entries(this._.schema)) {
            this.query[tableName] = new RelationalQueryBuilder(
              schema.fullSchema,
              this._.schema,
              this._.tableNamesMap,
              schema.fullSchema[tableName],
              columns,
              dialect,
              session
            );
          }
        }
      }
      static [entityKind] = "PgDatabase";
      query;
      /**
       * Creates a subquery that defines a temporary named result set as a CTE.
       *
       * It is useful for breaking down complex queries into simpler parts and for reusing the result set in subsequent parts of the query.
       *
       * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}
       *
       * @param alias The alias for the subquery.
       *
       * Failure to provide an alias will result in a DrizzleTypeError, preventing the subquery from being referenced in other queries.
       *
       * @example
       *
       * ```ts
       * // Create a subquery with alias 'sq' and use it in the select query
       * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));
       *
       * const result = await db.with(sq).select().from(sq);
       * ```
       *
       * To select arbitrary SQL values as fields in a CTE and reference them in other CTEs or in the main query, you need to add aliases to them:
       *
       * ```ts
       * // Select an arbitrary SQL value as a field in a CTE and reference it in the main query
       * const sq = db.$with('sq').as(db.select({
       *   name: sql<string>`upper(${users.name})`.as('name'),
       * })
       * .from(users));
       *
       * const result = await db.with(sq).select({ name: sq.name }).from(sq);
       * ```
       */
      $with(alias) {
        return {
          as(qb) {
            if (typeof qb === "function") {
              qb = qb(new QueryBuilder());
            }
            return new Proxy(
              new WithSubquery(qb.getSQL(), qb.getSelectedFields(), alias, true),
              new SelectionProxyHandler({ alias, sqlAliasedBehavior: "alias", sqlBehavior: "error" })
            );
          }
        };
      }
      /**
       * Incorporates a previously defined CTE (using `$with`) into the main query.
       *
       * This method allows the main query to reference a temporary named result set.
       *
       * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}
       *
       * @param queries The CTEs to incorporate into the main query.
       *
       * @example
       *
       * ```ts
       * // Define a subquery 'sq' as a CTE using $with
       * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));
       *
       * // Incorporate the CTE 'sq' into the main query and select from it
       * const result = await db.with(sq).select().from(sq);
       * ```
       */
      with(...queries2) {
        const self2 = this;
        function select(fields) {
          return new PgSelectBuilder({
            fields: fields ?? void 0,
            session: self2.session,
            dialect: self2.dialect,
            withList: queries2
          });
        }
        function selectDistinct(fields) {
          return new PgSelectBuilder({
            fields: fields ?? void 0,
            session: self2.session,
            dialect: self2.dialect,
            withList: queries2,
            distinct: true
          });
        }
        function selectDistinctOn(on, fields) {
          return new PgSelectBuilder({
            fields: fields ?? void 0,
            session: self2.session,
            dialect: self2.dialect,
            withList: queries2,
            distinct: { on }
          });
        }
        function update(table) {
          return new PgUpdateBuilder(table, self2.session, self2.dialect, queries2);
        }
        function insert2(table) {
          return new PgInsertBuilder(table, self2.session, self2.dialect, queries2);
        }
        function delete_(table) {
          return new PgDeleteBase(table, self2.session, self2.dialect, queries2);
        }
        return { select, selectDistinct, selectDistinctOn, update, insert: insert2, delete: delete_ };
      }
      select(fields) {
        return new PgSelectBuilder({
          fields: fields ?? void 0,
          session: this.session,
          dialect: this.dialect
        });
      }
      selectDistinct(fields) {
        return new PgSelectBuilder({
          fields: fields ?? void 0,
          session: this.session,
          dialect: this.dialect,
          distinct: true
        });
      }
      selectDistinctOn(on, fields) {
        return new PgSelectBuilder({
          fields: fields ?? void 0,
          session: this.session,
          dialect: this.dialect,
          distinct: { on }
        });
      }
      /**
       * Creates an update query.
       *
       * Calling this method without `.where()` clause will update all rows in a table. The `.where()` clause specifies which rows should be updated.
       *
       * Use `.set()` method to specify which values to update.
       *
       * See docs: {@link https://orm.drizzle.team/docs/update}
       *
       * @param table The table to update.
       *
       * @example
       *
       * ```ts
       * // Update all rows in the 'cars' table
       * await db.update(cars).set({ color: 'red' });
       *
       * // Update rows with filters and conditions
       * await db.update(cars).set({ color: 'red' }).where(eq(cars.brand, 'BMW'));
       *
       * // Update with returning clause
       * const updatedCar: Car[] = await db.update(cars)
       *   .set({ color: 'red' })
       *   .where(eq(cars.id, 1))
       *   .returning();
       * ```
       */
      update(table) {
        return new PgUpdateBuilder(table, this.session, this.dialect);
      }
      /**
       * Creates an insert query.
       *
       * Calling this method will create new rows in a table. Use `.values()` method to specify which values to insert.
       *
       * See docs: {@link https://orm.drizzle.team/docs/insert}
       *
       * @param table The table to insert into.
       *
       * @example
       *
       * ```ts
       * // Insert one row
       * await db.insert(cars).values({ brand: 'BMW' });
       *
       * // Insert multiple rows
       * await db.insert(cars).values([{ brand: 'BMW' }, { brand: 'Porsche' }]);
       *
       * // Insert with returning clause
       * const insertedCar: Car[] = await db.insert(cars)
       *   .values({ brand: 'BMW' })
       *   .returning();
       * ```
       */
      insert(table) {
        return new PgInsertBuilder(table, this.session, this.dialect);
      }
      /**
       * Creates a delete query.
       *
       * Calling this method without `.where()` clause will delete all rows in a table. The `.where()` clause specifies which rows should be deleted.
       *
       * See docs: {@link https://orm.drizzle.team/docs/delete}
       *
       * @param table The table to delete from.
       *
       * @example
       *
       * ```ts
       * // Delete all rows in the 'cars' table
       * await db.delete(cars);
       *
       * // Delete rows with filters and conditions
       * await db.delete(cars).where(eq(cars.color, 'green'));
       *
       * // Delete with returning clause
       * const deletedCar: Car[] = await db.delete(cars)
       *   .where(eq(cars.id, 1))
       *   .returning();
       * ```
       */
      delete(table) {
        return new PgDeleteBase(table, this.session, this.dialect);
      }
      refreshMaterializedView(view2) {
        return new PgRefreshMaterializedView(view2, this.session, this.dialect);
      }
      execute(query) {
        const sql2 = query.getSQL();
        const builtQuery = this.dialect.sqlToQuery(sql2);
        const prepared = this.session.prepareQuery(
          builtQuery,
          void 0,
          void 0,
          false
        );
        return new PgRaw(
          () => prepared.execute(),
          sql2,
          builtQuery,
          (result) => prepared.mapResult(result, true)
        );
      }
      transaction(transaction, config) {
        return this.session.transaction(transaction, config);
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/alias.js
var init_alias2 = __esm({
  "../../node_modules/drizzle-orm/pg-core/alias.js"() {
  }
});

// ../../node_modules/drizzle-orm/pg-core/checks.js
var CheckBuilder, Check;
var init_checks = __esm({
  "../../node_modules/drizzle-orm/pg-core/checks.js"() {
    init_entity();
    CheckBuilder = class {
      constructor(name, value) {
        this.name = name;
        this.value = value;
      }
      static [entityKind] = "PgCheckBuilder";
      brand;
      /** @internal */
      build(table) {
        return new Check(table, this);
      }
    };
    Check = class {
      constructor(table, builder) {
        this.table = table;
        this.name = builder.name;
        this.value = builder.value;
      }
      static [entityKind] = "PgCheck";
      name;
      value;
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/indexes.js
var IndexBuilderOn, IndexBuilder, Index;
var init_indexes = __esm({
  "../../node_modules/drizzle-orm/pg-core/indexes.js"() {
    init_entity();
    IndexBuilderOn = class {
      constructor(unique, name) {
        this.unique = unique;
        this.name = name;
      }
      static [entityKind] = "PgIndexBuilderOn";
      on(...columns) {
        return new IndexBuilder(columns, this.unique, false, this.name);
      }
      onOnly(...columns) {
        return new IndexBuilder(columns, this.unique, true, this.name);
      }
    };
    IndexBuilder = class {
      static [entityKind] = "PgIndexBuilder";
      /** @internal */
      config;
      constructor(columns, unique, only, name) {
        this.config = {
          name,
          columns,
          unique,
          only
        };
      }
      concurrently() {
        this.config.concurrently = true;
        return this;
      }
      using(method) {
        this.config.using = method;
        return this;
      }
      asc() {
        this.config.order = "asc";
        return this;
      }
      desc() {
        this.config.order = "desc";
        return this;
      }
      nullsFirst() {
        this.config.nulls = "first";
        return this;
      }
      nullsLast() {
        this.config.nulls = "last";
        return this;
      }
      where(condition) {
        this.config.where = condition;
        return this;
      }
      /** @internal */
      build(table) {
        return new Index(this.config, table);
      }
    };
    Index = class {
      static [entityKind] = "PgIndex";
      config;
      constructor(config, table) {
        this.config = { ...config, table };
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/view-common.js
var PgViewConfig;
var init_view_common2 = __esm({
  "../../node_modules/drizzle-orm/pg-core/view-common.js"() {
    PgViewConfig = Symbol.for("drizzle:PgViewConfig");
  }
});

// ../../node_modules/drizzle-orm/pg-core/view.js
function pgViewWithSchema(name, selection, schema) {
  if (selection) {
    return new ManualViewBuilder(name, selection, schema);
  }
  return new ViewBuilder(name, schema);
}
function pgMaterializedViewWithSchema(name, selection, schema) {
  if (selection) {
    return new ManualMaterializedViewBuilder(name, selection, schema);
  }
  return new MaterializedViewBuilder(name, schema);
}
var DefaultViewBuilderCore, ViewBuilder, ManualViewBuilder, MaterializedViewBuilderCore, MaterializedViewBuilder, ManualMaterializedViewBuilder, PgView, PgMaterializedViewConfig, PgMaterializedView;
var init_view = __esm({
  "../../node_modules/drizzle-orm/pg-core/view.js"() {
    init_entity();
    init_selection_proxy();
    init_utils();
    init_query_builder2();
    init_table2();
    init_view_base();
    init_view_common2();
    DefaultViewBuilderCore = class {
      constructor(name, schema) {
        this.name = name;
        this.schema = schema;
      }
      static [entityKind] = "PgDefaultViewBuilderCore";
      config = {};
      with(config) {
        this.config.with = config;
        return this;
      }
    };
    ViewBuilder = class extends DefaultViewBuilderCore {
      static [entityKind] = "PgViewBuilder";
      as(qb) {
        if (typeof qb === "function") {
          qb = qb(new QueryBuilder());
        }
        const selectionProxy = new SelectionProxyHandler({
          alias: this.name,
          sqlBehavior: "error",
          sqlAliasedBehavior: "alias",
          replaceOriginalName: true
        });
        const aliasedSelection = new Proxy(qb.getSelectedFields(), selectionProxy);
        return new Proxy(
          new PgView({
            pgConfig: this.config,
            config: {
              name: this.name,
              schema: this.schema,
              selectedFields: aliasedSelection,
              query: qb.getSQL().inlineParams()
            }
          }),
          selectionProxy
        );
      }
    };
    ManualViewBuilder = class extends DefaultViewBuilderCore {
      static [entityKind] = "PgManualViewBuilder";
      columns;
      constructor(name, columns, schema) {
        super(name, schema);
        this.columns = getTableColumns(pgTable(name, columns));
      }
      existing() {
        return new Proxy(
          new PgView({
            pgConfig: void 0,
            config: {
              name: this.name,
              schema: this.schema,
              selectedFields: this.columns,
              query: void 0
            }
          }),
          new SelectionProxyHandler({
            alias: this.name,
            sqlBehavior: "error",
            sqlAliasedBehavior: "alias",
            replaceOriginalName: true
          })
        );
      }
      as(query) {
        return new Proxy(
          new PgView({
            pgConfig: this.config,
            config: {
              name: this.name,
              schema: this.schema,
              selectedFields: this.columns,
              query: query.inlineParams()
            }
          }),
          new SelectionProxyHandler({
            alias: this.name,
            sqlBehavior: "error",
            sqlAliasedBehavior: "alias",
            replaceOriginalName: true
          })
        );
      }
    };
    MaterializedViewBuilderCore = class {
      constructor(name, schema) {
        this.name = name;
        this.schema = schema;
      }
      static [entityKind] = "PgMaterializedViewBuilderCore";
      config = {};
      using(using) {
        this.config.using = using;
        return this;
      }
      with(config) {
        this.config.with = config;
        return this;
      }
      tablespace(tablespace) {
        this.config.tablespace = tablespace;
        return this;
      }
      withNoData() {
        this.config.withNoData = true;
        return this;
      }
    };
    MaterializedViewBuilder = class extends MaterializedViewBuilderCore {
      static [entityKind] = "PgMaterializedViewBuilder";
      as(qb) {
        if (typeof qb === "function") {
          qb = qb(new QueryBuilder());
        }
        const selectionProxy = new SelectionProxyHandler({
          alias: this.name,
          sqlBehavior: "error",
          sqlAliasedBehavior: "alias",
          replaceOriginalName: true
        });
        const aliasedSelection = new Proxy(qb.getSelectedFields(), selectionProxy);
        return new Proxy(
          new PgMaterializedView({
            pgConfig: {
              with: this.config.with,
              using: this.config.using,
              tablespace: this.config.tablespace,
              withNoData: this.config.withNoData
            },
            config: {
              name: this.name,
              schema: this.schema,
              selectedFields: aliasedSelection,
              query: qb.getSQL().inlineParams()
            }
          }),
          selectionProxy
        );
      }
    };
    ManualMaterializedViewBuilder = class extends MaterializedViewBuilderCore {
      static [entityKind] = "PgManualMaterializedViewBuilder";
      columns;
      constructor(name, columns, schema) {
        super(name, schema);
        this.columns = getTableColumns(pgTable(name, columns));
      }
      existing() {
        return new Proxy(
          new PgMaterializedView({
            pgConfig: void 0,
            config: {
              name: this.name,
              schema: this.schema,
              selectedFields: this.columns,
              query: void 0
            }
          }),
          new SelectionProxyHandler({
            alias: this.name,
            sqlBehavior: "error",
            sqlAliasedBehavior: "alias",
            replaceOriginalName: true
          })
        );
      }
      as(query) {
        return new Proxy(
          new PgMaterializedView({
            pgConfig: void 0,
            config: {
              name: this.name,
              schema: this.schema,
              selectedFields: this.columns,
              query: query.inlineParams()
            }
          }),
          new SelectionProxyHandler({
            alias: this.name,
            sqlBehavior: "error",
            sqlAliasedBehavior: "alias",
            replaceOriginalName: true
          })
        );
      }
    };
    PgView = class extends PgViewBase {
      static [entityKind] = "PgView";
      [PgViewConfig];
      constructor({ pgConfig, config }) {
        super(config);
        if (pgConfig) {
          this[PgViewConfig] = {
            with: pgConfig.with
          };
        }
      }
    };
    PgMaterializedViewConfig = Symbol.for("drizzle:PgMaterializedViewConfig");
    PgMaterializedView = class extends PgViewBase {
      static [entityKind] = "PgMaterializedView";
      [PgMaterializedViewConfig];
      constructor({ pgConfig, config }) {
        super(config);
        this[PgMaterializedViewConfig] = {
          with: pgConfig?.with,
          using: pgConfig?.using,
          tablespace: pgConfig?.tablespace,
          withNoData: pgConfig?.withNoData
        };
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/schema.js
var PgSchema;
var init_schema = __esm({
  "../../node_modules/drizzle-orm/pg-core/schema.js"() {
    init_entity();
    init_table2();
    init_view();
    PgSchema = class {
      constructor(schemaName) {
        this.schemaName = schemaName;
      }
      static [entityKind] = "PgSchema";
      table = (name, columns, extraConfig) => {
        return pgTableWithSchema(name, columns, extraConfig, this.schemaName);
      };
      view = (name, columns) => {
        return pgViewWithSchema(name, columns, this.schemaName);
      };
      materializedView = (name, columns) => {
        return pgMaterializedViewWithSchema(name, columns, this.schemaName);
      };
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/session.js
var PgPreparedQuery, PgSession, PgTransaction;
var init_session = __esm({
  "../../node_modules/drizzle-orm/pg-core/session.js"() {
    init_entity();
    init_errors();
    init_sql2();
    init_tracing();
    init_db();
    PgPreparedQuery = class {
      constructor(query) {
        this.query = query;
      }
      getQuery() {
        return this.query;
      }
      mapResult(response, _isFromBatch) {
        return response;
      }
      static [entityKind] = "PgPreparedQuery";
      /** @internal */
      joinsNotNullableMap;
    };
    PgSession = class {
      constructor(dialect) {
        this.dialect = dialect;
      }
      static [entityKind] = "PgSession";
      execute(query) {
        return tracer.startActiveSpan("drizzle.operation", () => {
          const prepared = tracer.startActiveSpan("drizzle.prepareQuery", () => {
            return this.prepareQuery(
              this.dialect.sqlToQuery(query),
              void 0,
              void 0,
              false
            );
          });
          return prepared.execute();
        });
      }
      all(query) {
        return this.prepareQuery(
          this.dialect.sqlToQuery(query),
          void 0,
          void 0,
          false
        ).all();
      }
    };
    PgTransaction = class extends PgDatabase {
      constructor(dialect, session, schema, nestedIndex = 0) {
        super(dialect, session, schema);
        this.schema = schema;
        this.nestedIndex = nestedIndex;
      }
      static [entityKind] = "PgTransaction";
      rollback() {
        throw new TransactionRollbackError();
      }
      /** @internal */
      getTransactionConfigSQL(config) {
        const chunks = [];
        if (config.isolationLevel) {
          chunks.push(`isolation level ${config.isolationLevel}`);
        }
        if (config.accessMode) {
          chunks.push(config.accessMode);
        }
        if (typeof config.deferrable === "boolean") {
          chunks.push(config.deferrable ? "deferrable" : "not deferrable");
        }
        return sql.raw(chunks.join(" "));
      }
      setTransaction(config) {
        return this.session.execute(sql`set transaction ${this.getTransactionConfigSQL(config)}`);
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-core/subquery.js
var init_subquery2 = __esm({
  "../../node_modules/drizzle-orm/pg-core/subquery.js"() {
  }
});

// ../../node_modules/drizzle-orm/pg-core/utils.js
var init_utils2 = __esm({
  "../../node_modules/drizzle-orm/pg-core/utils.js"() {
  }
});

// ../../node_modules/drizzle-orm/pg-core/utils/index.js
var init_utils3 = __esm({
  "../../node_modules/drizzle-orm/pg-core/utils/index.js"() {
    init_array();
  }
});

// ../../node_modules/drizzle-orm/pg-core/index.js
var init_pg_core = __esm({
  "../../node_modules/drizzle-orm/pg-core/index.js"() {
    init_alias2();
    init_checks();
    init_columns();
    init_db();
    init_dialect();
    init_foreign_keys();
    init_indexes();
    init_primary_keys();
    init_query_builders();
    init_schema();
    init_session();
    init_subquery2();
    init_table2();
    init_unique_constraint();
    init_utils2();
    init_utils3();
    init_view_common2();
    init_view();
  }
});

// ../../node_modules/drizzle-orm/pg-proxy/session.js
var PgRemoteSession, PgProxyTransaction, PreparedQuery;
var init_session2 = __esm({
  "../../node_modules/drizzle-orm/pg-proxy/session.js"() {
    init_entity();
    init_logger();
    init_pg_core();
    init_session();
    init_sql();
    init_tracing();
    init_utils();
    PgRemoteSession = class extends PgSession {
      constructor(client, dialect, schema, options = {}) {
        super(dialect);
        this.client = client;
        this.schema = schema;
        this.logger = options.logger ?? new NoopLogger();
      }
      static [entityKind] = "PgRemoteSession";
      logger;
      prepareQuery(query, fields, name, isResponseInArrayMode, customResultMapper) {
        return new PreparedQuery(
          this.client,
          query.sql,
          query.params,
          this.logger,
          fields,
          isResponseInArrayMode,
          customResultMapper
        );
      }
      async transaction(_transaction, _config) {
        throw new Error("Transactions are not supported by the Postgres Proxy driver");
      }
    };
    PgProxyTransaction = class extends PgTransaction {
      static [entityKind] = "PgProxyTransaction";
      async transaction(_transaction) {
        throw new Error("Transactions are not supported by the Postgres Proxy driver");
      }
    };
    PreparedQuery = class extends PgPreparedQuery {
      constructor(client, queryString, params, logger, fields, _isResponseInArrayMode, customResultMapper) {
        super({ sql: queryString, params });
        this.client = client;
        this.queryString = queryString;
        this.params = params;
        this.logger = logger;
        this.fields = fields;
        this._isResponseInArrayMode = _isResponseInArrayMode;
        this.customResultMapper = customResultMapper;
      }
      static [entityKind] = "PgProxyPreparedQuery";
      async execute(placeholderValues = {}) {
        return tracer.startActiveSpan("drizzle.execute", async (span) => {
          const params = fillPlaceholders(this.params, placeholderValues);
          const { fields, client, queryString, joinsNotNullableMap, customResultMapper, logger } = this;
          span?.setAttributes({
            "drizzle.query.text": queryString,
            "drizzle.query.params": JSON.stringify(params)
          });
          logger.logQuery(queryString, params);
          if (!fields && !customResultMapper) {
            return tracer.startActiveSpan("drizzle.driver.execute", async () => {
              const { rows: rows2 } = await client(queryString, params, "execute");
              return rows2;
            });
          }
          const rows = await tracer.startActiveSpan("drizzle.driver.execute", async () => {
            span?.setAttributes({
              "drizzle.query.text": queryString,
              "drizzle.query.params": JSON.stringify(params)
            });
            const { rows: rows2 } = await client(queryString, params, "all");
            return rows2;
          });
          return tracer.startActiveSpan("drizzle.mapResponse", () => {
            return customResultMapper ? customResultMapper(rows) : rows.map((row) => mapResultRow(fields, row, joinsNotNullableMap));
          });
        });
      }
      async all() {
      }
      /** @internal */
      isResponseInArrayMode() {
        return this._isResponseInArrayMode;
      }
    };
  }
});

// ../../node_modules/drizzle-orm/pg-proxy/driver.js
function drizzle(callback, config = {}) {
  const dialect = new PgDialect();
  let logger;
  if (config.logger === true) {
    logger = new DefaultLogger();
  } else if (config.logger !== false) {
    logger = config.logger;
  }
  let schema;
  if (config.schema) {
    const tablesConfig = extractTablesRelationalConfig(
      config.schema,
      createTableRelationsHelpers
    );
    schema = {
      fullSchema: config.schema,
      schema: tablesConfig.tables,
      tableNamesMap: tablesConfig.tableNamesMap
    };
  }
  const session = new PgRemoteSession(callback, dialect, schema, { logger });
  return new PgDatabase(dialect, session, schema);
}
var init_driver = __esm({
  "../../node_modules/drizzle-orm/pg-proxy/driver.js"() {
    init_logger();
    init_db();
    init_dialect();
    init_relations();
    init_session2();
  }
});

// ../../node_modules/drizzle-orm/pg-proxy/index.js
var init_pg_proxy = __esm({
  "../../node_modules/drizzle-orm/pg-proxy/index.js"() {
    init_driver();
    init_session2();
  }
});

// ../../node_modules/drizzle-orm/expressions.js
var init_expressions2 = __esm({
  "../../node_modules/drizzle-orm/expressions.js"() {
    init_expressions();
  }
});

// ../../node_modules/drizzle-orm/operations.js
var init_operations = __esm({
  "../../node_modules/drizzle-orm/operations.js"() {
  }
});

// ../../node_modules/drizzle-orm/index.js
var init_drizzle_orm = __esm({
  "../../node_modules/drizzle-orm/index.js"() {
    init_alias();
    init_column_builder();
    init_column();
    init_entity();
    init_errors();
    init_expressions2();
    init_logger();
    init_operations();
    init_query_promise();
    init_relations();
    init_sql2();
    init_subquery();
    init_table();
    init_utils();
    init_view_common();
  }
});

// dist/$server_build/chunks/pages/__CgdEe831.mjs
var CgdEe831_exports = {};
__export(CgdEe831_exports, {
  $: () => $$FormatJoke,
  _: () => ____jokecat_,
  a: () => agregator,
  b: () => $$RudSense,
  c: () => $$JokeThumbnail,
  d: () => db2,
  e: () => jokecats,
  j: () => jokes$1,
  n: () => newsbg,
  s: () => slugify,
  t: () => tweets
});
function slugify(string) {
  let slug = string.replace(/\s+/g, "-");
  slug = slug.toLowerCase();
  const CYRILLIC_TO_LATIN_MAP = {
    \u0430: "a",
    \u0431: "b",
    \u0432: "v",
    \u0433: "g",
    \u0434: "d",
    \u0435: "e",
    \u0451: "e",
    \u0436: "zh",
    \u0437: "z",
    \u0438: "i",
    \u0439: "i",
    \u043A: "k",
    \u043B: "l",
    \u043C: "m",
    \u043D: "n",
    \u043E: "o",
    \u043F: "p",
    \u0440: "r",
    \u0441: "s",
    \u0442: "t",
    \u0443: "u",
    \u0444: "f",
    \u0445: "kh",
    \u0446: "ts",
    \u0447: "ch",
    \u0448: "sh",
    \u0449: "shch",
    \u044A: "u",
    \u044B: "y",
    \u044C: "",
    \u044D: "e",
    \u044E: "iu",
    \u044F: "ia"
  };
  slug = Array.from(slug).map((ch) => CYRILLIC_TO_LATIN_MAP[ch.toLowerCase()] || ch).join("");
  slug = slug.replace(/[^a-z0-9-]+/g, "-").replace(/[-]+/g, "-");
  return slug || "404";
}
var questions, newsbg, agregator, jokes$1, tweets, db2, __freeze2, __defProp3, __template2, _a2, _b2, $$Astro$42, $$RudSense, business, jokes, formattedjoke, $$Astro$32, remappedJokeFunction, $$FormatJoke, $$Astro$22, $$FormatJokeShort, $$Astro$13, $$JokeThumbnail, jokecats, $$Astro3, prerender4, $$2, $$file2, $$url2, ____jokecat_;
var init_CgdEe831 = __esm({
  "dist/$server_build/chunks/pages/__CgdEe831.mjs"() {
    "use strict";
    init_astro_CZ31vzIS();
    init_colors();
    init_pg_proxy();
    init_pg_core();
    init_RxTcdYg8();
    init_drizzle_orm();
    questions = pgTable("questions", {
      genid: text("genid").primaryKey(),
      text: text("text").notNull(),
      image: text("image"),
      type: text("type").notNull()
    });
    newsbg = pgTable("newsbg", {
      id: integer("id").primaryKey(),
      nid: text("nid").notNull(),
      title: text("title").notNull(),
      image: text("image").notNull(),
      date: text("date").notNull(),
      cat: text("cat").notNull(),
      html: json("html").notNull(),
      type: text("type").notNull()
    });
    agregator = pgTable("aggregator", {
      cat: text("cat_with_suffix").notNull().primaryKey(),
      count: integer("total_count").notNull()
    });
    jokes$1 = pgTable("jokes", {
      uid: text("uid").notNull().primaryKey(),
      id: text("id").notNull(),
      cat: text("cat").notNull(),
      joke: text("joke").notNull(),
      count: integer("total_count").notNull()
    });
    tweets = pgTable("tweets", {
      uid: text("uid").notNull().primaryKey(),
      cat: text("cat").notNull()
    });
    db2 = drizzle(
      async (sql2, params, method) => {
        try {
          const rows = await fetch("http://sql.kloun.lol", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              sql: sql2,
              params,
              method
            })
          });
          const json2 = await rows.json();
          return { rows: json2 };
        } catch (e) {
          console.error("Error from pg proxy server: ", e.response);
          return { rows: [] };
        }
      },
      { schema: { questions } }
    );
    __freeze2 = Object.freeze;
    __defProp3 = Object.defineProperty;
    __template2 = (cooked, raw) => __freeze2(__defProp3(cooked, "raw", { value: __freeze2(raw || cooked.slice()) }));
    $$Astro$42 = createAstro();
    $$RudSense = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro$42, $$props, $$slots);
      Astro2.self = $$RudSense;
      const { main, type } = Astro2.props;
      const types2 = { "inarticle": { html: `<ins class="adsbygoogle"
     style="display:block; text-align:center; min-width: 350px;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-5476404733919333"
     data-ad-slot="2065828237"></ins>` } };
      return renderTemplate`${maybeRenderHead()}<div class="flex justify-center items-center"> ${main && renderTemplate(_a2 || (_a2 = __template2(['<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-5476404733919333" crossorigin="anonymous"><\/script>'])))} ${!type && renderTemplate`<ins class="adsbygoogle w-full rounded-md" style="display:block; min-width: 350px;" data-ad-format="fluid" data-ad-layout-key="-gw-3+1f-3d+2z" data-ad-client="ca-pub-5476404733919333" data-ad-slot="2115206418"></ins>`} ${type && renderTemplate`<div>${unescapeHTML(types2[type].html)}</div>`} ${main && renderTemplate(_b2 || (_b2 = __template2(["<script>\n                (adsbygoogle = window.adsbygoogle || []).push({});\n            <\/script>"])))} </div>`;
    }, "/home/runner/work/monext/monext/apps/kloun/src/components/RudSense.astro", void 0);
    business = [
      {
        count: 252346,
        cat: "\u0421\u043E\u0444\u0438\u044F"
      },
      {
        count: 62692,
        cat: "\u0412\u0430\u0440\u043D\u0430"
      },
      {
        count: 56469,
        cat: "\u041F\u043B\u043E\u0432\u0434\u0438\u0432"
      },
      {
        count: 36904,
        cat: "\u0411\u0443\u0440\u0433\u0430\u0441"
      },
      {
        count: 22544,
        cat: "\u0420\u0443\u0441\u0435"
      },
      {
        count: 19454,
        cat: "\u0421\u0442\u0430\u0440\u0430 \u0417\u0430\u0433\u043E\u0440\u0430"
      },
      {
        count: 12950,
        cat: "\u0411\u043B\u0430\u0433\u043E\u0435\u0432\u0433\u0440\u0430\u0434"
      },
      {
        count: 12541,
        cat: "\u041F\u043B\u0435\u0432\u0435\u043D"
      },
      {
        count: 11950,
        cat: "\u0414\u043E\u0431\u0440\u0438\u0447"
      },
      {
        count: 10899,
        cat: "\u0425\u0430\u0441\u043A\u043E\u0432\u043E"
      },
      {
        count: 10632,
        cat: "\u0421\u043B\u0438\u0432\u0435\u043D"
      },
      {
        count: 10411,
        cat: "\u0412\u0435\u043B\u0438\u043A\u043E \u0422\u044A\u0440\u043D\u043E\u0432\u043E"
      },
      {
        count: 9531,
        cat: "\u0428\u0443\u043C\u0435\u043D"
      },
      {
        count: 9201,
        cat: "\u041F\u0435\u0442\u0440\u0438\u0447"
      },
      {
        count: 8934,
        cat: "\u041F\u0430\u0437\u0430\u0440\u0434\u0436\u0438\u043A"
      },
      {
        count: 8658,
        cat: "\u041F\u0435\u0440\u043D\u0438\u043A"
      },
      {
        count: 8237,
        cat: "\u042F\u043C\u0431\u043E\u043B"
      },
      {
        count: 8193,
        cat: "\u0413\u0430\u0431\u0440\u043E\u0432\u043E"
      },
      {
        count: 7295,
        cat: "\u0412\u0440\u0430\u0446\u0430"
      },
      {
        count: 6246,
        cat: "\u041A\u044E\u0441\u0442\u0435\u043D\u0434\u0438\u043B"
      },
      {
        count: 6194,
        cat: "\u0410\u0441\u0435\u043D\u043E\u0432\u0433\u0440\u0430\u0434"
      },
      {
        count: 5700,
        cat: "\u041A\u044A\u0440\u0434\u0436\u0430\u043B\u0438"
      },
      {
        count: 5599,
        cat: "\u041A\u0430\u0437\u0430\u043D\u043B\u044A\u043A"
      },
      {
        count: 5548,
        cat: "\u0421\u0430\u043D\u0434\u0430\u043D\u0441\u043A\u0438"
      },
      {
        count: 5525,
        cat: "\u041D\u0435\u0441\u0435\u0431\u044A\u0440"
      },
      {
        count: 4927,
        cat: "\u041C\u043E\u043D\u0442\u0430\u043D\u0430"
      },
      {
        count: 4911,
        cat: "\u0412\u0438\u0434\u0438\u043D"
      },
      {
        count: 4761,
        cat: "\u0414\u0438\u043C\u0438\u0442\u0440\u043E\u0432\u0433\u0440\u0430\u0434"
      },
      {
        count: 4625,
        cat: "\u0422\u044A\u0440\u0433\u043E\u0432\u0438\u0449\u0435"
      },
      {
        count: 4405,
        cat: "\u0421\u043C\u043E\u043B\u044F\u043D"
      },
      {
        count: 4319,
        cat: "\u0421\u0438\u043B\u0438\u0441\u0442\u0440\u0430"
      },
      {
        count: 4207,
        cat: "\u0420\u0430\u0437\u0433\u0440\u0430\u0434"
      },
      {
        count: 3961,
        cat: "\u041B\u043E\u0432\u0435\u0447"
      },
      {
        count: 3680,
        cat: "\u0421\u0430\u043C\u043E\u043A\u043E\u0432"
      },
      {
        count: 3635,
        cat: "\u0414\u0443\u043F\u043D\u0438\u0446\u0430"
      },
      {
        count: 3093,
        cat: "\u0413\u043E\u0446\u0435 \u0414\u0435\u043B\u0447\u0435\u0432"
      },
      {
        count: 3088,
        cat: "\u0413\u043E\u0440\u043D\u0430 \u041E\u0440\u044F\u0445\u043E\u0432\u0438\u0446\u0430"
      },
      {
        count: 3017,
        cat: "\u041F\u043E\u043C\u043E\u0440\u0438\u0435"
      },
      {
        count: 2609,
        cat: "\u0421\u0435\u0432\u043B\u0438\u0435\u0432\u043E"
      },
      {
        count: 2461,
        cat: "\u0422\u0440\u043E\u044F\u043D"
      },
      {
        count: 2426,
        cat: "\u041A\u0430\u0440\u043B\u043E\u0432\u043E"
      },
      {
        count: 2352,
        cat: "\u0412\u0435\u043B\u0438\u043D\u0433\u0440\u0430\u0434"
      },
      {
        count: 2324,
        cat: "\u0421\u0432\u0438\u043B\u0435\u043D\u0433\u0440\u0430\u0434"
      },
      {
        count: 2203,
        cat: "\u0411\u043E\u0442\u0435\u0432\u0433\u0440\u0430\u0434"
      },
      {
        count: 2071,
        cat: "\u0421\u0432\u0438\u0449\u043E\u0432"
      },
      {
        count: 2006,
        cat: "\u0410\u0439\u0442\u043E\u0441"
      },
      {
        count: 1892,
        cat: "\u0425\u0430\u0440\u043C\u0430\u043D\u043B\u0438"
      },
      {
        count: 1832,
        cat: "\u041D\u043E\u0432\u0430 \u0417\u0430\u0433\u043E\u0440\u0430"
      },
      {
        count: 1810,
        cat: "\u0411\u0430\u043D\u0441\u043A\u043E"
      },
      {
        count: 1659,
        cat: "\u041A\u0430\u0440\u043D\u043E\u0431\u0430\u0442"
      }
    ];
    jokes = [
      {
        cat: "\u0420\u0430\u0437\u043D\u0438",
        count: 51785
      },
      {
        cat: "\u0421\u0435\u043C\u0435\u0439\u043D\u0438",
        count: 8115
      },
      {
        cat: "\u0411\u0438\u0441\u0435\u0440\u0438",
        count: 7511
      },
      {
        cat: "\u0416\u0435\u043D\u0438",
        count: 7400
      },
      {
        cat: "\u041C\u0440\u044A\u0441\u043D\u0438",
        count: 3035
      },
      {
        cat: "\u041F\u0440\u043E\u0444\u0435\u0441\u0438\u043E\u043D\u0430\u043B\u043D\u0438",
        count: 2377
      },
      {
        cat: "\u0416\u0438\u0432\u043E\u0442\u043D\u0438",
        count: 2319
      },
      {
        cat: "\u0411\u043B\u043E\u043D\u0434\u0438\u043D\u043A\u0438",
        count: 2242
      },
      {
        cat: "\u041B\u044E\u0431\u0438\u043C\u0438 \u0413\u0435\u0440\u043E\u0438",
        count: 2084
      },
      {
        cat: "\u0427\u0435\u0440\u0435\u043D \u0445\u0443\u043C\u043E\u0440",
        count: 1892
      },
      {
        cat: "\u041F\u0440\u043E\u0433\u0440\u0430\u043C\u0438\u0441\u0442\u0438",
        count: 1861
      },
      {
        cat: "\u041F\u043E\u043B\u0438\u0442\u0438\u0447\u0435\u0441\u043A\u0438",
        count: 1750
      },
      {
        cat: "\u0418\u0432\u0430\u043D\u0447\u043E \u0438 \u041C\u0430\u0440\u0438\u0439\u043A\u0430",
        count: 1485
      },
      {
        cat: "\u041F\u0438\u044F\u043D\u0441\u043A\u0438",
        count: 1410
      },
      {
        cat: "\u041B\u0435\u043A\u0430\u0440\u0438",
        count: 1074
      },
      {
        cat: "\u041F\u043E\u043B\u0438\u0446\u0430\u0438",
        count: 934
      },
      {
        cat: "\u0414\u0440\u0443\u0433\u0438",
        count: 801
      },
      {
        cat: "\u0421\u043F\u043E\u0440\u0442\u043D\u0438",
        count: 768
      },
      {
        cat: "\u041F\u0440\u043E\u0441\u0442\u0438\u0442\u0443\u0442\u043A\u0438",
        count: 762
      },
      {
        cat: "\u0421\u0442\u0443\u0434\u0435\u043D\u0442\u0441\u043A\u0438",
        count: 762
      },
      {
        cat: "\u0411\u043E\u0440\u0446\u0438",
        count: 696
      },
      {
        cat: "\u0414\u0435\u0446\u0430",
        count: 694
      },
      {
        cat: "\u0418\u0432\u0430\u043D\u0447\u043E",
        count: 575
      },
      {
        cat: "\u0426\u0438\u0433\u0430\u043D\u0438",
        count: 529
      },
      {
        cat: "\u041C\u043B\u0430\u0434\u043E\u0436\u0435\u043D\u0446\u0438",
        count: 481
      },
      {
        cat: "\u0424\u0430\u0440\u043C\u0430\u0446\u0435\u0432\u0442\u0438",
        count: 471
      },
      {
        cat: "\u0423\u0447\u0435\u043D\u0438\u0447\u0435\u0441\u043A\u0438",
        count: 468
      },
      {
        cat: "\u041C\u043E\u043D\u0430\u0441\u0438",
        count: 465
      },
      {
        cat: "\u0428\u043E\u0444\u044C\u043E\u0440\u0438",
        count: 439
      },
      {
        cat: "\u0421\u0432\u0430\u043B\u043A\u0438",
        count: 434
      },
      {
        cat: "\u0422\u044A\u0449\u0438",
        count: 431
      },
      {
        cat: "\u0413\u043B\u0443\u043F\u0430\u0432\u0438",
        count: 430
      },
      {
        cat: "\u041D\u0430\u0434\u043F\u0438\u0441\u0438",
        count: 421
      },
      {
        cat: "\u0420\u0430\u0434\u0438\u043E \u0415\u0440\u0435\u0432\u0430\u043D",
        count: 401
      },
      {
        cat: "\u0414\u043E\u043A\u0442\u043E\u0440\u0438",
        count: 400
      },
      {
        cat: "\u0410\u0434\u0432\u043E\u043A\u0430\u0442\u0438",
        count: 399
      },
      {
        cat: "\u0424\u0435\u0439\u0441\u0431\u0443\u043A",
        count: 397
      },
      {
        cat: "\u0415\u0432\u0440\u0435\u0438",
        count: 396
      },
      {
        cat: "\u0413\u0438\u043D\u0435\u043A\u043E\u043B\u043E\u0437\u0438",
        count: 387
      },
      {
        cat: "\u0421\u044A\u0441\u0435\u0434\u0438",
        count: 380
      },
      {
        cat: "\u0426\u0438\u0433\u0430\u0440\u0438",
        count: 378
      },
      {
        cat: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430",
        count: 364
      },
      {
        cat: "\u041C\u044A\u0436\u0435",
        count: 362
      },
      {
        cat: "\u041E\u0433\u043B\u0435\u0434\u0430\u043B\u043E",
        count: 361
      },
      {
        cat: "\u0429\u0435\u0440\u043A\u0438",
        count: 359
      },
      {
        cat: "\u0422\u043E\u0430\u043B\u0435\u0442\u043D\u0430",
        count: 355
      },
      {
        cat: "\u0423\u043C\u0440\u0435\u043B\u0438",
        count: 349
      },
      {
        cat: "\u041F\u043B\u0430\u0436\u043E\u0432\u0435",
        count: 342
      },
      {
        cat: "\u0420\u043E\u0434\u0438\u0442\u0435\u043B\u0438",
        count: 341
      },
      {
        cat: "\u041F\u0440\u043E\u0444\u0435\u0441\u0438\u0438",
        count: 341
      },
      {
        cat: "\u041C\u043B\u0430\u0434\u0435\u0436\u0438",
        count: 340
      },
      {
        cat: "\u041F\u0440\u0430\u0441\u0435\u0442\u0430",
        count: 340
      },
      {
        cat: "\u041F\u0440\u0438\u043D\u0446\u043E\u0432\u0435 \u0438 \u043F\u0440\u0438\u043D\u0446\u0435\u0441\u0438",
        count: 335
      },
      {
        cat: "\u0412\u0438\u043D\u043E",
        count: 331
      },
      {
        cat: "\u041F\u043E\u0434\u0430\u0440\u044A\u0446\u0438",
        count: 329
      },
      {
        cat: "\u0421*\u043A\u0441",
        count: 329
      },
      {
        cat: "\u0414\u044F\u0434\u043E\u0432\u0446\u0438",
        count: 326
      },
      {
        cat: "\u0420\u0430\u043A\u0438\u044F",
        count: 322
      },
      {
        cat: "\u0420\u043E\u0436\u0434\u0435\u043D\u0438\u0446\u0438",
        count: 319
      },
      {
        cat: "\u0422\u044A\u043F\u0438\u0437\u043C\u0438",
        count: 316
      },
      {
        cat: "\u0420\u0430\u0434\u0438\u043E \u0435\u0440\u0435\u0432\u0430\u043D",
        count: 316
      },
      {
        cat: "\u041A\u0430\u0442\u0430\u0434\u0436\u0438\u0438",
        count: 314
      },
      {
        cat: "SMS",
        count: 314
      },
      {
        cat: "\u0412\u043E\u0435\u043D\u043D\u0438",
        count: 313
      },
      {
        cat: "\u041A\u0440\u044A\u0447\u043C\u0438",
        count: 311
      },
      {
        cat: "\u0414\u0435\u0431\u0435\u043B\u0438",
        count: 310
      },
      {
        cat: "\u041F\u0441\u0438\u0445\u0438\u0430\u0442\u0440\u0438\u044F",
        count: 306
      },
      {
        cat: "\u041F\u0440\u0430\u0437\u043D\u0438\u0447\u043D\u0438",
        count: 293
      },
      {
        cat: "\u0413\u0440\u0430\u0434\u043E\u0432\u0435",
        count: 277
      },
      {
        cat: "\u0417\u0430\u0442\u0432\u043E\u0440\u043D\u0438\u0446\u0438",
        count: 276
      },
      {
        cat: "\u0412\u043B\u0430\u043A\u043E\u0432\u0435",
        count: 275
      },
      {
        cat: "\u041A\u0430\u043A\u0432\u0430 \u0435 \u0440\u0430\u0437\u043B\u0438\u043A\u0430\u0442\u0430",
        count: 270
      },
      {
        cat: "\u0411\u0435\u0431\u0435\u0442\u0430",
        count: 268
      },
      {
        cat: "\u0424\u0438\u043B\u043C\u0438",
        count: 267
      },
      {
        cat: "\u041B\u044F\u0442\u043E",
        count: 266
      },
      {
        cat: "\u0421\u0443\u0442\u0438\u0435\u043D\u0438",
        count: 265
      },
      {
        cat: "\u0413\u0430\u0434\u043E\u0440\u0438\u0438",
        count: 265
      },
      {
        cat: "\u041F\u0435\u0442\u044A\u043A",
        count: 261
      },
      {
        cat: "\u0423\u0438\u0441\u043A\u0438",
        count: 261
      },
      {
        cat: "\u0421\u0435\u043A\u0440\u0435\u0442\u0430\u0440\u043A\u0438",
        count: 257
      },
      {
        cat: "\u041C\u0430\u0442\u0435\u043C\u0430\u0442\u0438\u043A\u0430",
        count: 255
      },
      {
        cat: "\u041B\u044E\u0431\u043E\u0432\u043D\u0438\u043A",
        count: 255
      },
      {
        cat: "\u041C\u0430\u0440\u0438\u0439\u043A\u0430",
        count: 254
      },
      {
        cat: "\u041A\u0443\u043F\u043E\u043D\u0438",
        count: 250
      },
      {
        cat: "\u041F\u043B\u0443\u0432\u0430\u043D\u0435",
        count: 250
      },
      {
        cat: "\u041E\u0442\u0441\u043B\u0430\u0431\u0432\u0430\u043D\u0435",
        count: 248
      },
      {
        cat: "\u041E\u0431\u0443\u0432\u043A\u0438",
        count: 244
      },
      {
        cat: "\u041A\u043E\u043C\u0430\u043D\u0434\u0438\u0440\u043E\u0432\u043A\u0438",
        count: 244
      },
      {
        cat: "\u041A\u0440\u0430\u0432\u0438",
        count: 244
      },
      {
        cat: "\u041E\u0432\u0447\u0430\u0440\u0438",
        count: 243
      },
      {
        cat: "\u041D\u0430\u0440\u043A\u043E\u043C\u0430\u043D\u0441\u043A\u0438",
        count: 240
      },
      {
        cat: "\u0414\u0438\u0440\u0435\u043A\u0442\u043E\u0440\u0438",
        count: 240
      },
      {
        cat: "\u041F\u0440\u043E\u0444\u0435\u0441\u043E\u0440\u0438",
        count: 239
      },
      {
        cat: "\u041A\u043E\u043A\u043E\u0448\u043A\u0438",
        count: 234
      },
      {
        cat: "\u0421\u043B\u043E\u043D\u043E\u0432\u0435",
        count: 234
      },
      {
        cat: "\u0425\u043B\u044F\u0431",
        count: 233
      },
      {
        cat: "\u0427\u044A\u043A \u041D\u043E\u0440\u0438\u0441",
        count: 229
      },
      {
        cat: "\u0428\u043E\u043A\u043E\u043B\u0430\u0434",
        count: 228
      },
      {
        cat: "\u0417\u0438\u043C\u0430",
        count: 226
      },
      {
        cat: "\u041C\u0430\u0439\u043C\u0443\u043D\u0438",
        count: 226
      },
      {
        cat: "\u041A\u0438\u0442\u0430\u0439",
        count: 223
      },
      {
        cat: "\u0413\u0440\u043E\u0437\u043D\u0438",
        count: 219
      },
      {
        cat: "\u041B\u044E\u0431\u043E\u0432\u043D\u0438\u0446\u0430",
        count: 218
      },
      {
        cat: "\u0425\u0440\u0430\u043D\u0430",
        count: 215
      },
      {
        cat: "\u0423\u0441\u043C\u0438\u0432\u043A\u0438",
        count: 211
      },
      {
        cat: "\u0422\u0430\u043A\u0441\u0438",
        count: 210
      },
      {
        cat: "\u041F\u0435\u0440\u043D\u0438\u0447\u0430\u043D\u0438",
        count: 209
      },
      {
        cat: "\u0420\u0443\u0441\u0438\u044F",
        count: 205
      },
      {
        cat: "\u0422\u0430\u0442\u043A\u043E\u0432\u0446\u0438",
        count: 202
      },
      {
        cat: "\u0412\u043E\u0434\u043A\u0430",
        count: 201
      },
      {
        cat: "\u041D\u043E\u0432\u0430 \u0433\u043E\u0434\u0438\u043D\u0430",
        count: 200
      },
      {
        cat: "\u041A\u0430\u043F\u0438\u0442\u0430\u043D\u0438",
        count: 199
      },
      {
        cat: "\u041A\u043E\u0442\u043A\u0438",
        count: 197
      },
      {
        cat: "\u0421\u044A\u0434\u0438\u0438",
        count: 197
      },
      {
        cat: "\u041C\u0430\u0441\u0430",
        count: 197
      },
      {
        cat: "\u0413\u043E\u0442\u0432\u0430\u0447\u0438",
        count: 195
      },
      {
        cat: "\u041F\u043B\u0430\u043D\u0438\u043D\u0430",
        count: 195
      },
      {
        cat: "\u0421\u043E\u0444\u0438\u044F",
        count: 194
      },
      {
        cat: "\u0421\u0443\u043F\u0438",
        count: 188
      },
      {
        cat: "\u0427\u0443\u043A\u0447\u0438",
        count: 184
      },
      {
        cat: "\u0424\u0440\u0430\u043D\u0446\u0438\u044F",
        count: 181
      },
      {
        cat: "\u041B\u0443\u0434\u0438",
        count: 181
      },
      {
        cat: "\u0425\u043E\u0442\u0435\u043B\u0438",
        count: 179
      },
      {
        cat: "\u0411\u044A\u043B\u0433\u0430\u0440\u0438\u044F",
        count: 177
      },
      {
        cat: "\u041C\u0443\u0442\u0440\u0438",
        count: 177
      }
    ];
    jokes.map((item) => {
      return {
        ...item,
        slug: slugify(item.cat)
      };
    });
    business.map((item) => {
      return {
        ...item,
        slug: slugify(item.cat)
      };
    });
    formattedjoke = (joke) => {
      const formatted = joke.replace(/([.!?])[:]/g, "$1\n\n").replace(/—/g, "\n-").replace(/— ([А-Я])/g, "\n- $1").replace(/-([А-Я])/g, "\n- $1").replace(/[ ]+- ([А-Я])/g, "\n- $1").replace(/\?/g, "?\n").replace(/\n+/g, "\n").split("\n").filter((x) => x.length > 2).map((x) => x.trim()).join("\n");
      return formatted;
    };
    $$Astro$32 = createAstro();
    remappedJokeFunction = (joke) => {
      let i1 = 0;
      return formattedjoke(joke).split("\n").map((line, i) => {
        const num = line.startsWith("-") || line.startsWith(" -") || line.startsWith("\u2013") || line.startsWith("  -") ? (i1 += 1) % 2 === 0 ? "even" : "odd" : false;
        return {
          key: i,
          line: num === "odd" || num === "even" ? line.replace("-", "").replace("\u2013", "") : line,
          ...num && { oddness: num }
        };
      });
    };
    $$FormatJoke = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro$32, $$props, $$slots);
      Astro2.self = $$FormatJoke;
      const { joke } = Astro2.props;
      const remapped = remappedJokeFunction(joke);
      return renderTemplate`${renderComponent($$result, "Fragment", Fragment, {}, { "default": ($$result2) => renderTemplate`${remapped.map(
        ({
          oddness,
          line,
          key
        }) => oddness ? renderTemplate`${maybeRenderHead()}<div${addAttribute(`flex flex-wrap pb-4 ${oddness === "even" ? "flex-row-reverse" : ""}`, "class")}><div${addAttribute(`relative whitespace-pre-wrap rounded-lg p-2 font-sans font-medium shadow-2xl ${oddness === "even" ? "bg-violet-900 text-right dark:bg-slate-200" : "bg-indigo-700 text-left dark:bg-slate-400"}`, "class")}>${oddness === "odd" ? renderTemplate`<div class="absolute -left-4 top-3 inline-block w-4 overflow-hidden"><div class="h-16  origin-top-right -rotate-45 bg-indigo-700 dark:bg-slate-400"></div></div>` : renderTemplate`<div class="absolute -right-4 top-3 inline-block w-4 overflow-hidden"><div class=" h-16  origin-top-left rotate-45 bg-violet-900 dark:bg-slate-200"></div></div>`}${line}${key === 3 && renderTemplate`${renderComponent($$result2, "RudSense", $$RudSense, { "main": true })}`}</div></div>` : renderTemplate`<div class="block pb-4 text-lg">${line}</div>`
      )}` })}`;
    }, "/home/runner/work/monext/monext/apps/kloun/src/components/FormatJoke.astro", void 0);
    $$Astro$22 = createAstro();
    $$FormatJokeShort = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro$22, $$props, $$slots);
      Astro2.self = $$FormatJokeShort;
      const { joke } = Astro2.props;
      const substr = joke.slice(0, 150);
      const jlen = joke.length <= 150;
      const lines = formattedjoke(jlen ? joke.replace(/\.../g, "") : `${substr} ...`).split("\n").slice(0, 3);
      return renderTemplate`${renderComponent($$result, "Fragment", Fragment, {}, { "default": ($$result2) => renderTemplate`${lines.map((line) => renderTemplate`${maybeRenderHead()}<p>${line.endsWith("...") ? renderTemplate`${renderComponent($$result2, "Fragment", Fragment, {}, { "default": ($$result3) => renderTemplate`${line.replace(/\.../g, "")}${" "}<span class="absolute h-6   w-8 text-4xl"><span class="absolute ml-1 leading-4 text-purple-600">
...
</span></span>` })}` : renderTemplate`${renderComponent($$result2, "Fragment", Fragment, {}, { "default": ($$result3) => renderTemplate`${line}` })}`}</p>`)}` })}`;
    }, "/home/runner/work/monext/monext/apps/kloun/src/components/FormatJokeShort.astro", void 0);
    $$Astro$13 = createAstro();
    $$JokeThumbnail = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro$13, $$props, $$slots);
      Astro2.self = $$JokeThumbnail;
      const { item, showcats, short, hideReadMore } = Astro2.props;
      const { joke, cat, id, uid } = item;
      const jlen = joke.length <= 150;
      return renderTemplate`${maybeRenderHead()}<article class="joke relative"> ${showcats && item.cat !== "\u0420\u0430\u0437\u043D\u0438" && renderTemplate`<a class="joketop text-shadow"${addAttribute(`/cat/${cat.replace(/ /g, "%20")}`, "href")}> <h2>${cat.replace("JOK", "")}</h2> </a>`} <div class="jokewrap"> <div class="py-5 font-black text-md"> ${short ? renderTemplate`${renderComponent($$result, "FormatJokeShort", $$FormatJokeShort, { "joke": joke })}` : renderTemplate`${renderComponent($$result, "FormatJoke", $$FormatJoke, { "joke": joke })}`} </div> </div> ${!hideReadMore && (!jlen ? renderTemplate`<a${addAttribute("/joke/" + uid, "href")} class="btn absolute right-2 -mt-12 flex cursor-pointer border-gray-800 bg-black shadow-lg dark:border-gray-500 dark:bg-white rounded-l-none rounded-t-none"> <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"${addAttribute(1.5, "stroke-width")} stroke="currentColor" class="w-6 h-6"> <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607zM10.5 7.5v6m3-3h-6"></path> </svg> </a>` : renderTemplate`<div class="absolute right-2 -mt-12"> <button${addAttribute(`fbshare('https://kloun.lol/joke/${id}')`, "onclick")} class="text-white  transition duration-300 max-w-xs w-full rounded-3xl uppercase flex text-sm font-bold p-3  relative   rounded-l-none rounded-t-none bg-transparent false undefined" style="background-color: transparent;"> <svg class="h-6 w-6 fill-white dark:fill-blue-600 " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"> <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"></path> </svg> </button> </div>`)} </article>`;
    }, "/home/runner/work/monext/monext/apps/kloun/src/components/JokeThumbnail.astro", void 0);
    jokecats = [{ "cat": "\u0420\u0430\u0437\u043D\u0438", "slug": "razni", "count": 25073 }, { "cat": "\u0421\u0435\u043C\u0435\u0439\u043D\u0438", "slug": "semeini", "count": 3870 }, { "cat": "\u0416\u0435\u043D\u0438", "slug": "zheni", "count": 3713 }, { "cat": "\u0411\u0438\u0441\u0435\u0440\u0438", "slug": "biseri", "count": 3571 }, { "cat": "\u041C\u0440\u044A\u0441\u043D\u0438", "slug": "mr-sni", "count": 1474 }, { "cat": "\u0416\u0438\u0432\u043E\u0442\u043D\u0438", "slug": "zhivotni", "count": 1135 }, { "cat": "\u041F\u0440\u043E\u0444\u0435\u0441\u0438\u043E\u043D\u0430\u043B\u043D\u0438", "slug": "profesionalni", "count": 1134 }, { "cat": "\u0411\u043B\u043E\u043D\u0434\u0438\u043D\u043A\u0438", "slug": "blondinki", "count": 1099 }, { "cat": "\u041B\u044E\u0431\u0438\u043C\u0438 \u0413\u0435\u0440\u043E\u0438", "slug": "liubimi-geroi", "count": 1011 }, { "cat": "\u041F\u0440\u043E\u0433\u0440\u0430\u043C\u0438\u0441\u0442\u0438", "slug": "programisti", "count": 934 }, { "cat": "\u0427\u0435\u0440\u0435\u043D \u0445\u0443\u043C\u043E\u0440", "slug": "cheren-khumor", "count": 913 }, { "cat": "\u041F\u043E\u043B\u0438\u0442\u0438\u0447\u0435\u0441\u043A\u0438", "slug": "politicheski", "count": 864 }, { "cat": "\u0418\u0432\u0430\u043D\u0447\u043E \u0438 \u041C\u0430\u0440\u0438\u0439\u043A\u0430", "slug": "ivancho-i-mariika", "count": 686 }, { "cat": "\u041F\u0438\u044F\u043D\u0441\u043A\u0438", "slug": "piianski", "count": 666 }, { "cat": "\u041F\u043E\u043B\u0438\u0446\u0430\u0438", "slug": "politsai", "count": 513 }, { "cat": "\u041B\u0435\u043A\u0430\u0440\u0438", "slug": "lekari", "count": 512 }, { "cat": "\u041F\u0440\u043E\u0441\u0442\u0438\u0442\u0443\u0442\u043A\u0438", "slug": "prostitutki", "count": 446 }, { "cat": "\u0421\u043F\u043E\u0440\u0442\u043D\u0438", "slug": "sportni", "count": 389 }, { "cat": "\u0414\u0440\u0443\u0433\u0438", "slug": "drugi", "count": 385 }, { "cat": "\u0421\u0442\u0443\u0434\u0435\u043D\u0442\u0441\u043A\u0438", "slug": "studentski", "count": 368 }, { "cat": "\u0411\u043E\u0440\u0446\u0438", "slug": "bortsi", "count": 343 }, { "cat": "\u0414\u0435\u0446\u0430", "slug": "detsa", "count": 323 }, { "cat": "\u0426\u0438\u0433\u0430\u043D\u0438", "slug": "tsigani", "count": 276 }, { "cat": "\u041C\u043B\u0430\u0434\u043E\u0436\u0435\u043D\u0446\u0438", "slug": "mladozhentsi", "count": 245 }, { "cat": "\u0424\u0430\u0440\u043C\u0430\u0446\u0435\u0432\u0442\u0438", "slug": "farmatsevti", "count": 241 }, { "cat": "\u041D\u0430\u0434\u043F\u0438\u0441\u0438", "slug": "nadpisi", "count": 238 }, { "cat": "\u0418\u0432\u0430\u043D\u0447\u043E", "slug": "ivancho", "count": 237 }, { "cat": "\u0423\u0447\u0435\u043D\u0438\u0447\u0435\u0441\u043A\u0438", "slug": "uchenicheski", "count": 230 }, { "cat": "\u041C\u043E\u043D\u0430\u0441\u0438", "slug": "monasi", "count": 225 }, { "cat": "\u0413\u043B\u0443\u043F\u0430\u0432\u0438", "slug": "glupavi", "count": 224 }, { "cat": "\u0428\u043E\u0444\u044C\u043E\u0440\u0438", "slug": "shof-ori", "count": 218 }, { "cat": "\u0415\u0432\u0440\u0435\u0438", "slug": "evrei", "count": 211 }, { "cat": "\u0426\u0438\u0433\u0430\u0440\u0438", "slug": "tsigari", "count": 210 }, { "cat": "\u0420\u0430\u0434\u0438\u043E \u0415\u0440\u0435\u0432\u0430\u043D", "slug": "radio-erevan", "count": 200 }, { "cat": "\u0422\u044A\u0449\u0438", "slug": "t-shti", "count": 200 }, { "cat": "\u041C\u043B\u0430\u0434\u0435\u0436\u0438", "slug": "mladezhi", "count": 190 }, { "cat": "\u0421\u0432\u0430\u043B\u043A\u0438", "slug": "svalki", "count": 188 }, { "cat": "\u0423\u043C\u0440\u0435\u043B\u0438", "slug": "umreli", "count": 188 }, { "cat": "\u041A\u0440\u044A\u0447\u043C\u0438", "slug": "kr-chmi", "count": 185 }, { "cat": "\u0421\u044A\u0441\u0435\u0434\u0438", "slug": "s-sedi", "count": 184 }, { "cat": "\u041F\u0440\u043E\u0444\u0435\u0441\u0438\u0438", "slug": "profesii", "count": 183 }, { "cat": "\u041C\u044A\u0436\u0435", "slug": "m-zhe", "count": 182 }, { "cat": "\u0424\u0435\u0439\u0441\u0431\u0443\u043A", "slug": "feisbuk", "count": 182 }, { "cat": "\u0412\u0438\u043D\u043E", "slug": "vino", "count": 180 }, { "cat": "\u0414\u043E\u043A\u0442\u043E\u0440\u0438", "slug": "doktori", "count": 179 }, { "cat": "\u0421\u0443\u0442\u0438\u0435\u043D\u0438", "slug": "sutieni", "count": 178 }, { "cat": "\u0414\u044F\u0434\u043E\u0432\u0446\u0438", "slug": "diadovtsi", "count": 174 }, { "cat": "\u0420\u0430\u043A\u0438\u044F", "slug": "rakiia", "count": 170 }, { "cat": "\u0414\u0435\u0431\u0435\u043B\u0438", "slug": "debeli", "count": 167 }, { "cat": "\u0410\u043C\u0435\u0440\u0438\u043A\u0430", "slug": "amerika", "count": 164 }, { "cat": "\u041A\u0440\u0430\u0432\u0438", "slug": "kravi", "count": 164 }, { "cat": "\u041F\u043E\u0434\u0430\u0440\u044A\u0446\u0438", "slug": "podar-tsi", "count": 164 }, { "cat": "\u0420\u043E\u0434\u0438\u0442\u0435\u043B\u0438", "slug": "roditeli", "count": 163 }, { "cat": "\u0429\u0435\u0440\u043A\u0438", "slug": "shterki", "count": 162 }, { "cat": "\u041F\u0440\u0430\u0437\u043D\u0438\u0447\u043D\u0438", "slug": "praznichni", "count": 160 }, { "cat": "\u0422\u044A\u043F\u0438\u0437\u043C\u0438", "slug": "t-pizmi", "count": 156 }, { "cat": "\u041F\u0440\u0430\u0441\u0435\u0442\u0430", "slug": "praseta", "count": 154 }, { "cat": "SMS", "slug": "sms", "count": 153 }, { "cat": "\u0410\u0434\u0432\u043E\u043A\u0430\u0442\u0438", "slug": "advokati", "count": 153 }, { "cat": "\u0420\u0430\u0434\u0438\u043E \u0435\u0440\u0435\u0432\u0430\u043D", "slug": "radio-erevan", "count": 153 }, { "cat": "\u041E\u0433\u043B\u0435\u0434\u0430\u043B\u043E", "slug": "ogledalo", "count": 152 }, { "cat": "\u0420\u043E\u0436\u0434\u0435\u043D\u0438\u0446\u0438", "slug": "rozhdenitsi", "count": 152 }, { "cat": "\u0413\u0438\u043D\u0435\u043A\u043E\u043B\u043E\u0437\u0438", "slug": "ginekolozi", "count": 148 }, { "cat": "\u0414\u0438\u0440\u0435\u043A\u0442\u043E\u0440\u0438", "slug": "direktori", "count": 148 }, { "cat": "\u0425\u043B\u044F\u0431", "slug": "khliab", "count": 148 }, { "cat": "\u0412\u043E\u0435\u043D\u043D\u0438", "slug": "voenni", "count": 147 }, { "cat": "\u0412\u043B\u0430\u043A\u043E\u0432\u0435", "slug": "vlakove", "count": 146 }, { "cat": "\u041D\u0430\u0440\u043A\u043E\u043C\u0430\u043D\u0441\u043A\u0438", "slug": "narkomanski", "count": 138 }, { "cat": "\u041A\u043E\u043A\u043E\u0448\u043A\u0438", "slug": "kokoshki", "count": 135 }, { "cat": "\u041F\u0441\u0438\u0445\u0438\u0430\u0442\u0440\u0438\u044F", "slug": "psikhiatriia", "count": 135 }, { "cat": "\u041A\u0430\u0442\u0430\u0434\u0436\u0438\u0438", "slug": "katadzhii", "count": 133 }, { "cat": "\u041C\u0430\u0442\u0435\u043C\u0430\u0442\u0438\u043A\u0430", "slug": "matematika", "count": 133 }, { "cat": "\u041E\u0432\u0447\u0430\u0440\u0438", "slug": "ovchari", "count": 133 }, { "cat": "\u0411\u0435\u0431\u0435\u0442\u0430", "slug": "bebeta", "count": 132 }, { "cat": "\u041B\u044E\u0431\u043E\u0432\u043D\u0438\u043A", "slug": "liubovnik", "count": 132 }, { "cat": "\u0413\u0430\u0434\u043E\u0440\u0438\u0438", "slug": "gadorii", "count": 130 }, { "cat": "\u0413\u0440\u0430\u0434\u043E\u0432\u0435", "slug": "gradove", "count": 130 }, { "cat": "\u0422\u043E\u0430\u043B\u0435\u0442\u043D\u0430", "slug": "toaletna", "count": 130 }, { "cat": "\u041F\u0440\u0438\u043D\u0446\u043E\u0432\u0435 \u0438 \u043F\u0440\u0438\u043D\u0446\u0435\u0441\u0438", "slug": "printsove-i-printsesi", "count": 128 }, { "cat": "\u0413\u0440\u043E\u0437\u043D\u0438", "slug": "grozni", "count": 126 }, { "cat": "\u0417\u0430\u0442\u0432\u043E\u0440\u043D\u0438\u0446\u0438", "slug": "zatvornitsi", "count": 126 }, { "cat": "\u041C\u0430\u0440\u0438\u0439\u043A\u0430", "slug": "mariika", "count": 126 }, { "cat": "\u041E\u0442\u0441\u043B\u0430\u0431\u0432\u0430\u043D\u0435", "slug": "otslabvane", "count": 126 }, { "cat": "\u0421\u043B\u043E\u043D\u043E\u0432\u0435", "slug": "slonove", "count": 126 }, { "cat": "\u0421*\u043A\u0441", "slug": "s-ks", "count": 125 }, { "cat": "\u041E\u0431\u0443\u0432\u043A\u0438", "slug": "obuvki", "count": 121 }, { "cat": "\u0428\u043E\u043A\u043E\u043B\u0430\u0434", "slug": "shokolad", "count": 121 }, { "cat": "\u041E\u0431\u044F\u0434", "slug": "obiad", "count": 120 }, { "cat": "\u041B\u044E\u0431\u043E\u0432\u043D\u0438\u0446\u0430", "slug": "liubovnitsa", "count": 117 }, { "cat": "\u0421\u0435\u043A\u0440\u0435\u0442\u0430\u0440\u043A\u0438", "slug": "sekretarki", "count": 117 }, { "cat": "\u041A\u0430\u043A\u0432\u0430 \u0435 \u0440\u0430\u0437\u043B\u0438\u043A\u0430\u0442\u0430", "slug": "kakva-e-razlikata", "count": 116 }, { "cat": "\u041F\u0435\u0442\u044A\u043A", "slug": "pet-k", "count": 114 }, { "cat": "\u0417\u0438\u043C\u0430", "slug": "zima", "count": 113 }, { "cat": "\u041F\u0440\u043E\u0444\u0435\u0441\u043E\u0440\u0438", "slug": "profesori", "count": 112 }, { "cat": "\u0424\u0438\u043B\u043C\u0438", "slug": "filmi", "count": 112 }, { "cat": "\u041C\u0430\u0439\u043C\u0443\u043D\u0438", "slug": "maimuni", "count": 110 }, { "cat": "\u041F\u043B\u0430\u0436\u043E\u0432\u0435", "slug": "plazhove", "count": 109 }, { "cat": "\u041F\u043B\u0443\u0432\u0430\u043D\u0435", "slug": "pluvane", "count": 109 }, { "cat": "\u0423\u0438\u0441\u043A\u0438", "slug": "uiski", "count": 104 }, { "cat": "\u0420\u0443\u0441\u0438\u044F", "slug": "rusiia", "count": 103 }, { "cat": "\u0421\u0443\u043F\u0438", "slug": "supi", "count": 103 }, { "cat": "\u0427\u044A\u043A \u041D\u043E\u0440\u0438\u0441", "slug": "ch-k-noris", "count": 103 }, { "cat": "\u0413\u043E\u0442\u0432\u0430\u0447\u0438", "slug": "gotvachi", "count": 102 }, { "cat": "\u0424\u0440\u0430\u043D\u0446\u0438\u044F", "slug": "frantsiia", "count": 100 }, { "cat": "\u0413\u0430\u0440\u0434\u0435\u0440\u043E\u0431\u0438", "slug": "garderobi", "count": 99 }, { "cat": "\u041E\u0431\u0440\u0430\u0442\u043D\u0438", "slug": "obratni", "count": 98 }, { "cat": "\u041A\u0430\u043F\u0438\u0442\u0430\u043D\u0438", "slug": "kapitani", "count": 97 }, { "cat": "\u041B\u0443\u0434\u0438", "slug": "ludi", "count": 97 }, { "cat": "\u0422\u0430\u043A\u0441\u0438", "slug": "taksi", "count": 97 }, { "cat": "\u0425\u043E\u0442\u0435\u043B\u0438", "slug": "khoteli", "count": 97 }, { "cat": "\u042F\u0434\u0435\u043D\u0435", "slug": "iadene", "count": 95 }, { "cat": "\u042F\u043F\u043E\u043D\u0446\u0438", "slug": "iapontsi", "count": 95 }, { "cat": "\u0417\u0430\u043F\u043B\u0430\u0442\u0438", "slug": "zaplati", "count": 93 }, { "cat": "\u0423\u0441\u043C\u0438\u0432\u043A\u0438", "slug": "usmivki", "count": 93 }, { "cat": "\u041A\u043E\u043C\u0430\u043D\u0434\u0438\u0440\u043E\u0432\u043A\u0438", "slug": "komandirovki", "count": 91 }, { "cat": "\u041A\u0443\u043F\u043E\u043D\u0438", "slug": "kuponi", "count": 90 }, { "cat": "\u0427\u0443\u043A\u0447\u0438", "slug": "chukchi", "count": 90 }, { "cat": "\u041B\u044F\u0442\u043E", "slug": "liato", "count": 89 }, { "cat": "\u041C\u0443\u0442\u0440\u0438", "slug": "mutri", "count": 89 }, { "cat": "\u0421\u0443\u0442\u0440\u0438\u043D", "slug": "sutrin", "count": 89 }, { "cat": "\u0418\u0437\u043F\u0438\u0442\u0438", "slug": "izpiti", "count": 88 }, { "cat": "\u0423\u043C\u043D\u0438", "slug": "umni", "count": 88 }, { "cat": "Mercedes", "slug": "mercedes", "count": 87 }, { "cat": "\u041D\u043E\u0432\u0430 \u0433\u043E\u0434\u0438\u043D\u0430", "slug": "nova-godina", "count": 87 }, { "cat": "\u041C\u0430\u0441\u0430", "slug": "masa", "count": 85 }, { "cat": "\u0421\u044A\u0434\u0438\u0438", "slug": "s-dii", "count": 85 }, { "cat": "\u0411\u0430\u0439 \u0413\u0430\u043D\u044C\u043E", "slug": "bai-gan-o", "count": 83 }, { "cat": "\u041A\u0438\u0442\u0430\u0439", "slug": "kitai", "count": 83 }, { "cat": "\u041F\u0435\u0440\u043D\u0438\u0447\u0430\u043D\u0438", "slug": "pernichani", "count": 83 }, { "cat": "\u0422\u0430\u0442\u043A\u043E\u0432\u0446\u0438", "slug": "tatkovtsi", "count": 82 }, { "cat": "\u0411\u0430\u043D\u043A\u0438", "slug": "banki", "count": 80 }, { "cat": "\u041F\u043B\u0430\u043D\u0438\u043D\u0430", "slug": "planina", "count": 80 }, { "cat": "\u0411\u044A\u043B\u0433\u0430\u0440\u0438\u044F", "slug": "b-lgariia", "count": 79 }, { "cat": "\u0412\u043E\u0434\u043A\u0430", "slug": "vodka", "count": 79 }, { "cat": "\u0414\u0438\u0441\u043A\u043E\u0442\u0435\u043A\u0438", "slug": "diskoteki", "count": 79 }, { "cat": "\u0421\u043E\u0444\u0438\u044F", "slug": "sofiia", "count": 79 }, { "cat": "\u0422\u0435\u043B\u0435\u0444\u043E\u043D\u0438", "slug": "telefoni", "count": 78 }, { "cat": "\u041C\u043E\u0440\u0435\u0442\u043E", "slug": "moreto", "count": 77 }, { "cat": "\u041F\u043E\u0434\u0441\u044A\u0434\u0438\u043C\u0438", "slug": "pods-dimi", "count": 77 }, { "cat": "\u0424\u0443\u0442\u0431\u043E\u043B", "slug": "futbol", "count": 74 }, { "cat": "\u0420\u0435\u0441\u0442\u043E\u0440\u0430\u043D\u0442\u0438", "slug": "restoranti", "count": 72 }, { "cat": "\u0414\u044F\u0434\u043E \u041C\u0440\u0430\u0437", "slug": "diado-mraz", "count": 71 }, { "cat": "\u041D\u0430\u0447\u0430\u043B\u043D\u0438\u0446\u0438", "slug": "nachalnitsi", "count": 70 }, { "cat": "\u0410\u0432\u0442\u043E", "slug": "avto", "count": 68 }, { "cat": "\u041A\u043E\u0442\u043A\u0438", "slug": "kotki", "count": 68 }, { "cat": "\u0412 \u0440\u0435\u0441\u0442\u043E\u0440\u0430\u043D\u0442\u0430", "slug": "v-restoranta", "count": 65 }, { "cat": "\u041A\u043E\u043C\u0443\u043D\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043A\u0438", "slug": "komunisticheski", "count": 63 }, { "cat": "\u0413\u0435\u0440\u043E\u0438", "slug": "geroi", "count": 62 }, { "cat": "\u0425\u0430\u0441\u0430\u043D \u0438 \u0410\u0439\u0448\u0435\u0442\u043E", "slug": "khasan-i-aisheto", "count": 61 }, { "cat": "\u041A\u0443\u0447\u0435\u0442\u0430", "slug": "kucheta", "count": 59 }, { "cat": "\u0411\u0430\u0431\u0438", "slug": "babi", "count": 58 }, { "cat": "\u0428\u0435\u0444\u043E\u0432\u0435", "slug": "shefove", "count": 57 }, { "cat": "\u0411\u043E\u0439\u043A\u043E \u0411\u043E\u0440\u0438\u0441\u043E\u0432", "slug": "boiko-borisov", "count": 56 }, { "cat": "\u0429\u0438\u0440\u043B\u0438\u0446", "slug": "shtirlits", "count": 53 }, { "cat": "\u041A\u0440\u0435\u0434\u0438\u0442\u0438", "slug": "krediti", "count": 52 }, { "cat": "\u0427\u0435\u0440\u0432\u0435\u043D\u0430\u0442\u0430 \u0448\u0430\u043F\u0447\u0438\u0446\u0430", "slug": "chervenata-shapchitsa", "count": 51 }, { "cat": "\u0411\u0440\u044E\u043D\u0435\u0442\u043A\u0438", "slug": "briunetki", "count": 50 }, { "cat": "\u0411\u0438\u0440\u0430", "slug": "bira", "count": 48 }, { "cat": "\u0418\u043D\u0442\u0435\u0440\u043D\u0435\u0442", "slug": "internet", "count": 48 }, { "cat": "\u041F\u043E\u0440\u0443\u0447\u0438\u043A \u0420\u0436\u0435\u0432\u0441\u043A\u0438", "slug": "poruchik-rzhevski", "count": 47 }, { "cat": "\u0422\u0435\u043B\u0435\u0432\u0438\u0437\u0438\u044F", "slug": "televiziia", "count": 47 }, { "cat": "\u041F\u0435\u0442\u043A\u0430 \u0438 \u0427\u0430\u043F\u0430\u0435\u0432", "slug": "petka-i-chapaev", "count": 44 }, { "cat": "\u041F\u043E\u0436\u0435\u043B\u0430\u043D\u0438\u044F", "slug": "pozhelaniia", "count": 44 }, { "cat": "\u0413\u043E\u0434\u0435\u043D\u0438\u0446\u0438", "slug": "godenitsi", "count": 40 }, { "cat": "\u041A\u0443\u0445\u043D\u044F", "slug": "kukhnia", "count": 40 }, { "cat": "\u041A\u0430\u0444\u0435", "slug": "kafe", "count": 38 }, { "cat": "\u0413\u0430\u0431\u0440\u043E\u0432\u0441\u043A\u0438", "slug": "gabrovski", "count": 36 }, { "cat": "\u041A\u0435\u043B\u043D\u0435\u0440\u0438", "slug": "kelneri", "count": 36 }, { "cat": "\u0420\u0430\u0441\u0438\u0441\u0442\u043A\u0438", "slug": "rasistki", "count": 36 }, { "cat": "\u0427\u0430\u043F\u0430\u0439 \u0438 \u041F\u0435\u0442\u043A\u0430", "slug": "chapai-i-petka", "count": 35 }, { "cat": "\u0416\u0430\u0431\u0438", "slug": "zhabi", "count": 33 }, { "cat": "\u041F\u0430\u0440\u0438", "slug": "pari", "count": 33 }, { "cat": "\u0425\u0440\u0430\u043D\u0430", "slug": "khrana", "count": 33 }, { "cat": "\u0418\u043D\u0434\u0438\u0430\u043D\u0446\u0438 \u0438 \u041A\u0430\u0443\u0431\u043E\u0438", "slug": "indiantsi-i-kauboi", "count": 30 }, { "cat": "\u041A\u043E\u043C\u0430\u0440", "slug": "komar", "count": 30 }, { "cat": "\u041B\u043E\u0432\u0446\u0438", "slug": "lovtsi", "count": 30 }, { "cat": "\u041D\u0430\u043D\u0435 \u0438 \u0412\u0443\u0442\u0435", "slug": "nane-i-vute", "count": 30 }, { "cat": "\u0421\u0435\u0440\u0432\u0438\u0442\u044C\u043E\u0440\u0438", "slug": "servit-ori", "count": 30 }, { "cat": "\u041C\u0438\u0442\u043D\u0438\u0447\u0430\u0440\u0438", "slug": "mitnichari", "count": 29 }, { "cat": "\u0414\u0430\u043D\u044A\u0447\u043D\u0438", "slug": "dan-chni", "count": 25 }, { "cat": "\u0414\u0436\u0438\u043F\u043E\u0432\u0435", "slug": "dzhipove", "count": 25 }, { "cat": "\u041A\u0430\u043D\u0438\u0431\u0430\u043B\u0438", "slug": "kanibali", "count": 24 }, { "cat": "\u0413\u0435\u043D\u043A\u043E", "slug": "genko", "count": 22 }, { "cat": "\u0429\u0430\u0441\u0442\u0438\u0435", "slug": "shtastie", "count": 22 }, { "cat": "\u0418\u0437\u043D\u0435\u0432\u0435\u0440\u0438", "slug": "izneveri", "count": 21 }, { "cat": "\u0420\u0438\u0431\u0430\u0440\u0438", "slug": "ribari", "count": 21 }, { "cat": "\u0417\u043D\u0430\u0435\u0442\u0435 \u043B\u0438 \u0447\u0435", "slug": "znaete-li-che", "count": 19 }, { "cat": "\u0421\u043B\u0443\u0436\u0438\u0442\u0435\u043B\u0438", "slug": "sluzhiteli", "count": 19 }, { "cat": "\u041A\u043E\u043B\u0435\u0434\u0430 \u0438 \u041D\u043E\u0432\u0430 \u0433\u043E\u0434\u0438\u043D\u0430", "slug": "koleda-i-nova-godina", "count": 17 }, { "cat": "\u041A\u044E\u0444\u0442\u0435\u0442\u0430", "slug": "kiufteta", "count": 16 }, { "cat": "\u041F\u0440\u0438\u044F\u0442\u0435\u043B\u0438", "slug": "priiateli", "count": 16 }, { "cat": "\u0411\u044A\u0440\u0437\u0430 \u043F\u043E\u043C\u043E\u0449", "slug": "b-rza-pomosht", "count": 15 }, { "cat": "\u0418\u043C\u043F\u043E\u0442\u0435\u043D\u0442\u043D\u0438", "slug": "impotentni", "count": 15 }, { "cat": "\u041A\u0438\u0440\u043A\u043E\u0440 \u0438 \u0413\u0430\u0440\u0430\u0431\u0435\u0434", "slug": "kirkor-i-garabed", "count": 15 }, { "cat": "\u0421\u0432\u0430\u0442\u0431\u0430", "slug": "svatba", "count": 15 }, { "cat": "\u0411\u0438\u0437\u043D\u0435\u0441\u043C\u0435\u043D\u0438", "slug": "biznesmeni", "count": 14 }, { "cat": "\u0412\u0430\u0440\u043D\u0430", "slug": "varna", "count": 14 }, { "cat": "\u041A\u0440\u043E\u043A\u043E\u0434\u0438\u043B\u0438", "slug": "krokodili", "count": 14 }, { "cat": "\u041C\u0430\u0439\u043A\u0438", "slug": "maiki", "count": 14 }, { "cat": "\u0417\u043B\u0430\u0442\u043D\u0430\u0442\u0430 \u0440\u0438\u0431\u043A\u0430", "slug": "zlatnata-ribka", "count": 13 }, { "cat": "\u0417\u044A\u0431\u043E\u043B\u0435\u043A\u0430\u0440\u0438", "slug": "z-bolekari", "count": 13 }, { "cat": "\u041F\u044A\u0442\u0443\u0432\u0430\u043D\u0435", "slug": "p-tuvane", "count": 13 }, { "cat": "\u0428\u0435\u0440\u043B\u043E\u043A \u0425\u043E\u0443\u043C\u0441", "slug": "sherlok-khoums", "count": 13 }, { "cat": "\u0413\u044A\u0431\u0430\u0440\u0438", "slug": "g-bari", "count": 12 }, { "cat": "\u0418\u0437\u0432\u044A\u043D\u0437\u0435\u043C\u043D\u0438", "slug": "izv-nzemni", "count": 12 }, { "cat": "\u0417\u0435\u0442\u044C\u043E\u0432\u0435", "slug": "zet-ove", "count": 11 }, { "cat": "\u041C\u0435\u0434\u0438\u0446\u0438\u043D\u0441\u043A\u0438 \u0441\u0435\u0441\u0442\u0440\u0438", "slug": "meditsinski-sestri", "count": 11 }, { "cat": "\u041C\u0440\u0430\u0432\u043A\u0438", "slug": "mravki", "count": 11 }, { "cat": "\u041E\u043F\u0442\u0438\u043C\u0438\u0441\u0442\u0438", "slug": "optimisti", "count": 11 }, { "cat": "\u0410\u043D\u0433\u043B\u0438\u044F", "slug": "angliia", "count": 10 }, { "cat": "\u0421\u0438\u043D\u043E\u0432\u0435", "slug": "sinove", "count": 10 }, { "cat": "\u0414\u0435\u043F\u0443\u0442\u0430\u0442\u0438", "slug": "deputati", "count": 9 }, { "cat": "\u0414\u044A\u0449\u0435\u0440\u0438", "slug": "d-shteri", "count": 9 }, { "cat": "\u0418\u0437\u0431\u043E\u0440\u0438", "slug": "izbori", "count": 9 }, { "cat": "\u041C\u0435\u0447\u043E \u041F\u0443\u0445", "slug": "mecho-pukh", "count": 9 }, { "cat": "\u041D\u0435\u0433\u0440\u0438", "slug": "negri", "count": 9 }, { "cat": "\u041F\u0430\u0440\u043B\u0430\u043C\u0435\u043D\u0442", "slug": "parlament", "count": 9 }, { "cat": "\u0421\u0432\u0435\u043A\u044A\u0440 \u0438 \u0441\u0432\u0435\u043A\u044A\u0440\u0432\u0430", "slug": "svek-r-i-svek-rva", "count": 9 }, { "cat": "\u0425\u0438\u0440\u0443\u0440\u0437\u0438", "slug": "khirurzi", "count": 9 }, { "cat": "\u0410\u0444\u0440\u0438\u043A\u0430", "slug": "afrika", "count": 8 }, { "cat": "\u0421\u043B\u0430\u0431\u043E\u0442\u0435\u043B\u0435\u0441\u043D\u0438", "slug": "slabotelesni", "count": 8 }, { "cat": "\u0421\u043C\u044A\u0440\u0442\u0430", "slug": "sm-rta", "count": 8 }, { "cat": "\u041A\u043B\u0438\u0435\u043D\u0442\u0438", "slug": "klienti", "count": 7 }, { "cat": "\u041C\u0430\u0433\u0430\u0440\u0435\u0442\u0430", "slug": "magareta", "count": 7 }, { "cat": "\u041F\u0435\u0448\u043E", "slug": "pesho", "count": 7 }, { "cat": "\u0418\u0441\u0442\u043E\u0440\u0438\u0438", "slug": "istorii", "count": 6 }, { "cat": "\u041A\u0440\u0430\u0441\u0438\u0432\u0438", "slug": "krasivi", "count": 6 }, { "cat": "\u041E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0442\u043E", "slug": "obrazovanieto", "count": 6 }, { "cat": "\u0429\u044A\u0440\u043A\u0435\u043B\u0438", "slug": "sht-rkeli", "count": 6 }, { "cat": "\u041A\u0438\u043D\u043E", "slug": "kino", "count": 5 }, { "cat": "\u041B\u0443\u043D\u0430\u0442\u0430", "slug": "lunata", "count": 5 }, { "cat": "\u0421\u0442\u044E\u0430\u0440\u0434\u0435\u0441\u0438", "slug": "stiuardesi", "count": 5 }, { "cat": "\u0422\u043E\u043A\u0430", "slug": "toka", "count": 5 }, { "cat": "\u0414\u0436\u0435\u043D\u0442\u044A\u043B\u043C\u0435\u043D\u0438", "slug": "dzhent-lmeni", "count": 4 }, { "cat": "\u0416\u0443\u0440\u043D\u0430\u043B\u0438\u0441\u0442\u0438", "slug": "zhurnalisti", "count": 4 }, { "cat": "\u041A\u043E\u043B\u0435\u0433\u0438", "slug": "kolegi", "count": 4 }, { "cat": "\u041F\u043E\u043D\u0435\u0434\u0435\u043B\u043D\u0438\u043A", "slug": "ponedelnik", "count": 4 }, { "cat": "\u0423\u0438\u043A\u0435\u043D\u0434", "slug": "uikend", "count": 4 }, { "cat": "\u0413\u0435\u0440\u043C\u0430\u043D\u0438\u044F", "slug": "germaniia", "count": 3 }, { "cat": "\u0415\u0432\u0440\u043E\u043F\u0430", "slug": "evropa", "count": 3 }, { "cat": "\u0417\u043C\u0438\u0438", "slug": "zmii", "count": 3 }, { "cat": "\u041A\u0430\u0437\u0430\u0440\u043C\u0430", "slug": "kazarma", "count": 3 }, { "cat": "\u0417\u043E\u043E\u043F\u0430\u0440\u043A", "slug": "zoopark", "count": 2 }, { "cat": "\u041F\u0430\u0442\u043A\u0438", "slug": "patki", "count": 2 }];
    $$Astro3 = createAstro();
    prerender4 = false;
    $$2 = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro3, $$props, $$slots);
      Astro2.self = $$2;
      const { jokecat } = Astro2.params;
      const x = jokecat.split("/");
      const cat = jokecats.find((xx) => xx.slug === x[0])?.cat;
      const pagenum = x[1] ? Number(x[1]) : 1;
      const skip = pagenum * 30 - 30;
      const respxx = db2.select({ uid: jokes$1.uid, joke: jokes$1.joke, id: jokes$1.id, cat: jokes$1.cat }).from(jokes$1).limit(30).offset(skip).where(eq(jokes$1.cat, `JOKBG_${cat}`)).orderBy(desc(jokes$1.id));
      const countx = db2.select({ count: agregator.count }).from(agregator).where(eq(agregator.cat, `JOKBG_${cat}_jokes`));
      const respx = await Promise.all([respxx, countx]).then((values) => {
        return { jokesmany: values[0], count: values[1][0].count };
      });
      const { jokesmany, count } = respx;
      return renderTemplate`${renderComponent($$result, "Layout", $$Layout, { "title": `\u0412\u0438\u0446\u043E\u0432\u0435 \u043E\u0442 ${cat} \u043D\u0430 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430 ${pagenum}`, "description": `\u0412\u0438\u0446\u043E\u0432\u0435 \u043E\u0442 ${cat}  ` }, { "default": ($$result2) => renderTemplate` ${maybeRenderHead()}<div class="text-sm font-bold"> <ul class="flex gap-2 items-center"> <li> <a${addAttribute("/vicove", "href")}>Вицове</a>${" "} </li> <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"${addAttribute(1.5, "stroke-width")} stroke="currentColor" class="w-5 h-5"> <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5"></path> </svg> <li> <a${addAttribute(`/cat/${x[0]}`, "href")}>${cat}</a> </li> <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"${addAttribute(1.5, "stroke-width")} stroke="currentColor" class="w-5 h-5"> <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5"></path> </svg> <li> <a${addAttribute(`/cat/${x[0]}/${pagenum}`, "href")}>${pagenum}</a> </li> </ul> </div> <div class="flex flex-wrap"> <div class="joke"> ${renderComponent($$result2, "RudSense", $$RudSense, {})} </div> ${jokesmany.map((item) => renderTemplate`${renderComponent($$result2, "JokeThumbnail", $$JokeThumbnail, { "item": item, "showcats": false, "short": true })}`)} <div class="joke"> ${renderComponent($$result2, "RudSense", $$RudSense, { "main": true })} </div> </div> ${renderComponent($$result2, "Pagination", $$Pagination, { "items": count, "currentPage": pagenum, "pageSize": 30, "prefix": `/cat/${x[0]}/` })} ` })}`;
    }, "/home/runner/work/monext/monext/apps/kloun/src/pages/cat/[...jokecat].astro", void 0);
    $$file2 = "/home/runner/work/monext/monext/apps/kloun/src/pages/cat/[...jokecat].astro";
    $$url2 = "/cat/[...jokecat]";
    ____jokecat_ = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      default: $$2,
      file: $$file2,
      prerender: prerender4,
      url: $$url2
    }, Symbol.toStringTag, { value: "Module" }));
  }
});

// dist/$server_build/chunks/_.._YZPPflW2.mjs
var YZPPflW2_exports = {};
__export(YZPPflW2_exports, {
  page: () => page5,
  renderers: () => renderers
});
var page5;
var init_YZPPflW2 = __esm({
  "dist/$server_build/chunks/_.._YZPPflW2.mjs"() {
    "use strict";
    init_renderers();
    page5 = () => Promise.resolve().then(() => (init_CgdEe831(), CgdEe831_exports)).then((n) => n._);
  }
});

// dist/$server_build/chunks/pages/_jokeid__D-okbgnW.mjs
var jokeid_D_okbgnW_exports = {};
__export(jokeid_D_okbgnW_exports, {
  default: () => $$jokeid,
  file: () => $$file3,
  prerender: () => prerender5,
  url: () => $$url3
});
var $$Astro$14, $$FacebookShare, $$Astro4, prerender5, $$jokeid, $$file3, $$url3;
var init_jokeid_D_okbgnW = __esm({
  "dist/$server_build/chunks/pages/_jokeid__D-okbgnW.mjs"() {
    "use strict";
    init_astro_CZ31vzIS();
    init_colors();
    init_CgdEe831();
    init_RxTcdYg8();
    init_drizzle_orm();
    $$Astro$14 = createAstro();
    $$FacebookShare = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro$14, $$props, $$slots);
      Astro2.self = $$FacebookShare;
      const { url: url2 } = Astro2.props;
      return renderTemplate`${maybeRenderHead()}<button${addAttribute(`fbshare('${url2}')`, "onclick")} class="text-white transition duration-300 max-w-xs w-full rounded-3xl uppercase flex text-sm font-bold p-3 relative undefined false undefined" style="background-color:#1877F3"> <div class="absolute h-full left-3 top-0 flex justify-center items-center"> <svg class="h-6 w-6 fill-white drop-shadow-md" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"> <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"></path> </svg> </div> <div class="w-full ml-6 flex justify-center items-center pt-0.5 drop-shadow-md">
Сподели във Facebook
</div> </button>`;
    }, "/home/runner/work/monext/monext/apps/kloun/src/components/FacebookShare.astro", void 0);
    $$Astro4 = createAstro();
    prerender5 = false;
    $$jokeid = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro4, $$props, $$slots);
      Astro2.self = $$jokeid;
      const jokeid = Astro2.params.jokeid;
      const joke = await db2.select({ uid: jokes$1.uid, joke: jokes$1.joke, id: jokes$1.id }).from(jokes$1).where(eq(jokes$1.uid, jokeid)).limit(1);
      const jokez = await db2.select({ uid: jokes$1.uid, joke: jokes$1.joke, id: jokes$1.id, cat: jokes$1.cat }).from(jokes$1).where(lt(jokes$1.id, joke[0].id)).limit(30);
      if (!joke[0]) {
        return new Response("Not Found", {
          status: 404,
          statusText: "Not Found"
        });
      }
      const meta = joke[0].joke.replaceAll("\n", " ");
      return renderTemplate`${renderComponent($$result, "Layout", $$Layout, { "title": meta.substring(0, 60), "description": meta, "image": `https://kloun.lol/api/joke/og/?idx=${jokeid}` }, { "default": ($$result2) => renderTemplate` ${maybeRenderHead()}<div class="my-10 flex w-full flex-col text-center"> <article class="mx-auto mb-6 px-10 text-xl leading-relaxed xs:px-2 sm:px-4 lg:w-2/3"> ${renderComponent($$result2, "FormatJoke", $$FormatJoke, { "joke": joke[0].joke })} </article> <div class="flex justify-end items-center"> ${renderComponent($$result2, "FacebookShare", $$FacebookShare, { "url": `https://kloun.lol/joke/${jokeid}` })} </div> </div> <div class="flex flex-wrap"> ${renderComponent($$result2, "RudSense", $$RudSense, { "type": "inarticle" })} ${jokez.map((joke2) => renderTemplate`${renderComponent($$result2, "JokeThumbnail", $$JokeThumbnail, { "item": joke2, "showcats": false, "short": true })}`)} </div> ` })}`;
    }, "/home/runner/work/monext/monext/apps/kloun/src/pages/joke/[jokeid].astro", void 0);
    $$file3 = "/home/runner/work/monext/monext/apps/kloun/src/pages/joke/[jokeid].astro";
    $$url3 = "/joke/[jokeid]";
  }
});

// dist/$server_build/chunks/_jokeid__B9Jf0Wxb.mjs
var jokeid_B9Jf0Wxb_exports = {};
__export(jokeid_B9Jf0Wxb_exports, {
  page: () => page6,
  renderers: () => renderers
});
var page6;
var init_jokeid_B9Jf0Wxb = __esm({
  "dist/$server_build/chunks/_jokeid__B9Jf0Wxb.mjs"() {
    "use strict";
    init_renderers();
    page6 = () => Promise.resolve().then(() => (init_jokeid_D_okbgnW(), jokeid_D_okbgnW_exports));
  }
});

// dist/$server_build/chunks/pages/memes_D-x3pmmn.mjs
var memes_D_x3pmmn_exports = {};
__export(memes_D_x3pmmn_exports, {
  default: () => $$Memes,
  file: () => $$file4,
  prerender: () => prerender6,
  url: () => $$url4
});
var $$Astro5, prerender6, $$Memes, $$file4, $$url4;
var init_memes_D_x3pmmn = __esm({
  "dist/$server_build/chunks/pages/memes_D-x3pmmn.mjs"() {
    "use strict";
    init_astro_CZ31vzIS();
    init_colors();
    init_RxTcdYg8();
    $$Astro5 = createAstro();
    prerender6 = false;
    $$Memes = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro5, $$props, $$slots);
      Astro2.self = $$Memes;
      const items = await fetch(
        `https://cache.monastro.workers.dev/proxy?url=${encodeURIComponent(
          "https://pr0gramm.com/api/items/get?flags=1&promoted=1&cache=7200"
        )}`
      ).then((res) => res.json());
      return renderTemplate`${renderComponent($$result, "Layout", $$Layout, { "title": "memes", "description": "" }, { "default": ($$result2) => renderTemplate` ${maybeRenderHead()}<div class="container flex flex-wrap items-center justify-center sm:mx-auto"> ${items.items.map(
        ({
          thumb
        }) => renderTemplate`<label class="hover:animate-pulse snap-center"> <div class="rounded-lg bg-gradient-to-r from-purple-900 to-pink-600 p-1 dark:from-white dark:to-slate-400 m-1 cursor-pointer flex"> <img loading="lazy" width="128" height="128" class="rounded-lg" alt="pr0gramm"${addAttribute(`https://thumb.pr0gramm.com/${thumb}`, "src")}> </div> </label>`
      )} </div> ` })}`;
    }, "/home/runner/work/monext/monext/apps/kloun/src/pages/memes.astro", void 0);
    $$file4 = "/home/runner/work/monext/monext/apps/kloun/src/pages/memes.astro";
    $$url4 = "/memes";
  }
});

// dist/$server_build/chunks/memes_CWP-a497.mjs
var memes_CWP_a497_exports = {};
__export(memes_CWP_a497_exports, {
  page: () => page7,
  renderers: () => renderers
});
var page7;
var init_memes_CWP_a497 = __esm({
  "dist/$server_build/chunks/memes_CWP-a497.mjs"() {
    "use strict";
    init_renderers();
    page7 = () => Promise.resolve().then(() => (init_memes_D_x3pmmn(), memes_D_x3pmmn_exports));
  }
});

// ../../node_modules/lodash/lodash.js
var require_lodash = __commonJS({
  "../../node_modules/lodash/lodash.js"(exports, module) {
    (function() {
      var undefined2;
      var VERSION = "4.17.21";
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = "__lodash_placeholder__";
      var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [
        ["ary", WRAP_ARY_FLAG],
        ["bind", WRAP_BIND_FLAG],
        ["bindKey", WRAP_BIND_KEY_FLAG],
        ["curry", WRAP_CURRY_FLAG],
        ["curryRight", WRAP_CURRY_RIGHT_FLAG],
        ["flip", WRAP_FLIP_FLAG],
        ["partial", WRAP_PARTIAL_FLAG],
        ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
        ["rearg", WRAP_REARG_FLAG]
      ];
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrimStart = /^\s+/;
      var reWhitespace = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = [
        "Array",
        "Buffer",
        "DataView",
        "Date",
        "Error",
        "Float32Array",
        "Float64Array",
        "Function",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Map",
        "Math",
        "Object",
        "Promise",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "TypeError",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "WeakMap",
        "_",
        "clearTimeout",
        "isFinite",
        "parseInt",
        "setTimeout"
      ];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      var deburredLetters = {
        // Latin-1 Supplement block.
        "\xC0": "A",
        "\xC1": "A",
        "\xC2": "A",
        "\xC3": "A",
        "\xC4": "A",
        "\xC5": "A",
        "\xE0": "a",
        "\xE1": "a",
        "\xE2": "a",
        "\xE3": "a",
        "\xE4": "a",
        "\xE5": "a",
        "\xC7": "C",
        "\xE7": "c",
        "\xD0": "D",
        "\xF0": "d",
        "\xC8": "E",
        "\xC9": "E",
        "\xCA": "E",
        "\xCB": "E",
        "\xE8": "e",
        "\xE9": "e",
        "\xEA": "e",
        "\xEB": "e",
        "\xCC": "I",
        "\xCD": "I",
        "\xCE": "I",
        "\xCF": "I",
        "\xEC": "i",
        "\xED": "i",
        "\xEE": "i",
        "\xEF": "i",
        "\xD1": "N",
        "\xF1": "n",
        "\xD2": "O",
        "\xD3": "O",
        "\xD4": "O",
        "\xD5": "O",
        "\xD6": "O",
        "\xD8": "O",
        "\xF2": "o",
        "\xF3": "o",
        "\xF4": "o",
        "\xF5": "o",
        "\xF6": "o",
        "\xF8": "o",
        "\xD9": "U",
        "\xDA": "U",
        "\xDB": "U",
        "\xDC": "U",
        "\xF9": "u",
        "\xFA": "u",
        "\xFB": "u",
        "\xFC": "u",
        "\xDD": "Y",
        "\xFD": "y",
        "\xFF": "y",
        "\xC6": "Ae",
        "\xE6": "ae",
        "\xDE": "Th",
        "\xFE": "th",
        "\xDF": "ss",
        // Latin Extended-A block.
        "\u0100": "A",
        "\u0102": "A",
        "\u0104": "A",
        "\u0101": "a",
        "\u0103": "a",
        "\u0105": "a",
        "\u0106": "C",
        "\u0108": "C",
        "\u010A": "C",
        "\u010C": "C",
        "\u0107": "c",
        "\u0109": "c",
        "\u010B": "c",
        "\u010D": "c",
        "\u010E": "D",
        "\u0110": "D",
        "\u010F": "d",
        "\u0111": "d",
        "\u0112": "E",
        "\u0114": "E",
        "\u0116": "E",
        "\u0118": "E",
        "\u011A": "E",
        "\u0113": "e",
        "\u0115": "e",
        "\u0117": "e",
        "\u0119": "e",
        "\u011B": "e",
        "\u011C": "G",
        "\u011E": "G",
        "\u0120": "G",
        "\u0122": "G",
        "\u011D": "g",
        "\u011F": "g",
        "\u0121": "g",
        "\u0123": "g",
        "\u0124": "H",
        "\u0126": "H",
        "\u0125": "h",
        "\u0127": "h",
        "\u0128": "I",
        "\u012A": "I",
        "\u012C": "I",
        "\u012E": "I",
        "\u0130": "I",
        "\u0129": "i",
        "\u012B": "i",
        "\u012D": "i",
        "\u012F": "i",
        "\u0131": "i",
        "\u0134": "J",
        "\u0135": "j",
        "\u0136": "K",
        "\u0137": "k",
        "\u0138": "k",
        "\u0139": "L",
        "\u013B": "L",
        "\u013D": "L",
        "\u013F": "L",
        "\u0141": "L",
        "\u013A": "l",
        "\u013C": "l",
        "\u013E": "l",
        "\u0140": "l",
        "\u0142": "l",
        "\u0143": "N",
        "\u0145": "N",
        "\u0147": "N",
        "\u014A": "N",
        "\u0144": "n",
        "\u0146": "n",
        "\u0148": "n",
        "\u014B": "n",
        "\u014C": "O",
        "\u014E": "O",
        "\u0150": "O",
        "\u014D": "o",
        "\u014F": "o",
        "\u0151": "o",
        "\u0154": "R",
        "\u0156": "R",
        "\u0158": "R",
        "\u0155": "r",
        "\u0157": "r",
        "\u0159": "r",
        "\u015A": "S",
        "\u015C": "S",
        "\u015E": "S",
        "\u0160": "S",
        "\u015B": "s",
        "\u015D": "s",
        "\u015F": "s",
        "\u0161": "s",
        "\u0162": "T",
        "\u0164": "T",
        "\u0166": "T",
        "\u0163": "t",
        "\u0165": "t",
        "\u0167": "t",
        "\u0168": "U",
        "\u016A": "U",
        "\u016C": "U",
        "\u016E": "U",
        "\u0170": "U",
        "\u0172": "U",
        "\u0169": "u",
        "\u016B": "u",
        "\u016D": "u",
        "\u016F": "u",
        "\u0171": "u",
        "\u0173": "u",
        "\u0174": "W",
        "\u0175": "w",
        "\u0176": "Y",
        "\u0177": "y",
        "\u0178": "Y",
        "\u0179": "Z",
        "\u017B": "Z",
        "\u017D": "Z",
        "\u017A": "z",
        "\u017C": "z",
        "\u017E": "z",
        "\u0132": "IJ",
        "\u0133": "ij",
        "\u0152": "Oe",
        "\u0153": "oe",
        "\u0149": "'n",
        "\u017F": "s"
      };
      var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      };
      var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      };
      var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      var freeParseFloat = parseFloat, freeParseInt = parseInt;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types2 = freeModule && freeModule.require && freeModule.require("util").types;
          if (types2) {
            return types2;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          var value = array[index];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }
      function arrayEach(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while (length--) {
          if (iteratee(array[length], length, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEvery(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (!predicate(array[index], index, array)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }
      function arrayIncludesWith(array, value, comparator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
      function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }
      function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
      }
      function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty("length");
      function asciiToArray(string) {
        return string.split("");
      }
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }
      function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (comparator(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
      }
      function baseProperty(key) {
        return function(object) {
          return object == null ? undefined2 : object[key];
        };
      }
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? undefined2 : object[key];
        };
      }
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection2) {
          accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }
      function baseSum(array, iteratee) {
        var result, index = -1, length = array.length;
        while (++index < length) {
          var current = iteratee(array[index]);
          if (current !== undefined2) {
            result = result === undefined2 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
          return [key, object[key]];
        });
      }
      function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function baseValues(object, props) {
        return arrayMap(props, function(key) {
          return object[key];
        });
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function countHolders(array, placeholder) {
        var length = array.length, result = 0;
        while (length--) {
          if (array[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
      }
      function getValue(object, key) {
        return object == null ? undefined2 : object[key];
      }
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
      function iteratorToArray(iterator) {
        var data, result = [];
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      function replaceHolders(array, placeholder) {
        var index = -1, length = array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }
      function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      function setToPairs(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }
        return index;
      }
      function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
      }
      function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
      }
      function trimmedEndIndex(string) {
        var index = string.length;
        while (index-- && reWhitespace.test(string.charAt(index))) {
        }
        return index;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context) {
        context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
        var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
        var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
        var coreJsData = context["__core-js_shared__"];
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root._;
        var reIsNative = RegExp2(
          "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
        );
        var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
        var defineProperty = function() {
          try {
            var func = getNative(Object2, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e) {
          }
        }();
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
        var DataView = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
        var metaMap = WeakMap && new WeakMap();
        var realNames = {};
        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap);
        var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
        function lodash(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = /* @__PURE__ */ function() {
          function object() {
          }
          return function(proto) {
            if (!isObject(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result2 = new object();
            object.prototype = undefined2;
            return result2;
          };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined2;
        }
        lodash.templateSettings = {
          /**
           * Used to detect `data` property values to be HTML-escaped.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "escape": reEscape,
          /**
           * Used to detect code to be evaluated.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "evaluate": reEvaluate,
          /**
           * Used to detect `data` property values to inject.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "interpolate": reInterpolate,
          /**
           * Used to reference the data object in the template text.
           *
           * @memberOf _.templateSettings
           * @type {string}
           */
          "variable": "",
          /**
           * Used to import variables into the compiled template.
           *
           * @memberOf _.templateSettings
           * @type {Object}
           */
          "imports": {
            /**
             * A reference to the `lodash` function.
             *
             * @memberOf _.templateSettings.imports
             * @type {Function}
             */
            "_": lodash
          }
        };
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view2 = getView(0, arrLength, this.__views__), start = view2.start, end = view2.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
          if (!isArr || !isRight && arrLength == length && takeCount == length) {
            return baseWrapperValue(array, this.__actions__);
          }
          var result2 = [];
          outer:
            while (length-- && resIndex < takeCount) {
              index += dir;
              var iterIndex = -1, value = array[index];
              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                if (type == LAZY_MAP_FLAG) {
                  value = computed;
                } else if (!computed) {
                  if (type == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }
              result2[resIndex++] = value;
            }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result2 = data[key];
            return result2 === HASH_UNDEFINED ? undefined2 : result2;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined2;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? data[key] !== undefined2 : hasOwnProperty.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          return index < 0 ? undefined2 : data[index][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash(),
            "map": new (Map2 || ListCache)(),
            "string": new Hash()
          };
        }
        function mapCacheDelete(key) {
          var result2 = getMapData(this, key)["delete"](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data = getMapData(this, key), size2 = data.size;
          data.set(key, value);
          this.size += data.size == size2 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values2) {
          var index = -1, length = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache();
          while (++index < length) {
            this.add(values2[index]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data = this.__data__, result2 = data["delete"](key);
          this.size = data.size;
          return result2;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
            (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
            isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
            isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
            isIndex(key, length)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array) {
          var length = array.length;
          return length ? array[baseRandom(0, length - 1)] : undefined2;
        }
        function arraySampleSize(array, n) {
          return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
        function arrayShuffle(array) {
          return shuffleSelf(copyArray(array));
        }
        function assignMergeValue(object, key, value) {
          if (value !== undefined2 && !eq2(object[key], value) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty.call(object, key) && eq2(objValue, value)) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq2(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee2, accumulator) {
          baseEach(collection, function(value, key, collection2) {
            setter(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }
        function baseAssignValue(object, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object, key, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object[key] = value;
          }
        }
        function baseAt(object, paths) {
          var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
          while (++index < length) {
            result2[index] = skip ? undefined2 : get5(object, paths[index]);
          }
          return result2;
        }
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined2) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined2) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result2 !== undefined2) {
            return result2;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result2);
            }
          } else {
            var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || isFunc && !object) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result2 = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key2) {
              result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
          var props = isArr ? undefined2 : keysFunc(value);
          arrayEach(props || value, function(subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
          return result2;
        }
        function baseConforms(source) {
          var props = keys(source);
          return function(object) {
            return baseConformsTo(object, source, props);
          };
        }
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (length--) {
            var key = props[length], predicate = source[key], value = object[key];
            if (value === undefined2 && !(key in object) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait, args) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return setTimeout2(function() {
            func.apply(undefined2, args);
          }, wait);
        }
        function baseDifference(array, values2, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
          if (!length) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap(values2, baseUnary(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values2 = new SetCache(values2);
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values2[valuesIndex] === computed) {
                    continue outer;
                  }
                }
                result2.push(value);
              } else if (!includes2(values2, computed, comparator)) {
                result2.push(value);
              }
            }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach(collection, function(value, index, collection2) {
            result2 = !!predicate(value, index, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array, iteratee2, comparator) {
          var index = -1, length = array.length;
          while (++index < length) {
            var value = array[index], current = iteratee2(value);
            if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
              var computed = current, result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array, value, start, end) {
          var length = array.length;
          start = toInteger(start);
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end === undefined2 || end > length ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array[start++] = value;
          }
          return array;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach(collection, function(value, index, collection2) {
            if (predicate(value, index, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array, depth, predicate, isStrict, result2) {
          var index = -1, length = array.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object, iteratee2) {
          return object && baseFor(object, iteratee2, keys);
        }
        function baseForOwnRight(object, iteratee2) {
          return object && baseForRight(object, iteratee2, keys);
        }
        function baseFunctions(object, props) {
          return arrayFilter(props, function(key) {
            return isFunction(object[key]);
          });
        }
        function baseGet(object, path) {
          path = castPath(path, object);
          var index = 0, length = path.length;
          while (object != null && index < length) {
            object = object[toKey(path[index++])];
          }
          return index && index == length ? object : undefined2;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object);
          return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined2 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object, key) {
          return object != null && hasOwnProperty.call(object, key);
        }
        function baseHasIn(object, key) {
          return object != null && key in Object2(object);
        }
        function baseInRange(number, start, end) {
          return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches2 = Array2(othLength), maxLength = Infinity, result2 = [];
          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee2) {
              array = arrayMap(array, baseUnary(iteratee2));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches2[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
          }
          array = arrays[0];
          var index = -1, seen = caches2[0];
          outer:
            while (++index < length && result2.length < maxLength) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                othIndex = othLength;
                while (--othIndex) {
                  var cache = caches2[othIndex];
                  if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseInverter(object, setter, iteratee2, accumulator) {
          baseForOwn(object, function(value, key, object2) {
            setter(accumulator, iteratee2(value), key, object2);
          });
          return accumulator;
        }
        function baseInvoke(object, path, args) {
          path = castPath(path, object);
          object = parent(object, path);
          var func = object == null ? object : object[toKey(last(path))];
          return func == null ? undefined2 : apply(func, object, args);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack());
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length, length = index, noCustomizer = !customizer;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (index--) {
            var data = matchData[index];
            if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0], objValue = object[key], srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined2 && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result2 = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseIteratee(value) {
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == "object") {
            return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result2 = [];
          for (var key in Object2(object)) {
            if (hasOwnProperty.call(object, key) && key != "constructor") {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn(object) {
          if (!isObject(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object), result2 = [];
          for (var key in object) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection, iteratee2) {
          var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value, key, collection2) {
            result2[++index] = iteratee2(value, key, collection2);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function(object) {
            var objValue = get5(object, path);
            return objValue === undefined2 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack());
            if (isObject(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
              if (newValue === undefined2) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
          var isCommon = newValue === undefined2;
          if (isCommon) {
            var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject(objValue) || isFunction(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }
        function baseNth(array, n) {
          var length = array.length;
          if (!length) {
            return;
          }
          n += n < 0 ? length : 0;
          return isIndex(n, length) ? array[n] : undefined2;
        }
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function(iteratee2) {
              if (isArray(iteratee2)) {
                return function(value) {
                  return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                };
              }
              return iteratee2;
            });
          } else {
            iteratees = [identity];
          }
          var index = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          var result2 = baseMap(collection, function(value, key, collection2) {
            var criteria = arrayMap(iteratees, function(iteratee2) {
              return iteratee2(value);
            });
            return { "criteria": criteria, "index": ++index, "value": value };
          });
          return baseSortBy(result2, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }
        function basePick(object, paths) {
          return basePickBy(object, paths, function(value, path) {
            return hasIn(object, path);
          });
        }
        function basePickBy(object, paths, predicate) {
          var index = -1, length = paths.length, result2 = {};
          while (++index < length) {
            var path = paths[index], value = baseGet(object, path);
            if (predicate(value, path)) {
              baseSet(result2, castPath(path, object), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path) {
          return function(object) {
            return baseGet(object, path);
          };
        }
        function basePullAll(array, values2, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
          if (array === values2) {
            values2 = copyArray(values2);
          }
          if (iteratee2) {
            seen = arrayMap(array, baseUnary(iteratee2));
          }
          while (++index < length) {
            var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
            while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0, lastIndex = length - 1;
          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array, index, 1);
              } else {
                baseUnset(array, index);
              }
            }
          }
          return array;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step, fromRight) {
          var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
          while (length--) {
            result2[fromRight ? length : ++index] = start;
            start += step;
          }
          return result2;
        }
        function baseRepeat(string, n) {
          var result2 = "";
          if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n % 2) {
              result2 += string;
            }
            n = nativeFloor(n / 2);
            if (n) {
              string += string;
            }
          } while (n);
          return result2;
        }
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + "");
        }
        function baseSample(collection) {
          return arraySample(values(collection));
        }
        function baseSampleSize(collection, n) {
          var array = values(collection);
          return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
        function baseSet(object, path, value, customizer) {
          if (!isObject(object)) {
            return object;
          }
          path = castPath(path, object);
          var index = -1, length = path.length, lastIndex = length - 1, nested = object;
          while (nested != null && ++index < length) {
            var key = toKey(path[index]), newValue = value;
            if (key === "__proto__" || key === "constructor" || key === "prototype") {
              return object;
            }
            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined2;
              if (newValue === undefined2) {
                newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }
        var baseSetData = !metaMap ? identity : function(func, data) {
          metaMap.set(func, data);
          return func;
        };
        var baseSetToString = !defineProperty ? identity : function(func, string) {
          return defineProperty(func, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant(string),
            "writable": true
          });
        };
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
        function baseSlice(array, start, end) {
          var index = -1, length = array.length;
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : end - start >>> 0;
          start >>>= 0;
          var result2 = Array2(length);
          while (++index < length) {
            result2[index] = array[index + start];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach(collection, function(value, index, collection2) {
            result2 = predicate(value, index, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array, value, retHighest) {
          var low = 0, high = array == null ? low : array.length;
          if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = low + high >>> 1, computed = array[mid];
              if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity, retHighest);
        }
        function baseSortedIndexBy(array, value, iteratee2, retHighest) {
          var low = 0, high = array == null ? 0 : array.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee2(value);
          var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed <= value : computed < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array, iteratee2) {
          var index = -1, length = array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
            if (!index || !eq2(computed, seen)) {
              var seen = computed;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function baseUniq(array, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set2 = iteratee2 ? null : createSet(array);
            if (set2) {
              return setToArray(set2);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }
                if (iteratee2) {
                  seen.push(computed);
                }
                result2.push(value);
              } else if (!includes2(seen, computed, comparator)) {
                if (seen !== result2) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseUnset(object, path) {
          path = castPath(path, object);
          object = parent(object, path);
          return object == null || delete object[toKey(last(path))];
        }
        function baseUpdate(object, path, updater, customizer) {
          return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length, index = fromRight ? length : -1;
          while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
          }
          return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(actions, function(result3, action) {
            return action.func.apply(action.thisArg, arrayPush([result3], action.args));
          }, result2);
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1, result2 = Array2(length);
          while (++index < length) {
            var array = arrays[index], othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index) {
                result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props, values2, assignFunc) {
          var index = -1, length = props.length, valsLength = values2.length, result2 = {};
          while (++index < length) {
            var value = index < valsLength ? values2[index] : undefined2;
            assignFunc(result2, props[index], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == "function" ? value : identity;
        }
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }
        var castRest = baseRest;
        function castSlice(array, start, end) {
          var length = array.length;
          end = end === undefined2 ? length : end;
          return !start && end >= length ? array : baseSlice(array, start, end);
        }
        var clearTimeout = ctxClearTimeout || function(id) {
          return root.clearTimeout(id);
        };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneRegExp(regexp) {
          var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result2.lastIndex = regexp.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
            var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
              return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object, other, orders) {
          var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
          while (++index < length) {
            var result2 = compareAscending(objCriteria[index], othCriteria[index]);
            if (result2) {
              if (index >= ordersLength) {
                return result2;
              }
              var order = orders[index];
              return result2 * (order == "desc" ? -1 : 1);
            }
          }
          return object.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray(source, array) {
          var index = -1, length = source.length;
          array || (array = Array2(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index = -1, length = props.length;
          while (++index < length) {
            var key = props[index];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
            if (newValue === undefined2) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }
        function createAggregator(setter, initializer) {
          return function(collection, iteratee2) {
            var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
            return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
          };
        }
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined2 : customizer;
              length = 1;
            }
            object = Object2(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
            while (fromRight ? index-- : ++index < length) {
              if (iteratee2(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function(object, iteratee2, keysFunc) {
            var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function(string) {
            string = toString(string);
            var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
            var chr = strSymbols ? strSymbols[0] : string.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function(string) {
            return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
          };
        }
        function createCtor(Ctor) {
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
            return isObject(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
            while (index--) {
              args[index] = arguments[index];
            }
            var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                undefined2,
                args,
                holders,
                undefined2,
                undefined2,
                arity - length
              );
            }
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function(key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];
              var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
              if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments, value = args[0];
              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
              while (++index2 < length) {
                result2 = funcs[index2].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length;
            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                thisArg,
                args,
                newHolders,
                argPos,
                ary2,
                arity - length
              );
            }
            var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function(object, iteratee2) {
            return baseInverter(object, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result2;
            if (value === undefined2 && other === undefined2) {
              return defaultValue;
            }
            if (value !== undefined2) {
              result2 = value;
            }
            if (other !== undefined2) {
              if (result2 === undefined2) {
                return other;
              }
              if (typeof value == "string" || typeof other == "string") {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee2) {
                return apply(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars) {
          chars = chars === undefined2 ? " " : baseToString(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function(start, end, step) {
            if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
              end = step = undefined2;
            }
            start = toFinite(start);
            if (end === undefined2) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined2 ? start < end ? 1 : -1 : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == "string" && typeof other == "string")) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary2,
            arity
          ];
          var result2 = wrapFunc.apply(undefined2, newData);
          if (isLaziable(func)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math2[methodName];
          return function(number, precision) {
            number = toNumber(number);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number)) {
              var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
              pair = (toString(value) + "e").split("e");
              return +(pair[0] + "e" + (+pair[1] - precision));
            }
            return func(number);
          };
        }
        var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop2 : function(values2) {
          return new Set2(values2);
        };
        function createToPairs(keysFunc) {
          return function(object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined2;
          }
          ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
          arity = arity === undefined2 ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials, holdersRight = holders;
            partials = holders = undefined2;
          }
          var data = isBindKey ? undefined2 : getData(func);
          var newData = [
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary2,
            arity
          ];
          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result2 = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result2 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined2, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (objValue === undefined2 || eq2(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject(objValue) && isObject(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
            stack["delete"](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined2 : value;
        }
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array;
          }
          var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
          stack.set(array, other);
          stack.set(other, array);
          while (++index < arrLength) {
            var arrValue = array[index], othValue = other[index];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined2) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (!arraySome(other, function(othValue2, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result2 = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result2 = false;
              break;
            }
          }
          stack["delete"](array);
          stack["delete"](other);
          return result2;
        }
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq2(+object, +other);
            case errorTag:
              return object.name == other.name && object.message == other.message;
            case regexpTag:
            case stringTag:
              return object == other + "";
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object, other);
              var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
              stack["delete"](object);
              return result2;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result2 = true;
          stack.set(object, other);
          stack.set(other, object);
          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key], othValue = other[key];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
            }
            if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result2 && !skipCtor) {
            var objCtor = object.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
              result2 = false;
            }
          }
          stack["delete"](object);
          stack["delete"](other);
          return result2;
        }
        function flatRest(func) {
          return setToString(overRest(func, undefined2, flatten), func + "");
        }
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop2 : function(func) {
          return metaMap.get(func);
        };
        function getFuncName(func) {
          var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array.length : 0;
          while (length--) {
            var data = array[length], otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result2;
        }
        function getHolder(func) {
          var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
          return object.placeholder;
        }
        function getIteratee() {
          var result2 = lodash.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length ? result2(arguments[0], arguments[1]) : result2;
        }
        function getMapData(map2, key) {
          var data = map2.__data__;
          return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        function getMatchData(object) {
          var result2 = keys(object), length = result2.length;
          while (length--) {
            var key = result2[length], value = object[key];
            result2[length] = [key, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined2;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
          try {
            value[symToStringTag] = undefined2;
            var unmasked = true;
          } catch (e) {
          }
          var result2 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object2(object);
          return arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result2 = [];
          while (object) {
            arrayPush(result2, getSymbols(object));
            object = getPrototype(object);
          }
          return result2;
        };
        var getTag = baseGetTag;
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
          getTag = function(value) {
            var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start, end, transforms) {
          var index = -1, length = transforms.length;
          while (++index < length) {
            var data = transforms[index], size2 = data.size;
            switch (data.type) {
              case "drop":
                start += size2;
                break;
              case "dropRight":
                end -= size2;
                break;
              case "take":
                end = nativeMin(end, start + size2);
                break;
              case "takeRight":
                start = nativeMax(start, end - size2);
                break;
            }
          }
          return { "start": start, "end": end };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object, path, hasFunc) {
          path = castPath(path, object);
          var index = -1, length = path.length, result2 = false;
          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result2 = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result2 || ++index != length) {
            return result2;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        function initCloneArray(array) {
          var length = array.length, result2 = new array.constructor(length);
          if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
            result2.index = array.index;
            result2.input = array.input;
          }
          return result2;
        }
        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
              return new Ctor(+object);
            case dataViewTag:
              return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object);
            case regexpTag:
              return cloneRegExp(object);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length > 2 ? ", " : " ");
          return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
        }
        function isIterateeCall(value, index, object) {
          if (!isObject(object)) {
            return false;
          }
          var type = typeof index;
          if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
            return eq2(object[index], value);
          }
          return false;
        }
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type = typeof value;
          if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
        }
        function isKeyable(value) {
          var type = typeof value;
          return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func), other = lodash[funcName];
          if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
          };
        }
        function memoizeCapped(func) {
          var result2 = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
          var cache = result2.cache;
          return result2;
        }
        function mergeData(data, source) {
          var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn(object) {
          var result2 = [];
          if (object != null) {
            for (var key in Object2(object)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func, start, transform2) {
          start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
          return function() {
            var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array2(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform2(array);
            return apply(func, this, otherArgs);
          };
        }
        function parent(object, path) {
          return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
        function reorder(array, indexes) {
          var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
          while (length--) {
            var index = indexes[length];
            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
          }
          return array;
        }
        function safeGet(object, key) {
          if (key === "constructor" && typeof object[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object[key];
        }
        var setData = shortOut(baseSetData);
        var setTimeout2 = ctxSetTimeout || function(func, wait) {
          return root.setTimeout(func, wait);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + "";
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func) {
          var count = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined2, arguments);
          };
        }
        function shuffleSelf(array, size2) {
          var index = -1, length = array.length, lastIndex = length - 1;
          size2 = size2 === undefined2 ? length : size2;
          while (++index < size2) {
            var rand = baseRandom(index, lastIndex), value = array[rand];
            array[rand] = array[index];
            array[index] = value;
          }
          array.length = size2;
          return array;
        }
        var stringToPath = memoizeCapped(function(string) {
          var result2 = [];
          if (string.charCodeAt(0) === 46) {
            result2.push("");
          }
          string.replace(rePropName, function(match, number, quote, subString) {
            result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
          });
          return result2;
        });
        function toKey(value) {
          if (typeof value == "string" || isSymbol(value)) {
            return value;
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {
            }
            try {
              return func + "";
            } catch (e) {
            }
          }
          return "";
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result2.__actions__ = copyArray(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array, size2, guard) {
          if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
            size2 = 1;
          } else {
            size2 = nativeMax(toInteger(size2), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size2 < 1) {
            return [];
          }
          var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
          while (index < length) {
            result2[resIndex++] = baseSlice(array, index, index += size2);
          }
          return result2;
        }
        function compact(array) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1), array = arguments[0], index = length;
          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
        }
        var difference = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function(array, values2) {
          var iteratee2 = last(values2);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
        });
        var differenceWith = baseRest(function(array, values2) {
          var comparator = last(values2);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
        });
        function drop(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function dropRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function dropRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        function fill(array, value, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
            start = 0;
            end = length;
          }
          return baseFill(array, value, start, end);
        }
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        function findLastIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
        function flatten(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, 1) : [];
        }
        function flattenDeep(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, INFINITY) : [];
        }
        function flattenDepth(array, depth) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(array, depth);
        }
        function fromPairs(pairs) {
          var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
          while (++index < length) {
            var pair = pairs[index];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array) {
          return array && array.length ? array[0] : undefined2;
        }
        function indexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array, value, index);
        }
        function initial(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 0, -1) : [];
        }
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last(mapped)) {
            iteratee2 = undefined2;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
        });
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
        });
        function join(array, separator) {
          return array == null ? "" : nativeJoin.call(array, separator);
        }
        function last(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined2;
        }
        function lastIndexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
        }
        function nth(array, n) {
          return array && array.length ? baseNth(array, toInteger(n)) : undefined2;
        }
        var pull = baseRest(pullAll);
        function pullAll(array, values2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
        }
        function pullAllBy(array, values2, iteratee2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
        }
        function pullAllWith(array, values2, comparator) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
        }
        var pullAt = flatRest(function(array, indexes) {
          var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
          basePullAt(array, arrayMap(indexes, function(index) {
            return isIndex(index, length) ? +index : index;
          }).sort(compareAscending));
          return result2;
        });
        function remove(array, predicate) {
          var result2 = [];
          if (!(array && array.length)) {
            return result2;
          }
          var index = -1, indexes = [], length = array.length;
          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result2.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array, indexes);
          return result2;
        }
        function reverse(array) {
          return array == null ? array : nativeReverse.call(array);
        }
        function slice(array, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
            start = 0;
            end = length;
          } else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined2 ? length : toInteger(end);
          }
          return baseSlice(array, start, end);
        }
        function sortedIndex(array, value) {
          return baseSortedIndex(array, value);
        }
        function sortedIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value);
            if (index < length && eq2(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }
        function sortedLastIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
        }
        function sortedLastIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value, true) - 1;
            if (eq2(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedUniq(array) {
          return array && array.length ? baseSortedUniq(array) : [];
        }
        function sortedUniqBy(array, iteratee2) {
          return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function tail(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 1, length) : [];
        }
        function take(array, n, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function takeRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function takeRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        var union2 = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
        });
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
        });
        function uniq(array) {
          return array && array.length ? baseUniq(array) : [];
        }
        function uniqBy(array, iteratee2) {
          return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function uniqWith(array, comparator) {
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return array && array.length ? baseUniq(array, undefined2, comparator) : [];
        }
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length = 0;
          array = arrayFilter(array, function(group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index) {
            return arrayMap(array, baseProperty(index));
          });
        }
        function unzipWith(array, iteratee2) {
          if (!(array && array.length)) {
            return [];
          }
          var result2 = unzip(array);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function(group) {
            return apply(iteratee2, undefined2, group);
          });
        }
        var without = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
        });
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
        });
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props, values2) {
          return baseZipObject(props || [], values2 || [], assignValue);
        }
        function zipObjectDeep(props, values2) {
          return baseZipObject(props || [], values2 || [], baseSet);
        }
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
          iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
          return unzipWith(arrays, iteratee2);
        });
        function chain(value) {
          var result2 = lodash(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
            return baseAt(object, paths);
          };
          if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            "func": thru,
            "args": [interceptor],
            "thisArg": undefined2
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array) {
            if (length && !array.length) {
              array.push(undefined2);
            }
            return array;
          });
        });
        function wrapperChain() {
          return chain(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined2) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
          return { "done": done, "value": value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2, parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone2 = wrapperClone(parent2);
            clone2.__index__ = 0;
            clone2.__values__ = undefined2;
            if (result2) {
              previous.__wrapped__ = clone2;
            } else {
              result2 = clone2;
            }
            var previous = clone2;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              "func": thru,
              "args": [reverse],
              "thisArg": undefined2
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue(result2, key, 1);
          }
        });
        function every(collection, predicate, guard) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        function filter(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), INFINITY);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(map(collection, iteratee2), depth);
        }
        function forEach(collection, iteratee2) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func = isArray(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue(result2, key, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString2(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function(collection, path, args) {
          var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value) {
            result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
          });
          return result2;
        });
        var keyBy = createAggregator(function(result2, value, key) {
          baseAssignValue(result2, key, value);
        });
        function map(collection, iteratee2) {
          var func = isArray(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined2 : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function(result2, value, key) {
          result2[key ? 0 : 1].push(value);
        }, function() {
          return [[], []];
        });
        function reduce(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func = isArray(collection) ? arraySample : baseSample;
          return func(collection);
        }
        function sampleSize(collection, n, guard) {
          if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          var func = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n);
        }
        function shuffle(collection) {
          var func = isArray(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString2(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some(collection, predicate, guard) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now = ctxNow || function() {
          return root.Date.now();
        };
        function after(n, func) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n, guard) {
          n = guard ? undefined2 : n;
          n = func && n == null ? func.length : n;
          return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n);
        }
        function before(n, func) {
          var result2;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n > 0) {
              result2 = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined2;
            }
            return result2;
          };
        }
        var bind = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function(object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce(func, wait, options) {
          var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject(options)) {
            leading = !!options.leading;
            maxing = "maxWait" in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = undefined2;
            lastInvokeTime = time;
            result2 = func.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout2(timerExpired, wait);
            return leading ? invokeFunc(time) : result2;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
            return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
            return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout2(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined2;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined2;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined2) {
              clearTimeout(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined2;
          }
          function flush() {
            return timerId === undefined2 ? result2 : trailingEdge(now());
          }
          function debounced() {
            var time = now(), isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined2) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout(timerId);
                timerId = setTimeout2(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined2) {
              timerId = setTimeout2(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var defer = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });
        var delay = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize(func, resolver) {
          if (typeof func != "function" || resolver != null && typeof resolver != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result2 = func.apply(this, args);
            memoized.cache = cache.set(key, result2) || cache;
            return result2;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once(func) {
          return before(2, func);
        }
        var overArgs = castRest(function(func, transforms) {
          transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index = -1, length = nativeMin(args.length, funcsLength);
            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func, this, args);
          });
        });
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
        });
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
        });
        var rearg = flatRest(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
        });
        function rest(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start === undefined2 ? start : toInteger(start);
          return baseRest(func, start);
        }
        function spread(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function(args) {
            var array = args[start], otherArgs = castSlice(args, 0, start);
            if (array) {
              arrayPush(otherArgs, array);
            }
            return apply(func, this, otherArgs);
          });
        }
        function throttle(func, wait, options) {
          var leading = true, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          if (isObject(options)) {
            leading = "leading" in options ? !!options.leading : leading;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          return debounce(func, wait, {
            "leading": leading,
            "maxWait": wait,
            "trailing": trailing
          });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys(source));
        }
        function eq2(value, other) {
          return value === other || value !== value && other !== other;
        }
        var gt2 = createRelationalOperation(baseGt);
        var gte2 = createRelationalOperation(function(value, other) {
          return value >= other;
        });
        var isArguments = baseIsArguments(/* @__PURE__ */ function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        var isArray = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean(value) {
          return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          var result2 = customizer ? customizer(value, other) : undefined2;
          return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
        }
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
        }
        function isFinite2(value) {
          return typeof value == "number" && nativeIsFinite(value);
        }
        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        function isInteger(value) {
          return typeof value == "number" && value == toInteger(value);
        }
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject(value) {
          var type = typeof value;
          return value != null && (type == "object" || type == "function");
        }
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object, source) {
          return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        function isNaN2(value) {
          return isNumber(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull2(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber(value) {
          return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString2(value) {
          return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol(value) {
          return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined(value) {
          return value === undefined2;
        }
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt2 = createRelationalOperation(baseLt);
        var lte2 = createRelationalOperation(function(value, other) {
          return value <= other;
        });
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString2(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
          return func(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result2 = toFinite(value), remainder = result2 % 1;
          return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        function toString(value) {
          return value == null ? "" : baseToString(value);
        }
        var assign = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });
        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });
        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keys(source), object, customizer);
        });
        var at = flatRest(baseAt);
        function create(prototype, properties) {
          var result2 = baseCreate(prototype);
          return properties == null ? result2 : baseAssign(result2, properties);
        }
        var defaults = baseRest(function(object, sources) {
          object = Object2(object);
          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined2;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];
              if (value === undefined2 || eq2(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                object[key] = source[key];
              }
            }
          }
          return object;
        });
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined2, customDefaultsMerge);
          return apply(mergeWith, undefined2, args);
        });
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object, iteratee2) {
          return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object, iteratee2) {
          return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object, iteratee2) {
          return object && baseForOwn(object, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object, iteratee2) {
          return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
        }
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        function get5(object, path, defaultValue) {
          var result2 = object == null ? undefined2 : baseGet(object, path);
          return result2 === undefined2 ? defaultValue : result2;
        }
        function has(object, path) {
          return object != null && hasPath(object, path, baseHas);
        }
        function hasIn(object, path) {
          return object != null && hasPath(object, path, baseHasIn);
        }
        var invert = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          result2[value] = key;
        }, constant(identity));
        var invertBy = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        function mapKeys(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, iteratee2(value, key, object2), value);
          });
          return result2;
        }
        function mapValues(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, key, iteratee2(value, key, object2));
          });
          return result2;
        }
        var merge = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });
        var omit = flatRest(function(object, paths) {
          var result2 = {};
          if (object == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path) {
            path = castPath(path, object);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object, getAllKeysIn(object), result2);
          if (isDeep) {
            result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result2, paths[length]);
          }
          return result2;
        });
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function(value, path) {
            return predicate(value, path[0]);
          });
        }
        function result(object, path, defaultValue) {
          path = castPath(path, object);
          var index = -1, length = path.length;
          if (!length) {
            length = 1;
            object = undefined2;
          }
          while (++index < length) {
            var value = object == null ? undefined2 : object[toKey(path[index])];
            if (value === undefined2) {
              index = length;
              value = defaultValue;
            }
            object = isFunction(value) ? value.call(object) : value;
          }
          return object;
        }
        function set(object, path, value) {
          return object == null ? object : baseSet(object, path, value);
        }
        function setWith(object, path, value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseSet(object, path, value, customizer);
        }
        var toPairs = createToPairs(keys);
        var toPairsIn = createToPairs(keysIn);
        function transform(object, iteratee2, accumulator) {
          var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject(object)) {
              accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
            return iteratee2(accumulator, value, index, object2);
          });
          return accumulator;
        }
        function unset(object, path) {
          return object == null ? true : baseUnset(object, path);
        }
        function update(object, path, updater) {
          return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
        function updateWith(object, path, updater, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }
        function clamp(number, lower, upper) {
          if (upper === undefined2) {
            upper = lower;
            lower = undefined2;
          }
          if (upper !== undefined2) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined2) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number), lower, upper);
        }
        function inRange(number, start, end) {
          start = toFinite(start);
          if (end === undefined2) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number = toNumber(number);
          return baseInRange(number, start, end);
        }
        function random(lower, upper, floating) {
          if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined2;
          }
          if (floating === undefined2) {
            if (typeof upper == "boolean") {
              floating = upper;
              upper = undefined2;
            } else if (typeof lower == "boolean") {
              floating = lower;
              lower = undefined2;
            }
          }
          if (lower === undefined2 && upper === undefined2) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite(lower);
            if (upper === undefined2) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
          }
          return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function(result2, word, index) {
          word = word.toLowerCase();
          return result2 + (index ? capitalize(word) : word);
        });
        function capitalize(string) {
          return upperFirst(toString(string).toLowerCase());
        }
        function deburr(string) {
          string = toString(string);
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        function endsWith(string, target, position) {
          string = toString(string);
          target = baseToString(target);
          var length = string.length;
          position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
          var end = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end) == target;
        }
        function escape2(string) {
          string = toString(string);
          return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        function escapeRegExp(string) {
          string = toString(string);
          return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
        }
        var kebabCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "-" : "") + word.toLowerCase();
        });
        var lowerCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst("toLowerCase");
        function pad(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        function padStart(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        function parseInt2(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
        }
        function repeat(string, n, guard) {
          if (guard ? isIterateeCall(string, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          return baseRepeat(toString(string), n);
        }
        function replace2() {
          var args = arguments, string = toString(args[0]);
          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "_" : "") + word.toLowerCase();
        });
        function split(string, separator, limit) {
          if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
            separator = limit = undefined2;
          }
          limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString(string);
          if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }
        var startCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + upperFirst(word);
        });
        function startsWith(string, target, position) {
          string = toString(string);
          position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }
        function template(string, options, guard) {
          var settings = lodash.templateSettings;
          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined2;
          }
          string = toString(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp2(
            (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
            "g"
          );
          var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
          string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset + match.length;
            return match;
          });
          source += "';\n";
          var variable = hasOwnProperty.call(options, "variable") && options.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result2 = attempt(function() {
            return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
          });
          result2.source = source;
          if (isError(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString(value).toLowerCase();
        }
        function toUpper(value) {
          return toString(value).toUpperCase();
        }
        function trim(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return baseTrim(string);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start, end).join("");
        }
        function trimEnd(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.slice(0, trimmedEndIndex(string) + 1);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end).join("");
        }
        function trimStart(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.replace(reTrimStart, "");
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start).join("");
        }
        function truncate(string, options) {
          var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
          if (isObject(options)) {
            var separator = "separator" in options ? options.separator : separator;
            length = "length" in options ? toInteger(options.length) : length;
            omission = "omission" in options ? baseToString(options.omission) : omission;
          }
          string = toString(string);
          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
          if (separator === undefined2) {
            return result2 + omission;
          }
          if (strSymbols) {
            end += result2.length - end;
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match, substring = result2;
              if (!separator.global) {
                separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
              }
              separator.lastIndex = 0;
              while (match = separator.exec(substring)) {
                var newEnd = match.index;
              }
              result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index = result2.lastIndexOf(separator);
            if (index > -1) {
              result2 = result2.slice(0, index);
            }
          }
          return result2 + omission;
        }
        function unescape(string) {
          string = toString(string);
          return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        var upperCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toUpperCase();
        });
        var upperFirst = createCaseFirst("toUpperCase");
        function words(string, pattern, guard) {
          string = toString(string);
          pattern = guard ? undefined2 : pattern;
          if (pattern === undefined2) {
            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
          }
          return string.match(pattern) || [];
        }
        var attempt = baseRest(function(func, args) {
          try {
            return apply(func, undefined2, args);
          } catch (e) {
            return isError(e) ? e : new Error2(e);
          }
        });
        var bindAll = flatRest(function(object, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object, key, bind(object[key], object));
          });
          return object;
        });
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
          return baseRest(function(args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function() {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity(value) {
          return value;
        }
        function iteratee(func) {
          return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method = baseRest(function(path, args) {
          return function(object) {
            return baseInvoke(object, path, args);
          };
        });
        var methodOf = baseRest(function(object, args) {
          return function(path) {
            return baseInvoke(object, path, args);
          };
        });
        function mixin(object, source, options) {
          var props = keys(source), methodNames = baseFunctions(source, props);
          if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain2 || chainAll) {
                  var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                  actions.push({ "func": func, "args": arguments, "thisArg": object });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });
          return object;
        }
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }
        function noop2() {
        }
        function nthArg(n) {
          n = toInteger(n);
          return baseRest(function(args) {
            return baseNth(args, n);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path) {
          return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        function propertyOf(object) {
          return function(path) {
            return object == null ? undefined2 : baseGet(object, path);
          };
        }
        var range = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return "";
        }
        function stubTrue() {
          return true;
        }
        function times(n, iteratee2) {
          n = toInteger(n);
          if (n < 1 || n > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length, iteratee2);
          while (++index < n) {
            iteratee2(index);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }
        function uniqueId(prefix) {
          var id = ++idCounter;
          return toString(prefix) + id;
        }
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound("ceil");
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor = createRound("floor");
        function max(array) {
          return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
        }
        function maxBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
        }
        function mean(array) {
          return baseMean(array, identity);
        }
        function meanBy(array, iteratee2) {
          return baseMean(array, getIteratee(iteratee2, 2));
        }
        function min(array) {
          return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
        }
        function minBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
        }
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round = createRound("round");
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum(array) {
          return array && array.length ? baseSum(array, identity) : 0;
        }
        function sumBy(array, iteratee2) {
          return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
        }
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union2;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin(lodash, lodash);
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq2;
        lodash.escape = escape2;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get5;
        lodash.gt = gt2;
        lodash.gte = gte2;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite2;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN2;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull2;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString2;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt2;
        lodash.lte = lte2;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop2;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt2;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace2;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext2;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function() {
          var source = {};
          baseForOwn(lodash, function(func, methodName) {
            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }(), { "chain": false });
        lodash.VERSION = VERSION;
        arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
          lodash[methodName].placeholder = lodash;
        });
        arrayEach(["drop", "take"], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n) {
            n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
            var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
            } else {
              result2.__views__.push({
                "size": nativeMin(n, MAX_ARRAY_LENGTH),
                "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + "Right"] = function(n) {
            return this.reverse()[methodName](n).reverse();
          };
        });
        arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
          var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function(iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              "iteratee": getIteratee(iteratee2, 3),
              "type": type
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(["head", "last"], function(methodName, index) {
          var takeName = "take" + (index ? "Right" : "");
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(["initial", "tail"], function(methodName, index) {
          var dropName = "drop" + (index ? "" : "Right");
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity);
        };
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
          if (typeof path == "function") {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path, args);
          });
        });
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
          start = toInteger(start);
          var result2 = this;
          if (result2.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result2);
          }
          if (start < 0) {
            result2 = result2.takeRight(-start);
          } else if (start) {
            result2 = result2.drop(start);
          }
          if (end !== undefined2) {
            end = toInteger(end);
            result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function() {
            var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
            var interceptor = function(value2) {
              var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func.apply(value, args);
              result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
          };
        });
        arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
          var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
          lodash.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function(value2) {
              return func.apply(isArray(value2) ? value2 : [], args);
            });
          };
        });
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + "";
            if (!hasOwnProperty.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ "name": methodName, "func": lodashFunc });
          }
        });
        realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
          "name": "wrapper",
          "func": undefined2
        }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      };
      var _ = runInContext();
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        root._ = _;
        define(function() {
          return _;
        });
      } else if (freeModule) {
        (freeModule.exports = _)._ = _;
        freeExports._ = _;
      } else {
        root._ = _;
      }
    }).call(exports);
  }
});

// dist/$server_build/chunks/pages/__CjObBNHd.mjs
var CjObBNHd_exports = {};
__export(CjObBNHd_exports, {
  $: () => $$CardNews,
  _: () => ____newspage_
});
function timeAgo(date) {
  const seconds = Math.floor(((/* @__PURE__ */ new Date()).getTime() - date.getTime()) / 1e3);
  const intervals = {
    \u0433\u043E\u0434\u0438\u043D\u0430: { int: 31536e3, ext: "\u0433\u043E\u0434\u0438\u043D\u0438" },
    \u043C\u0435\u0441\u0435\u0446: { int: 2592e3, ext: "\u043C\u0435\u0441\u0435\u0446\u0430" },
    \u0441\u0435\u0434\u043C\u0438\u0446\u0430: { int: 604800, ext: "\u0441\u0435\u0434\u043C\u0438\u0446\u0438" },
    \u0434\u0435\u043D: { int: 86400, ext: "\u0434\u043D\u0438" },
    \u0447\u0430\u0441: { int: 3600, ext: "\u0447\u0430\u0441\u0430" },
    \u043C\u0438\u043D\u0443\u0442\u0430: { int: 60, ext: "\u043C\u0438\u043D\u0443\u0442\u0438" },
    \u0441\u0435\u043A\u0443\u043D\u0434\u0430: { int: 1, ext: "\u0441\u0435\u043A\u0443\u043D\u0434\u0438" }
  };
  let counter;
  for (const interval in intervals) {
    counter = Math.floor(seconds / intervals[interval].int);
    if (counter > 0) {
      return `\u043F\u0440\u0435\u0434\u0438 ${counter === 1 ? "" : counter} ${counter === 1 ? interval : intervals[interval].ext}`;
    }
  }
  return "";
}
var $$Astro$15, $$CardNews, $$Astro6, prerender7, $$3, $$file5, $$url5, ____newspage_;
var init_CjObBNHd = __esm({
  "dist/$server_build/chunks/pages/__CjObBNHd.mjs"() {
    "use strict";
    init_astro_CZ31vzIS();
    init_colors();
    init_CgdEe831();
    init_RxTcdYg8();
    init_drizzle_orm();
    $$Astro$15 = createAstro();
    $$CardNews = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro$15, $$props, $$slots);
      Astro2.self = $$CardNews;
      const { title, date, nid } = Astro2.props;
      return renderTemplate`${maybeRenderHead()}<a class="cursor-point md:w-1/3 lg:w-1/4 overflow-hidden newswrap" style="height: 180px;"${addAttribute(`/news/i/${slugify(title)}/${nid}`, "href")} rel="prefetch"> <div class="flex"> <div style="width:130px; height: 180px;" class="relative overflow-hidden"> <img${addAttribute(title, "alt")}${addAttribute("https://kloun.lol/api/img/" + nid + ".jpg", "src")} loading="lazy" class="absolute top-0 left-0 w-full h-full object-cover"> </div> <div class="flex flex-col justify-center w-full"> <h3 class="px-2 font-bold text-slate-300 dark:text-gray-800"> ${title} </h3> <div class="pl-2 text-xs">${timeAgo(new Date(date))}</div> </div> </div> </a>`;
    }, "/home/runner/work/monext/monext/apps/kloun/src/components/CardNews.astro", void 0);
    $$Astro6 = createAstro();
    prerender7 = false;
    $$3 = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro6, $$props, $$slots);
      Astro2.self = $$3;
      const { newspage } = Astro2.params;
      const pagenum = newspage ? Number(newspage) : 1;
      const skip = pagenum * 30 - 30;
      const respxx = db2.select({ id: newsbg.id, nid: newsbg.nid, title: newsbg.title, image: newsbg.image, date: newsbg.date }).from(newsbg).limit(30).offset(skip).where(eq(newsbg.cat, "NewsBG")).orderBy(desc(newsbg.id));
      const countx = db2.select({ count: agregator.count }).from(agregator).where(eq(agregator.cat, "NewsBG_newsbg"));
      const respx = await Promise.all([respxx, countx]).then((values) => {
        return { news: values[0], count: values[1][0].count };
      });
      return renderTemplate`${renderComponent($$result, "Layout", $$Layout, { "title": `\u041D\u043E\u0432\u0438\u043D\u0438 \u043E\u0442 \u043D\u0430 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430 ${pagenum}`, "description": `\u041D\u043E\u0432\u0438\u043D\u0438  `, "hideFooter": true }, { "default": ($$result2) => renderTemplate` ${maybeRenderHead()}<div class="flex flex-wrap gap-3"> ${respx.news.map(
        ({
          nid,
          title,
          date,
          image,
          id
        }) => renderTemplate`${renderComponent($$result2, "CardNews", $$CardNews, { "title": title, "img": image, "date": date, "nid": nid, "key": nid, "id": id })}`
      )} </div> ${renderComponent($$result2, "Pagination", $$Pagination, { "items": respx.count, "currentPage": pagenum, "pageSize": 30, "prefix": "/news/" })} ` })}`;
    }, "/home/runner/work/monext/monext/apps/kloun/src/pages/news/[...newspage].astro", void 0);
    $$file5 = "/home/runner/work/monext/monext/apps/kloun/src/pages/news/[...newspage].astro";
    $$url5 = "/news/[...newspage]";
    ____newspage_ = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      default: $$3,
      file: $$file5,
      prerender: prerender7,
      url: $$url5
    }, Symbol.toStringTag, { value: "Module" }));
  }
});

// dist/$server_build/chunks/pages/_newsid__Dp-Q_cV2.mjs
var newsid_Dp_Q_cV2_exports = {};
__export(newsid_Dp_Q_cV2_exports, {
  default: () => $$newsid,
  file: () => $$file6,
  prerender: () => prerender8,
  url: () => $$url6
});
var import_lodash, $$Astro7, prerender8, $$newsid, $$file6, $$url6;
var init_newsid_Dp_Q_cV2 = __esm({
  "dist/$server_build/chunks/pages/_newsid__Dp-Q_cV2.mjs"() {
    "use strict";
    init_astro_CZ31vzIS();
    init_colors();
    import_lodash = __toESM(require_lodash(), 1);
    init_CgdEe831();
    init_CjObBNHd();
    init_RxTcdYg8();
    init_drizzle_orm();
    $$Astro7 = createAstro();
    prerender8 = false;
    $$newsid = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro7, $$props, $$slots);
      Astro2.self = $$newsid;
      const { uniqBy } = import_lodash.default;
      function countAlphanumeric(str) {
        const regex = /[a-zA-Z0-9а-яА-Я]/g;
        const matches = str.match(regex);
        return matches ? matches.length : 0;
      }
      const { newsid } = Astro2.params;
      const itemx = await db2.select({ title: newsbg.title, image: newsbg.image, html: newsbg.html, date: newsbg.date, id: newsbg.id }).from(newsbg).limit(1).where(and(
        eq(newsbg.cat, `NewsBG`),
        eq(newsbg.nid, newsid)
      ));
      const { title, date, html, id } = itemx[0];
      const itemz = await db2.select({ id: newsbg.id, title: newsbg.title, image: newsbg.image, date: newsbg.date, nid: newsbg.nid }).from(newsbg).limit(20).where(and(
        eq(newsbg.cat, `NewsBG`),
        lt(newsbg.id, id)
      )).orderBy(desc(newsbg.id));
      function getLastP(arrz) {
        const arr = arrz.map((x, i) => {
          if (typeof x === "string") {
            return { type: "p", content: x, i };
          } else {
            return { ...x, i };
          }
        });
        const emptylines = arr.filter((x) => countAlphanumeric(x.content) !== 0);
        const lastPElemIndex = emptylines.reduce((acc, curr, index) => {
          if (curr.type === "p") {
            acc = index;
          }
          return acc;
        }, 0);
        const filteredArr = arr.slice(0, lastPElemIndex + 1);
        const removeNoImages = filteredArr.filter(
          (x) => x.type === "p" || x.type === "img" && x.content.includes("http")
        );
        const arrx = uniqBy(removeNoImages, function(e) {
          return e.content;
        });
        return arrx;
      }
      function formatDate(date2) {
        const options = {
          year: "numeric",
          month: "long",
          day: "numeric",
          hour: "numeric",
          minute: "numeric",
          hour12: false
        };
        return date2.toLocaleString("bg-BG", options);
      }
      function getRandomDate(year) {
        const month = Math.floor(Math.random() * 12) + 1;
        const day = Math.floor(Math.random() * 31) + 1;
        const hour = Math.floor(Math.random() * 14) + 9;
        return new Date(year, month - 1, day, hour);
      }
      return renderTemplate`${renderComponent($$result, "Layout", $$Layout, { "title": title, "description": title, "image": "https://imgnews.kloun.lol/api/img/" + newsid + ".jpg", "hideFooter": true }, { "default": ($$result2) => renderTemplate`${formatDate(new Date(date ? date : getRandomDate(2021)))}${maybeRenderHead()}<h1 class="font-bold sm:text-2xl md:text-4xl">${title}</h1> <div class="flex justify-center items-center"> <div class="p-1 rounded-lg bg-gradient-to-r from-fuchsia-500 to-cyan-500"> <img${addAttribute("/api/img/" + newsid + ".jpg", "src")} class="rounded-md" loading="lazy"${addAttribute(title, "alt")}> </div> </div> <div class="mb-6 items-center justify-center"> ${renderComponent($$result2, "RudSense", $$RudSense, { "type": "inarticle" })} <article class="leading-relaxed" id="article"> ${getLastP(html).map(
        ({
          type,
          content,
          i
        }) => type === "p" ? renderTemplate`<p class="text-lg"> ${content}${" "} ${(i === 3 || i === 9 || i === 12) && renderTemplate`${renderComponent($$result2, "RudSense", $$RudSense, { "type": "inarticle" })}`} </p>` : renderTemplate`<div class="flex justify-center items-center"> <div class="p-1 rounded-lg bg-gradient-to-r from-fuchsia-500 to-cyan-500"> <img${addAttribute(
          "https://imgnews.kloun.lol/api/img/" + newsid + "--" + i + ".jpg",
          "src"
        )} class="rounded-md" loading="lazy"> </div> ${(i === 3 || i === 9 || i === 12) && renderTemplate`${renderComponent($$result2, "RudSense", $$RudSense, { "type": "inarticle" })}`} </div>`
      )} </article> <div class="clear-both"></div> ${renderComponent($$result2, "RudSense", $$RudSense, { "type": "inarticle", "main": true })} <div class="clear-both"></div> </div> <div class="flex flex-wrap gap-3"> ${itemz.map(({ nid, title: title2, date: date2, image, id: id2 }) => renderTemplate`${renderComponent($$result2, "CardNews", $$CardNews, { "title": title2, "img": image, "id": id2, "date": date2 || "", "key": nid || "", "nid": nid || "" })}`)} </div>  ` })}`;
    }, "/home/runner/work/monext/monext/apps/kloun/src/pages/news/i/[slug]/[newsid].astro", void 0);
    $$file6 = "/home/runner/work/monext/monext/apps/kloun/src/pages/news/i/[slug]/[newsid].astro";
    $$url6 = "/news/i/[slug]/[newsid]";
  }
});

// dist/$server_build/chunks/_newsid__BcDxRY_R.mjs
var newsid_BcDxRY_R_exports = {};
__export(newsid_BcDxRY_R_exports, {
  page: () => page8,
  renderers: () => renderers
});
var page8;
var init_newsid_BcDxRY_R = __esm({
  "dist/$server_build/chunks/_newsid__BcDxRY_R.mjs"() {
    "use strict";
    init_renderers();
    page8 = () => Promise.resolve().then(() => (init_newsid_Dp_Q_cV2(), newsid_Dp_Q_cV2_exports));
  }
});

// dist/$server_build/chunks/pages/_id__C11Dlzq7.mjs
var id_C11Dlzq7_exports = {};
__export(id_C11Dlzq7_exports, {
  default: () => $$id,
  file: () => $$file7,
  prerender: () => prerender9,
  url: () => $$url7
});
var queries, gql, $$Astro8, prerender9, $$id, $$file7, $$url7;
var init_id_C11Dlzq7 = __esm({
  "dist/$server_build/chunks/pages/_id__C11Dlzq7.mjs"() {
    "use strict";
    init_astro_CZ31vzIS();
    init_colors();
    queries = {
      questions: `
 query MyQuery($limit: Int = 10) {
   qlatest(limit: $limit) {
     text
     genid
   }
   q_qtags(order_by: {count: desc},limit: 50 ) {
     count
     hashtag
   }
 }
  `,
      questionssql: `select * from qlatest order by id desc limit 30;`,
      thread: `
query MyQuery($_eq: String = "b82f99b1") {
        q: questions(where: {genid: {_eq: $_eq}, type: {_eq: "q"}}) {
        text
        uid
      }
    thread:questions(where: {genid: {_eq: $_eq}, type: {_eq: "a"}}  order_by: {id: desc}) {
      text
      genid
      uid
      type
      id
    }
     random: qlatest(where: {genid: {_lt: $_eq}}, limit: 10) {
        genid
        text
      }
  }
  `,
      tags: `
  query MyQuery($_eq: String = "SafetyFirst") {
    q_qtags(  where: {hashtag: {_eq: $_eq}}) {
      count
      hashtag
      rows_with_tag
    }
  }
`,
      tagquestions: `
  query MyQuery($_in: [String!] = ["02cda840", "01e4a346"]) {
  questions(where: {genid: {_in: $_in}, type: {_eq: "q"}}) {
  genid
  text
}
}`,
      specifictags: `
query MyQuery2($_in: [String!]) {
    q_qtags(where: {hashtag: {_in: $_in}}) {
      count
      hashtag
   
    }
  }
`,
      specificids: `
query MyQuery($_in: [String!] = ["84f3861e"]) {
    questions(where: {genid: {_in: $_in}, type: {_eq: "q"}}) {
      text
      genid
    }
    answers:questions(where: {genid: {_in: $_in}, type: {_eq: "a"}}) {
      text
      genid
    }
  }
`,
      specificidsthreads: `
query MyQuery($_in: [String!] = ["84f3861e"]) {
  questions(where: {genid: {_in: $_in}, type: {_eq: "q"}}) {
    text
    genid
  }
}
`
    };
    gql = async (queryid, variables) => {
      return new Promise((resolve) => {
        fetch("https://rudix.hasura.app/v1/graphql", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            query: queryid.length < 20 ? queries[queryid] : queryid,
            variables
          })
        }).then((res) => res.json()).then((result) => {
          resolve(result.errors || result.data);
        });
      });
    };
    $$Astro8 = createAstro();
    prerender9 = false;
    $$id = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro8, $$props, $$slots);
      Astro2.self = $$id;
      const { id } = Astro2.params;
      const data = await gql(`query MyQuery($_eq: String = "01H84F7XPSG1ESNF20HDTRFSCC") {
	  newsbg_by_pk(nid: $_eq) {
	    html
	    title
	    cat
	    id
	    nid
	  }
	}
`, { _eq: id });
      return renderTemplate`<head><meta charset="UTF-8">${renderHead()}</head> <div> <h1 class="font-bold sm:text-2xl md:text-4xl" id="title">${data.newsbg_by_pk.title}</h1> <article class="leading-relaxed" id="article"> ${data.newsbg_by_pk.html && data.newsbg_by_pk.html.map(
        ({ type, content }) => type === "p" ? renderTemplate`<p>${content}</p>` : renderTemplate`<img${addAttribute(content, "src")}>`
      )} </article> ${data.newsbg_by_pk.cat} <div id="emp">${data.newsbg_by_pk.cat === "NewsBG" ? "\u0438\u043C\u043F\u0435\u0440\u0430\u0442\u043E\u0440" : "emperor"}</div> </div>`;
    }, "/home/runner/work/monext/monext/apps/kloun/src/pages/news/tr/[id].astro", void 0);
    $$file7 = "/home/runner/work/monext/monext/apps/kloun/src/pages/news/tr/[id].astro";
    $$url7 = "/news/tr/[id]";
  }
});

// dist/$server_build/chunks/_id__CKOC9N_T.mjs
var id_CKOC9N_T_exports = {};
__export(id_CKOC9N_T_exports, {
  page: () => page9,
  renderers: () => renderers
});
var page9;
var init_id_CKOC9N_T = __esm({
  "dist/$server_build/chunks/_id__CKOC9N_T.mjs"() {
    "use strict";
    init_renderers();
    page9 = () => Promise.resolve().then(() => (init_id_C11Dlzq7(), id_C11Dlzq7_exports));
  }
});

// dist/$server_build/chunks/_.._B8o-o42o.mjs
var B8o_o42o_exports = {};
__export(B8o_o42o_exports, {
  page: () => page10,
  renderers: () => renderers
});
var page10;
var init_B8o_o42o = __esm({
  "dist/$server_build/chunks/_.._B8o-o42o.mjs"() {
    "use strict";
    init_renderers();
    page10 = () => Promise.resolve().then(() => (init_CjObBNHd(), CjObBNHd_exports)).then((n) => n._);
  }
});

// dist/$server_build/chunks/pages/about_DS1AyclJ.mjs
var about_DS1AyclJ_exports = {};
__export(about_DS1AyclJ_exports, {
  default: () => $$About,
  file: () => $$file8,
  prerender: () => prerender10,
  url: () => $$url8
});
var $$Astro9, prerender10, $$About, $$file8, $$url8;
var init_about_DS1AyclJ = __esm({
  "dist/$server_build/chunks/pages/about_DS1AyclJ.mjs"() {
    "use strict";
    init_astro_CZ31vzIS();
    init_colors();
    init_RxTcdYg8();
    $$Astro9 = createAstro();
    prerender10 = false;
    $$About = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro9, $$props, $$slots);
      Astro2.self = $$About;
      return renderTemplate`${renderComponent($$result, "Layout", $$Layout, { "title": "", "description": "" }, { "default": ($$result2) => renderTemplate` ${maybeRenderHead()}<div class="mainx justify-start"> <p>
kloun.lol e сайт за безплатни обяви в категории: Недвижими имоти,
			Автомобили и авточасти, Eлектроника, Мода, За бебето и детето, Дом и
			градина, Свободно време, Домашни любимци, Услуги, Работа, Екскурзии
			и почивки. В езикТок можете да намерите интересни обяви за продажба
			на почти всичко, което търсите. Свържете се лесно и бързо с
			продавача и намерете атрактивни предложения на по-ниски цени
			отколкото в магазина. Ако искате да продадете нещо, добавете бързо,
			лесно и безплатно обява в езикТок. Купувайте и продавайте с езикТок!
</p> ${(/* @__PURE__ */ new Date()).toISOString()} </div> ` })}`;
    }, "/home/runner/work/monext/monext/apps/kloun/src/pages/other/about.astro", void 0);
    $$file8 = "/home/runner/work/monext/monext/apps/kloun/src/pages/other/about.astro";
    $$url8 = "/other/about";
  }
});

// dist/$server_build/chunks/about_DVO9HVTu.mjs
var about_DVO9HVTu_exports = {};
__export(about_DVO9HVTu_exports, {
  page: () => page11,
  renderers: () => renderers
});
var page11;
var init_about_DVO9HVTu = __esm({
  "dist/$server_build/chunks/about_DVO9HVTu.mjs"() {
    "use strict";
    init_renderers();
    page11 = () => Promise.resolve().then(() => (init_about_DS1AyclJ(), about_DS1AyclJ_exports));
  }
});

// dist/$server_build/chunks/pages/contact_rHzsJBOS.mjs
var contact_rHzsJBOS_exports = {};
__export(contact_rHzsJBOS_exports, {
  default: () => $$Contact,
  file: () => $$file9,
  prerender: () => prerender11,
  url: () => $$url9
});
var $$Astro10, prerender11, $$Contact, $$file9, $$url9;
var init_contact_rHzsJBOS = __esm({
  "dist/$server_build/chunks/pages/contact_rHzsJBOS.mjs"() {
    "use strict";
    init_astro_CZ31vzIS();
    init_colors();
    init_RxTcdYg8();
    $$Astro10 = createAstro();
    prerender11 = false;
    $$Contact = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro10, $$props, $$slots);
      Astro2.self = $$Contact;
      return renderTemplate`${renderComponent($$result, "Layout", $$Layout, { "title": "", "description": "" }, { "default": ($$result2) => renderTemplate` ${maybeRenderHead()}<div> <h1 class="text-center text-3xl font-thin">Contact</h1> <div class="mt-10 flex flex-row items-center justify-center"> <div class="mb-8 w-full px-3 lg:mb-0 lg:w-1/5"> <p class="mb-2 font-bold lg:mb-4 lg:text-lg">Office</p> <p class="lg:text-lg">14 Parijka Komuna, Varna, Bulgaria</p> </div> <div class="mb-8 w-full px-3 lg:mb-0 lg:w-1/5"> <p class="mb-2 font-bold lg:mb-4 lg:text-lg">Contacts</p> <p class="lg:text-lg">(+359) 876 358 115 info@rudixops.com</p> </div> </div> </div> ` })}`;
    }, "/home/runner/work/monext/monext/apps/kloun/src/pages/other/contact.astro", void 0);
    $$file9 = "/home/runner/work/monext/monext/apps/kloun/src/pages/other/contact.astro";
    $$url9 = "/other/contact";
  }
});

// dist/$server_build/chunks/contact_Bbre7H9Z.mjs
var contact_Bbre7H9Z_exports = {};
__export(contact_Bbre7H9Z_exports, {
  page: () => page12,
  renderers: () => renderers
});
var page12;
var init_contact_Bbre7H9Z = __esm({
  "dist/$server_build/chunks/contact_Bbre7H9Z.mjs"() {
    "use strict";
    init_renderers();
    page12 = () => Promise.resolve().then(() => (init_contact_rHzsJBOS(), contact_rHzsJBOS_exports));
  }
});

// dist/$server_build/chunks/pages/privacy_LB-knq4L.mjs
var privacy_LB_knq4L_exports = {};
__export(privacy_LB_knq4L_exports, {
  default: () => $$Privacy,
  file: () => $$file10,
  prerender: () => prerender12,
  url: () => $$url10
});
var $$Astro11, prerender12, $$Privacy, $$file10, $$url10;
var init_privacy_LB_knq4L = __esm({
  "dist/$server_build/chunks/pages/privacy_LB-knq4L.mjs"() {
    "use strict";
    init_astro_CZ31vzIS();
    init_colors();
    init_RxTcdYg8();
    $$Astro11 = createAstro();
    prerender12 = false;
    $$Privacy = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro11, $$props, $$slots);
      Astro2.self = $$Privacy;
      return renderTemplate`${renderComponent($$result, "Layout", $$Layout, { "title": "", "description": "" }, { "default": ($$result2) => renderTemplate` ${maybeRenderHead()}<p>
На ezikTok.com се отнасяме с чувство на отговорност към личните ви
		данни. Ние не публикуваме, не продаваме и не споделяме личните ви данни
		с трети страни без вашето изрично съгласие. Само администраторите на
		сайта имат достъп до личните ви данни, които се използват само за
		улесняване на използването на сайта. Ако имате допълнителни въпроси за
		поверителността на личните ви данни, моля свържете се с нас.
</p> ` })}`;
    }, "/home/runner/work/monext/monext/apps/kloun/src/pages/other/privacy.astro", void 0);
    $$file10 = "/home/runner/work/monext/monext/apps/kloun/src/pages/other/privacy.astro";
    $$url10 = "/other/privacy";
  }
});

// dist/$server_build/chunks/privacy_BPBkW_rH.mjs
var privacy_BPBkW_rH_exports = {};
__export(privacy_BPBkW_rH_exports, {
  page: () => page13,
  renderers: () => renderers
});
var page13;
var init_privacy_BPBkW_rH = __esm({
  "dist/$server_build/chunks/privacy_BPBkW_rH.mjs"() {
    "use strict";
    init_renderers();
    page13 = () => Promise.resolve().then(() => (init_privacy_LB_knq4L(), privacy_LB_knq4L_exports));
  }
});

// dist/$server_build/chunks/pages/terms_n6QJ_92b.mjs
var terms_n6QJ_92b_exports = {};
__export(terms_n6QJ_92b_exports, {
  default: () => $$Terms,
  file: () => $$file11,
  prerender: () => prerender13,
  url: () => $$url11
});
var $$Astro12, prerender13, $$Terms, $$file11, $$url11;
var init_terms_n6QJ_92b = __esm({
  "dist/$server_build/chunks/pages/terms_n6QJ_92b.mjs"() {
    "use strict";
    init_astro_CZ31vzIS();
    init_colors();
    init_RxTcdYg8();
    $$Astro12 = createAstro();
    prerender13 = false;
    $$Terms = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro12, $$props, $$slots);
      Astro2.self = $$Terms;
      return renderTemplate`${renderComponent($$result, "Layout", $$Layout, { "title": "tos", "description": "tos" }, { "default": ($$result2) => renderTemplate` ${maybeRenderHead()}<p class="mt-10">
„Като влезете в нашето приложение, като използвате своя акаунт в Google или
    Facebook (наричан тук „Доставчик за единично влизане“), вие се съгласявате,
    че можем да използваме потребителското име, свързано с вашия имейл
    доставчик, като ваше потребителско име в нашето приложение. Това
    потребителско име ще се показва публично на други потребители и ще се
    използва, за да ви идентифицира и да проследява дейността ви в нашето
    приложение. Можете да промените потребителското си име по всяко време, като
    влезете в секцията „Профил“ на нашето приложение.
<br>
Като влезете в нашето приложение с помощта на вашия доставчик на единично влизане,
    вие също се съгласявате да получавате имейли от нас относно вашата дейност и
    маркетингова информация. Можете да се откажете от получаването на тези имейли
    по всяко време, като влезете в секцията „Профил“ на нашето приложение и актуализирате
    вашите предпочитания за имейл.
</p> ` })}`;
    }, "/home/runner/work/monext/monext/apps/kloun/src/pages/other/terms.astro", void 0);
    $$file11 = "/home/runner/work/monext/monext/apps/kloun/src/pages/other/terms.astro";
    $$url11 = "/other/terms";
  }
});

// dist/$server_build/chunks/terms_BQCIrs1A.mjs
var terms_BQCIrs1A_exports = {};
__export(terms_BQCIrs1A_exports, {
  page: () => page14,
  renderers: () => renderers
});
var page14;
var init_terms_BQCIrs1A = __esm({
  "dist/$server_build/chunks/terms_BQCIrs1A.mjs"() {
    "use strict";
    init_renderers();
    page14 = () => Promise.resolve().then(() => (init_terms_n6QJ_92b(), terms_n6QJ_92b_exports));
  }
});

// ../../node_modules/stopword/dist/stopword.umd.js
var require_stopword_umd = __commonJS({
  "../../node_modules/stopword/dist/stopword.umd.js"(exports, module) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.sw = {}));
    })(exports, function(exports2) {
      "use strict";
      const num123 = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
      const numFas = ["\u06F1", "\u06F2", "\u06F3", "\u06F4", "\u06F5", "\u06F6", "\u06F7", "\u06F8", "\u06F9", "\u06F0"];
      const numKor = ["\uFF10", "\uFF11", "\uFF12", "\uFF13", "\uFF14", "\uFF15", "\uFF16", "\uFF17", "\uFF18", "\uFF19"];
      const numMya = ["\u1040", "\u1041", "\u1042", "\u1043", "\u1044", "\u1045", "\u1046", "\u1047", "\u1048", "\u1049"];
      const numTel = ["\u0C66", "\u0C67", "\u0C68", "\u0C69", "\u0C6A", "\u0C6B", "\u0C6C", "\u0C6D", "\u0C6E", "\u0C6F"];
      const _123 = [...num123, ...numFas, ...numKor, ...numMya, ...numTel];
      const afr = [
        "die",
        "het",
        "en",
        "sy",
        "nie",
        "was",
        "hy",
        "te",
        "is",
        "ek",
        "om",
        "hulle",
        "in",
        "my",
        "'n",
        "vir",
        "toe",
        "haar",
        "van",
        "dit",
        "op",
        "se",
        "wat",
        "met",
        "gaan",
        "baie",
        "ons",
        "jy",
        "na",
        "maar",
        "hom",
        "so",
        "n",
        "huis",
        "kan",
        "aan",
        "dat",
        "daar",
        "sal",
        "jou",
        "ges\xEA",
        "by",
        "kom",
        "een",
        "ma",
        "as",
        "son",
        "groot",
        "begin",
        "al"
      ];
      const ara = [
        "\u060C",
        "\u0651\u0622\u0636",
        "\u0622\u0645\u064A\u0646\u064E",
        "\u0622\u0647",
        "\u0622\u0647\u0627\u064B",
        "\u0622\u064A",
        "\u0623",
        "\u0623\u0628",
        "\u0623\u062C\u0644",
        "\u0623\u062C\u0645\u0639",
        "\u0623\u062E",
        "\u0623\u062E\u0630",
        "\u0623\u0635\u0628\u062D",
        "\u0623\u0636\u062D\u0649",
        "\u0623\u0642\u0628\u0644",
        "\u0623\u0642\u0644",
        "\u0623\u0643\u062B\u0631",
        "\u0623\u0644\u0627",
        "\u0623\u0645",
        "\u0623\u0645\u0627",
        "\u0623\u0645\u0627\u0645\u0643",
        "\u0623\u0645\u0627\u0645\u0643\u064E",
        "\u0623\u0645\u0633\u0649",
        "\u0623\u0645\u0651\u0627",
        "\u0623\u0646",
        "\u0623\u0646\u0627",
        "\u0623\u0646\u062A",
        "\u0623\u0646\u062A\u0645",
        "\u0623\u0646\u062A\u0645\u0627",
        "\u0623\u0646\u062A\u0646",
        "\u0623\u0646\u062A\u0650",
        "\u0623\u0646\u0634\u0623",
        "\u0623\u0646\u0651\u0649",
        "\u0623\u0648",
        "\u0623\u0648\u0634\u0643",
        "\u0623\u0648\u0644\u0626\u0643",
        "\u0623\u0648\u0644\u0626\u0643\u0645",
        "\u0623\u0648\u0644\u0627\u0621",
        "\u0623\u0648\u0644\u0627\u0644\u0643",
        "\u0623\u0648\u0651\u0647\u0652",
        "\u0623\u064A",
        "\u0623\u064A\u0627",
        "\u0623\u064A\u0646",
        "\u0623\u064A\u0646\u0645\u0627",
        "\u0623\u064A\u0651",
        "\u0623\u064E\u0646\u064E\u0651",
        "\u0623\u064E\u064E\u064A\u064F\u0651",
        "\u0623\u064F\u0641\u064D\u0651",
        "\u0625\u0630",
        "\u0625\u0630\u0627",
        "\u0625\u0630\u0627\u064B",
        "\u0625\u0630\u0645\u0627",
        "\u0625\u0630\u0646",
        "\u0625\u0644\u0649",
        "\u0625\u0644\u064A\u0643\u0645",
        "\u0625\u0644\u064A\u0643\u0645\u0627",
        "\u0625\u0644\u064A\u0643\u0646\u0651",
        "\u0625\u0644\u064A\u0643\u064E",
        "\u0625\u0644\u064E\u064A\u0652\u0643\u064E",
        "\u0625\u0644\u0651\u0627",
        "\u0625\u0645\u0651\u0627",
        "\u0625\u0646",
        "\u0625\u0646\u0651\u0645\u0627",
        "\u0625\u064A",
        "\u0625\u064A\u0627\u0643",
        "\u0625\u064A\u0627\u0643\u0645",
        "\u0625\u064A\u0627\u0643\u0645\u0627",
        "\u0625\u064A\u0627\u0643\u0646",
        "\u0625\u064A\u0627\u0646\u0627",
        "\u0625\u064A\u0627\u0647",
        "\u0625\u064A\u0627\u0647\u0627",
        "\u0625\u064A\u0627\u0647\u0645",
        "\u0625\u064A\u0627\u0647\u0645\u0627",
        "\u0625\u064A\u0627\u0647\u0646",
        "\u0625\u064A\u0627\u064A",
        "\u0625\u064A\u0647\u064D",
        "\u0625\u0650\u0646\u064E\u0651",
        "\u0627",
        "\u0627\u0628\u062A\u062F\u0623",
        "\u0627\u062B\u0631",
        "\u0627\u062C\u0644",
        "\u0627\u062D\u062F",
        "\u0627\u062E\u0631\u0649",
        "\u0627\u062E\u0644\u0648\u0644\u0642",
        "\u0627\u0630\u0627",
        "\u0627\u0631\u0628\u0639\u0629",
        "\u0627\u0631\u062A\u062F\u0651",
        "\u0627\u0633\u062A\u062D\u0627\u0644",
        "\u0627\u0637\u0627\u0631",
        "\u0627\u0639\u0627\u062F\u0629",
        "\u0627\u0639\u0644\u0646\u062A",
        "\u0627\u0641",
        "\u0627\u0643\u062B\u0631",
        "\u0627\u0643\u062F",
        "\u0627\u0644\u0623\u0644\u0627\u0621",
        "\u0627\u0644\u0623\u0644\u0649",
        "\u0627\u0644\u0627",
        "\u0627\u0644\u0627\u062E\u064A\u0631\u0629",
        "\u0627\u0644\u0627\u0646",
        "\u0627\u0644\u0627\u0648\u0644",
        "\u0627\u0644\u0627\u0648\u0644\u0649",
        "\u0627\u0644\u062A\u0649",
        "\u0627\u0644\u062A\u064A",
        "\u0627\u0644\u062B\u0627\u0646\u064A",
        "\u0627\u0644\u062B\u0627\u0646\u064A\u0629",
        "\u0627\u0644\u0630\u0627\u062A\u064A",
        "\u0627\u0644\u0630\u0649",
        "\u0627\u0644\u0630\u064A",
        "\u0627\u0644\u0630\u064A\u0646",
        "\u0627\u0644\u0633\u0627\u0628\u0642",
        "\u0627\u0644\u0641",
        "\u0627\u0644\u0644\u0627\u0626\u064A",
        "\u0627\u0644\u0644\u0627\u062A\u064A",
        "\u0627\u0644\u0644\u062A\u0627\u0646",
        "\u0627\u0644\u0644\u062A\u064A\u0627",
        "\u0627\u0644\u0644\u062A\u064A\u0646",
        "\u0627\u0644\u0644\u0630\u0627\u0646",
        "\u0627\u0644\u0644\u0630\u064A\u0646",
        "\u0627\u0644\u0644\u0648\u0627\u062A\u064A",
        "\u0627\u0644\u0645\u0627\u0636\u064A",
        "\u0627\u0644\u0645\u0642\u0628\u0644",
        "\u0627\u0644\u0648\u0642\u062A",
        "\u0627\u0644\u0649",
        "\u0627\u0644\u064A\u0648\u0645",
        "\u0627\u0645\u0627",
        "\u0627\u0645\u0627\u0645",
        "\u0627\u0645\u0633",
        "\u0627\u0646",
        "\u0627\u0646\u0628\u0631\u0649",
        "\u0627\u0646\u0642\u0644\u0628",
        "\u0627\u0646\u0647",
        "\u0627\u0646\u0647\u0627",
        "\u0627\u0648",
        "\u0627\u0648\u0644",
        "\u0627\u064A",
        "\u0627\u064A\u0627\u0631",
        "\u0627\u064A\u0627\u0645",
        "\u0627\u064A\u0636\u0627",
        "\u0628",
        "\u0628\u0627\u062A",
        "\u0628\u0627\u0633\u0645",
        "\u0628\u0627\u0646",
        "\u0628\u062E\u064D",
        "\u0628\u0631\u0633",
        "\u0628\u0633\u0628\u0628",
        "\u0628\u0633\u0651",
        "\u0628\u0634\u0643\u0644",
        "\u0628\u0636\u0639",
        "\u0628\u0637\u0622\u0646",
        "\u0628\u0639\u062F",
        "\u0628\u0639\u0636",
        "\u0628\u0643",
        "\u0628\u0643\u0645",
        "\u0628\u0643\u0645\u0627",
        "\u0628\u0643\u0646",
        "\u0628\u0644",
        "\u0628\u0644\u0649",
        "\u0628\u0645\u0627",
        "\u0628\u0645\u0627\u0630\u0627",
        "\u0628\u0645\u0646",
        "\u0628\u0646",
        "\u0628\u0646\u0627",
        "\u0628\u0647",
        "\u0628\u0647\u0627",
        "\u0628\u064A",
        "\u0628\u064A\u062F",
        "\u0628\u064A\u0646",
        "\u0628\u064E\u0633\u0652",
        "\u0628\u064E\u0644\u0652\u0647\u064E",
        "\u0628\u0650\u0626\u0652\u0633\u064E",
        "\u062A\u0627\u0646\u0650",
        "\u062A\u0627\u0646\u0650\u0643",
        "\u062A\u0628\u062F\u0651\u0644",
        "\u062A\u062C\u0627\u0647",
        "\u062A\u062D\u0648\u0651\u0644",
        "\u062A\u0644\u0642\u0627\u0621",
        "\u062A\u0644\u0643",
        "\u062A\u0644\u0643\u0645",
        "\u062A\u0644\u0643\u0645\u0627",
        "\u062A\u0645",
        "\u062A\u064A\u0646\u0643",
        "\u062A\u064E\u064A\u0652\u0646\u0650",
        "\u062A\u0650\u0647",
        "\u062A\u0650\u064A",
        "\u062B\u0644\u0627\u062B\u0629",
        "\u062B\u0645",
        "\u062B\u0645\u0651",
        "\u062B\u0645\u0651\u0629",
        "\u062B\u064F\u0645\u064E\u0651",
        "\u062C\u0639\u0644",
        "\u062C\u0644\u0644",
        "\u062C\u0645\u064A\u0639",
        "\u062C\u064A\u0631",
        "\u062D\u0627\u0631",
        "\u062D\u0627\u0634\u0627",
        "\u062D\u0627\u0644\u064A\u0627",
        "\u062D\u0627\u064A",
        "\u062D\u062A\u0649",
        "\u062D\u0631\u0649",
        "\u062D\u0633\u0628",
        "\u062D\u0645",
        "\u062D\u0648\u0627\u0644\u0649",
        "\u062D\u0648\u0644",
        "\u062D\u064A\u062B",
        "\u062D\u064A\u062B\u0645\u0627",
        "\u062D\u064A\u0646",
        "\u062D\u064A\u064E\u0651",
        "\u062D\u064E\u0628\u064E\u0651\u0630\u064E\u0627",
        "\u062D\u064E\u062A\u064E\u0651\u0649",
        "\u062D\u064E\u0630\u0627\u0631\u0650",
        "\u062E\u0644\u0627",
        "\u062E\u0644\u0627\u0644",
        "\u062F\u0648\u0646",
        "\u062F\u0648\u0646\u0643",
        "\u0630\u0627",
        "\u0630\u0627\u062A",
        "\u0630\u0627\u0643",
        "\u0630\u0627\u0646\u0643",
        "\u0630\u0627\u0646\u0650",
        "\u0630\u0644\u0643",
        "\u0630\u0644\u0643\u0645",
        "\u0630\u0644\u0643\u0645\u0627",
        "\u0630\u0644\u0643\u0646",
        "\u0630\u0648",
        "\u0630\u0648\u0627",
        "\u0630\u0648\u0627\u062A\u0627",
        "\u0630\u0648\u0627\u062A\u064A",
        "\u0630\u064A\u062A",
        "\u0630\u064A\u0646\u0643",
        "\u0630\u064E\u064A\u0652\u0646\u0650",
        "\u0630\u0650\u0647",
        "\u0630\u0650\u064A",
        "\u0631\u0627\u062D",
        "\u0631\u062C\u0639",
        "\u0631\u0648\u064A\u062F\u0643",
        "\u0631\u064A\u062B",
        "\u0631\u064F\u0628\u064E\u0651",
        "\u0632\u064A\u0627\u0631\u0629",
        "\u0633\u0628\u062D\u0627\u0646",
        "\u0633\u0631\u0639\u0627\u0646",
        "\u0633\u0646\u0629",
        "\u0633\u0646\u0648\u0627\u062A",
        "\u0633\u0648\u0641",
        "\u0633\u0648\u0649",
        "\u0633\u064E\u0627\u0621\u064E",
        "\u0633\u064E\u0627\u0621\u064E\u0645\u064E\u0627",
        "\u0634\u0628\u0647",
        "\u0634\u062E\u0635\u0627",
        "\u0634\u0631\u0639",
        "\u0634\u064E\u062A\u064E\u0651\u0627\u0646\u064E",
        "\u0635\u0627\u0631",
        "\u0635\u0628\u0627\u062D",
        "\u0635\u0641\u0631",
        "\u0635\u0647\u064D",
        "\u0635\u0647\u0652",
        "\u0636\u062F",
        "\u0636\u0645\u0646",
        "\u0637\u0627\u0642",
        "\u0637\u0627\u0644\u0645\u0627",
        "\u0637\u0641\u0642",
        "\u0637\u064E\u0642",
        "\u0638\u0644\u0651",
        "\u0639\u0627\u062F",
        "\u0639\u0627\u0645",
        "\u0639\u0627\u0645\u0627",
        "\u0639\u0627\u0645\u0629",
        "\u0639\u062F\u0627",
        "\u0639\u062F\u0629",
        "\u0639\u062F\u062F",
        "\u0639\u062F\u0645",
        "\u0639\u0633\u0649",
        "\u0639\u0634\u0631",
        "\u0639\u0634\u0631\u0629",
        "\u0639\u0644\u0642",
        "\u0639\u0644\u0649",
        "\u0639\u0644\u064A\u0643",
        "\u0639\u0644\u064A\u0647",
        "\u0639\u0644\u064A\u0647\u0627",
        "\u0639\u0644\u064B\u0651",
        "\u0639\u0646",
        "\u0639\u0646\u062F",
        "\u0639\u0646\u062F\u0645\u0627",
        "\u0639\u0648\u0636",
        "\u0639\u064A\u0646",
        "\u0639\u064E\u062F\u064E\u0633\u0652",
        "\u0639\u064E\u0645\u064E\u0651\u0627",
        "\u063A\u062F\u0627",
        "\u063A\u064A\u0631",
        "\u0640",
        "\u0641",
        "\u0641\u0627\u0646",
        "\u0641\u0644\u0627\u0646",
        "\u0641\u0648",
        "\u0641\u0649",
        "\u0641\u064A",
        "\u0641\u064A\u0645",
        "\u0641\u064A\u0645\u0627",
        "\u0641\u064A\u0647",
        "\u0641\u064A\u0647\u0627",
        "\u0642\u0627\u0644",
        "\u0642\u0627\u0645",
        "\u0642\u0628\u0644",
        "\u0642\u062F",
        "\u0642\u0637\u0651",
        "\u0642\u0644\u0645\u0627",
        "\u0642\u0648\u0629",
        "\u0643\u0623\u0646\u0651\u0645\u0627",
        "\u0643\u0623\u064A\u0646",
        "\u0643\u0623\u064A\u0651",
        "\u0643\u0623\u064A\u0651\u0646",
        "\u0643\u0627\u062F",
        "\u0643\u0627\u0646",
        "\u0643\u0627\u0646\u062A",
        "\u0643\u0630\u0627",
        "\u0643\u0630\u0644\u0643",
        "\u0643\u0631\u0628",
        "\u0643\u0644",
        "\u0643\u0644\u0627",
        "\u0643\u0644\u0627\u0647\u0645\u0627",
        "\u0643\u0644\u062A\u0627",
        "\u0643\u0644\u0645",
        "\u0643\u0644\u064A\u0643\u0645\u0627",
        "\u0643\u0644\u064A\u0647\u0645\u0627",
        "\u0643\u0644\u0651\u0645\u0627",
        "\u0643\u0644\u064E\u0651\u0627",
        "\u0643\u0645",
        "\u0643\u0645\u0627",
        "\u0643\u064A",
        "\u0643\u064A\u062A",
        "\u0643\u064A\u0641",
        "\u0643\u064A\u0641\u0645\u0627",
        "\u0643\u064E\u0623\u064E\u0646\u064E\u0651",
        "\u0643\u0650\u062E",
        "\u0644\u0626\u0646",
        "\u0644\u0627",
        "\u0644\u0627\u062A",
        "\u0644\u0627\u0633\u064A\u0645\u0627",
        "\u0644\u062F\u0646",
        "\u0644\u062F\u0649",
        "\u0644\u0639\u0645\u0631",
        "\u0644\u0642\u0627\u0621",
        "\u0644\u0643",
        "\u0644\u0643\u0645",
        "\u0644\u0643\u0645\u0627",
        "\u0644\u0643\u0646",
        "\u0644\u0643\u0646\u064E\u0651\u0645\u0627",
        "\u0644\u0643\u064A",
        "\u0644\u0643\u064A\u0644\u0627",
        "\u0644\u0644\u0627\u0645\u0645",
        "\u0644\u0645",
        "\u0644\u0645\u0627",
        "\u0644\u0645\u0651\u0627",
        "\u0644\u0646",
        "\u0644\u0646\u0627",
        "\u0644\u0647",
        "\u0644\u0647\u0627",
        "\u0644\u0648",
        "\u0644\u0648\u0643\u0627\u0644\u0629",
        "\u0644\u0648\u0644\u0627",
        "\u0644\u0648\u0645\u0627",
        "\u0644\u064A",
        "\u0644\u064E\u0633\u0652\u062A\u064E",
        "\u0644\u064E\u0633\u0652\u062A\u064F",
        "\u0644\u064E\u0633\u0652\u062A\u064F\u0645",
        "\u0644\u064E\u0633\u0652\u062A\u064F\u0645\u064E\u0627",
        "\u0644\u064E\u0633\u0652\u062A\u064F\u0646\u064E\u0651",
        "\u0644\u064E\u0633\u0652\u062A\u0650",
        "\u0644\u064E\u0633\u0652\u0646\u064E",
        "\u0644\u064E\u0639\u064E\u0644\u064E\u0651",
        "\u0644\u064E\u0643\u0650\u0646\u064E\u0651",
        "\u0644\u064E\u064A\u0652\u062A\u064E",
        "\u0644\u064E\u064A\u0652\u0633\u064E",
        "\u0644\u064E\u064A\u0652\u0633\u064E\u0627",
        "\u0644\u064E\u064A\u0652\u0633\u064E\u062A\u064E\u0627",
        "\u0644\u064E\u064A\u0652\u0633\u064E\u062A\u0652",
        "\u0644\u064E\u064A\u0652\u0633\u064F\u0648\u0627",
        "\u0644\u064E\u0650\u0633\u0652\u0646\u064E\u0627",
        "\u0645\u0627",
        "\u0645\u0627\u0627\u0646\u0641\u0643",
        "\u0645\u0627\u0628\u0631\u062D",
        "\u0645\u0627\u062F\u0627\u0645",
        "\u0645\u0627\u0630\u0627",
        "\u0645\u0627\u0632\u0627\u0644",
        "\u0645\u0627\u0641\u062A\u0626",
        "\u0645\u0627\u064A\u0648",
        "\u0645\u062A\u0649",
        "\u0645\u062B\u0644",
        "\u0645\u0630",
        "\u0645\u0633\u0627\u0621",
        "\u0645\u0639",
        "\u0645\u0639\u0627\u0630",
        "\u0645\u0642\u0627\u0628\u0644",
        "\u0645\u0643\u0627\u0646\u0643\u0645",
        "\u0645\u0643\u0627\u0646\u0643\u0645\u0627",
        "\u0645\u0643\u0627\u0646\u0643\u0646\u0651",
        "\u0645\u0643\u0627\u0646\u064E\u0643",
        "\u0645\u0644\u064A\u0627\u0631",
        "\u0645\u0644\u064A\u0648\u0646",
        "\u0645\u0645\u0627",
        "\u0645\u0645\u0646",
        "\u0645\u0646",
        "\u0645\u0646\u0630",
        "\u0645\u0646\u0647\u0627",
        "\u0645\u0647",
        "\u0645\u0647\u0645\u0627",
        "\u0645\u064E\u0646\u0652",
        "\u0645\u0650\u0646",
        "\u0646\u062D\u0646",
        "\u0646\u062D\u0648",
        "\u0646\u0639\u0645",
        "\u0646\u0641\u0633",
        "\u0646\u0641\u0633\u0647",
        "\u0646\u0647\u0627\u064A\u0629",
        "\u0646\u064E\u062E\u0652",
        "\u0646\u0650\u0639\u0650\u0645\u0651\u0627",
        "\u0646\u0650\u0639\u0652\u0645\u064E",
        "\u0647\u0627",
        "\u0647\u0627\u0624\u0645",
        "\u0647\u0627\u0643\u064E",
        "\u0647\u0627\u0647\u0646\u0627",
        "\u0647\u0628\u0651",
        "\u0647\u0630\u0627",
        "\u0647\u0630\u0647",
        "\u0647\u0643\u0630\u0627",
        "\u0647\u0644",
        "\u0647\u0644\u0645\u064E\u0651",
        "\u0647\u0644\u0651\u0627",
        "\u0647\u0645",
        "\u0647\u0645\u0627",
        "\u0647\u0646",
        "\u0647\u0646\u0627",
        "\u0647\u0646\u0627\u0643",
        "\u0647\u0646\u0627\u0644\u0643",
        "\u0647\u0648",
        "\u0647\u064A",
        "\u0647\u064A\u0627",
        "\u0647\u064A\u062A",
        "\u0647\u064A\u0651\u0627",
        "\u0647\u064E\u0624\u0644\u0627\u0621",
        "\u0647\u064E\u0627\u062A\u0627\u0646\u0650",
        "\u0647\u064E\u0627\u062A\u064E\u064A\u0652\u0646\u0650",
        "\u0647\u064E\u0627\u062A\u0650\u0647",
        "\u0647\u064E\u0627\u062A\u0650\u064A",
        "\u0647\u064E\u062C\u0652",
        "\u0647\u064E\u0630\u0627",
        "\u0647\u064E\u0630\u0627\u0646\u0650",
        "\u0647\u064E\u0630\u064E\u064A\u0652\u0646\u0650",
        "\u0647\u064E\u0630\u0650\u0647",
        "\u0647\u064E\u0630\u0650\u064A",
        "\u0647\u064E\u064A\u0652\u0647\u064E\u0627\u062A\u064E",
        "\u0648",
        "\u0648\u0627",
        "\u0648\u0627\u062D\u062F",
        "\u0648\u0627\u0636\u0627\u0641",
        "\u0648\u0627\u0636\u0627\u0641\u062A",
        "\u0648\u0627\u0643\u062F",
        "\u0648\u0627\u0646",
        "\u0648\u0627\u0647\u0627\u064B",
        "\u0648\u0627\u0648\u0636\u062D",
        "\u0648\u0631\u0627\u0621\u064E\u0643",
        "\u0648\u0641\u064A",
        "\u0648\u0642\u0627\u0644",
        "\u0648\u0642\u0627\u0644\u062A",
        "\u0648\u0642\u062F",
        "\u0648\u0642\u0641",
        "\u0648\u0643\u0627\u0646",
        "\u0648\u0643\u0627\u0646\u062A",
        "\u0648\u0644\u0627",
        "\u0648\u0644\u0645",
        "\u0648\u0645\u0646",
        "\u0648\u0647\u0648",
        "\u0648\u0647\u064A",
        "\u0648\u064A\u0643\u0623\u0646\u0651",
        "\u0648\u064E\u064A\u0652",
        "\u0648\u064F\u0634\u0652\u0643\u064E\u0627\u0646\u064E\u064E",
        "\u064A\u0643\u0648\u0646",
        "\u064A\u0645\u0643\u0646",
        "\u064A\u0648\u0645",
        "\u0651\u0623\u064A\u0651\u0627\u0646"
      ];
      const hye = [
        "\u0561\u0575\u0564",
        "\u0561\u0575\u056C",
        "\u0561\u0575\u0576",
        "\u0561\u0575\u057D",
        "\u0564\u0578\u0582",
        "\u0564\u0578\u0582\u0584",
        "\u0565\u0574",
        "\u0565\u0576",
        "\u0565\u0576\u0584",
        "\u0565\u057D",
        "\u0565\u0584",
        "\u0567",
        "\u0567\u056B",
        "\u0567\u056B\u0576",
        "\u0567\u056B\u0576\u0584",
        "\u0567\u056B\u0580",
        "\u0567\u056B\u0584",
        "\u0567\u0580",
        "\u0568\u057D\u057F",
        "\u0569",
        "\u056B",
        "\u056B\u0576",
        "\u056B\u057D\u056F",
        "\u056B\u0580",
        "\u056F\u0561\u0574",
        "\u0570\u0561\u0574\u0561\u0580",
        "\u0570\u0565\u057F",
        "\u0570\u0565\u057F\u0578",
        "\u0574\u0565\u0576\u0584",
        "\u0574\u0565\u057B",
        "\u0574\u056B",
        "\u0576",
        "\u0576\u0561",
        "\u0576\u0561\u0587",
        "\u0576\u0580\u0561",
        "\u0576\u0580\u0561\u0576\u0584",
        "\u0578\u0580",
        "\u0578\u0580\u0568",
        "\u0578\u0580\u0578\u0576\u0584",
        "\u0578\u0580\u057A\u0565\u057D",
        "\u0578\u0582",
        "\u0578\u0582\u0574",
        "\u057A\u056B\u057F\u056B",
        "\u057E\u0580\u0561",
        "\u0587"
      ];
      const eus = [
        "al",
        "anitz",
        "arabera",
        "asko",
        "baina",
        "bat",
        "batean",
        "batek",
        "bati",
        "batzuei",
        "batzuek",
        "batzuetan",
        "batzuk",
        "bera",
        "beraiek",
        "berau",
        "berauek",
        "bere",
        "berori",
        "beroriek",
        "beste",
        "bezala",
        "da",
        "dago",
        "dira",
        "ditu",
        "du",
        "dute",
        "edo",
        "egin",
        "ere",
        "eta",
        "eurak",
        "ez",
        "gainera",
        "gu",
        "gutxi",
        "guzti",
        "haiei",
        "haiek",
        "haietan",
        "hainbeste",
        "hala",
        "han",
        "handik",
        "hango",
        "hara",
        "hari",
        "hark",
        "hartan",
        "hau",
        "hauei",
        "hauek",
        "hauetan",
        "hemen",
        "hemendik",
        "hemengo",
        "hi",
        "hona",
        "honek",
        "honela",
        "honetan",
        "honi",
        "hor",
        "hori",
        "horiei",
        "horiek",
        "horietan",
        "horko",
        "horra",
        "horrek",
        "horrela",
        "horretan",
        "horri",
        "hortik",
        "hura",
        "izan",
        "ni",
        "noiz",
        "nola",
        "non",
        "nondik",
        "nongo",
        "nor",
        "nora",
        "ze",
        "zein",
        "zen",
        "zenbait",
        "zenbat",
        "zer",
        "zergatik",
        "ziren",
        "zituen",
        "zu",
        "zuek",
        "zuen",
        "zuten"
      ];
      const ben = [
        "\u0985\u09A4\u098F\u09AC",
        "\u0985\u09A5\u099A",
        "\u0985\u09A5\u09AC\u09BE",
        "\u0985\u09A8\u09C1\u09AF\u09BE\u09AF\u09BC\u09C0",
        "\u0985\u09A8\u09C7\u0995",
        "\u0985\u09A8\u09C7\u0995\u09C7",
        "\u0985\u09A8\u09C7\u0995\u09C7\u0987",
        "\u0985\u09A8\u09CD\u09A4\u09A4",
        "\u0985\u09A8\u09CD\u09AF",
        "\u0985\u09AC\u09A7\u09BF",
        "\u0985\u09AC\u09B6\u09CD\u09AF",
        "\u0985\u09B0\u09CD\u09A5\u09BE\u09A4",
        "\u0986\u0987",
        "\u0986\u0997\u09BE\u09AE\u09C0",
        "\u0986\u0997\u09C7",
        "\u0986\u0997\u09C7\u0987",
        "\u0986\u099B\u09C7",
        "\u0986\u099C",
        "\u0986\u09A6\u09CD\u09AF\u09AD\u09BE\u0997\u09C7",
        "\u0986\u09AA\u09A8\u09BE\u09B0",
        "\u0986\u09AA\u09A8\u09BF",
        "\u0986\u09AC\u09BE\u09B0",
        "\u0986\u09AE\u09B0\u09BE",
        "\u0986\u09AE\u09BE\u0995\u09C7",
        "\u0986\u09AE\u09BE\u09A6\u09C7\u09B0",
        "\u0986\u09AE\u09BE\u09B0",
        "\u0986\u09AE\u09BF",
        "\u0986\u09B0",
        "\u0986\u09B0\u0993",
        "\u0987",
        "\u0987\u09A4\u09CD\u09AF\u09BE\u09A6\u09BF",
        "\u0987\u09B9\u09BE",
        "\u0989\u099A\u09BF\u09A4",
        "\u0989\u09A4\u09CD\u09A4\u09B0",
        "\u0989\u09A8\u09BF",
        "\u0989\u09AA\u09B0",
        "\u0989\u09AA\u09B0\u09C7",
        "\u098F",
        "\u098F\u0981\u09A6\u09C7\u09B0",
        "\u098F\u0981\u09B0\u09BE",
        "\u098F\u0987",
        "\u098F\u0995\u0987",
        "\u098F\u0995\u099F\u09BF",
        "\u098F\u0995\u09AC\u09BE\u09B0",
        "\u098F\u0995\u09C7",
        "\u098F\u0995\u09CD",
        "\u098F\u0996\u09A8",
        "\u098F\u0996\u09A8\u0993",
        "\u098F\u0996\u09BE\u09A8\u09C7",
        "\u098F\u0996\u09BE\u09A8\u09C7\u0987",
        "\u098F\u099F\u09BE",
        "\u098F\u099F\u09BE\u0987",
        "\u098F\u099F\u09BF",
        "\u098F\u09A4",
        "\u098F\u09A4\u099F\u09BE\u0987",
        "\u098F\u09A4\u09C7",
        "\u098F\u09A6\u09C7\u09B0",
        "\u098F\u09AC",
        "\u098F\u09AC\u0982",
        "\u098F\u09AC\u09BE\u09B0",
        "\u098F\u09AE\u09A8",
        "\u098F\u09AE\u09A8\u0995\u09C0",
        "\u098F\u09AE\u09A8\u09BF",
        "\u098F\u09B0",
        "\u098F\u09B0\u09BE",
        "\u098F\u09B2",
        "\u098F\u09B8",
        "\u098F\u09B8\u09C7",
        "\u0990",
        "\u0993",
        "\u0993\u0981\u09A6\u09C7\u09B0",
        "\u0993\u0981\u09B0",
        "\u0993\u0981\u09B0\u09BE",
        "\u0993\u0987",
        "\u0993\u0995\u09C7",
        "\u0993\u0996\u09BE\u09A8\u09C7",
        "\u0993\u09A6\u09C7\u09B0",
        "\u0993\u09B0",
        "\u0993\u09B0\u09BE",
        "\u0995\u0996\u09A8\u0993",
        "\u0995\u09A4",
        "\u0995\u09AC\u09C7",
        "\u0995\u09AE\u09A8\u09C7",
        "\u0995\u09AF\u09BC\u09C7\u0995",
        "\u0995\u09AF\u09BC\u09C7\u0995\u099F\u09BF",
        "\u0995\u09B0\u099B\u09C7",
        "\u0995\u09B0\u099B\u09C7\u09A8",
        "\u0995\u09B0\u09A4\u09C7",
        "\u0995\u09B0\u09AC\u09C7",
        "\u0995\u09B0\u09AC\u09C7\u09A8",
        "\u0995\u09B0\u09B2\u09C7",
        "\u0995\u09B0\u09B2\u09C7\u09A8",
        "\u0995\u09B0\u09BE",
        "\u0995\u09B0\u09BE\u0987",
        "\u0995\u09B0\u09BE\u09AF\u09BC",
        "\u0995\u09B0\u09BE\u09B0",
        "\u0995\u09B0\u09BF",
        "\u0995\u09B0\u09BF\u09A4\u09C7",
        "\u0995\u09B0\u09BF\u09AF\u09BC\u09BE",
        "\u0995\u09B0\u09BF\u09AF\u09BC\u09C7",
        "\u0995\u09B0\u09C7",
        "\u0995\u09B0\u09C7\u0987",
        "\u0995\u09B0\u09C7\u099B\u09BF\u09B2\u09C7\u09A8",
        "\u0995\u09B0\u09C7\u099B\u09C7",
        "\u0995\u09B0\u09C7\u099B\u09C7\u09A8",
        "\u0995\u09B0\u09C7\u09A8",
        "\u0995\u09BE\u0989\u0995\u09C7",
        "\u0995\u09BE\u099B",
        "\u0995\u09BE\u099B\u09C7",
        "\u0995\u09BE\u099C",
        "\u0995\u09BE\u099C\u09C7",
        "\u0995\u09BE\u09B0\u0993",
        "\u0995\u09BE\u09B0\u09A3",
        "\u0995\u09BF",
        "\u0995\u09BF\u0982\u09AC\u09BE",
        "\u0995\u09BF\u099B\u09C1",
        "\u0995\u09BF\u099B\u09C1\u0987",
        "\u0995\u09BF\u09A8\u09CD\u09A4\u09C1",
        "\u0995\u09C0",
        "\u0995\u09C7",
        "\u0995\u09C7\u0989",
        "\u0995\u09C7\u0989\u0987",
        "\u0995\u09C7\u0996\u09BE",
        "\u0995\u09C7\u09A8",
        "\u0995\u09CB\u099F\u09BF",
        "\u0995\u09CB\u09A8",
        "\u0995\u09CB\u09A8\u0993",
        "\u0995\u09CB\u09A8\u09CB",
        "\u0995\u09CD\u09B7\u09C7\u09A4\u09CD\u09B0\u09C7",
        "\u0995\u09AF\u09BC\u09C7\u0995",
        "\u0996\u09C1\u09AC",
        "\u0997\u09BF\u09AF\u09BC\u09C7",
        "\u0997\u09BF\u09AF\u09BC\u09C7\u099B\u09C7",
        "\u0997\u09BF\u09AF\u09BC\u09C7",
        "\u0997\u09C1\u09B2\u09BF",
        "\u0997\u09C7\u099B\u09C7",
        "\u0997\u09C7\u09B2",
        "\u0997\u09C7\u09B2\u09C7",
        "\u0997\u09CB\u099F\u09BE",
        "\u099A\u09B2\u09C7",
        "\u099A\u09BE\u09A8",
        "\u099A\u09BE\u09AF\u09BC",
        "\u099A\u09BE\u09B0",
        "\u099A\u09BE\u09B2\u09C1",
        "\u099A\u09C7\u09AF\u09BC\u09C7",
        "\u099A\u09C7\u09B7\u09CD\u099F\u09BE",
        "\u099B\u09BE\u09A1\u09BC\u09BE",
        "\u099B\u09BE\u09A1\u09BC\u09BE\u0993",
        "\u099B\u09BF\u09B2",
        "\u099B\u09BF\u09B2\u09C7\u09A8",
        "\u099C\u09A8",
        "\u099C\u09A8\u0995\u09C7",
        "\u099C\u09A8\u09C7\u09B0",
        "\u099C\u09A8\u09CD\u09AF",
        "\u099C\u09A8\u09CD\u09AF\u0993\u099C\u09C7",
        "\u099C\u09BE\u09A8\u09A4\u09C7",
        "\u099C\u09BE\u09A8\u09BE",
        "\u099C\u09BE\u09A8\u09BE\u09A8\u09CB",
        "\u099C\u09BE\u09A8\u09BE\u09AF\u09BC",
        "\u099C\u09BE\u09A8\u09BF\u09AF\u09BC\u09C7",
        "\u099C\u09BE\u09A8\u09BF\u09AF\u09BC\u09C7\u099B\u09C7",
        "\u099C\u09C7",
        "\u099C\u09CD\u09A8\u099C\u09A8",
        "\u099F\u09BF",
        "\u09A0\u09BF\u0995",
        "\u09A4\u0996\u09A8",
        "\u09A4\u09A4",
        "\u09A4\u09A5\u09BE",
        "\u09A4\u09AC\u09C1",
        "\u09A4\u09AC\u09C7",
        "\u09A4\u09BE",
        "\u09A4\u09BE\u0981\u0995\u09C7",
        "\u09A4\u09BE\u0981\u09A6\u09C7\u09B0",
        "\u09A4\u09BE\u0981\u09B0",
        "\u09A4\u09BE\u0981\u09B0\u09BE",
        "\u09A4\u09BE\u0981\u09BE\u09B9\u09BE\u09B0\u09BE",
        "\u09A4\u09BE\u0987",
        "\u09A4\u09BE\u0993",
        "\u09A4\u09BE\u0995\u09C7",
        "\u09A4\u09BE\u09A4\u09C7",
        "\u09A4\u09BE\u09A6\u09C7\u09B0",
        "\u09A4\u09BE\u09B0",
        "\u09A4\u09BE\u09B0\u09AA\u09B0",
        "\u09A4\u09BE\u09B0\u09BE",
        "\u09A4\u09BE\u09B0\u09C8",
        "\u09A4\u09BE\u09B9\u09B2\u09C7",
        "\u09A4\u09BE\u09B9\u09BE",
        "\u09A4\u09BE\u09B9\u09BE\u09A4\u09C7",
        "\u09A4\u09BE\u09B9\u09BE\u09B0",
        "\u09A4\u09BF\u09A8\u0990",
        "\u09A4\u09BF\u09A8\u09BF",
        "\u09A4\u09BF\u09A8\u09BF\u0993",
        "\u09A4\u09C1\u09AE\u09BF",
        "\u09A4\u09C1\u09B2\u09C7",
        "\u09A4\u09C7\u09AE\u09A8",
        "\u09A4\u09CB",
        "\u09A4\u09CB\u09AE\u09BE\u09B0",
        "\u09A5\u09BE\u0995\u09AC\u09C7",
        "\u09A5\u09BE\u0995\u09AC\u09C7\u09A8",
        "\u09A5\u09BE\u0995\u09BE",
        "\u09A5\u09BE\u0995\u09BE\u09AF\u09BC",
        "\u09A5\u09BE\u0995\u09C7",
        "\u09A5\u09BE\u0995\u09C7\u09A8",
        "\u09A5\u09C7\u0995\u09C7",
        "\u09A5\u09C7\u0995\u09C7\u0987",
        "\u09A5\u09C7\u0995\u09C7\u0993",
        "\u09A6\u09BF\u0995\u09C7",
        "\u09A6\u09BF\u09A4\u09C7",
        "\u09A6\u09BF\u09A8",
        "\u09A6\u09BF\u09AF\u09BC\u09C7",
        "\u09A6\u09BF\u09AF\u09BC\u09C7\u099B\u09C7",
        "\u09A6\u09BF\u09AF\u09BC\u09C7\u099B\u09C7\u09A8",
        "\u09A6\u09BF\u09B2\u09C7\u09A8",
        "\u09A6\u09C1",
        "\u09A6\u09C1\u0987",
        "\u09A6\u09C1\u099F\u09BF",
        "\u09A6\u09C1\u099F\u09CB",
        "\u09A6\u09C7\u0993\u09AF\u09BC\u09BE",
        "\u09A6\u09C7\u0993\u09AF\u09BC\u09BE\u09B0",
        "\u09A6\u09C7\u0993\u09AF\u09BC\u09BE",
        "\u09A6\u09C7\u0996\u09A4\u09C7",
        "\u09A6\u09C7\u0996\u09BE",
        "\u09A6\u09C7\u0996\u09C7",
        "\u09A6\u09C7\u09A8",
        "\u09A6\u09C7\u09AF\u09BC",
        "\u09A6\u09CD\u09AC\u09BE\u09B0\u09BE",
        "\u09A7\u09B0\u09BE",
        "\u09A7\u09B0\u09C7",
        "\u09A7\u09BE\u09AE\u09BE\u09B0",
        "\u09A8\u09A4\u09C1\u09A8",
        "\u09A8\u09AF\u09BC",
        "\u09A8\u09BE",
        "\u09A8\u09BE\u0987",
        "\u09A8\u09BE\u0995\u09BF",
        "\u09A8\u09BE\u0997\u09BE\u09A6",
        "\u09A8\u09BE\u09A8\u09BE",
        "\u09A8\u09BF\u099C\u09C7",
        "\u09A8\u09BF\u099C\u09C7\u0987",
        "\u09A8\u09BF\u099C\u09C7\u09A6\u09C7\u09B0",
        "\u09A8\u09BF\u099C\u09C7\u09B0",
        "\u09A8\u09BF\u09A4\u09C7",
        "\u09A8\u09BF\u09AF\u09BC\u09C7",
        "\u09A8\u09BF\u09AF\u09BC\u09C7",
        "\u09A8\u09C7\u0987",
        "\u09A8\u09C7\u0993\u09AF\u09BC\u09BE",
        "\u09A8\u09C7\u0993\u09AF\u09BC\u09BE\u09B0",
        "\u09A8\u09C7\u0993\u09AF\u09BC\u09BE",
        "\u09A8\u09AF\u09BC",
        "\u09AA\u0995\u09CD\u09B7\u09C7",
        "\u09AA\u09B0",
        "\u09AA\u09B0\u09C7",
        "\u09AA\u09B0\u09C7\u0987",
        "\u09AA\u09B0\u09C7\u0993",
        "\u09AA\u09B0\u09CD\u09AF\u09A8\u09CD\u09A4",
        "\u09AA\u09BE\u0993\u09AF\u09BC\u09BE",
        "\u09AA\u09BE\u099A",
        "\u09AA\u09BE\u09B0\u09BF",
        "\u09AA\u09BE\u09B0\u09C7",
        "\u09AA\u09BE\u09B0\u09C7\u09A8",
        "\u09AA\u09BF",
        "\u09AA\u09C7\u09AF\u09BC\u09C7",
        "\u09AA\u09C7\u09AF\u09BC\u09CD\u09B0\u09CD",
        "\u09AA\u09CD\u09B0\u09A4\u09BF",
        "\u09AA\u09CD\u09B0\u09A5\u09AE",
        "\u09AA\u09CD\u09B0\u09AD\u09C3\u09A4\u09BF",
        "\u09AA\u09CD\u09B0\u09AF\u09A8\u09CD\u09A4",
        "\u09AA\u09CD\u09B0\u09BE\u09A5\u09AE\u09BF\u0995",
        "\u09AA\u09CD\u09B0\u09BE\u09AF\u09BC",
        "\u09AA\u09CD\u09B0\u09BE\u09AF\u09BC",
        "\u09AB\u09B2\u09C7",
        "\u09AB\u09BF\u09B0\u09C7",
        "\u09AB\u09C7\u09B0",
        "\u09AC\u0995\u09CD\u09A4\u09AC\u09CD\u09AF",
        "\u09AC\u09A6\u09B2\u09C7",
        "\u09AC\u09A8",
        "\u09AC\u09B0\u0982",
        "\u09AC\u09B2\u09A4\u09C7",
        "\u09AC\u09B2\u09B2",
        "\u09AC\u09B2\u09B2\u09C7\u09A8",
        "\u09AC\u09B2\u09BE",
        "\u09AC\u09B2\u09C7",
        "\u09AC\u09B2\u09C7\u099B\u09C7\u09A8",
        "\u09AC\u09B2\u09C7\u09A8",
        "\u09AC\u09B8\u09C7",
        "\u09AC\u09B9\u09C1",
        "\u09AC\u09BE",
        "\u09AC\u09BE\u09A6\u09C7",
        "\u09AC\u09BE\u09B0",
        "\u09AC\u09BF",
        "\u09AC\u09BF\u09A8\u09BE",
        "\u09AC\u09BF\u09AD\u09BF\u09A8\u09CD\u09A8",
        "\u09AC\u09BF\u09B6\u09C7\u09B7",
        "\u09AC\u09BF\u09B7\u09AF\u09BC\u099F\u09BF",
        "\u09AC\u09C7\u09B6",
        "\u09AC\u09C7\u09B6\u09BF",
        "\u09AC\u09CD\u09AF\u09AC\u09B9\u09BE\u09B0",
        "\u09AC\u09CD\u09AF\u09BE\u09AA\u09BE\u09B0\u09C7",
        "\u09AD\u09BE\u09AC\u09C7",
        "\u09AD\u09BE\u09AC\u09C7\u0987",
        "\u09AE\u09A4\u09CB",
        "\u09AE\u09A4\u09CB\u0987",
        "\u09AE\u09A7\u09CD\u09AF\u09AD\u09BE\u0997\u09C7",
        "\u09AE\u09A7\u09CD\u09AF\u09C7",
        "\u09AE\u09A7\u09CD\u09AF\u09C7\u0987",
        "\u09AE\u09A7\u09CD\u09AF\u09C7\u0993",
        "\u09AE\u09A8\u09C7",
        "\u09AE\u09BE\u09A4\u09CD\u09B0",
        "\u09AE\u09BE\u09A7\u09CD\u09AF\u09AE\u09C7",
        "\u09AE\u09CB\u099F",
        "\u09AE\u09CB\u099F\u09C7\u0987",
        "\u09AF\u0996\u09A8",
        "\u09AF\u09A4",
        "\u09AF\u09A4\u099F\u09BE",
        "\u09AF\u09A5\u09C7\u09B7\u09CD\u099F",
        "\u09AF\u09A6\u09BF",
        "\u09AF\u09A6\u09BF\u0993",
        "\u09AF\u09BE",
        "\u09AF\u09BE\u0981\u09B0",
        "\u09AF\u09BE\u0981\u09B0\u09BE",
        "\u09AF\u09BE\u0993\u09AF\u09BC\u09BE",
        "\u09AF\u09BE\u0993\u09AF\u09BC\u09BE\u09B0",
        "\u09AF\u09BE\u0993\u09AF\u09BC\u09BE",
        "\u09AF\u09BE\u0995\u09C7",
        "\u09AF\u09BE\u099A\u09CD\u099B\u09C7",
        "\u09AF\u09BE\u09A4\u09C7",
        "\u09AF\u09BE\u09A6\u09C7\u09B0",
        "\u09AF\u09BE\u09A8",
        "\u09AF\u09BE\u09AC\u09C7",
        "\u09AF\u09BE\u09AF\u09BC",
        "\u09AF\u09BE\u09B0",
        "\u09AF\u09BE\u09B0\u09BE",
        "\u09AF\u09BF\u09A8\u09BF",
        "\u09AF\u09C7",
        "\u09AF\u09C7\u0996\u09BE\u09A8\u09C7",
        "\u09AF\u09C7\u09A4\u09C7",
        "\u09AF\u09C7\u09A8",
        "\u09AF\u09C7\u09AE\u09A8",
        "\u09B0",
        "\u09B0\u0995\u09AE",
        "\u09B0\u09AF\u09BC\u09C7\u099B\u09C7",
        "\u09B0\u09BE\u0996\u09BE",
        "\u09B0\u09C7\u0996\u09C7",
        "\u09B2\u0995\u09CD\u09B7",
        "\u09B6\u09C1\u09A7\u09C1",
        "\u09B6\u09C1\u09B0\u09C1",
        "\u09B8\u0999\u09CD\u0997\u09C7",
        "\u09B8\u0999\u09CD\u0997\u09C7\u0993",
        "\u09B8\u09AC",
        "\u09B8\u09AC\u09BE\u09B0",
        "\u09B8\u09AE\u09B8\u09CD\u09A4",
        "\u09B8\u09AE\u09CD\u09AA\u09CD\u09B0\u09A4\u09BF",
        "\u09B8\u09B9",
        "\u09B8\u09B9\u09BF\u09A4",
        "\u09B8\u09BE\u09A7\u09BE\u09B0\u09A3",
        "\u09B8\u09BE\u09AE\u09A8\u09C7",
        "\u09B8\u09BF",
        "\u09B8\u09C1\u09A4\u09B0\u09BE\u0982",
        "\u09B8\u09C7",
        "\u09B8\u09C7\u0987",
        "\u09B8\u09C7\u0996\u09BE\u09A8",
        "\u09B8\u09C7\u0996\u09BE\u09A8\u09C7",
        "\u09B8\u09C7\u099F\u09BE",
        "\u09B8\u09C7\u099F\u09BE\u0987",
        "\u09B8\u09C7\u099F\u09BE\u0993",
        "\u09B8\u09C7\u099F\u09BF",
        "\u09B8\u09CD\u09AA\u09B7\u09CD\u099F",
        "\u09B8\u09CD\u09AC\u09AF\u09BC\u0982",
        "\u09B9\u0987\u09A4\u09C7",
        "\u09B9\u0987\u09AC\u09C7",
        "\u09B9\u0987\u09AF\u09BC\u09BE",
        "\u09B9\u0993\u09AF\u09BC\u09BE",
        "\u09B9\u0993\u09AF\u09BC\u09BE\u09AF\u09BC",
        "\u09B9\u0993\u09AF\u09BC\u09BE\u09B0",
        "\u09B9\u099A\u09CD\u099B\u09C7",
        "\u09B9\u09A4",
        "\u09B9\u09A4\u09C7",
        "\u09B9\u09A4\u09C7\u0987",
        "\u09B9\u09A8",
        "\u09B9\u09AC\u09C7",
        "\u09B9\u09AC\u09C7\u09A8",
        "\u09B9\u09AF\u09BC",
        "\u09B9\u09AF\u09BC\u09A4\u09CB",
        "\u09B9\u09AF\u09BC\u09A8\u09BF",
        "\u09B9\u09AF\u09BC\u09C7",
        "\u09B9\u09AF\u09BC\u09C7\u0987",
        "\u09B9\u09AF\u09BC\u09C7\u099B\u09BF\u09B2",
        "\u09B9\u09AF\u09BC\u09C7\u099B\u09C7",
        "\u09B9\u09AF\u09BC\u09C7\u099B\u09C7\u09A8",
        "\u09B9\u09B2",
        "\u09B9\u09B2\u09C7",
        "\u09B9\u09B2\u09C7\u0987",
        "\u09B9\u09B2\u09C7\u0993",
        "\u09B9\u09B2\u09CB",
        "\u09B9\u09BE\u099C\u09BE\u09B0",
        "\u09B9\u09BF\u09B8\u09BE\u09AC\u09C7",
        "\u09B9\u09C8\u09B2\u09C7",
        "\u09B9\u09CB\u0995",
        "\u09B9\u09AF\u09BC"
      ];
      const bre = [
        "a",
        "ainda",
        "alem",
        "ambas",
        "ambos",
        "antes",
        "ao",
        "aonde",
        "aos",
        "apos",
        "aquele",
        "aqueles",
        "as",
        "assim",
        "com",
        "como",
        "contra",
        "contudo",
        "cuja",
        "cujas",
        "cujo",
        "cujos",
        "da",
        "das",
        "de",
        "dela",
        "dele",
        "deles",
        "demais",
        "depois",
        "desde",
        "desta",
        "deste",
        "dispoe",
        "dispoem",
        "diversa",
        "diversas",
        "diversos",
        "do",
        "dos",
        "durante",
        "e",
        "ela",
        "elas",
        "ele",
        "eles",
        "em",
        "entao",
        "entre",
        "essa",
        "essas",
        "esse",
        "esses",
        "esta",
        "estas",
        "este",
        "estes",
        "ha",
        "isso",
        "isto",
        "logo",
        "mais",
        "mas",
        "mediante",
        "menos",
        "mesma",
        "mesmas",
        "mesmo",
        "mesmos",
        "na",
        "nao",
        "nas",
        "nem",
        "nesse",
        "neste",
        "nos",
        "o",
        "os",
        "ou",
        "outra",
        "outras",
        "outro",
        "outros",
        "pelas",
        "pelo",
        "pelos",
        "perante",
        "pois",
        "por",
        "porque",
        "portanto",
        "propios",
        "proprio",
        "quais",
        "qual",
        "qualquer",
        "quando",
        "quanto",
        "que",
        "quem",
        "quer",
        "se",
        "seja",
        "sem",
        "sendo",
        "seu",
        "seus",
        "sob",
        "sobre",
        "sua",
        "suas",
        "tal",
        "tambem",
        "teu",
        "teus",
        "toda",
        "todas",
        "todo",
        "todos",
        "tua",
        "tuas",
        "tudo",
        "um",
        "uma",
        "umas",
        "uns"
      ];
      const bul = [
        "\u0430",
        "\u0430\u0432\u0442\u0435\u043D\u0442\u0438\u0447\u0435\u043D",
        "\u0430\u0437",
        "\u0430\u043A\u043E",
        "\u0430\u043B\u0430",
        "\u0431\u0435",
        "\u0431\u0435\u0437",
        "\u0431\u0435\u0448\u0435",
        "\u0431\u0438",
        "\u0431\u0438\u0432\u0448",
        "\u0431\u0438\u0432\u0448\u0430",
        "\u0431\u0438\u0432\u0448\u043E",
        "\u0431\u0438\u043B",
        "\u0431\u0438\u043B\u0430",
        "\u0431\u0438\u043B\u0438",
        "\u0431\u0438\u043B\u043E",
        "\u0431\u043B\u0430\u0433\u043E\u0434\u0430\u0440\u044F",
        "\u0431\u043B\u0438\u0437\u043E",
        "\u0431\u044A\u0434\u0430\u0442",
        "\u0431\u044A\u0434\u0435",
        "\u0431\u044F\u0445\u0430",
        "\u0432",
        "\u0432\u0430\u0441",
        "\u0432\u0430\u0448",
        "\u0432\u0430\u0448\u0430",
        "\u0432\u0435\u0440\u043E\u044F\u0442\u043D\u043E",
        "\u0432\u0435\u0447\u0435",
        "\u0432\u0437\u0435\u043C\u0430",
        "\u0432\u0438",
        "\u0432\u0438\u0435",
        "\u0432\u0438\u043D\u0430\u0433\u0438",
        "\u0432\u043D\u0438\u043C\u0430\u0432\u0430",
        "\u0432\u0440\u0435\u043C\u0435",
        "\u0432\u0441\u0435",
        "\u0432\u0441\u0435\u043A\u0438",
        "\u0432\u0441\u0438\u0447\u043A\u0438",
        "\u0432\u0441\u0438\u0447\u043A\u043E",
        "\u0432\u0441\u044F\u043A\u0430",
        "\u0432\u044A\u0432",
        "\u0432\u044A\u043F\u0440\u0435\u043A\u0438",
        "\u0432\u044A\u0440\u0445\u0443",
        "\u0433",
        "\u0433\u0438",
        "\u0433\u043B\u0430\u0432\u0435\u043D",
        "\u0433\u043B\u0430\u0432\u043D\u0430",
        "\u0433\u043B\u0430\u0432\u043D\u043E",
        "\u0433\u043B\u0430\u0441",
        "\u0433\u043E",
        "\u0433\u043E\u0434\u0438\u043D\u0430",
        "\u0433\u043E\u0434\u0438\u043D\u0438",
        "\u0433\u043E\u0434\u0438\u0448\u0435\u043D",
        "\u0434",
        "\u0434\u0430",
        "\u0434\u0430\u043B\u0438",
        "\u0434\u0432\u0430",
        "\u0434\u0432\u0430\u043C\u0430",
        "\u0434\u0432\u0430\u043C\u0430\u0442\u0430",
        "\u0434\u0432\u0435",
        "\u0434\u0432\u0435\u0442\u0435",
        "\u0434\u0435\u043D",
        "\u0434\u043D\u0435\u0441",
        "\u0434\u043D\u0438",
        "\u0434\u043E",
        "\u0434\u043E\u0431\u0440\u0430",
        "\u0434\u043E\u0431\u0440\u0435",
        "\u0434\u043E\u0431\u0440\u043E",
        "\u0434\u043E\u0431\u044A\u0440",
        "\u0434\u043E\u043A\u0430\u0442\u043E",
        "\u0434\u043E\u043A\u043E\u0433\u0430",
        "\u0434\u043E\u0440\u0438",
        "\u0434\u043E\u0441\u0435\u0433\u0430",
        "\u0434\u043E\u0441\u0442\u0430",
        "\u0434\u0440\u0443\u0433",
        "\u0434\u0440\u0443\u0433\u0430",
        "\u0434\u0440\u0443\u0433\u0438",
        "\u0435",
        "\u0435\u0432\u0442\u0438\u043D",
        "\u0435\u0434\u0432\u0430",
        "\u0435\u0434\u0438\u043D",
        "\u0435\u0434\u043D\u0430",
        "\u0435\u0434\u043D\u0430\u043A\u0432\u0430",
        "\u0435\u0434\u043D\u0430\u043A\u0432\u0438",
        "\u0435\u0434\u043D\u0430\u043A\u044A\u0432",
        "\u0435\u0434\u043D\u043E",
        "\u0435\u043A\u0438\u043F",
        "\u0435\u0442\u043E",
        "\u0436\u0438\u0432\u043E\u0442",
        "\u0437\u0430",
        "\u0437\u0430\u0431\u0430\u0432\u044F\u043C",
        "\u0437\u0430\u0434",
        "\u0437\u0430\u0435\u0434\u043D\u043E",
        "\u0437\u0430\u0440\u0430\u0434\u0438",
        "\u0437\u0430\u0441\u0435\u0433\u0430",
        "\u0437\u0430\u0441\u043F\u0430\u043B",
        "\u0437\u0430\u0442\u043E\u0432\u0430",
        "\u0437\u0430\u0449\u043E",
        "\u0437\u0430\u0449\u043E\u0442\u043E",
        "\u0438",
        "\u0438\u0437",
        "\u0438\u043B\u0438",
        "\u0438\u043C",
        "\u0438\u043C\u0430",
        "\u0438\u043C\u0430\u0442",
        "\u0438\u0441\u043A\u0430",
        "\u0439",
        "\u043A\u0430\u0437\u0430",
        "\u043A\u0430\u043A",
        "\u043A\u0430\u043A\u0432\u0430",
        "\u043A\u0430\u043A\u0432\u043E",
        "\u043A\u0430\u043A\u0442\u043E",
        "\u043A\u0430\u043A\u044A\u0432",
        "\u043A\u0430\u0442\u043E",
        "\u043A\u043E\u0433\u0430",
        "\u043A\u043E\u0433\u0430\u0442\u043E",
        "\u043A\u043E\u0435\u0442\u043E",
        "\u043A\u043E\u0438\u0442\u043E",
        "\u043A\u043E\u0439",
        "\u043A\u043E\u0439\u0442\u043E",
        "\u043A\u043E\u043B\u043A\u043E",
        "\u043A\u043E\u044F\u0442\u043E",
        "\u043A\u044A\u0434\u0435",
        "\u043A\u044A\u0434\u0435\u0442\u043E",
        "\u043A\u044A\u043C",
        "\u043B\u0435\u0441\u0435\u043D",
        "\u043B\u0435\u0441\u043D\u043E",
        "\u043B\u0438",
        "\u043B\u043E\u0448",
        "\u043C",
        "\u043C\u0430\u0439",
        "\u043C\u0430\u043B\u043A\u043E",
        "\u043C\u0435",
        "\u043C\u0435\u0436\u0434\u0443",
        "\u043C\u0435\u043A",
        "\u043C\u0435\u043D",
        "\u043C\u0435\u0441\u0435\u0446",
        "\u043C\u0438",
        "\u043C\u043D\u043E\u0433\u043E",
        "\u043C\u043D\u043E\u0437\u0438\u043D\u0430",
        "\u043C\u043E\u0433\u0430",
        "\u043C\u043E\u0433\u0430\u0442",
        "\u043C\u043E\u0436\u0435",
        "\u043C\u043E\u043A\u044A\u0440",
        "\u043C\u043E\u043B\u044F",
        "\u043C\u043E\u043C\u0435\u043D\u0442\u0430",
        "\u043C\u0443",
        "\u043D",
        "\u043D\u0430",
        "\u043D\u0430\u0434",
        "\u043D\u0430\u0437\u0430\u0434",
        "\u043D\u0430\u0439",
        "\u043D\u0430\u043F\u0440\u0430\u0432\u0438",
        "\u043D\u0430\u043F\u0440\u0435\u0434",
        "\u043D\u0430\u043F\u0440\u0438\u043C\u0435\u0440",
        "\u043D\u0430\u0441",
        "\u043D\u0435",
        "\u043D\u0435\u0433\u043E",
        "\u043D\u0435\u0449\u043E",
        "\u043D\u0435\u044F",
        "\u043D\u0438",
        "\u043D\u0438\u0435",
        "\u043D\u0438\u043A\u043E\u0439",
        "\u043D\u0438\u0442\u043E",
        "\u043D\u0438\u0449\u043E",
        "\u043D\u043E",
        "\u043D\u043E\u0432",
        "\u043D\u043E\u0432\u0430",
        "\u043D\u043E\u0432\u0438",
        "\u043D\u043E\u0432\u0438\u043D\u0430",
        "\u043D\u044F\u043A\u043E\u0438",
        "\u043D\u044F\u043A\u043E\u0439",
        "\u043D\u044F\u043A\u043E\u043B\u043A\u043E",
        "\u043D\u044F\u043C\u0430",
        "\u043E\u0431\u0430\u0447\u0435",
        "\u043E\u043A\u043E\u043B\u043E",
        "\u043E\u0441\u0432\u0435\u043D",
        "\u043E\u0441\u043E\u0431\u0435\u043D\u043E",
        "\u043E\u0442",
        "\u043E\u0442\u0433\u043E\u0440\u0435",
        "\u043E\u0442\u043D\u043E\u0432\u043E",
        "\u043E\u0449\u0435",
        "\u043F\u0430\u043A",
        "\u043F\u043E",
        "\u043F\u043E\u0432\u0435\u0447\u0435",
        "\u043F\u043E\u0432\u0435\u0447\u0435\u0442\u043E",
        "\u043F\u043E\u0434",
        "\u043F\u043E\u043D\u0435",
        "\u043F\u043E\u0440\u0430\u0434\u0438",
        "\u043F\u043E\u0441\u043B\u0435",
        "\u043F\u043E\u0447\u0442\u0438",
        "\u043F\u0440\u0430\u0432\u0438",
        "\u043F\u0440\u0435\u0434",
        "\u043F\u0440\u0435\u0434\u0438",
        "\u043F\u0440\u0435\u0437",
        "\u043F\u0440\u0438",
        "\u043F\u044A\u043A",
        "\u043F\u044A\u0440\u0432\u0430\u0442\u0430",
        "\u043F\u044A\u0440\u0432\u0438",
        "\u043F\u044A\u0440\u0432\u043E",
        "\u043F\u044A\u0442\u0438",
        "\u0440\u0430\u0432\u0435\u043D",
        "\u0440\u0430\u0432\u043D\u0430",
        "\u0441",
        "\u0441\u0430",
        "\u0441\u0430\u043C",
        "\u0441\u0430\u043C\u043E",
        "\u0441\u0435",
        "\u0441\u0435\u0433\u0430",
        "\u0441\u0438",
        "\u0441\u0438\u043D",
        "\u0441\u043A\u043E\u0440\u043E",
        "\u0441\u043B\u0435\u0434",
        "\u0441\u043B\u0435\u0434\u0432\u0430\u0449",
        "\u0441\u043C\u0435",
        "\u0441\u043C\u044F\u0445",
        "\u0441\u043F\u043E\u0440\u0435\u0434",
        "\u0441\u0440\u0435\u0434",
        "\u0441\u0440\u0435\u0449\u0443",
        "\u0441\u0442\u0435",
        "\u0441\u044A\u043C",
        "\u0441\u044A\u0441",
        "\u0441\u044A\u0449\u043E",
        "\u0442",
        "\u0442.\u043D.",
        "\u0442\u0430\u0437\u0438",
        "\u0442\u0430\u043A\u0430",
        "\u0442\u0430\u043A\u0438\u0432\u0430",
        "\u0442\u0430\u043A\u044A\u0432",
        "\u0442\u0430\u043C",
        "\u0442\u0432\u043E\u0439",
        "\u0442\u0435",
        "\u0442\u0435\u0437\u0438",
        "\u0442\u0438",
        "\u0442\u043E",
        "\u0442\u043E\u0432\u0430",
        "\u0442\u043E\u0433\u0430\u0432\u0430",
        "\u0442\u043E\u0437\u0438",
        "\u0442\u043E\u0439",
        "\u0442\u043E\u043B\u043A\u043E\u0432\u0430",
        "\u0442\u043E\u0447\u043D\u043E",
        "\u0442\u0440\u0438",
        "\u0442\u0440\u044F\u0431\u0432\u0430",
        "\u0442\u0443\u043A",
        "\u0442\u044A\u0439",
        "\u0442\u044F",
        "\u0442\u044F\u0445",
        "\u0443",
        "\u0443\u0442\u0440\u0435",
        "\u0445\u0430\u0440\u0435\u0441\u0432\u0430",
        "\u0445\u0438\u043B\u044F\u0434\u0438",
        "\u0447",
        "\u0447\u0430\u0441\u0430",
        "\u0447\u0435",
        "\u0447\u0435\u0441\u0442\u043E",
        "\u0447\u0440\u0435\u0437",
        "\u0449\u0435",
        "\u0449\u043E\u043C",
        "\u044E\u043C\u0440\u0443\u043A",
        "\u044F",
        "\u044F\u043A"
      ];
      const cat = [
        "a",
        "abans",
        "ac\xED",
        "ah",
        "aix\xED",
        "aix\xF2",
        "al",
        "aleshores",
        "algun",
        "alguna",
        "algunes",
        "alguns",
        "alhora",
        "all\xE0",
        "all\xED",
        "all\xF2",
        "als",
        "altra",
        "altre",
        "altres",
        "amb",
        "ambdues",
        "ambd\xF3s",
        "apa",
        "aquell",
        "aquella",
        "aquelles",
        "aquells",
        "aquest",
        "aquesta",
        "aquestes",
        "aquests",
        "aqu\xED",
        "baix",
        "cada",
        "cadascuna",
        "cadascunes",
        "cadascuns",
        "cadasc\xFA",
        "com",
        "contra",
        "d'un",
        "d'una",
        "d'unes",
        "d'uns",
        "dalt",
        "de",
        "del",
        "dels",
        "des",
        "despr\xE9s",
        "dins",
        "dintre",
        "donat",
        "doncs",
        "durant",
        "e",
        "eh",
        "el",
        "els",
        "em",
        "en",
        "encara",
        "ens",
        "entre",
        "eren",
        "es",
        "esta",
        "estaven",
        "esteu",
        "est\xE0",
        "est\xE0vem",
        "est\xE0veu",
        "et",
        "etc",
        "ets",
        "fins",
        "fora",
        "gaireb\xE9",
        "ha",
        "han",
        "has",
        "havia",
        "he",
        "hem",
        "heu",
        "hi",
        "ho",
        "i",
        "igual",
        "iguals",
        "ja",
        "l'hi",
        "la",
        "les",
        "li",
        "li'n",
        "llavors",
        "m'he",
        "ma",
        "mal",
        "malgrat",
        "mateix",
        "mateixa",
        "mateixes",
        "mateixos",
        "me",
        "mentre",
        "meu",
        "meus",
        "meva",
        "meves",
        "molt",
        "molta",
        "moltes",
        "molts",
        "mon",
        "mons",
        "m\xE9s",
        "n'he",
        "n'hi",
        "ne",
        "ni",
        "no",
        "nogensmenys",
        "nom\xE9s",
        "nosaltres",
        "nostra",
        "nostre",
        "nostres",
        "o",
        "oh",
        "oi",
        "on",
        "pas",
        "pel",
        "pels",
        "per",
        "perqu\xE8",
        "per\xF2",
        "poc",
        "poca",
        "pocs",
        "poques",
        "potser",
        "propi",
        "qual",
        "quals",
        "quan",
        "quant",
        "que",
        "quelcom",
        "qui",
        "quin",
        "quina",
        "quines",
        "quins",
        "qu\xE8",
        "s'ha",
        "s'han",
        "sa",
        "semblant",
        "semblants",
        "ses",
        "seu",
        "seus",
        "seva",
        "seves",
        "si",
        "sobre",
        "sobretot",
        "solament",
        "sols",
        "son",
        "sons",
        "sota",
        "sou",
        "s\xF3c",
        "s\xF3n",
        "t'ha",
        "t'han",
        "t'he",
        "ta",
        "tal",
        "tamb\xE9",
        "tampoc",
        "tan",
        "tant",
        "tanta",
        "tantes",
        "teu",
        "teus",
        "teva",
        "teves",
        "ton",
        "tons",
        "tot",
        "tota",
        "totes",
        "tots",
        "un",
        "una",
        "unes",
        "uns",
        "us",
        "va",
        "vaig",
        "vam",
        "van",
        "vas",
        "veu",
        "vosaltres",
        "vostra",
        "vostre",
        "vostres",
        "\xE9rem",
        "\xE9reu",
        "\xE9s"
      ];
      const zho = [
        "\u7684",
        "\u5730",
        "\u5F97",
        "\u548C",
        "\u8DDF",
        "\u4E0E",
        "\u53CA",
        "\u5411",
        "\u5E76",
        "\u7B49",
        "\u66F4",
        "\u5DF2",
        "\u542B",
        "\u505A",
        "\u6211",
        "\u4F60",
        "\u4ED6",
        "\u5979",
        "\u4EEC",
        "\u67D0",
        "\u8BE5",
        "\u5404",
        "\u6BCF",
        "\u8FD9",
        "\u90A3",
        "\u54EA",
        "\u4EC0",
        "\u4E48",
        "\u8C01",
        "\u5E74",
        "\u6708",
        "\u65E5",
        "\u65F6",
        "\u5206",
        "\u79D2",
        "\u51E0",
        "\u591A",
        "\u6765",
        "\u5728",
        "\u5C31",
        "\u53C8",
        "\u5F88",
        "\u5462",
        "\u5427",
        "\u5417",
        "\u4E86",
        "\u561B",
        "\u54C7",
        "\u513F",
        "\u54FC",
        "\u554A",
        "\u55EF",
        "\u662F",
        "\u7740",
        "\u90FD",
        "\u4E0D",
        "\u8BF4",
        "\u4E5F",
        "\u770B",
        "\u628A",
        "\u8FD8",
        "\u4E2A",
        "\u6709",
        "\u5C0F",
        "\u5230",
        "\u4E00",
        "\u4E3A",
        "\u4E2D",
        "\u4E8E",
        "\u5BF9",
        "\u4F1A",
        "\u4E4B",
        "\u7B2C",
        "\u6B64",
        "\u6216",
        "\u5171",
        "\u6309",
        "\u8BF7"
      ];
      const hrv = [
        "a",
        "ako",
        "ali",
        "bi",
        "bih",
        "bila",
        "bili",
        "bilo",
        "bio",
        "bismo",
        "biste",
        "biti",
        "bumo",
        "da",
        "do",
        "du\u017E",
        "ga",
        "ho\u0107e",
        "ho\u0107emo",
        "ho\u0107ete",
        "ho\u0107e\u0161",
        "ho\u0107u",
        "i",
        "iako",
        "ih",
        "ili",
        "iz",
        "ja",
        "je",
        "jedna",
        "jedne",
        "jedno",
        "jer",
        "jesam",
        "jesi",
        "jesmo",
        "jest",
        "jeste",
        "jesu",
        "jim",
        "joj",
        "jo\u0161",
        "ju",
        "kada",
        "kako",
        "kao",
        "koja",
        "koje",
        "koji",
        "kojima",
        "koju",
        "kroz",
        "li",
        "me",
        "mene",
        "meni",
        "mi",
        "mimo",
        "moj",
        "moja",
        "moje",
        "mu",
        "na",
        "nad",
        "nakon",
        "nam",
        "nama",
        "nas",
        "na\u0161",
        "na\u0161a",
        "na\u0161e",
        "na\u0161eg",
        "ne",
        "nego",
        "neka",
        "neki",
        "nekog",
        "neku",
        "nema",
        "netko",
        "ne\u0107e",
        "ne\u0107emo",
        "ne\u0107ete",
        "ne\u0107e\u0161",
        "ne\u0107u",
        "ne\u0161to",
        "ni",
        "nije",
        "nikoga",
        "nikoje",
        "nikoju",
        "nisam",
        "nisi",
        "nismo",
        "niste",
        "nisu",
        "njega",
        "njegov",
        "njegova",
        "njegovo",
        "njemu",
        "njezin",
        "njezina",
        "njezino",
        "njih",
        "njihov",
        "njihova",
        "njihovo",
        "njim",
        "njima",
        "njoj",
        "nju",
        "no",
        "o",
        "od",
        "odmah",
        "on",
        "ona",
        "oni",
        "ono",
        "ova",
        "pa",
        "pak",
        "po",
        "pod",
        "pored",
        "prije",
        "s",
        "sa",
        "sam",
        "samo",
        "se",
        "sebe",
        "sebi",
        "si",
        "smo",
        "ste",
        "su",
        "sve",
        "svi",
        "svog",
        "svoj",
        "svoja",
        "svoje",
        "svom",
        "ta",
        "tada",
        "taj",
        "tako",
        "te",
        "tebe",
        "tebi",
        "ti",
        "to",
        "toj",
        "tome",
        "tu",
        "tvoj",
        "tvoja",
        "tvoje",
        "u",
        "uz",
        "vam",
        "vama",
        "vas",
        "va\u0161",
        "va\u0161a",
        "va\u0161e",
        "ve\u0107",
        "vi",
        "vrlo",
        "za",
        "zar",
        "\u0107e",
        "\u0107emo",
        "\u0107ete",
        "\u0107e\u0161",
        "\u0107u",
        "\u0161to"
      ];
      const ces = [
        "a",
        "aby",
        "ahoj",
        "aj",
        "ale",
        "anebo",
        "ani",
        "ano",
        "asi",
        "aspo\u0148",
        "atd",
        "atp",
        "a\u010Dkoli",
        "a\u017E",
        "bez",
        "beze",
        "bl\xEDzko",
        "bohu\u017Eel",
        "brzo",
        "bude",
        "budem",
        "budeme",
        "budete",
        "bude\u0161",
        "budou",
        "budu",
        "by",
        "byl",
        "byla",
        "byli",
        "bylo",
        "byly",
        "bys",
        "b\xFDt",
        "b\u011Bhem",
        "chce",
        "chceme",
        "chcete",
        "chce\u0161",
        "chci",
        "cht\xEDt",
        "cht\u011Bj\xED",
        "chut'",
        "chuti",
        "co",
        "co\u017E",
        "cz",
        "daleko",
        "dal\u0161\xED",
        "den",
        "deset",
        "devaten\xE1ct",
        "dev\u011Bt",
        "dnes",
        "do",
        "dobr\xFD",
        "docela",
        "dva",
        "dvacet",
        "dvan\xE1ct",
        "dv\u011B",
        "d\xE1l",
        "d\xE1le",
        "d\u011Bkovat",
        "d\u011Bkujeme",
        "d\u011Bkuji",
        "ho",
        "hodn\u011B",
        "i",
        "jak",
        "jakmile",
        "jako",
        "jako\u017E",
        "jde",
        "je",
        "jeden",
        "jeden\xE1ct",
        "jedna",
        "jedno",
        "jednou",
        "jedou",
        "jeho",
        "jeho\u017E",
        "jej",
        "jejich",
        "jej\xED",
        "jeliko\u017E",
        "jemu",
        "jen",
        "jenom",
        "jestli",
        "jestli\u017Ee",
        "je\u0161t\u011B",
        "je\u017E",
        "ji",
        "jich",
        "jimi",
        "jinak",
        "jin\xE9",
        "ji\u017E",
        "jsem",
        "jse\u0161",
        "jsi",
        "jsme",
        "jsou",
        "jste",
        "j\xE1",
        "j\xED",
        "j\xEDm",
        "j\xED\u017E",
        "k",
        "kam",
        "kde",
        "kdo",
        "kdy",
        "kdy\u017E",
        "ke",
        "kolik",
        "krom\u011B",
        "kterou",
        "kter\xE1",
        "kter\xE9",
        "kter\xFD",
        "kte\u0159\xED",
        "kv\u016Fli",
        "maj\xED",
        "mezi",
        "mi",
        "mne",
        "mnou",
        "mn\u011B",
        "moc",
        "mohl",
        "mohou",
        "moje",
        "moji",
        "mo\u017En\xE1",
        "mus\xED",
        "my",
        "m\xE1",
        "m\xE1lo",
        "m\xE1m",
        "m\xE1me",
        "m\xE1te",
        "m\xE1\u0161",
        "m\xE9",
        "m\xED",
        "m\xEDt",
        "m\u011B",
        "m\u016Fj",
        "m\u016F\u017Ee",
        "na",
        "nad",
        "nade",
        "napi\u0161te",
        "naproti",
        "na\u010De\u017E",
        "na\u0161e",
        "na\u0161i",
        "ne",
        "nebo",
        "nebyl",
        "nebyla",
        "nebyli",
        "nebyly",
        "ned\u011Blaj\xED",
        "ned\u011Bl\xE1",
        "ned\u011Bl\xE1m",
        "ned\u011Bl\xE1me",
        "ned\u011Bl\xE1te",
        "ned\u011Bl\xE1\u0161",
        "neg",
        "nejsi",
        "nejsou",
        "nemaj\xED",
        "nem\xE1me",
        "nem\xE1te",
        "nem\u011Bl",
        "nen\xED",
        "nesta\u010D\xED",
        "nevad\xED",
        "ne\u017E",
        "nic",
        "nich",
        "nimi",
        "nov\xE9",
        "nov\xFD",
        "nula",
        "n\xE1m",
        "n\xE1mi",
        "n\xE1s",
        "n\xE1\u0161",
        "n\xEDm",
        "n\u011B",
        "n\u011Bco",
        "n\u011Bjak",
        "n\u011Bkde",
        "n\u011Bkdo",
        "n\u011Bmu",
        "n\u011Bmu\u017E",
        "o",
        "od",
        "ode",
        "on",
        "ona",
        "oni",
        "ono",
        "ony",
        "osm",
        "osmn\xE1ct",
        "pak",
        "patn\xE1ct",
        "po",
        "pod",
        "podle",
        "pokud",
        "potom",
        "pouze",
        "pozd\u011B",
        "po\u0159\xE1d",
        "prav\xE9",
        "pro",
        "prost\u011B",
        "pros\xEDm",
        "proti",
        "proto",
        "proto\u017Ee",
        "pro\u010D",
        "prvn\xED",
        "pta",
        "p\u011Bt",
        "p\u0159ed",
        "p\u0159es",
        "p\u0159ese",
        "p\u0159i",
        "p\u0159i\u010Dem\u017E",
        "re",
        "rovn\u011B",
        "s",
        "se",
        "sedm",
        "sedmn\xE1ct",
        "si",
        "skoro",
        "sm\xED",
        "sm\u011Bj\xED",
        "snad",
        "spolu",
        "sta",
        "sto",
        "strana",
        "st\xE9",
        "sv\xE9",
        "sv\xFDch",
        "sv\xFDm",
        "sv\xFDmi",
        "ta",
        "tady",
        "tak",
        "takhle",
        "taky",
        "tak\xE9",
        "tak\u017Ee",
        "tam",
        "tamhle",
        "tamhleto",
        "tamto",
        "tato",
        "tebe",
        "tebou",
        "ted'",
        "tedy",
        "ten",
        "tento",
        "teto",
        "ti",
        "tipy",
        "tis\xEDc",
        "tis\xEDce",
        "to",
        "tob\u011B",
        "tohle",
        "toho",
        "tohoto",
        "tom",
        "tomto",
        "tomu",
        "tomuto",
        "toto",
        "tro\u0161ku",
        "tu",
        "tuto",
        "tvoje",
        "tv\xE1",
        "tv\xE9",
        "tv\u016Fj",
        "ty",
        "tyto",
        "t\xE9ma",
        "t\xEDm",
        "t\xEDmto",
        "t\u011B",
        "t\u011Bm",
        "t\u011Bmu",
        "t\u0159eba",
        "t\u0159i",
        "t\u0159in\xE1ct",
        "u",
        "ur\u010Dit\u011B",
        "u\u017E",
        "v",
        "va\u0161e",
        "va\u0161i",
        "ve",
        "vedle",
        "ve\u010Der",
        "vlastn\u011B",
        "vy",
        "v\xE1m",
        "v\xE1mi",
        "v\xE1s",
        "v\xE1\u0161",
        "v\xEDce",
        "v\u0161ak",
        "v\u0161echno",
        "v\u0161ichni",
        "v\u016Fbec",
        "v\u017Edy",
        "z",
        "za",
        "zat\xEDmco",
        "za\u010D",
        "zda",
        "zde",
        "ze",
        "zpr\xE1vy",
        "zp\u011Bt",
        "\u010Dau",
        "\u010Di",
        "\u010Dl\xE1nku",
        "\u010Dl\xE1nky",
        "\u010Dtrn\xE1ct",
        "\u010Dty\u0159i",
        "\u0161est",
        "\u0161estn\xE1ct",
        "\u017Ee"
      ];
      const dan = [
        "er",
        "jeg",
        "det",
        "du",
        "ikke",
        "i",
        "at",
        "en",
        "og",
        "har",
        "vi",
        "til",
        "p\xE5",
        "hvad",
        "med",
        "mig",
        "s\xE5",
        "for",
        "de",
        "dig",
        "der",
        "den",
        "han",
        "kan",
        "af",
        "vil",
        "var",
        "her",
        "et",
        "skal",
        "ved",
        "nu",
        "men",
        "om",
        "ja",
        "som",
        "nej",
        "min",
        "noget",
        "ham",
        "hun",
        "bare",
        "kom",
        "v\xE6re",
        "din",
        "hvor",
        "dem",
        "ud",
        "os",
        "hvis",
        "m\xE5",
        "se",
        "godt",
        "have",
        "fra",
        "ville",
        "okay",
        "lige",
        "op",
        "alle",
        "lad",
        "hvorfor",
        "sig",
        "hvordan",
        "f\xE5",
        "kunne",
        "eller",
        "hvem",
        "man",
        "bliver",
        "havde",
        "da",
        "ingen",
        "efter",
        "n\xE5r",
        "alt",
        "jo",
        "to",
        "mit",
        "ind",
        "hej",
        "aldrig",
        "lidt",
        "nogen",
        "over",
        "ogs\xE5",
        "mand",
        "far",
        "skulle",
        "selv",
        "f\xE5r",
        "hans",
        "ser",
        "vores",
        "jer",
        "s\xE5dan",
        "dit",
        "kun",
        "deres",
        "ned",
        "mine",
        "komme",
        "tage",
        "denne",
        "sige",
        "dette",
        "blive",
        "helt",
        "fordi",
        "end",
        "tag",
        "f\xF8r",
        "fik",
        "dine"
      ];
      const nld = [
        "aan",
        "af",
        "al",
        "alles",
        "als",
        "altijd",
        "andere",
        "ben",
        "bij",
        "daar",
        "dan",
        "dat",
        "de",
        "der",
        "deze",
        "die",
        "dit",
        "doch",
        "doen",
        "door",
        "dus",
        "een",
        "eens",
        "en",
        "er",
        "ge",
        "geen",
        "geweest",
        "haar",
        "had",
        "heb",
        "hebben",
        "heeft",
        "hem",
        "het",
        "hier",
        "hij",
        "hoe",
        "hun",
        "iemand",
        "iets",
        "ik",
        "in",
        "is",
        "ja",
        "je ",
        "kan",
        "kon",
        "kunnen",
        "maar",
        "me",
        "meer",
        "men",
        "met",
        "mij",
        "mijn",
        "moet",
        "na",
        "naar",
        "niet",
        "niets",
        "nog",
        "nu",
        "of",
        "om",
        "omdat",
        "ons",
        "ook",
        "op",
        "over",
        "reeds",
        "te",
        "tegen",
        "toch",
        "toen",
        "tot",
        "u",
        "uit",
        "uw",
        "van",
        "veel",
        "voor",
        "want",
        "waren",
        "was",
        "wat",
        "we",
        "wel",
        "werd",
        "wezen",
        "wie",
        "wij",
        "wil",
        "worden",
        "zal",
        "ze",
        "zei",
        "zelf",
        "zich",
        "zij",
        "zijn",
        "zo",
        "zonder",
        "zou"
      ];
      const eng2 = [
        "about",
        "after",
        "all",
        "also",
        "am",
        "an",
        "and",
        "another",
        "any",
        "are",
        "as",
        "at",
        "be",
        "because",
        "been",
        "before",
        "being",
        "between",
        "both",
        "but",
        "by",
        "came",
        "can",
        "come",
        "could",
        "did",
        "do",
        "each",
        "for",
        "from",
        "get",
        "got",
        "has",
        "had",
        "he",
        "have",
        "her",
        "here",
        "him",
        "himself",
        "his",
        "how",
        "if",
        "in",
        "into",
        "is",
        "it",
        "like",
        "make",
        "many",
        "me",
        "might",
        "more",
        "most",
        "much",
        "must",
        "my",
        "never",
        "now",
        "of",
        "on",
        "only",
        "or",
        "other",
        "our",
        "out",
        "over",
        "said",
        "same",
        "should",
        "since",
        "some",
        "still",
        "such",
        "take",
        "than",
        "that",
        "the",
        "their",
        "them",
        "then",
        "there",
        "these",
        "they",
        "this",
        "those",
        "through",
        "to",
        "too",
        "under",
        "up",
        "very",
        "was",
        "way",
        "we",
        "well",
        "were",
        "what",
        "where",
        "which",
        "while",
        "who",
        "with",
        "would",
        "you",
        "your",
        "a",
        "i"
      ];
      const epo = [
        "adia\u016D",
        "ajn",
        "al",
        "ankora\u016D",
        "anta\u016D",
        "a\u016D",
        "bonan",
        "bonvole",
        "bonvolu",
        "bv",
        "ci",
        "cia",
        "cian",
        "cin",
        "d-ro",
        "da",
        "de",
        "dek",
        "deka",
        "do",
        "doktor'",
        "doktoro",
        "du",
        "dua",
        "dum",
        "eble",
        "ekz",
        "ekzemple",
        "en",
        "estas",
        "estis",
        "estos",
        "estu",
        "estus",
        "e\u0109",
        "f-no",
        "feli\u0109an",
        "for",
        "fra\u016Dlino",
        "ha",
        "havas",
        "havis",
        "havos",
        "havu",
        "havus",
        "he",
        "ho",
        "hu",
        "ili",
        "ilia",
        "ilian",
        "ilin",
        "inter",
        "io",
        "ion",
        "iu",
        "iujn",
        "iun",
        "ja",
        "jam",
        "je",
        "jes",
        "k",
        "kaj",
        "ke",
        "kio",
        "kion",
        "kiu",
        "kiujn",
        "kiun",
        "kvankam",
        "kvar",
        "kvara",
        "kvaza\u016D",
        "kvin",
        "kvina",
        "la",
        "li",
        "lia",
        "lian",
        "lin",
        "malanta\u016D",
        "male",
        "malgra\u016D",
        "mem",
        "mi",
        "mia",
        "mian",
        "min",
        "minus",
        "na\u016D",
        "na\u016Da",
        "ne",
        "nek",
        "nenio",
        "nenion",
        "neniu",
        "neniun",
        "nepre",
        "ni",
        "nia",
        "nian",
        "nin",
        "nu",
        "nun",
        "nur",
        "ok",
        "oka",
        "oni",
        "onia",
        "onian",
        "onin",
        "plej",
        "pli",
        "plu",
        "plus",
        "por",
        "post",
        "preter",
        "s-no",
        "s-ro",
        "se",
        "sed",
        "sep",
        "sepa",
        "ses",
        "sesa",
        "si",
        "sia",
        "sian",
        "sin",
        "sinjor'",
        "sinjorino",
        "sinjoro",
        "sub",
        "super",
        "supren",
        "sur",
        "tamen",
        "tio",
        "tion",
        "tiu",
        "tiujn",
        "tiun",
        "tra",
        "tri",
        "tria",
        "tuj",
        "tute",
        "unu",
        "unua",
        "ve",
        "ver\u015Dajne",
        "vi",
        "via",
        "vian",
        "vin",
        "\u0109i",
        "\u0109io",
        "\u0109ion",
        "\u0109iu",
        "\u0109iujn",
        "\u0109iun",
        "\u0109u",
        "\u011Di",
        "\u011Dia",
        "\u011Dian",
        "\u011Din",
        "\u011Dis",
        "\u0135us",
        "\u015Di",
        "\u015Dia",
        "\u015Din"
      ];
      const est = [
        "aga",
        "ei",
        "et",
        "ja",
        "jah",
        "kas",
        "kui",
        "k\xF5ik",
        "ma",
        "me",
        "mida",
        "midagi",
        "mind",
        "minu",
        "mis",
        "mu",
        "mul",
        "mulle",
        "nad",
        "nii",
        "oled",
        "olen",
        "oli",
        "oma",
        "on",
        "pole",
        "sa",
        "seda",
        "see",
        "selle",
        "siin",
        "siis",
        "ta",
        "te",
        "\xE4ra"
      ];
      const fin = [
        "ja",
        "on",
        "oli",
        "h\xE4n",
        "vuonna",
        "my\xF6s",
        "joka",
        "se",
        "sek\xE4",
        "sen",
        "mutta",
        "ei",
        "ovat",
        "h\xE4nen",
        "n",
        "kanssa",
        "vuoden",
        "j\xE4lkeen",
        "ett\xE4",
        "s",
        "tai",
        "jonka",
        "jossa",
        "mukaan",
        "kun",
        "muun",
        "muassa",
        "h\xE4net",
        "olivat",
        "kuitenkin",
        "noin",
        "vuosina",
        "aikana",
        "lis\xE4ksi",
        "kaksi",
        "kuin",
        "ollut",
        "the",
        "my\xF6hemmin",
        "eli",
        "vain",
        "teki",
        "mm",
        "jotka",
        "ennen",
        "ensimm\xE4inen",
        "a",
        "9",
        "jo",
        "kuten",
        "yksi",
        "ensimm\xE4isen",
        "vastaan",
        "t\xE4m\xE4n",
        "vuodesta",
        "sit\xE4",
        "voi",
        "luvun",
        "luvulla",
        "of",
        "ole",
        "kauden",
        "osa",
        "esimerkiksi",
        "jolloin",
        "yli",
        "de",
        "kaudella",
        "eri",
        "sill\xE4",
        "kolme",
        "he",
        "vuotta"
      ];
      const fra = [
        "\xEAtre",
        "avoir",
        "faire",
        "a",
        "au",
        "aux",
        "avec",
        "ce",
        "ces",
        "dans",
        "de",
        "des",
        "du",
        "elle",
        "en",
        "et",
        "eux",
        "il",
        "je",
        "la",
        "le",
        "leur",
        "lui",
        "ma",
        "mais",
        "me",
        "m\xEAme",
        "mes",
        "moi",
        "mon",
        "ne",
        "nos",
        "notre",
        "nous",
        "on",
        "ou",
        "o\xF9",
        "par",
        "pas",
        "pour",
        "qu",
        "que",
        "qui",
        "sa",
        "se",
        "ses",
        "son",
        "sur",
        "ta",
        "te",
        "tes",
        "toi",
        "ton",
        "tu",
        "un",
        "une",
        "vos",
        "votre",
        "vous",
        "c",
        "d",
        "j",
        "l",
        "\xE0",
        "m",
        "n",
        "s",
        "t",
        "y",
        "\xE9t\xE9",
        "\xE9t\xE9e",
        "\xE9t\xE9es",
        "\xE9t\xE9s",
        "\xE9tant",
        "suis",
        "es",
        "est",
        "sommes",
        "\xEAtes",
        "sont",
        "serai",
        "seras",
        "sera",
        "serons",
        "serez",
        "seront",
        "serais",
        "serait",
        "serions",
        "seriez",
        "seraient",
        "\xE9tais",
        "\xE9tait",
        "\xE9tions",
        "\xE9tiez",
        "\xE9taient",
        "fus",
        "fut",
        "f\xFBmes",
        "f\xFBtes",
        "furent",
        "sois",
        "soit",
        "soyons",
        "soyez",
        "soient",
        "fusse",
        "fusses",
        "f\xFBt",
        "fussions",
        "fussiez",
        "fussent",
        "ayant",
        "eu",
        "eue",
        "eues",
        "eus",
        "ai",
        "as",
        "avons",
        "avez",
        "ont",
        "aurai",
        "auras",
        "aura",
        "aurons",
        "aurez",
        "auront",
        "aurais",
        "aurait",
        "aurions",
        "auriez",
        "auraient",
        "avais",
        "avait",
        "avions",
        "aviez",
        "avaient",
        "eut",
        "e\xFBmes",
        "e\xFBtes",
        "eurent",
        "aie",
        "aies",
        "ait",
        "ayons",
        "ayez",
        "aient",
        "eusse",
        "eusses",
        "e\xFBt",
        "eussions",
        "eussiez",
        "eussent",
        "ceci",
        "cela",
        "cet",
        "cette",
        "ici",
        "ils",
        "les",
        "leurs",
        "quel",
        "quels",
        "quelle",
        "quelles",
        "sans",
        "soi"
      ];
      const glg = [
        "a",
        "al\xED",
        "ao",
        "aos",
        "aquel",
        "aquela",
        "aquelas",
        "aqueles",
        "aquilo",
        "aqu\xED",
        "as",
        "as\xED",
        "a\xEDnda",
        "ben",
        "cando",
        "che",
        "co",
        "coa",
        "coas",
        "comigo",
        "con",
        "connosco",
        "contigo",
        "convosco",
        "cos",
        "cun",
        "cunha",
        "cunhas",
        "cuns",
        "da",
        "dalgunha",
        "dalgunhas",
        "dalg\xFAn",
        "dalg\xFAns",
        "das",
        "de",
        "del",
        "dela",
        "delas",
        "deles",
        "desde",
        "deste",
        "do",
        "dos",
        "dun",
        "dunha",
        "dunhas",
        "duns",
        "e",
        "el",
        "ela",
        "elas",
        "eles",
        "en",
        "era",
        "eran",
        "esa",
        "esas",
        "ese",
        "eses",
        "esta",
        "estaba",
        "estar",
        "este",
        "estes",
        "estiven",
        "estou",
        "est\xE1",
        "est\xE1n",
        "eu",
        "facer",
        "foi",
        "foron",
        "fun",
        "hab\xEDa",
        "hai",
        "iso",
        "isto",
        "la",
        "las",
        "lle",
        "lles",
        "lo",
        "los",
        "mais",
        "me",
        "meu",
        "meus",
        "min",
        "mi\xF1a",
        "mi\xF1as",
        "moi",
        "na",
        "nas",
        "neste",
        "nin",
        "no",
        "non",
        "nos",
        "nosa",
        "nosas",
        "noso",
        "nosos",
        "nun",
        "nunha",
        "nunhas",
        "nuns",
        "n\xF3s",
        "o",
        "os",
        "ou",
        "para",
        "pero",
        "pode",
        "pois",
        "pola",
        "polas",
        "polo",
        "polos",
        "por",
        "que",
        "se",
        "sen\xF3n",
        "ser",
        "seu",
        "seus",
        "sexa",
        "sido",
        "sobre",
        "s\xFAa",
        "s\xFAas",
        "tam\xE9n",
        "tan",
        "te",
        "ten",
        "ter",
        "teu",
        "teus",
        "te\xF1en",
        "te\xF1o",
        "ti",
        "tido",
        "tiven",
        "ti\xF1a",
        "t\xFAa",
        "t\xFAas",
        "un",
        "unha",
        "unhas",
        "uns",
        "vos",
        "vosa",
        "vosas",
        "voso",
        "vosos",
        "v\xF3s",
        "\xE1",
        "\xE9",
        "\xF3",
        "\xF3s"
      ];
      const deu = [
        "a",
        "ab",
        "aber",
        "ach",
        "acht",
        "achte",
        "achten",
        "achter",
        "achtes",
        "ag",
        "alle",
        "allein",
        "allem",
        "allen",
        "aller",
        "allerdings",
        "alles",
        "allgemeinen",
        "als",
        "also",
        "am",
        "an",
        "ander",
        "andere",
        "anderem",
        "anderen",
        "anderer",
        "anderes",
        "anderm",
        "andern",
        "anderr",
        "anders",
        "au",
        "auch",
        "auf",
        "aus",
        "ausser",
        "ausserdem",
        "au\xDFer",
        "au\xDFerdem",
        "b",
        "bald",
        "bei",
        "beide",
        "beiden",
        "beim",
        "beispiel",
        "bekannt",
        "bereits",
        "besonders",
        "besser",
        "besten",
        "bin",
        "bis",
        "bisher",
        "bist",
        "c",
        "d",
        "d.h",
        "da",
        "dabei",
        "dadurch",
        "daf\xFCr",
        "dagegen",
        "daher",
        "dahin",
        "dahinter",
        "damals",
        "damit",
        "danach",
        "daneben",
        "dank",
        "dann",
        "daran",
        "darauf",
        "daraus",
        "darf",
        "darfst",
        "darin",
        "darum",
        "darunter",
        "dar\xFCber",
        "das",
        "dasein",
        "daselbst",
        "dass",
        "dasselbe",
        "davon",
        "davor",
        "dazu",
        "dazwischen",
        "da\xDF",
        "dein",
        "deine",
        "deinem",
        "deinen",
        "deiner",
        "deines",
        "dem",
        "dementsprechend",
        "demgegen\xFCber",
        "demgem\xE4ss",
        "demgem\xE4\xDF",
        "demselben",
        "demzufolge",
        "den",
        "denen",
        "denn",
        "denselben",
        "der",
        "deren",
        "derer",
        "derjenige",
        "derjenigen",
        "dermassen",
        "derma\xDFen",
        "derselbe",
        "derselben",
        "des",
        "deshalb",
        "desselben",
        "dessen",
        "deswegen",
        "dich",
        "die",
        "diejenige",
        "diejenigen",
        "dies",
        "diese",
        "dieselbe",
        "dieselben",
        "diesem",
        "diesen",
        "dieser",
        "dieses",
        "dir",
        "doch",
        "dort",
        "drei",
        "drin",
        "dritte",
        "dritten",
        "dritter",
        "drittes",
        "du",
        "durch",
        "durchaus",
        "durfte",
        "durften",
        "d\xFCrfen",
        "d\xFCrft",
        "e",
        "eben",
        "ebenso",
        "ehrlich",
        "ei",
        "ei, ",
        "eigen",
        "eigene",
        "eigenen",
        "eigener",
        "eigenes",
        "ein",
        "einander",
        "eine",
        "einem",
        "einen",
        "einer",
        "eines",
        "einig",
        "einige",
        "einigem",
        "einigen",
        "einiger",
        "einiges",
        "einmal",
        "eins",
        "elf",
        "en",
        "ende",
        "endlich",
        "entweder",
        "er",
        "ernst",
        "erst",
        "erste",
        "ersten",
        "erster",
        "erstes",
        "es",
        "etwa",
        "etwas",
        "euch",
        "euer",
        "eure",
        "eurem",
        "euren",
        "eurer",
        "eures",
        "f",
        "folgende",
        "fr\xFCher",
        "f\xFCnf",
        "f\xFCnfte",
        "f\xFCnften",
        "f\xFCnfter",
        "f\xFCnftes",
        "f\xFCr",
        "g",
        "gab",
        "ganz",
        "ganze",
        "ganzen",
        "ganzer",
        "ganzes",
        "gar",
        "gedurft",
        "gegen",
        "gegen\xFCber",
        "gehabt",
        "gehen",
        "geht",
        "gekannt",
        "gekonnt",
        "gemacht",
        "gemocht",
        "gemusst",
        "genug",
        "gerade",
        "gern",
        "gesagt",
        "geschweige",
        "gewesen",
        "gewollt",
        "geworden",
        "gibt",
        "ging",
        "gleich",
        "gott",
        "gross",
        "grosse",
        "grossen",
        "grosser",
        "grosses",
        "gro\xDF",
        "gro\xDFe",
        "gro\xDFen",
        "gro\xDFer",
        "gro\xDFes",
        "gut",
        "gute",
        "guter",
        "gutes",
        "h",
        "hab",
        "habe",
        "haben",
        "habt",
        "hast",
        "hat",
        "hatte",
        "hatten",
        "hattest",
        "hattet",
        "heisst",
        "her",
        "heute",
        "hier",
        "hin",
        "hinter",
        "hoch",
        "h\xE4tte",
        "h\xE4tten",
        "i",
        "ich",
        "ihm",
        "ihn",
        "ihnen",
        "ihr",
        "ihre",
        "ihrem",
        "ihren",
        "ihrer",
        "ihres",
        "im",
        "immer",
        "in",
        "indem",
        "infolgedessen",
        "ins",
        "irgend",
        "ist",
        "j",
        "ja",
        "jahr",
        "jahre",
        "jahren",
        "je",
        "jede",
        "jedem",
        "jeden",
        "jeder",
        "jedermann",
        "jedermanns",
        "jedes",
        "jedoch",
        "jemand",
        "jemandem",
        "jemanden",
        "jene",
        "jenem",
        "jenen",
        "jener",
        "jenes",
        "jetzt",
        "k",
        "kam",
        "kann",
        "kannst",
        "kaum",
        "kein",
        "keine",
        "keinem",
        "keinen",
        "keiner",
        "keines",
        "kleine",
        "kleinen",
        "kleiner",
        "kleines",
        "kommen",
        "kommt",
        "konnte",
        "konnten",
        "kurz",
        "k\xF6nnen",
        "k\xF6nnt",
        "k\xF6nnte",
        "l",
        "lang",
        "lange",
        "leicht",
        "leide",
        "lieber",
        "los",
        "m",
        "machen",
        "macht",
        "machte",
        "mag",
        "magst",
        "mahn",
        "mal",
        "man",
        "manche",
        "manchem",
        "manchen",
        "mancher",
        "manches",
        "mann",
        "mehr",
        "mein",
        "meine",
        "meinem",
        "meinen",
        "meiner",
        "meines",
        "mensch",
        "menschen",
        "mich",
        "mir",
        "mit",
        "mittel",
        "mochte",
        "mochten",
        "morgen",
        "muss",
        "musst",
        "musste",
        "mussten",
        "mu\xDF",
        "mu\xDFt",
        "m\xF6chte",
        "m\xF6gen",
        "m\xF6glich",
        "m\xF6gt",
        "m\xFCssen",
        "m\xFCsst",
        "m\xFC\xDFt",
        "n",
        "na",
        "nach",
        "nachdem",
        "nahm",
        "nat\xFCrlich",
        "neben",
        "nein",
        "neue",
        "neuen",
        "neun",
        "neunte",
        "neunten",
        "neunter",
        "neuntes",
        "nicht",
        "nichts",
        "nie",
        "niemand",
        "niemandem",
        "niemanden",
        "noch",
        "nun",
        "nur",
        "o",
        "ob",
        "oben",
        "oder",
        "offen",
        "oft",
        "ohne",
        "ordnung",
        "p",
        "q",
        "r",
        "recht",
        "rechte",
        "rechten",
        "rechter",
        "rechtes",
        "richtig",
        "rund",
        "s",
        "sa",
        "sache",
        "sagt",
        "sagte",
        "sah",
        "satt",
        "schlecht",
        "schluss",
        "schon",
        "sechs",
        "sechste",
        "sechsten",
        "sechster",
        "sechstes",
        "sehr",
        "sei",
        "seid",
        "seien",
        "sein",
        "seine",
        "seinem",
        "seinen",
        "seiner",
        "seines",
        "seit",
        "seitdem",
        "selbst",
        "sich",
        "sie",
        "sieben",
        "siebente",
        "siebenten",
        "siebenter",
        "siebentes",
        "sind",
        "so",
        "solang",
        "solche",
        "solchem",
        "solchen",
        "solcher",
        "solches",
        "soll",
        "sollen",
        "sollst",
        "sollt",
        "sollte",
        "sollten",
        "sondern",
        "sonst",
        "soweit",
        "sowie",
        "sp\xE4ter",
        "startseite",
        "statt",
        "steht",
        "suche",
        "t",
        "tag",
        "tage",
        "tagen",
        "tat",
        "teil",
        "tel",
        "tritt",
        "trotzdem",
        "tun",
        "u",
        "uhr",
        "um",
        "und",
        "und?",
        "uns",
        "unse",
        "unsem",
        "unsen",
        "unser",
        "unsere",
        "unserer",
        "unses",
        "unter",
        "v",
        "vergangenen",
        "viel",
        "viele",
        "vielem",
        "vielen",
        "vielleicht",
        "vier",
        "vierte",
        "vierten",
        "vierter",
        "viertes",
        "vom",
        "von",
        "vor",
        "w",
        "wahr?",
        "wann",
        "war",
        "waren",
        "warst",
        "wart",
        "warum",
        "was",
        "weg",
        "wegen",
        "weil",
        "weit",
        "weiter",
        "weitere",
        "weiteren",
        "weiteres",
        "welche",
        "welchem",
        "welchen",
        "welcher",
        "welches",
        "wem",
        "wen",
        "wenig",
        "wenige",
        "weniger",
        "weniges",
        "wenigstens",
        "wenn",
        "wer",
        "werde",
        "werden",
        "werdet",
        "weshalb",
        "wessen",
        "wie",
        "wieder",
        "wieso",
        "will",
        "willst",
        "wir",
        "wird",
        "wirklich",
        "wirst",
        "wissen",
        "wo",
        "woher",
        "wohin",
        "wohl",
        "wollen",
        "wollt",
        "wollte",
        "wollten",
        "worden",
        "wurde",
        "wurden",
        "w\xE4hrend",
        "w\xE4hrenddem",
        "w\xE4hrenddessen",
        "w\xE4re",
        "w\xFCrde",
        "w\xFCrden",
        "x",
        "y",
        "z",
        "z.b",
        "zehn",
        "zehnte",
        "zehnten",
        "zehnter",
        "zehntes",
        "zeit",
        "zu",
        "zuerst",
        "zugleich",
        "zum",
        "zun\xE4chst",
        "zur",
        "zur\xFCck",
        "zusammen",
        "zwanzig",
        "zwar",
        "zwei",
        "zweite",
        "zweiten",
        "zweiter",
        "zweites",
        "zwischen",
        "zw\xF6lf",
        "\xFCber",
        "\xFCberhaupt",
        "\xFCbrigens"
      ];
      const ell = [
        "\u03B1\u03BB\u03BB\u03B1",
        "\u03B1\u03BD",
        "\u03B1\u03BD\u03C4\u03B9",
        "\u03B1\u03C0\u03BF",
        "\u03B1\u03C5\u03C4\u03B1",
        "\u03B1\u03C5\u03C4\u03B5\u03C3",
        "\u03B1\u03C5\u03C4\u03B7",
        "\u03B1\u03C5\u03C4\u03BF",
        "\u03B1\u03C5\u03C4\u03BF\u03B9",
        "\u03B1\u03C5\u03C4\u03BF\u03C3",
        "\u03B1\u03C5\u03C4\u03BF\u03C5\u03C3",
        "\u03B1\u03C5\u03C4\u03C9\u03BD",
        "\u03B3\u03B9\u03B1",
        "\u03B4\u03B5",
        "\u03B4\u03B5\u03BD",
        "\u03B5\u03B1\u03BD",
        "\u03B5\u03B9\u03BC\u03B1\u03B9",
        "\u03B5\u03B9\u03BC\u03B1\u03C3\u03C4\u03B5",
        "\u03B5\u03B9\u03BD\u03B1\u03B9",
        "\u03B5\u03B9\u03C3\u03B1\u03B9",
        "\u03B5\u03B9\u03C3\u03C4\u03B5",
        "\u03B5\u03BA\u03B5\u03B9\u03BD\u03B1",
        "\u03B5\u03BA\u03B5\u03B9\u03BD\u03B5\u03C3",
        "\u03B5\u03BA\u03B5\u03B9\u03BD\u03B7",
        "\u03B5\u03BA\u03B5\u03B9\u03BD\u03BF",
        "\u03B5\u03BA\u03B5\u03B9\u03BD\u03BF\u03B9",
        "\u03B5\u03BA\u03B5\u03B9\u03BD\u03BF\u03C3",
        "\u03B5\u03BA\u03B5\u03B9\u03BD\u03BF\u03C5\u03C3",
        "\u03B5\u03BA\u03B5\u03B9\u03BD\u03C9\u03BD",
        "\u03B5\u03BD\u03C9",
        "\u03B5\u03C0\u03B9",
        "\u03B7",
        "\u03B8\u03B1",
        "\u03B9\u03C3\u03C9\u03C3",
        "\u03BA",
        "\u03BA\u03B1\u03B9",
        "\u03BA\u03B1\u03C4\u03B1",
        "\u03BA\u03B9",
        "\u03BC\u03B1",
        "\u03BC\u03B5",
        "\u03BC\u03B5\u03C4\u03B1",
        "\u03BC\u03B7",
        "\u03BC\u03B7\u03BD",
        "\u03BD\u03B1",
        "\u03BF",
        "\u03BF\u03B9",
        "\u03BF\u03BC\u03C9\u03C3",
        "\u03BF\u03C0\u03C9\u03C3",
        "\u03BF\u03C3\u03BF",
        "\u03BF\u03C4\u03B9",
        "\u03C0\u03B1\u03C1\u03B1",
        "\u03C0\u03BF\u03B9\u03B1",
        "\u03C0\u03BF\u03B9\u03B5\u03C3",
        "\u03C0\u03BF\u03B9\u03BF",
        "\u03C0\u03BF\u03B9\u03BF\u03B9",
        "\u03C0\u03BF\u03B9\u03BF\u03C3",
        "\u03C0\u03BF\u03B9\u03BF\u03C5\u03C3",
        "\u03C0\u03BF\u03B9\u03C9\u03BD",
        "\u03C0\u03BF\u03C5",
        "\u03C0\u03C1\u03BF\u03C3",
        "\u03C0\u03C9\u03C3",
        "\u03C3\u03B5",
        "\u03C3\u03C4\u03B7",
        "\u03C3\u03C4\u03B7\u03BD",
        "\u03C3\u03C4\u03BF",
        "\u03C3\u03C4\u03BF\u03BD",
        "\u03C4\u03B1",
        "\u03C4\u03B7\u03BD",
        "\u03C4\u03B7\u03C3",
        "\u03C4\u03BF",
        "\u03C4\u03BF\u03BD",
        "\u03C4\u03BF\u03C4\u03B5",
        "\u03C4\u03BF\u03C5",
        "\u03C4\u03C9\u03BD",
        "\u03C9\u03C3"
      ];
      const guj = [
        "\u0A85\u0A82\u0A97\u0AC7",
        "\u0A85\u0A82\u0AA6\u0AB0",
        "\u0A85\u0AA5\u0AB5\u0ABE",
        "\u0A85\u0AA8\u0AC7",
        "\u0A85\u0AAE\u0AA8\u0AC7",
        "\u0A85\u0AAE\u0ABE\u0AB0\u0AC1\u0A82",
        "\u0A85\u0AAE\u0AC7",
        "\u0A85\u0AB9\u0AC0\u0A82",
        "\u0A86",
        "\u0A86\u0A97\u0AB3",
        "\u0A86\u0AA5\u0AC0",
        "\u0A86\u0AA8\u0AC1\u0A82",
        "\u0A86\u0AA8\u0AC7",
        "\u0A86\u0AAA\u0AA3\u0AA8\u0AC7",
        "\u0A86\u0AAA\u0AA3\u0AC1\u0A82",
        "\u0A86\u0AAA\u0AA3\u0AC7",
        "\u0A86\u0AAA\u0AC0",
        "\u0A86\u0AB0",
        "\u0A86\u0AB5\u0AC0",
        "\u0A86\u0AB5\u0AC7",
        "\u0A89\u0AAA\u0AB0",
        "\u0A89\u0AAD\u0ABE",
        "\u0A8A\u0A82\u0A9A\u0AC7",
        "\u0A8A\u0AAD\u0AC1\u0A82",
        "\u0A8F",
        "\u0A8F\u0A95",
        "\u0A8F\u0AA8",
        "\u0A8F\u0AA8\u0ABE",
        "\u0A8F\u0AA8\u0ABE\u0A82",
        "\u0A8F\u0AA8\u0AC0",
        "\u0A8F\u0AA8\u0AC1\u0A82",
        "\u0A8F\u0AA8\u0AC7",
        "\u0A8F\u0AA8\u0ACB",
        "\u0A8F\u0AAE",
        "\u0A8F\u0AB5\u0ABE",
        "\u0A8F\u0AB5\u0ABE\u0A82",
        "\u0A8F\u0AB5\u0AC0",
        "\u0A8F\u0AB5\u0AC1\u0A82",
        "\u0A8F\u0AB5\u0ACB",
        "\u0A93\u0A9B\u0AC1\u0A82",
        "\u0A95\u0A82\u0A88\u0A95",
        "\u0A95\u0A88",
        "\u0A95\u0AAF\u0AC1\u0A82",
        "\u0A95\u0AAF\u0ACB",
        "\u0A95\u0AB0\u0AA4\u0ABE\u0A82",
        "\u0A95\u0AB0\u0AB5\u0AC1\u0A82",
        "\u0A95\u0AB0\u0AC0",
        "\u0A95\u0AB0\u0AC0\u0A8F",
        "\u0A95\u0AB0\u0AC1\u0A82",
        "\u0A95\u0AB0\u0AC7",
        "\u0A95\u0AB0\u0AC7\u0AB2\u0AC1\u0A82",
        "\u0A95\u0AB0\u0ACD\u0AAF\u0ABE",
        "\u0A95\u0AB0\u0ACD\u0AAF\u0ABE\u0A82",
        "\u0A95\u0AB0\u0ACD\u0AAF\u0AC1\u0A82",
        "\u0A95\u0AB0\u0ACD\u0AAF\u0ACB",
        "\u0A95\u0ABE\u0A82\u0A88",
        "\u0A95\u0AC7",
        "\u0A95\u0AC7\u0A9F\u0AB2\u0AC1\u0A82",
        "\u0A95\u0AC7\u0AAE",
        "\u0A95\u0AC7\u0AB5\u0AC0",
        "\u0A95\u0AC7\u0AB5\u0AC1\u0A82",
        "\u0A95\u0ACB\u0A88",
        "\u0A95\u0ACB\u0A88\u0A95",
        "\u0A95\u0ACB\u0AA3",
        "\u0A95\u0ACB\u0AA3\u0AC7",
        "\u0A95\u0ACB\u0AA8\u0AC7",
        "\u0A95\u0ACD\u0AAF\u0ABE\u0A82",
        "\u0A95\u0ACD\u0AAF\u0ABE\u0AB0\u0AC7",
        "\u0A96\u0AC2\u0AAC",
        "\u0A97\u0A88",
        "\u0A97\u0AAF\u0ABE",
        "\u0A97\u0AAF\u0ABE\u0A82",
        "\u0A97\u0AAF\u0AC1\u0A82",
        "\u0A97\u0AAF\u0ACB",
        "\u0A98\u0AA3\u0AC1\u0A82",
        "\u0A9B",
        "\u0A9B\u0AA4\u0ABE\u0A82",
        "\u0A9B\u0AC0\u0A8F",
        "\u0A9B\u0AC1\u0A82",
        "\u0A9B\u0AC7",
        "\u0A9B\u0AC7\u0A95",
        "\u0A9B\u0ACB",
        "\u0A9C",
        "\u0A9C\u0ABE\u0AAF",
        "\u0A9C\u0AC0",
        "\u0A9C\u0AC7",
        "\u0A9C\u0AC7\u0A9F\u0AB2\u0AC1\u0A82",
        "\u0A9C\u0AC7\u0AA8\u0AC7",
        "\u0A9C\u0AC7\u0AAE",
        "\u0A9C\u0AC7\u0AB5\u0AC0",
        "\u0A9C\u0AC7\u0AB5\u0AC1\u0A82",
        "\u0A9C\u0AC7\u0AB5\u0ACB",
        "\u0A9C\u0ACB",
        "\u0A9C\u0ACB\u0A88\u0A8F",
        "\u0A9C\u0ACD\u0AAF\u0ABE\u0A82",
        "\u0A9C\u0ACD\u0AAF\u0ABE\u0AB0\u0AC7",
        "\u0A9D\u0ABE\u0A9D\u0AC1\u0A82",
        "\u0AA4\u0AA8\u0AC7",
        "\u0AA4\u0AAE\u0AA8\u0AC7",
        "\u0AA4\u0AAE\u0ABE\u0AB0\u0AC1\u0A82",
        "\u0AA4\u0AAE\u0AC7",
        "\u0AA4\u0ABE",
        "\u0AA4\u0ABE\u0AB0\u0ABE\u0AA5\u0AC0",
        "\u0AA4\u0ABE\u0AB0\u0ABE\u0AAE\u0ABE\u0A82",
        "\u0AA4\u0ABE\u0AB0\u0AC1\u0A82",
        "\u0AA4\u0AC1\u0A82",
        "\u0AA4\u0AC7",
        "\u0AA4\u0AC7\u0A82",
        "\u0AA4\u0AC7\u0A93",
        "\u0AA4\u0AC7\u0AA3\u0AC7",
        "\u0AA4\u0AC7\u0AA5\u0AC0",
        "\u0AA4\u0AC7\u0AA8\u0ABE",
        "\u0AA4\u0AC7\u0AA8\u0AC0",
        "\u0AA4\u0AC7\u0AA8\u0AC1\u0A82",
        "\u0AA4\u0AC7\u0AA8\u0AC7",
        "\u0AA4\u0AC7\u0AAE",
        "\u0AA4\u0AC7\u0AAE\u0AA8\u0AC1\u0A82",
        "\u0AA4\u0AC7\u0AAE\u0AA8\u0AC7",
        "\u0AA4\u0AC7\u0AB5\u0AC0",
        "\u0AA4\u0AC7\u0AB5\u0AC1\u0A82",
        "\u0AA4\u0ACB",
        "\u0AA4\u0ACD\u0AAF\u0ABE\u0A82",
        "\u0AA4\u0ACD\u0AAF\u0ABE\u0AB0\u0AC7",
        "\u0AA5\u0A87",
        "\u0AA5\u0A88",
        "\u0AA5\u0A88\u0A8F",
        "\u0AA5\u0AA4\u0ABE",
        "\u0AA5\u0AA4\u0ABE\u0A82",
        "\u0AA5\u0AA4\u0AC0",
        "\u0AA5\u0AA4\u0AC1\u0A82",
        "\u0AA5\u0AA4\u0ACB",
        "\u0AA5\u0AAF\u0ABE",
        "\u0AA5\u0AAF\u0ABE\u0A82",
        "\u0AA5\u0AAF\u0AC1\u0A82",
        "\u0AA5\u0AAF\u0AC7\u0AB2\u0AC1\u0A82",
        "\u0AA5\u0AAF\u0ACB",
        "\u0AA5\u0AB5\u0AC1\u0A82",
        "\u0AA5\u0ABE\u0A89\u0A82",
        "\u0AA5\u0ABE\u0A93",
        "\u0AA5\u0ABE\u0AAF",
        "\u0AA5\u0AC0",
        "\u0AA5\u0ACB\u0AA1\u0AC1\u0A82",
        "\u0AA6\u0AB0\u0AC7\u0A95",
        "\u0AA8",
        "\u0AA8\u0A82",
        "\u0AA8\u0A82.",
        "\u0AA8\u0AA5\u0AC0",
        "\u0AA8\u0AB9\u0ABF",
        "\u0AA8\u0AB9\u0AC0",
        "\u0AA8\u0AB9\u0AC0\u0A82",
        "\u0AA8\u0ABE",
        "\u0AA8\u0AC0",
        "\u0AA8\u0AC0\u0A9A\u0AC7",
        "\u0AA8\u0AC1\u0A82",
        "\u0AA8\u0AC7",
        "\u0AA8\u0ACB",
        "\u0AAA\u0A9B\u0AC0",
        "\u0AAA\u0AA3",
        "\u0AAA\u0AB0",
        "\u0AAA\u0AB0\u0A82\u0AA4\u0AC1",
        "\u0AAA\u0AB9\u0AC7\u0AB2\u0ABE\u0A82",
        "\u0AAA\u0ABE\u0A9B\u0AB3",
        "\u0AAA\u0ABE\u0AB8\u0AC7",
        "\u0AAA\u0ACB\u0AA4\u0ABE\u0AA8\u0AC1\u0A82",
        "\u0AAA\u0ACD\u0AB0\u0AA4\u0ACD\u0AAF\u0AC7\u0A95",
        "\u0AAB\u0A95\u0ACD\u0AA4",
        "\u0AAB\u0AB0\u0AC0",
        "\u0AAB\u0AB0\u0AC0\u0AA5\u0AC0",
        "\u0AAC\u0A82\u0AA8\u0AC7",
        "\u0AAC\u0AA7\u0ABE",
        "\u0AAC\u0AA7\u0AC1\u0A82",
        "\u0AAC\u0AA8\u0AC0",
        "\u0AAC\u0AB9\u0ABE\u0AB0",
        "\u0AAC\u0AB9\u0AC1",
        "\u0AAC\u0ABE\u0AA6",
        "\u0AAC\u0AC7",
        "\u0AAE\u0AA8\u0AC7",
        "\u0AAE\u0ABE",
        "\u0AAE\u0ABE\u0A82",
        "\u0AAE\u0ABE\u0A9F\u0AC7",
        "\u0AAE\u0ABE\u0AA4\u0ACD\u0AB0",
        "\u0AAE\u0ABE\u0AB0\u0AC1\u0A82",
        "\u0AAE\u0AC0",
        "\u0AAE\u0AC2\u0A95\u0AB5\u0AC1\u0A82",
        "\u0AAE\u0AC2\u0A95\u0AC0",
        "\u0AAE\u0AC2\u0A95\u0ACD\u0AAF\u0ABE",
        "\u0AAE\u0AC2\u0A95\u0ACD\u0AAF\u0ABE\u0A82",
        "\u0AAE\u0AC2\u0A95\u0ACD\u0AAF\u0AC1\u0A82",
        "\u0AAE\u0AC7\u0A82",
        "\u0AB0\u0AB9\u0AC0",
        "\u0AB0\u0AB9\u0AC7",
        "\u0AB0\u0AB9\u0AC7\u0AB5\u0AC1\u0A82",
        "\u0AB0\u0AB9\u0ACD\u0AAF\u0ABE",
        "\u0AB0\u0AB9\u0ACD\u0AAF\u0ABE\u0A82",
        "\u0AB0\u0AB9\u0ACD\u0AAF\u0ACB",
        "\u0AB0\u0AC0\u0AA4\u0AC7",
        "\u0AB0\u0AC2.",
        "\u0AB0\u0AC2\u0ABE",
        "\u0AB2\u0AC7\u0AA4\u0ABE",
        "\u0AB2\u0AC7\u0AA4\u0AC1\u0A82",
        "\u0AB2\u0AC7\u0AB5\u0ABE",
        "\u0AB5\u0A97\u0AC7\u0AB0\u0AC7",
        "\u0AB5\u0AA7\u0AC1",
        "\u0AB6\u0A95\u0AC7",
        "\u0AB6\u0ABE",
        "\u0AB6\u0AC1\u0A82",
        "\u0AB8\u0AB0\u0A96\u0AC1\u0A82",
        "\u0AB8\u0ABE\u0AAE\u0AC7",
        "\u0AB8\u0AC1\u0AA7\u0AC0",
        "\u0AB9\u0AA4\u0ABE",
        "\u0AB9\u0AA4\u0ABE\u0A82",
        "\u0AB9\u0AA4\u0AC0",
        "\u0AB9\u0AA4\u0AC1\u0A82",
        "\u0AB9\u0AB5\u0AC7",
        "\u0AB9\u0AB6\u0AC7",
        "\u0AB9\u0AB6\u0ACB",
        "\u0AB9\u0ABE",
        "\u0AB9\u0AC1\u0A82",
        "\u0AB9\u0ACB",
        "\u0AB9\u0ACB\u0A88",
        "\u0AB9\u0ACB\u0A88\u0AB6",
        "\u0AB9\u0ACB\u0A88\u0AB6\u0AC1\u0A82",
        "\u0AB9\u0ACB\u0AAF",
        "\u0AB9\u0ACB\u0AB5\u0ABE"
      ];
      const hau = [
        "ta",
        "da",
        "ya",
        "sai",
        "ba",
        "yi",
        "na",
        "kuma",
        "ma",
        "ji",
        "cikin",
        "in",
        "ni",
        "wata",
        "wani",
        "ce",
        "tana",
        "don",
        "za",
        "sun",
        "amma",
        "ga",
        "ina",
        "ne",
        "tselane",
        "mai",
        "suka",
        "wannan",
        "a",
        "ko",
        "lokacin",
        "su",
        "take",
        "kaka",
        "shi",
        "yake",
        "yana",
        "mulongo",
        "mata",
        "ka",
        "ban",
        "ita",
        "tafi",
        "shanshani",
        "kai",
        "da\u0257i",
        "mi",
        "\u0199ato",
        "fara",
        "rana"
      ];
      const heb = [
        "\u05D0\u05D1\u05DC",
        "\u05D0\u05D5",
        "\u05D0\u05D5\u05DC\u05D9",
        "\u05D0\u05D5\u05EA\u05D4",
        "\u05D0\u05D5\u05EA\u05D5",
        "\u05D0\u05D5\u05EA\u05D9",
        "\u05D0\u05D5\u05EA\u05DA",
        "\u05D0\u05D5\u05EA\u05DD",
        "\u05D0\u05D5\u05EA\u05DF",
        "\u05D0\u05D5\u05EA\u05E0\u05D5",
        "\u05D0\u05D6",
        "\u05D0\u05D7\u05E8",
        "\u05D0\u05D7\u05E8\u05D5\u05EA",
        "\u05D0\u05D7\u05E8\u05D9",
        "\u05D0\u05D7\u05E8\u05D9\u05DB\u05DF",
        "\u05D0\u05D7\u05E8\u05D9\u05DD",
        "\u05D0\u05D7\u05E8\u05EA",
        "\u05D0\u05D9",
        "\u05D0\u05D9\u05D6\u05D4",
        "\u05D0\u05D9\u05DA",
        "\u05D0\u05D9\u05DF",
        "\u05D0\u05D9\u05E4\u05D4",
        "\u05D0\u05D9\u05EA\u05D4",
        "\u05D0\u05D9\u05EA\u05D5",
        "\u05D0\u05D9\u05EA\u05D9",
        "\u05D0\u05D9\u05EA\u05DA",
        "\u05D0\u05D9\u05EA\u05DB\u05DD",
        "\u05D0\u05D9\u05EA\u05DB\u05DF",
        "\u05D0\u05D9\u05EA\u05DD",
        "\u05D0\u05D9\u05EA\u05DF",
        "\u05D0\u05D9\u05EA\u05E0\u05D5",
        "\u05D0\u05DA",
        "\u05D0\u05DC",
        "\u05D0\u05DC\u05D4",
        "\u05D0\u05DC\u05D5",
        "\u05D0\u05DD",
        "\u05D0\u05E0\u05D7\u05E0\u05D5",
        "\u05D0\u05E0\u05D9",
        "\u05D0\u05E1",
        "\u05D0\u05E3",
        "\u05D0\u05E6\u05DC",
        "\u05D0\u05E9\u05E8",
        "\u05D0\u05EA",
        "\u05D0\u05EA\u05D4",
        "\u05D0\u05EA\u05DB\u05DD",
        "\u05D0\u05EA\u05DB\u05DF",
        "\u05D0\u05EA\u05DD",
        "\u05D0\u05EA\u05DF",
        "\u05D1\u05D0\u05D9\u05D6\u05D5\u05DE\u05D9\u05D3\u05D4",
        "\u05D1\u05D0\u05DE\u05E6\u05E2",
        "\u05D1\u05D0\u05DE\u05E6\u05E2\u05D5\u05EA",
        "\u05D1\u05D2\u05DC\u05DC",
        "\u05D1\u05D9\u05DF",
        "\u05D1\u05DC\u05D9",
        "\u05D1\u05DE\u05D9\u05D3\u05D4",
        "\u05D1\u05DE\u05E7\u05D5\u05DD\u05E9\u05D1\u05D5",
        "\u05D1\u05E8\u05DD",
        "\u05D1\u05E9\u05D1\u05D9\u05DC",
        "\u05D1\u05E9\u05E2\u05D4\u05E9",
        "\u05D1\u05EA\u05D5\u05DA",
        "\u05D2\u05DD",
        "\u05D3\u05E8\u05DA",
        "\u05D4\u05D5\u05D0",
        "\u05D4\u05D9\u05D0",
        "\u05D4\u05D9\u05D4",
        "\u05D4\u05D9\u05DB\u05DF",
        "\u05D4\u05D9\u05EA\u05D4",
        "\u05D4\u05D9\u05EA\u05D9",
        "\u05D4\u05DD",
        "\u05D4\u05DF",
        "\u05D4\u05E0\u05D4",
        "\u05D4\u05E1\u05D9\u05D1\u05D4\u05E9\u05D1\u05D2\u05DC\u05DC\u05D4",
        "\u05D4\u05E8\u05D9",
        "\u05D5\u05D0\u05D9\u05DC\u05D5",
        "\u05D5\u05D0\u05EA",
        "\u05D6\u05D0\u05EA",
        "\u05D6\u05D4",
        "\u05D6\u05D5\u05EA",
        "\u05D9\u05D4\u05D9\u05D4",
        "\u05D9\u05D5\u05DB\u05DC",
        "\u05D9\u05D5\u05DB\u05DC\u05D5",
        "\u05D9\u05D5\u05EA\u05E8\u05DE\u05D3\u05D9",
        "\u05D9\u05DB\u05D5\u05DC",
        "\u05D9\u05DB\u05D5\u05DC\u05D4",
        "\u05D9\u05DB\u05D5\u05DC\u05D5\u05EA",
        "\u05D9\u05DB\u05D5\u05DC\u05D9\u05DD",
        "\u05D9\u05DB\u05DC",
        "\u05D9\u05DB\u05DC\u05D4",
        "\u05D9\u05DB\u05DC\u05D5",
        "\u05D9\u05E9",
        "\u05DB\u05D0\u05DF",
        "\u05DB\u05D0\u05E9\u05E8",
        "\u05DB\u05D5\u05DC\u05DD",
        "\u05DB\u05D5\u05DC\u05DF",
        "\u05DB\u05D6\u05D4",
        "\u05DB\u05D9",
        "\u05DB\u05D9\u05E6\u05D3",
        "\u05DB\u05DA",
        "\u05DB\u05DB\u05D4",
        "\u05DB\u05DC",
        "\u05DB\u05DC\u05DC",
        "\u05DB\u05DE\u05D5",
        "\u05DB\u05DF",
        "\u05DB\u05E4\u05D9",
        "\u05DB\u05E9",
        "\u05DC\u05D0",
        "\u05DC\u05D0\u05D5",
        "\u05DC\u05D0\u05D9\u05D6\u05D5\u05EA\u05DB\u05DC\u05D9\u05EA",
        "\u05DC\u05D0\u05DF",
        "\u05DC\u05D1\u05D9\u05DF",
        "\u05DC\u05D4",
        "\u05DC\u05D4\u05D9\u05D5\u05EA",
        "\u05DC\u05D4\u05DD",
        "\u05DC\u05D4\u05DF",
        "\u05DC\u05D5",
        "\u05DC\u05D9",
        "\u05DC\u05DB\u05DD",
        "\u05DC\u05DB\u05DF",
        "\u05DC\u05DE\u05D4",
        "\u05DC\u05DE\u05D8\u05D4",
        "\u05DC\u05DE\u05E2\u05DC\u05D4",
        "\u05DC\u05DE\u05E7\u05D5\u05DD\u05E9\u05D1\u05D5",
        "\u05DC\u05DE\u05E8\u05D5\u05EA",
        "\u05DC\u05E0\u05D5",
        "\u05DC\u05E2\u05D1\u05E8",
        "\u05DC\u05E2\u05D9\u05DB\u05DF",
        "\u05DC\u05E4\u05D9\u05DB\u05DA",
        "\u05DC\u05E4\u05E0\u05D9",
        "\u05DE\u05D0\u05D3",
        "\u05DE\u05D0\u05D7\u05D5\u05E8\u05D9",
        "\u05DE\u05D0\u05D9\u05D6\u05D5\u05E1\u05D9\u05D1\u05D4",
        "\u05DE\u05D0\u05D9\u05DF",
        "\u05DE\u05D0\u05D9\u05E4\u05D4",
        "\u05DE\u05D1\u05DC\u05D9",
        "\u05DE\u05D1\u05E2\u05D3",
        "\u05DE\u05D3\u05D5\u05E2",
        "\u05DE\u05D4",
        "\u05DE\u05D4\u05D9\u05DB\u05DF",
        "\u05DE\u05D5\u05DC",
        "\u05DE\u05D7\u05D5\u05E5",
        "\u05DE\u05D9",
        "\u05DE\u05DB\u05D0\u05DF",
        "\u05DE\u05DB\u05D9\u05D5\u05D5\u05DF",
        "\u05DE\u05DC\u05D1\u05D3",
        "\u05DE\u05DF",
        "\u05DE\u05E0\u05D9\u05DF",
        "\u05DE\u05E1\u05D5\u05D2\u05DC",
        "\u05DE\u05E2\u05D8",
        "\u05DE\u05E2\u05D8\u05D9\u05DD",
        "\u05DE\u05E2\u05DC",
        "\u05DE\u05E6\u05D3",
        "\u05DE\u05E7\u05D5\u05DD\u05D1\u05D5",
        "\u05DE\u05EA\u05D7\u05EA",
        "\u05DE\u05EA\u05D9",
        "\u05E0\u05D2\u05D3",
        "\u05E0\u05D2\u05E8",
        "\u05E0\u05D5",
        "\u05E2\u05D3",
        "\u05E2\u05D6",
        "\u05E2\u05DC",
        "\u05E2\u05DC\u05D9",
        "\u05E2\u05DC\u05D9\u05D4",
        "\u05E2\u05DC\u05D9\u05D4\u05DD",
        "\u05E2\u05DC\u05D9\u05D4\u05DF",
        "\u05E2\u05DC\u05D9\u05D5",
        "\u05E2\u05DC\u05D9\u05DA",
        "\u05E2\u05DC\u05D9\u05DB\u05DD",
        "\u05E2\u05DC\u05D9\u05E0\u05D5",
        "\u05E2\u05DD",
        "\u05E2\u05E6\u05DE\u05D4",
        "\u05E2\u05E6\u05DE\u05D4\u05DD",
        "\u05E2\u05E6\u05DE\u05D4\u05DF",
        "\u05E2\u05E6\u05DE\u05D5",
        "\u05E2\u05E6\u05DE\u05D9",
        "\u05E2\u05E6\u05DE\u05DD",
        "\u05E2\u05E6\u05DE\u05DF",
        "\u05E2\u05E6\u05DE\u05E0\u05D5",
        "\u05E4\u05D4",
        "\u05E8\u05E7",
        "\u05E9\u05D5\u05D1",
        "\u05E9\u05DC",
        "\u05E9\u05DC\u05D4",
        "\u05E9\u05DC\u05D4\u05DD",
        "\u05E9\u05DC\u05D4\u05DF",
        "\u05E9\u05DC\u05D5",
        "\u05E9\u05DC\u05D9",
        "\u05E9\u05DC\u05DA",
        "\u05E9\u05DC\u05DB\u05D4",
        "\u05E9\u05DC\u05DB\u05DD",
        "\u05E9\u05DC\u05DB\u05DF",
        "\u05E9\u05DC\u05E0\u05D5",
        "\u05E9\u05DD",
        "\u05EA\u05D4\u05D9\u05D4",
        "\u05EA\u05D7\u05EA"
      ];
      const hin = [
        "\u0905\u0902\u0926\u0930",
        "\u0905\u0924",
        "\u0905\u0926\u093F",
        "\u0905\u092A",
        "\u0905\u092A\u0928\u093E",
        "\u0905\u092A\u0928\u093F",
        "\u0905\u092A\u0928\u0940",
        "\u0905\u092A\u0928\u0947",
        "\u0905\u092D\u093F",
        "\u0905\u092D\u0940",
        "\u0906\u0926\u093F",
        "\u0906\u092A",
        "\u0907\u0902\u0939\u093F\u0902",
        "\u0907\u0902\u0939\u0947\u0902",
        "\u0907\u0902\u0939\u094B\u0902",
        "\u0907\u0924\u092F\u093E\u0926\u093F",
        "\u0907\u0924\u094D\u092F\u093E\u0926\u093F",
        "\u0907\u0928",
        "\u0907\u0928\u0915\u093E",
        "\u0907\u0928\u094D\u0939\u0940\u0902",
        "\u0907\u0928\u094D\u0939\u0947\u0902",
        "\u0907\u0928\u094D\u0939\u094B\u0902",
        "\u0907\u0938",
        "\u0907\u0938\u0915\u093E",
        "\u0907\u0938\u0915\u093F",
        "\u0907\u0938\u0915\u0940",
        "\u0907\u0938\u0915\u0947",
        "\u0907\u0938\u092E\u0947\u0902",
        "\u0907\u0938\u093F",
        "\u0907\u0938\u0940",
        "\u0907\u0938\u0947",
        "\u0909\u0902\u0939\u093F\u0902",
        "\u0909\u0902\u0939\u0947\u0902",
        "\u0909\u0902\u0939\u094B\u0902",
        "\u0909\u0928",
        "\u0909\u0928\u0915\u093E",
        "\u0909\u0928\u0915\u093F",
        "\u0909\u0928\u0915\u0940",
        "\u0909\u0928\u0915\u0947",
        "\u0909\u0928\u0915\u094B",
        "\u0909\u0928\u094D\u0939\u0940\u0902",
        "\u0909\u0928\u094D\u0939\u0947\u0902",
        "\u0909\u0928\u094D\u0939\u094B\u0902",
        "\u0909\u0938",
        "\u0909\u0938\u0915\u0947",
        "\u0909\u0938\u093F",
        "\u0909\u0938\u0940",
        "\u0909\u0938\u0947",
        "\u090F\u0915",
        "\u090F\u0935\u0902",
        "\u090F\u0938",
        "\u090F\u0938\u0947",
        "\u0910\u0938\u0947",
        "\u0913\u0930",
        "\u0914\u0930",
        "\u0915\u0907",
        "\u0915\u0908",
        "\u0915\u0930",
        "\u0915\u0930\u0924\u093E",
        "\u0915\u0930\u0924\u0947",
        "\u0915\u0930\u0928\u093E",
        "\u0915\u0930\u0928\u0947",
        "\u0915\u0930\u0947\u0902",
        "\u0915\u0939\u0924\u0947",
        "\u0915\u0939\u093E",
        "\u0915\u093E",
        "\u0915\u093E\u092B\u093F",
        "\u0915\u093E\u092B\u093C\u0940",
        "\u0915\u093F",
        "\u0915\u093F\u0902\u0939\u0947\u0902",
        "\u0915\u093F\u0902\u0939\u094B\u0902",
        "\u0915\u093F\u0924\u0928\u093E",
        "\u0915\u093F\u0928\u094D\u0939\u0947\u0902",
        "\u0915\u093F\u0928\u094D\u0939\u094B\u0902",
        "\u0915\u093F\u092F\u093E",
        "\u0915\u093F\u0930",
        "\u0915\u093F\u0938",
        "\u0915\u093F\u0938\u093F",
        "\u0915\u093F\u0938\u0940",
        "\u0915\u093F\u0938\u0947",
        "\u0915\u0940",
        "\u0915\u0941\u091B",
        "\u0915\u0941\u0932",
        "\u0915\u0947",
        "\u0915\u094B",
        "\u0915\u094B\u0907",
        "\u0915\u094B\u0908",
        "\u0915\u094B\u0928",
        "\u0915\u094B\u0928\u0938\u093E",
        "\u0915\u094C\u0928",
        "\u0915\u094C\u0928\u0938\u093E",
        "\u0917\u092F\u093E",
        "\u0918\u0930",
        "\u091C\u092C",
        "\u091C\u0939\u093E\u0901",
        "\u091C\u0939\u093E\u0902",
        "\u091C\u093E",
        "\u091C\u093F\u0902\u0939\u0947\u0902",
        "\u091C\u093F\u0902\u0939\u094B\u0902",
        "\u091C\u093F\u0924\u0928\u093E",
        "\u091C\u093F\u0927\u0930",
        "\u091C\u093F\u0928",
        "\u091C\u093F\u0928\u094D\u0939\u0947\u0902",
        "\u091C\u093F\u0928\u094D\u0939\u094B\u0902",
        "\u091C\u093F\u0938",
        "\u091C\u093F\u0938\u0947",
        "\u091C\u0940\u0927\u0930",
        "\u091C\u0947\u0938\u093E",
        "\u091C\u0947\u0938\u0947",
        "\u091C\u0948\u0938\u093E",
        "\u091C\u0948\u0938\u0947",
        "\u091C\u094B",
        "\u0924\u0915",
        "\u0924\u092C",
        "\u0924\u0930\u0939",
        "\u0924\u093F\u0902\u0939\u0947\u0902",
        "\u0924\u093F\u0902\u0939\u094B\u0902",
        "\u0924\u093F\u0928",
        "\u0924\u093F\u0928\u094D\u0939\u0947\u0902",
        "\u0924\u093F\u0928\u094D\u0939\u094B\u0902",
        "\u0924\u093F\u0938",
        "\u0924\u093F\u0938\u0947",
        "\u0924\u094B",
        "\u0925\u093E",
        "\u0925\u093F",
        "\u0925\u0940",
        "\u0925\u0947",
        "\u0926\u092C\u093E\u0930\u093E",
        "\u0926\u0935\u093E\u0930\u093E",
        "\u0926\u093F\u092F\u093E",
        "\u0926\u0941\u0938\u0930\u093E",
        "\u0926\u0941\u0938\u0930\u0947",
        "\u0926\u0942\u0938\u0930\u0947",
        "\u0926\u094B",
        "\u0926\u094D\u0935\u093E\u0930\u093E",
        "\u0928",
        "\u0928\u0939\u093F\u0902",
        "\u0928\u0939\u0940\u0902",
        "\u0928\u093E",
        "\u0928\u093F\u091A\u0947",
        "\u0928\u093F\u0939\u093E\u092F\u0924",
        "\u0928\u0940\u091A\u0947",
        "\u0928\u0947",
        "\u092A\u0930",
        "\u092A\u0939\u0932\u0947",
        "\u092A\u0941\u0930\u093E",
        "\u092A\u0942\u0930\u093E",
        "\u092A\u0947",
        "\u092B\u093F\u0930",
        "\u092C\u0928\u093F",
        "\u092C\u0928\u0940",
        "\u092C\u0939\u093F",
        "\u092C\u0939\u0940",
        "\u092C\u0939\u0941\u0924",
        "\u092C\u093E\u0926",
        "\u092C\u093E\u0932\u093E",
        "\u092C\u093F\u0932\u0915\u0941\u0932",
        "\u092D\u093F",
        "\u092D\u093F\u0924\u0930",
        "\u092D\u0940",
        "\u092D\u0940\u0924\u0930",
        "\u092E\u0917\u0930",
        "\u092E\u093E\u0928\u094B",
        "\u092E\u0947",
        "\u092E\u0947\u0902",
        "\u092F\u0926\u093F",
        "\u092F\u0939",
        "\u092F\u0939\u093E\u0901",
        "\u092F\u0939\u093E\u0902",
        "\u092F\u0939\u093F",
        "\u092F\u0939\u0940",
        "\u092F\u093E",
        "\u092F\u093F\u0939",
        "\u092F\u0947",
        "\u0930\u0916\u0947\u0902",
        "\u0930\u0935\u093E\u0938\u093E",
        "\u0930\u0939\u093E",
        "\u0930\u0939\u0947",
        "\u0931\u094D\u0935\u093E\u0938\u093E",
        "\u0932\u093F\u090F",
        "\u0932\u093F\u092F\u0947",
        "\u0932\u0947\u0915\u093F\u0928",
        "\u0935",
        "\u0935\u0917\u0947\u0930\u0939",
        "\u0935\u0930\u0917",
        "\u0935\u0930\u094D\u0917",
        "\u0935\u0939",
        "\u0935\u0939\u093E\u0901",
        "\u0935\u0939\u093E\u0902",
        "\u0935\u0939\u093F\u0902",
        "\u0935\u0939\u0940\u0902",
        "\u0935\u093E\u0932\u0947",
        "\u0935\u0941\u0939",
        "\u0935\u0947",
        "\u0935\u0917\u093C\u0948\u0930\u0939",
        "\u0938\u0902\u0917",
        "\u0938\u0915\u0924\u093E",
        "\u0938\u0915\u0924\u0947",
        "\u0938\u092C\u0938\u0947",
        "\u0938\u092D\u093F",
        "\u0938\u092D\u0940",
        "\u0938\u093E\u0925",
        "\u0938\u093E\u092C\u0941\u0924",
        "\u0938\u093E\u092D",
        "\u0938\u093E\u0930\u093E",
        "\u0938\u0947",
        "\u0938\u094B",
        "\u0939\u093F",
        "\u0939\u0940",
        "\u0939\u0941\u0905",
        "\u0939\u0941\u0906",
        "\u0939\u0941\u0907",
        "\u0939\u0941\u0908",
        "\u0939\u0941\u090F",
        "\u0939\u0947",
        "\u0939\u0947\u0902",
        "\u0939\u0948",
        "\u0939\u0948\u0902",
        "\u0939\u094B",
        "\u0939\u094B\u0924\u093E",
        "\u0939\u094B\u0924\u093F",
        "\u0939\u094B\u0924\u0940",
        "\u0939\u094B\u0924\u0947",
        "\u0939\u094B\u0928\u093E",
        "\u0939\u094B\u0928\u0947"
      ];
      const gle = [
        "a",
        "ach",
        "ag",
        "agus",
        "an",
        "aon",
        "ar",
        "arna",
        "as",
        "b'",
        "ba",
        "beirt",
        "bh\xFAr",
        "caoga",
        "ceathair",
        "ceathrar",
        "chomh",
        "cht\xF3",
        "chuig",
        "chun",
        "cois",
        "c\xE9ad",
        "c\xFAig",
        "c\xFAigear",
        "d'",
        "daichead",
        "dar",
        "de",
        "deich",
        "deichni\xFAr",
        "den",
        "dh\xE1",
        "do",
        "don",
        "dt\xED",
        "d\xE1",
        "d\xE1r",
        "d\xF3",
        "faoi",
        "faoin",
        "faoina",
        "faoin\xE1r",
        "fara",
        "fiche",
        "gach",
        "gan",
        "go",
        "gur",
        "haon",
        "hocht",
        "i",
        "iad",
        "idir",
        "in",
        "ina",
        "ins",
        "in\xE1r",
        "is",
        "le",
        "leis",
        "lena",
        "len\xE1r",
        "m'",
        "mar",
        "mo",
        "m\xE9",
        "na",
        "nach",
        "naoi",
        "naon\xFAr",
        "n\xE1",
        "n\xED",
        "n\xEDor",
        "n\xF3",
        "n\xF3cha",
        "ocht",
        "ochtar",
        "os",
        "roimh",
        "sa",
        "seacht",
        "seachtar",
        "seacht\xF3",
        "seasca",
        "seisear",
        "siad",
        "sibh",
        "sinn",
        "sna",
        "s\xE9",
        "s\xED",
        "tar",
        "thar",
        "th\xFA",
        "tri\xFAr",
        "tr\xED",
        "tr\xEDna",
        "tr\xEDn\xE1r",
        "tr\xEDocha",
        "t\xFA",
        "um",
        "\xE1r",
        "\xE9",
        "\xE9is",
        "\xED",
        "\xF3",
        "\xF3n",
        "\xF3na",
        "\xF3n\xE1r"
      ];
      const hun = [
        "a",
        "abba",
        "abban",
        "abb\xF3l",
        "addig",
        "ahhoz",
        "ahogy",
        "ahol",
        "aki",
        "akik",
        "akkor",
        "ak\xE1r",
        "alapj\xE1n",
        "alatt",
        "alatta",
        "alattad",
        "alattam",
        "alattatok",
        "alattuk",
        "alattunk",
        "al\xE1",
        "al\xE1d",
        "al\xE1juk",
        "al\xE1m",
        "al\xE1nk",
        "al\xE1tok",
        "al\xF3l",
        "al\xF3la",
        "al\xF3lad",
        "al\xF3lam",
        "al\xF3latok",
        "al\xF3luk",
        "al\xF3lunk",
        "amely",
        "amelybol",
        "amelyek",
        "amelyekben",
        "amelyeket",
        "amelyet",
        "amelyik",
        "amelynek",
        "ami",
        "amikor",
        "amit",
        "amolyan",
        "amott",
        "am\xEDg",
        "annak",
        "ann\xE1l",
        "arra",
        "arr\xF3l",
        "att\xF3l",
        "az",
        "aznap",
        "azok",
        "azokat",
        "azokba",
        "azokban",
        "azokb\xF3l",
        "azokhoz",
        "azokig",
        "azokkal",
        "azokk\xE1",
        "azoknak",
        "azokn\xE1l",
        "azokon",
        "azokra",
        "azokr\xF3l",
        "azokt\xF3l",
        "azok\xE9rt",
        "azon",
        "azonban",
        "azonnal",
        "azt",
        "azt\xE1n",
        "azut\xE1n",
        "azzal",
        "azz\xE1",
        "az\xE9rt",
        "bal",
        "balra",
        "ban",
        "be",
        "bel\xE9",
        "bel\xE9d",
        "bel\xE9j\xFCk",
        "bel\xE9m",
        "bel\xE9nk",
        "bel\xE9tek",
        "bel\xFCl",
        "bel\u0151le",
        "bel\u0151led",
        "bel\u0151lem",
        "bel\u0151letek",
        "bel\u0151l\xFCk",
        "bel\u0151l\xFCnk",
        "ben",
        "benne",
        "benned",
        "bennem",
        "bennetek",
        "benn\xFCk",
        "benn\xFCnk",
        "b\xE1r",
        "b\xE1rcsak",
        "b\xE1rmilyen",
        "b\xFAcs\xFA",
        "cikk",
        "cikkek",
        "cikkeket",
        "csak",
        "csakhogy",
        "csup\xE1n",
        "de",
        "dehogy",
        "e",
        "ebbe",
        "ebben",
        "ebb\u0151l",
        "eddig",
        "egy",
        "egyebek",
        "egyebet",
        "egyed\xFCl",
        "egyel\u0151re",
        "egyes",
        "egyet",
        "egyetlen",
        "egyik",
        "egym\xE1s",
        "egyre",
        "egyszerre",
        "egy\xE9b",
        "egy\xFCtt",
        "eg\xE9sz",
        "eg\xE9szen",
        "ehhez",
        "ekkor",
        "el",
        "eleinte",
        "ellen",
        "ellenes",
        "elleni",
        "ellen\xE9re",
        "elmondta",
        "els\u0151",
        "els\u0151k",
        "els\u0151sorban",
        "els\u0151t",
        "el\xE9",
        "el\xE9d",
        "el\xE9g",
        "el\xE9j\xFCk",
        "el\xE9m",
        "el\xE9nk",
        "el\xE9tek",
        "el\u0151",
        "el\u0151bb",
        "el\u0151l",
        "el\u0151le",
        "el\u0151led",
        "el\u0151lem",
        "el\u0151letek",
        "el\u0151l\xFCk",
        "el\u0151l\xFCnk",
        "el\u0151sz\xF6r",
        "el\u0151tt",
        "el\u0151tte",
        "el\u0151tted",
        "el\u0151ttem",
        "el\u0151ttetek",
        "el\u0151tt\xFCk",
        "el\u0151tt\xFCnk",
        "el\u0151z\u0151",
        "emilyen",
        "engem",
        "ennek",
        "ennyi",
        "enn\xE9l",
        "eny\xE9m",
        "erre",
        "err\u0151l",
        "esetben",
        "ett\u0151l",
        "ez",
        "ezek",
        "ezekbe",
        "ezekben",
        "ezekb\u0151l",
        "ezeken",
        "ezeket",
        "ezekhez",
        "ezekig",
        "ezekkel",
        "ezekk\xE9",
        "ezeknek",
        "ezekn\xE9l",
        "ezekre",
        "ezekr\u0151l",
        "ezekt\u0151l",
        "ezek\xE9rt",
        "ezen",
        "ezent\xFAl",
        "ezer",
        "ezret",
        "ezt",
        "ezut\xE1n",
        "ezzel",
        "ezz\xE9",
        "ez\xE9rt",
        "fel",
        "fele",
        "felek",
        "felet",
        "felett",
        "fel\xE9",
        "fent",
        "fenti",
        "f\xE9l",
        "f\xF6l\xE9",
        "gyakran",
        "ha",
        "hall\xF3",
        "hamar",
        "hanem",
        "harmadik",
        "harmadikat",
        "harminc",
        "hat",
        "hatodik",
        "hatodikat",
        "hatot",
        "hatvan",
        "helyett",
        "hetedik",
        "hetediket",
        "hetet",
        "hetven",
        "hirtelen",
        "hiszen",
        "hi\xE1ba",
        "hogy",
        "hogyan",
        "hol",
        "holnap",
        "holnapot",
        "honnan",
        "hova",
        "hozz\xE1",
        "hozz\xE1d",
        "hozz\xE1juk",
        "hozz\xE1m",
        "hozz\xE1nk",
        "hozz\xE1tok",
        "hurr\xE1",
        "huszadik",
        "h\xE1ny",
        "h\xE1nyszor",
        "h\xE1rmat",
        "h\xE1rom",
        "h\xE1t",
        "h\xE1tha",
        "h\xE1tuls\xF3",
        "h\xE9t",
        "h\xFAsz",
        "ide",
        "ide-\u043Eda",
        "id\xE9n",
        "igaz\xE1n",
        "igen",
        "ill",
        "illetve",
        "ilyen",
        "ilyenkor",
        "imm\xE1r",
        "ink\xE1bb",
        "is",
        "ism\xE9t",
        "ison",
        "itt",
        "jelenleg",
        "jobban",
        "jobbra",
        "j\xF3",
        "j\xF3l",
        "j\xF3lesik",
        "j\xF3val",
        "j\xF6v\u0151re",
        "kell",
        "kellene",
        "kellett",
        "kelljen",
        "keress\xFCnk",
        "kereszt\xFCl",
        "ketten",
        "kett\u0151",
        "kett\u0151t",
        "kev\xE9s",
        "ki",
        "kiben",
        "kib\u0151l",
        "kicsit",
        "kicsoda",
        "kihez",
        "kik",
        "kikbe",
        "kikben",
        "kikb\u0151l",
        "kiken",
        "kiket",
        "kikhez",
        "kikkel",
        "kikk\xE9",
        "kiknek",
        "kikn\xE9l",
        "kikre",
        "kikr\u0151l",
        "kikt\u0151l",
        "kik\xE9rt",
        "kilenc",
        "kilencedik",
        "kilencediket",
        "kilencet",
        "kilencven",
        "kin",
        "kinek",
        "kin\xE9l",
        "kire",
        "kir\u0151l",
        "kit",
        "kit\u0151l",
        "kivel",
        "kiv\xE9",
        "ki\xE9",
        "ki\xE9rt",
        "kor\xE1bban",
        "k\xE9pest",
        "k\xE9rem",
        "k\xE9rlek",
        "k\xE9sz",
        "k\xE9s\u0151",
        "k\xE9s\u0151bb",
        "k\xE9s\u0151n",
        "k\xE9t",
        "k\xE9tszer",
        "k\xEDv\xFCl",
        "k\xF6r\xFCl",
        "k\xF6sz\xF6nhet\u0151en",
        "k\xF6sz\xF6n\xF6m",
        "k\xF6zben",
        "k\xF6zel",
        "k\xF6zepesen",
        "k\xF6zep\xE9n",
        "k\xF6z\xE9",
        "k\xF6z\xF6tt",
        "k\xF6z\xFCl",
        "k\xFCl\xF6n",
        "k\xFCl\xF6nben",
        "k\xFCl\xF6nb\xF6z\u0151",
        "k\xFCl\xF6nb\xF6z\u0151bb",
        "k\xFCl\xF6nb\xF6z\u0151ek",
        "lassan",
        "le",
        "legal\xE1bb",
        "legyen",
        "lehet",
        "lehetetlen",
        "lehetett",
        "lehet\u0151leg",
        "lehet\u0151s\xE9g",
        "lenne",
        "lenni",
        "lenn\xE9k",
        "lenn\xE9nek",
        "lesz",
        "leszek",
        "lesznek",
        "lesz\xFCnk",
        "lett",
        "lettek",
        "lettem",
        "lett\xFCnk",
        "l\xE9v\u0151",
        "ma",
        "maga",
        "magad",
        "magam",
        "magatokat",
        "magukat",
        "magunkat",
        "mag\xE1t",
        "mai",
        "majd",
        "majdnem",
        "manaps\xE1g",
        "meg",
        "megcsin\xE1l",
        "megcsin\xE1lnak",
        "megint",
        "megvan",
        "mellett",
        "mellette",
        "melletted",
        "mellettem",
        "mellettetek",
        "mellett\xFCk",
        "mellett\xFCnk",
        "mell\xE9",
        "mell\xE9d",
        "mell\xE9j\xFCk",
        "mell\xE9m",
        "mell\xE9nk",
        "mell\xE9tek",
        "mell\u0151l",
        "mell\u0151le",
        "mell\u0151led",
        "mell\u0151lem",
        "mell\u0151letek",
        "mell\u0151l\xFCk",
        "mell\u0151l\xFCnk",
        "mely",
        "melyek",
        "melyik",
        "mennyi",
        "mert",
        "mi",
        "miatt",
        "miatta",
        "miattad",
        "miattam",
        "miattatok",
        "miattuk",
        "miattunk",
        "mibe",
        "miben",
        "mib\u0151l",
        "mihez",
        "mik",
        "mikbe",
        "mikben",
        "mikb\u0151l",
        "miken",
        "miket",
        "mikhez",
        "mikkel",
        "mikk\xE9",
        "miknek",
        "mikn\xE9l",
        "mikor",
        "mikre",
        "mikr\u0151l",
        "mikt\u0151l",
        "mik\xE9rt",
        "milyen",
        "min",
        "mind",
        "mindegyik",
        "mindegyiket",
        "minden",
        "mindenesetre",
        "mindenki",
        "mindent",
        "minden\xFCtt",
        "mindig",
        "mindketten",
        "minek",
        "minket",
        "mint",
        "mintha",
        "min\xE9l",
        "mire",
        "mir\u0151l",
        "mit",
        "mit\u0151l",
        "mivel",
        "miv\xE9",
        "mi\xE9rt",
        "mondta",
        "most",
        "mostan\xE1ig",
        "m\xE1r",
        "m\xE1s",
        "m\xE1sik",
        "m\xE1sikat",
        "m\xE1snap",
        "m\xE1sodik",
        "m\xE1sodszor",
        "m\xE1sok",
        "m\xE1sokat",
        "m\xE1st",
        "m\xE9g",
        "m\xE9gis",
        "m\xEDg",
        "m\xF6g\xE9",
        "m\xF6g\xE9d",
        "m\xF6g\xE9j\xFCk",
        "m\xF6g\xE9m",
        "m\xF6g\xE9nk",
        "m\xF6g\xE9tek",
        "m\xF6g\xF6tt",
        "m\xF6g\xF6tte",
        "m\xF6g\xF6tted",
        "m\xF6g\xF6ttem",
        "m\xF6g\xF6ttetek",
        "m\xF6g\xF6tt\xFCk",
        "m\xF6g\xF6tt\xFCnk",
        "m\xF6g\xFCl",
        "m\xF6g\xFCle",
        "m\xF6g\xFCled",
        "m\xF6g\xFClem",
        "m\xF6g\xFCletek",
        "m\xF6g\xFCl\xFCk",
        "m\xF6g\xFCl\xFCnk",
        "m\xFAltkor",
        "m\xFAlva",
        "na",
        "nagy",
        "nagyobb",
        "nagyon",
        "naponta",
        "napot",
        "ne",
        "negyedik",
        "negyediket",
        "negyven",
        "neked",
        "nekem",
        "neki",
        "nekik",
        "nektek",
        "nek\xFCnk",
        "nem",
        "nemcsak",
        "nemr\xE9g",
        "nincs",
        "nyolc",
        "nyolcadik",
        "nyolcadikat",
        "nyolcat",
        "nyolcvan",
        "n\xE1la",
        "n\xE1lad",
        "n\xE1lam",
        "n\xE1latok",
        "n\xE1luk",
        "n\xE1lunk",
        "n\xE9gy",
        "n\xE9gyet",
        "n\xE9ha",
        "n\xE9h\xE1ny",
        "n\xE9lk\xFCl",
        "o",
        "oda",
        "ok",
        "olyan",
        "onnan",
        "ott",
        "pedig",
        "persze",
        "p\xE1r",
        "p\xE9ld\xE1ul",
        "rajta",
        "rajtad",
        "rajtam",
        "rajtatok",
        "rajtuk",
        "rajtunk",
        "rendben",
        "rosszul",
        "r\xE1",
        "r\xE1d",
        "r\xE1juk",
        "r\xE1m",
        "r\xE1nk",
        "r\xE1tok",
        "r\xE9gen",
        "r\xE9g\xF3ta",
        "r\xE9sz\xE9re",
        "r\xF3la",
        "r\xF3lad",
        "r\xF3lam",
        "r\xF3latok",
        "r\xF3luk",
        "r\xF3lunk",
        "r\xF6gt\xF6n",
        "s",
        "saj\xE1t",
        "se",
        "sem",
        "semmi",
        "semmilyen",
        "semmis\xE9g",
        "senki",
        "soha",
        "sok",
        "sokan",
        "sokat",
        "sokkal",
        "sokszor",
        "sok\xE1ig",
        "sor\xE1n",
        "stb.",
        "szemben",
        "szerbusz",
        "szerint",
        "szerinte",
        "szerinted",
        "szerintem",
        "szerintetek",
        "szerint\xFCk",
        "szerint\xFCnk",
        "szervusz",
        "szinte",
        "sz\xE1m\xE1ra",
        "sz\xE1z",
        "sz\xE1zadik",
        "sz\xE1zat",
        "sz\xE9pen",
        "sz\xE9t",
        "sz\xEDves",
        "sz\xEDvesen",
        "sz\xEDveskedj\xE9k",
        "s\u0151t",
        "tal\xE1n",
        "tavaly",
        "te",
        "tegnap",
        "tegnapel\u0151tt",
        "teh\xE1t",
        "tele",
        "teljes",
        "tess\xE9k",
        "ti",
        "tied",
        "titeket",
        "tizedik",
        "tizediket",
        "tizenegy",
        "tizenegyedik",
        "tizenhat",
        "tizenh\xE1rom",
        "tizenh\xE9t",
        "tizenkettedik",
        "tizenkett\u0151",
        "tizenkilenc",
        "tizenk\xE9t",
        "tizennyolc",
        "tizenn\xE9gy",
        "tizen\xF6t",
        "tizet",
        "tov\xE1bb",
        "tov\xE1bbi",
        "tov\xE1bb\xE1",
        "t\xE1vol",
        "t\xE9ged",
        "t\xE9nyleg",
        "t\xEDz",
        "t\xF6bb",
        "t\xF6bbi",
        "t\xF6bbsz\xF6r",
        "t\xFAl",
        "t\u0151le",
        "t\u0151led",
        "t\u0151lem",
        "t\u0151letek",
        "t\u0151l\xFCk",
        "t\u0151l\xFCnk",
        "ugyanakkor",
        "ugyanez",
        "ugyanis",
        "ugye",
        "urak",
        "uram",
        "urat",
        "utolj\xE1ra",
        "utols\xF3",
        "ut\xE1n",
        "ut\xE1na",
        "vagy",
        "vagyis",
        "vagyok",
        "vagytok",
        "vagyunk",
        "vajon",
        "valahol",
        "valaki",
        "valakit",
        "valamelyik",
        "valami",
        "valamint",
        "val\xF3",
        "van",
        "vannak",
        "vele",
        "veled",
        "velem",
        "veletek",
        "vel\xFCk",
        "vel\xFCnk",
        "vissza",
        "viszl\xE1t",
        "viszont",
        "viszontl\xE1t\xE1sra",
        "volna",
        "voln\xE1nak",
        "voln\xE9k",
        "volt",
        "voltak",
        "voltam",
        "voltunk",
        "v\xE9gre",
        "v\xE9g\xE9n",
        "v\xE9g\xFCl",
        "\xE1ltal",
        "\xE1ltal\xE1ban",
        "\xE1m",
        "\xE1t",
        "\xE9ljen",
        "\xE9n",
        "\xE9ppen",
        "\xE9rte",
        "\xE9rted",
        "\xE9rtem",
        "\xE9rtetek",
        "\xE9rt\xFCk",
        "\xE9rt\xFCnk",
        "\xE9s",
        "\xE9v",
        "\xE9vben",
        "\xE9ve",
        "\xE9vek",
        "\xE9ves",
        "\xE9vi",
        "\xE9vvel",
        "\xEDgy",
        "\xF3ta",
        "\xF6n",
        "\xF6nbe",
        "\xF6nben",
        "\xF6nb\u0151l",
        "\xF6nh\xF6z",
        "\xF6nnek",
        "\xF6nnel",
        "\xF6nn\xE9l",
        "\xF6nre",
        "\xF6nr\u0151l",
        "\xF6nt",
        "\xF6nt\u0151l",
        "\xF6n\xE9rt",
        "\xF6n\xF6k",
        "\xF6n\xF6kbe",
        "\xF6n\xF6kben",
        "\xF6n\xF6kb\u0151l",
        "\xF6n\xF6ket",
        "\xF6n\xF6kh\xF6z",
        "\xF6n\xF6kkel",
        "\xF6n\xF6knek",
        "\xF6n\xF6kn\xE9l",
        "\xF6n\xF6kre",
        "\xF6n\xF6kr\u0151l",
        "\xF6n\xF6kt\u0151l",
        "\xF6n\xF6k\xE9rt",
        "\xF6n\xF6k\xF6n",
        "\xF6n\xF6n",
        "\xF6ssze",
        "\xF6t",
        "\xF6tven",
        "\xF6t\xF6dik",
        "\xF6t\xF6diket",
        "\xF6t\xF6t",
        "\xFAgy",
        "\xFAgyis",
        "\xFAgynevezett",
        "\xFAj",
        "\xFAjabb",
        "\xFAjra",
        "\xFAr",
        "\u0151",
        "\u0151k",
        "\u0151ket",
        "\u0151t"
      ];
      const ind = [
        "ada",
        "adalah",
        "adanya",
        "adapun",
        "agak",
        "agaknya",
        "agar",
        "akan",
        "akankah",
        "akhir",
        "akhiri",
        "akhirnya",
        "aku",
        "akulah",
        "amat",
        "amatlah",
        "anda",
        "andalah",
        "antar",
        "antara",
        "antaranya",
        "apa",
        "apaan",
        "apabila",
        "apakah",
        "apalagi",
        "apatah",
        "artinya",
        "asal",
        "asalkan",
        "atas",
        "atau",
        "ataukah",
        "ataupun",
        "awal",
        "awalnya",
        "bagai",
        "bagaikan",
        "bagaimana",
        "bagaimanakah",
        "bagaimanapun",
        "bagi",
        "bagian",
        "bahkan",
        "bahwa",
        "bahwasanya",
        "bakal",
        "bakalan",
        "balik",
        "banyak",
        "bapak",
        "baru",
        "bawah",
        "beberapa",
        "begini",
        "beginian",
        "beginikah",
        "beginilah",
        "begitu",
        "begitukah",
        "begitulah",
        "begitupun",
        "bekerja",
        "belakang",
        "belakangan",
        "belum",
        "belumlah",
        "benar",
        "benarkah",
        "benarlah",
        "berada",
        "berakhir",
        "berakhirlah",
        "berakhirnya",
        "berapa",
        "berapakah",
        "berapalah",
        "berapapun",
        "berarti",
        "berawal",
        "berbagai",
        "berdatangan",
        "beri",
        "berikan",
        "berikut",
        "berikutnya",
        "berjumlah",
        "berkali-kali",
        "berkata",
        "berkehendak",
        "berkeinginan",
        "berkenaan",
        "berlainan",
        "berlalu",
        "berlangsung",
        "berlebihan",
        "bermacam",
        "bermacam-macam",
        "bermaksud",
        "bermula",
        "bersama",
        "bersama-sama",
        "bersiap",
        "bersiap-siap",
        "bertanya",
        "bertanya-tanya",
        "berturut",
        "berturut-turut",
        "bertutur",
        "berujar",
        "berupa",
        "besar",
        "betul",
        "betulkah",
        "biasa",
        "biasanya",
        "bila",
        "bilakah",
        "bisa",
        "bisakah",
        "boleh",
        "bolehkah",
        "bolehlah",
        "buat",
        "bukan",
        "bukankah",
        "bukanlah",
        "bukannya",
        "bulan",
        "bung",
        "cara",
        "caranya",
        "cukup",
        "cukupkah",
        "cukuplah",
        "cuma",
        "dahulu",
        "dalam",
        "dan",
        "dapat",
        "dari",
        "daripada",
        "datang",
        "dekat",
        "demi",
        "demikian",
        "demikianlah",
        "dengan",
        "depan",
        "di",
        "dia",
        "diakhiri",
        "diakhirinya",
        "dialah",
        "diantara",
        "diantaranya",
        "diberi",
        "diberikan",
        "diberikannya",
        "dibuat",
        "dibuatnya",
        "didapat",
        "didatangkan",
        "digunakan",
        "diibaratkan",
        "diibaratkannya",
        "diingat",
        "diingatkan",
        "diinginkan",
        "dijawab",
        "dijelaskan",
        "dijelaskannya",
        "dikarenakan",
        "dikatakan",
        "dikatakannya",
        "dikerjakan",
        "diketahui",
        "diketahuinya",
        "dikira",
        "dilakukan",
        "dilalui",
        "dilihat",
        "dimaksud",
        "dimaksudkan",
        "dimaksudkannya",
        "dimaksudnya",
        "diminta",
        "dimintai",
        "dimisalkan",
        "dimulai",
        "dimulailah",
        "dimulainya",
        "dimungkinkan",
        "dini",
        "dipastikan",
        "diperbuat",
        "diperbuatnya",
        "dipergunakan",
        "diperkirakan",
        "diperlihatkan",
        "diperlukan",
        "diperlukannya",
        "dipersoalkan",
        "dipertanyakan",
        "dipunyai",
        "diri",
        "dirinya",
        "disampaikan",
        "disebut",
        "disebutkan",
        "disebutkannya",
        "disini",
        "disinilah",
        "ditambahkan",
        "ditandaskan",
        "ditanya",
        "ditanyai",
        "ditanyakan",
        "ditegaskan",
        "ditujukan",
        "ditunjuk",
        "ditunjuki",
        "ditunjukkan",
        "ditunjukkannya",
        "ditunjuknya",
        "dituturkan",
        "dituturkannya",
        "diucapkan",
        "diucapkannya",
        "diungkapkan",
        "dong",
        "dulu",
        "empat",
        "enggak",
        "enggaknya",
        "entah",
        "entahlah",
        "guna",
        "gunakan",
        "hal",
        "hampir",
        "hanya",
        "hanyalah",
        "harus",
        "haruslah",
        "harusnya",
        "hendak",
        "hendaklah",
        "hendaknya",
        "hingga",
        "ia",
        "ialah",
        "ibarat",
        "ibaratkan",
        "ibaratnya",
        "ikut",
        "ingat",
        "ingat-ingat",
        "ingin",
        "inginkah",
        "inginkan",
        "ini",
        "inikah",
        "inilah",
        "itu",
        "itukah",
        "itulah",
        "jadi",
        "jadilah",
        "jadinya",
        "jangan",
        "jangankan",
        "janganlah",
        "jauh",
        "jawab",
        "jawaban",
        "jawabnya",
        "jelas",
        "jelaskan",
        "jelaslah",
        "jelasnya",
        "jika",
        "jikalau",
        "juga",
        "jumlah",
        "jumlahnya",
        "justru",
        "kala",
        "kalau",
        "kalaulah",
        "kalaupun",
        "kalian",
        "kami",
        "kamilah",
        "kamu",
        "kamulah",
        "kan",
        "kapan",
        "kapankah",
        "kapanpun",
        "karena",
        "karenanya",
        "kasus",
        "kata",
        "katakan",
        "katakanlah",
        "katanya",
        "ke",
        "keadaan",
        "kebetulan",
        "kecil",
        "kedua",
        "keduanya",
        "keinginan",
        "kelamaan",
        "kelihatan",
        "kelihatannya",
        "kelima",
        "keluar",
        "kembali",
        "kemudian",
        "kemungkinan",
        "kemungkinannya",
        "kenapa",
        "kepada",
        "kepadanya",
        "kesampaian",
        "keseluruhan",
        "keseluruhannya",
        "keterlaluan",
        "ketika",
        "khususnya",
        "kini",
        "kinilah",
        "kira",
        "kira-kira",
        "kiranya",
        "kita",
        "kitalah",
        "kok",
        "kurang",
        "lagi",
        "lagian",
        "lah",
        "lain",
        "lainnya",
        "lalu",
        "lama",
        "lamanya",
        "lanjut",
        "lanjutnya",
        "lebih",
        "lewat",
        "lima",
        "luar",
        "macam",
        "maka",
        "makanya",
        "makin",
        "malah",
        "malahan",
        "mampu",
        "mampukah",
        "mana",
        "manakala",
        "manalagi",
        "masa",
        "masalah",
        "masalahnya",
        "masih",
        "masihkah",
        "masing",
        "masing-masing",
        "mau",
        "maupun",
        "melainkan",
        "melakukan",
        "melalui",
        "melihat",
        "melihatnya",
        "memang",
        "memastikan",
        "memberi",
        "memberikan",
        "membuat",
        "memerlukan",
        "memihak",
        "meminta",
        "memintakan",
        "memisalkan",
        "memperbuat",
        "mempergunakan",
        "memperkirakan",
        "memperlihatkan",
        "mempersiapkan",
        "mempersoalkan",
        "mempertanyakan",
        "mempunyai",
        "memulai",
        "memungkinkan",
        "menaiki",
        "menambahkan",
        "menandaskan",
        "menanti",
        "menanti-nanti",
        "menantikan",
        "menanya",
        "menanyai",
        "menanyakan",
        "mendapat",
        "mendapatkan",
        "mendatang",
        "mendatangi",
        "mendatangkan",
        "menegaskan",
        "mengakhiri",
        "mengapa",
        "mengatakan",
        "mengatakannya",
        "mengenai",
        "mengerjakan",
        "mengetahui",
        "menggunakan",
        "menghendaki",
        "mengibaratkan",
        "mengibaratkannya",
        "mengingat",
        "mengingatkan",
        "menginginkan",
        "mengira",
        "mengucapkan",
        "mengucapkannya",
        "mengungkapkan",
        "menjadi",
        "menjawab",
        "menjelaskan",
        "menuju",
        "menunjuk",
        "menunjuki",
        "menunjukkan",
        "menunjuknya",
        "menurut",
        "menuturkan",
        "menyampaikan",
        "menyangkut",
        "menyatakan",
        "menyebutkan",
        "menyeluruh",
        "menyiapkan",
        "merasa",
        "mereka",
        "merekalah",
        "merupakan",
        "meski",
        "meskipun",
        "meyakini",
        "meyakinkan",
        "minta",
        "mirip",
        "misal",
        "misalkan",
        "misalnya",
        "mula",
        "mulai",
        "mulailah",
        "mulanya",
        "mungkin",
        "mungkinkah",
        "nah",
        "naik",
        "namun",
        "nanti",
        "nantinya",
        "nyaris",
        "nyatanya",
        "oleh",
        "olehnya",
        "pada",
        "padahal",
        "padanya",
        "paling",
        "panjang",
        "pantas",
        "para",
        "pasti",
        "pastilah",
        "penting",
        "pentingnya",
        "per",
        "percuma",
        "perlu",
        "perlukah",
        "perlunya",
        "pernah",
        "persoalan",
        "pertama",
        "pertama-tama",
        "pertanyaan",
        "pertanyakan",
        "pihak",
        "pihaknya",
        "pukul",
        "pula",
        "pun",
        "punya",
        "rasa",
        "rasanya",
        "rata",
        "rupanya",
        "saat",
        "saatnya",
        "saja",
        "sajalah",
        "saling",
        "sama",
        "sama-sama",
        "sambil",
        "sampai",
        "sampai-sampai",
        "sampaikan",
        "sana",
        "sangat",
        "sangatlah",
        "satu",
        "saya",
        "sayalah",
        "se",
        "sebab",
        "sebabnya",
        "sebagai",
        "sebagaimana",
        "sebagainya",
        "sebagian",
        "sebaik",
        "sebaik-baiknya",
        "sebaiknya",
        "sebaliknya",
        "sebanyak",
        "sebegini",
        "sebegitu",
        "sebelum",
        "sebelumnya",
        "sebenarnya",
        "seberapa",
        "sebesar",
        "sebetulnya",
        "sebisanya",
        "sebuah",
        "sebut",
        "sebutlah",
        "sebutnya",
        "secara",
        "secukupnya",
        "sedang",
        "sedangkan",
        "sedemikian",
        "sedikit",
        "sedikitnya",
        "seenaknya",
        "segala",
        "segalanya",
        "segera",
        "seharusnya",
        "sehingga",
        "seingat",
        "sejak",
        "sejauh",
        "sejenak",
        "sejumlah",
        "sekadar",
        "sekadarnya",
        "sekali",
        "sekali-kali",
        "sekalian",
        "sekaligus",
        "sekalipun",
        "sekarang",
        "sekarang",
        "sekecil",
        "seketika",
        "sekiranya",
        "sekitar",
        "sekitarnya",
        "sekurang-kurangnya",
        "sekurangnya",
        "sela",
        "selain",
        "selaku",
        "selalu",
        "selama",
        "selama-lamanya",
        "selamanya",
        "selanjutnya",
        "seluruh",
        "seluruhnya",
        "semacam",
        "semakin",
        "semampu",
        "semampunya",
        "semasa",
        "semasih",
        "semata",
        "semata-mata",
        "semaunya",
        "sementara",
        "semisal",
        "semisalnya",
        "sempat",
        "semua",
        "semuanya",
        "semula",
        "sendiri",
        "sendirian",
        "sendirinya",
        "seolah",
        "seolah-olah",
        "seorang",
        "sepanjang",
        "sepantasnya",
        "sepantasnyalah",
        "seperlunya",
        "seperti",
        "sepertinya",
        "sepihak",
        "sering",
        "seringnya",
        "serta",
        "serupa",
        "sesaat",
        "sesama",
        "sesampai",
        "sesegera",
        "sesekali",
        "seseorang",
        "sesuatu",
        "sesuatunya",
        "sesudah",
        "sesudahnya",
        "setelah",
        "setempat",
        "setengah",
        "seterusnya",
        "setiap",
        "setiba",
        "setibanya",
        "setidak-tidaknya",
        "setidaknya",
        "setinggi",
        "seusai",
        "sewaktu",
        "siap",
        "siapa",
        "siapakah",
        "siapapun",
        "sini",
        "sinilah",
        "soal",
        "soalnya",
        "suatu",
        "sudah",
        "sudahkah",
        "sudahlah",
        "supaya",
        "tadi",
        "tadinya",
        "tahu",
        "tahun",
        "tak",
        "tambah",
        "tambahnya",
        "tampak",
        "tampaknya",
        "tandas",
        "tandasnya",
        "tanpa",
        "tanya",
        "tanyakan",
        "tanyanya",
        "tapi",
        "tegas",
        "tegasnya",
        "telah",
        "tempat",
        "tengah",
        "tentang",
        "tentu",
        "tentulah",
        "tentunya",
        "tepat",
        "terakhir",
        "terasa",
        "terbanyak",
        "terdahulu",
        "terdapat",
        "terdiri",
        "terhadap",
        "terhadapnya",
        "teringat",
        "teringat-ingat",
        "terjadi",
        "terjadilah",
        "terjadinya",
        "terkira",
        "terlalu",
        "terlebih",
        "terlihat",
        "termasuk",
        "ternyata",
        "tersampaikan",
        "tersebut",
        "tersebutlah",
        "tertentu",
        "tertuju",
        "terus",
        "terutama",
        "tetap",
        "tetapi",
        "tiap",
        "tiba",
        "tiba-tiba",
        "tidak",
        "tidakkah",
        "tidaklah",
        "tiga",
        "tinggi",
        "toh",
        "tunjuk",
        "turut",
        "tutur",
        "tuturnya",
        "ucap",
        "ucapnya",
        "ujar",
        "ujarnya",
        "umum",
        "umumnya",
        "ungkap",
        "ungkapnya",
        "untuk",
        "usah",
        "usai",
        "waduh",
        "wah",
        "wahai",
        "waktu",
        "waktunya",
        "walau",
        "walaupun",
        "wong",
        "yaitu",
        "yakin",
        "yakni",
        "yang"
      ];
      const ita = [
        "ad",
        "al",
        "allo",
        "ai",
        "agli",
        "all",
        "agl",
        "alla",
        "alle",
        "con",
        "col",
        "coi",
        "da",
        "dal",
        "dallo",
        "dai",
        "dagli",
        "dall",
        "dagl",
        "dalla",
        "dalle",
        "di",
        "del",
        "dello",
        "dei",
        "degli",
        "dell",
        "degl",
        "della",
        "delle",
        "in",
        "nel",
        "nello",
        "nei",
        "negli",
        "nell",
        "negl",
        "nella",
        "nelle",
        "su",
        "sul",
        "sullo",
        "sui",
        "sugli",
        "sull",
        "sugl",
        "sulla",
        "sulle",
        "per",
        "tra",
        "contro",
        "io",
        "tu",
        "lui",
        "lei",
        "noi",
        "voi",
        "loro",
        "mio",
        "mia",
        "miei",
        "mie",
        "tuo",
        "tua",
        "tuoi",
        "tue",
        "suo",
        "sua",
        "suoi",
        "sue",
        "nostro",
        "nostra",
        "nostri",
        "nostre",
        "vostro",
        "vostra",
        "vostri",
        "vostre",
        "mi",
        "ti",
        "ci",
        "vi",
        "lo",
        "la",
        "li",
        "le",
        "gli",
        "ne",
        "il",
        "un",
        "uno",
        "una",
        "ma",
        "ed",
        "se",
        "perch\xE9",
        "anche",
        "come",
        "dov",
        "dove",
        "che",
        "chi",
        "cui",
        "non",
        "pi\xF9",
        "quale",
        "quanto",
        "quanti",
        "quanta",
        "quante",
        "quello",
        "quelli",
        "quella",
        "quelle",
        "questo",
        "questi",
        "questa",
        "queste",
        "si",
        "tutto",
        "tutti",
        "a",
        "c",
        "e",
        "i",
        "l",
        "o",
        "ho",
        "hai",
        "ha",
        "abbiamo",
        "avete",
        "hanno",
        "abbia",
        "abbiate",
        "abbiano",
        "avr\xF2",
        "avrai",
        "avr\xE0",
        "avremo",
        "avrete",
        "avranno",
        "avrei",
        "avresti",
        "avrebbe",
        "avremmo",
        "avreste",
        "avrebbero",
        "avevo",
        "avevi",
        "aveva",
        "avevamo",
        "avevate",
        "avevano",
        "ebbi",
        "avesti",
        "ebbe",
        "avemmo",
        "aveste",
        "ebbero",
        "avessi",
        "avesse",
        "avessimo",
        "avessero",
        "avendo",
        "avuto",
        "avuta",
        "avuti",
        "avute",
        "sono",
        "sei",
        "\xE8",
        "siamo",
        "siete",
        "sia",
        "siate",
        "siano",
        "sar\xF2",
        "sarai",
        "sar\xE0",
        "saremo",
        "sarete",
        "saranno",
        "sarei",
        "saresti",
        "sarebbe",
        "saremmo",
        "sareste",
        "sarebbero",
        "ero",
        "eri",
        "era",
        "eravamo",
        "eravate",
        "erano",
        "fui",
        "fosti",
        "fu",
        "fummo",
        "foste",
        "furono",
        "fossi",
        "fosse",
        "fossimo",
        "fossero",
        "essendo",
        "faccio",
        "fai",
        "facciamo",
        "fanno",
        "faccia",
        "facciate",
        "facciano",
        "far\xF2",
        "farai",
        "far\xE0",
        "faremo",
        "farete",
        "faranno",
        "farei",
        "faresti",
        "farebbe",
        "faremmo",
        "fareste",
        "farebbero",
        "facevo",
        "facevi",
        "faceva",
        "facevamo",
        "facevate",
        "facevano",
        "feci",
        "facesti",
        "fece",
        "facemmo",
        "faceste",
        "fecero",
        "facessi",
        "facesse",
        "facessimo",
        "facessero",
        "facendo",
        "sto",
        "stai",
        "sta",
        "stiamo",
        "stanno",
        "stia",
        "stiate",
        "stiano",
        "star\xF2",
        "starai",
        "star\xE0",
        "staremo",
        "starete",
        "staranno",
        "starei",
        "staresti",
        "starebbe",
        "staremmo",
        "stareste",
        "starebbero",
        "stavo",
        "stavi",
        "stava",
        "stavamo",
        "stavate",
        "stavano",
        "stetti",
        "stesti",
        "stette",
        "stemmo",
        "steste",
        "stettero",
        "stessi",
        "stesse",
        "stessimo",
        "stessero",
        "stando"
      ];
      const jpn = [
        "\u306E",
        "\u306B",
        "\u306F",
        "\u3092",
        "\u305F",
        "\u304C",
        "\u3067",
        "\u3066",
        "\u3068",
        "\u3057",
        "\u308C",
        "\u3055",
        "\u3042\u308B",
        "\u3044\u308B",
        "\u3082",
        "\u3059\u308B",
        "\u304B\u3089",
        "\u306A",
        "\u3053\u3068",
        "\u3068\u3057\u3066",
        "\u3044",
        "\u3084",
        "\u308C\u308B",
        "\u306A\u3069",
        "\u306A\u3063",
        "\u306A\u3044",
        "\u3053\u306E",
        "\u305F\u3081",
        "\u305D\u306E",
        "\u3042\u3063",
        "\u3088\u3046",
        "\u307E\u305F",
        "\u3082\u306E",
        "\u3068\u3044\u3046",
        "\u3042\u308A",
        "\u307E\u3067",
        "\u3089\u308C",
        "\u306A\u308B",
        "\u3078",
        "\u304B",
        "\u3060",
        "\u3053\u308C",
        "\u306B\u3088\u3063\u3066",
        "\u306B\u3088\u308A",
        "\u304A\u308A",
        "\u3088\u308A",
        "\u306B\u3088\u308B",
        "\u305A",
        "\u306A\u308A",
        "\u3089\u308C\u308B",
        "\u306B\u304A\u3044\u3066",
        "\u3070",
        "\u306A\u304B\u3063",
        "\u306A\u304F",
        "\u3057\u304B\u3057",
        "\u306B\u3064\u3044\u3066",
        "\u305B",
        "\u3060\u3063",
        "\u305D\u306E\u5F8C",
        "\u3067\u304D\u308B",
        "\u305D\u308C",
        "\u3046",
        "\u306E\u3067",
        "\u306A\u304A",
        "\u306E\u307F",
        "\u3067\u304D",
        "\u304D",
        "\u3064",
        "\u306B\u304A\u3051\u308B",
        "\u304A\u3088\u3073",
        "\u3044\u3046",
        "\u3055\u3089\u306B",
        "\u3067\u3082",
        "\u3089",
        "\u305F\u308A",
        "\u305D\u306E\u4ED6",
        "\u306B\u95A2\u3059\u308B",
        "\u305F\u3061",
        "\u307E\u3059",
        "\u3093",
        "\u306A\u3089",
        "\u306B\u5BFE\u3057\u3066",
        "\u7279\u306B",
        "\u305B\u308B",
        "\u53CA\u3073",
        "\u3053\u308C\u3089",
        "\u3068\u304D",
        "\u3067\u306F",
        "\u306B\u3066",
        "\u307B\u304B",
        "\u306A\u304C\u3089",
        "\u3046\u3061",
        "\u305D\u3057\u3066",
        "\u3068\u3068\u3082\u306B",
        "\u305F\u3060\u3057",
        "\u304B\u3064\u3066",
        "\u305D\u308C\u305E\u308C",
        "\u307E\u305F\u306F",
        "\u304A",
        "\u307B\u3069",
        "\u3082\u306E\u306E",
        "\u306B\u5BFE\u3059\u308B",
        "\u307B\u3068\u3093\u3069",
        "\u3068\u5171\u306B",
        "\u3068\u3044\u3063\u305F",
        "\u3067\u3059",
        "\u3068\u3082",
        "\u3068\u3053\u308D",
        "\u3053\u3053"
      ];
      const kor = [
        "\uAC00",
        "\uAC00\uAE4C\uC2A4\uB85C",
        "\uAC00\uB839",
        "\uAC01",
        "\uAC01\uAC01",
        "\uAC01\uC790",
        "\uAC01\uC885",
        "\uAC16\uACE0\uB9D0\uD558\uC790\uBA74",
        "\uAC19\uB2E4",
        "\uAC19\uC774",
        "\uAC1C\uC758\uCE58\uC54A\uACE0",
        "\uAC70\uB2C8\uC640",
        "\uAC70\uBC14",
        "\uAC70\uC758",
        "\uAC83",
        "\uAC83\uACFC \uAC19\uC774",
        "\uAC83\uB4E4",
        "\uAC8C\uB2E4\uAC00",
        "\uAC8C\uC6B0\uB2E4",
        "\uACA8\uC6B0",
        "\uACAC\uC9C0\uC5D0\uC11C",
        "\uACB0\uACFC\uC5D0 \uC774\uB974\uB2E4",
        "\uACB0\uAD6D",
        "\uACB0\uB860\uC744 \uB0BC \uC218 \uC788\uB2E4",
        "\uACB8\uC0AC\uACB8\uC0AC",
        "\uACE0\uB824\uD558\uBA74",
        "\uACE0\uB85C",
        "\uACE7",
        "\uACF5\uB3D9\uC73C\uB85C",
        "\uACFC",
        "\uACFC\uC5F0",
        "\uAD00\uACC4\uAC00 \uC788\uB2E4",
        "\uAD00\uACC4\uC5C6\uC774",
        "\uAD00\uB828\uC774 \uC788\uB2E4",
        "\uAD00\uD558\uC5EC",
        "\uAD00\uD55C",
        "\uAD00\uD574\uC11C\uB294",
        "\uAD6C",
        "\uAD6C\uCCB4\uC801\uC73C\uB85C",
        "\uAD6C\uD1A0\uD558\uB2E4",
        "\uADF8",
        "\uADF8\uB4E4",
        "\uADF8\uB54C",
        "\uADF8\uB798",
        "\uADF8\uB798\uB3C4",
        "\uADF8\uB798\uC11C",
        "\uADF8\uB7EC\uB098",
        "\uADF8\uB7EC\uB2C8",
        "\uADF8\uB7EC\uB2C8\uAE4C",
        "\uADF8\uB7EC\uBA74",
        "\uADF8\uB7EC\uBBC0\uB85C",
        "\uADF8\uB7EC\uD55C\uC989",
        "\uADF8\uB7F0 \uAE4C\uB2ED\uC5D0",
        "\uADF8\uB7F0\uB370",
        "\uADF8\uB7F0\uC989",
        "\uADF8\uB7FC",
        "\uADF8\uB7FC\uC5D0\uB3C4 \uBD88\uAD6C\uD558\uACE0",
        "\uADF8\uB807\uAC8C \uD568\uC73C\uB85C\uC368",
        "\uADF8\uB807\uC9C0",
        "\uADF8\uB807\uC9C0 \uC54A\uB2E4\uBA74",
        "\uADF8\uB807\uC9C0 \uC54A\uC73C\uBA74",
        "\uADF8\uB807\uC9C0\uB9CC",
        "\uADF8\uB807\uC9C0\uC54A\uC73C\uBA74",
        "\uADF8\uB9AC\uACE0",
        "\uADF8\uB9AC\uD558\uC5EC",
        "\uADF8\uB9CC\uC774\uB2E4",
        "\uADF8\uC5D0 \uB530\uB974\uB294",
        "\uADF8\uC704\uC5D0",
        "\uADF8\uC800",
        "\uADF8\uC911\uC5D0\uC11C",
        "\uADF8\uCE58\uC9C0 \uC54A\uB2E4",
        "\uADFC\uAC70\uB85C",
        "\uADFC\uAC70\uD558\uC5EC",
        "\uAE30\uB300\uC5EC",
        "\uAE30\uC810\uC73C\uB85C",
        "\uAE30\uC900\uC73C\uB85C",
        "\uAE30\uD0C0",
        "\uAE4C\uB2ED\uC73C\uB85C",
        "\uAE4C\uC545",
        "\uAE4C\uC9C0",
        "\uAE4C\uC9C0 \uBBF8\uCE58\uB2E4",
        "\uAE4C\uC9C0\uB3C4",
        "\uAF48\uB2F9",
        "\uB059\uB059",
        "\uB07C\uC775",
        "\uB098",
        "\uB098\uBA38\uC9C0\uB294",
        "\uB0A8\uB4E4",
        "\uB0A8\uC9D3",
        "\uB108",
        "\uB108\uD76C",
        "\uB108\uD76C\uB4E4",
        "\uB124",
        "\uB137",
        "\uB144",
        "\uB17C\uD558\uC9C0 \uC54A\uB2E4",
        "\uB180\uB77C\uB2E4",
        "\uB204\uAC00 \uC54C\uACA0\uB294\uAC00",
        "\uB204\uAD6C",
        "\uB2E4\uB978",
        "\uB2E4\uB978 \uBC29\uBA74\uC73C\uB85C",
        "\uB2E4\uB9CC",
        "\uB2E4\uC12F",
        "\uB2E4\uC18C",
        "\uB2E4\uC218",
        "\uB2E4\uC2DC \uB9D0\uD558\uC790\uBA74",
        "\uB2E4\uC2DC\uB9D0\uD558\uBA74",
        "\uB2E4\uC74C",
        "\uB2E4\uC74C\uC5D0",
        "\uB2E4\uC74C\uC73C\uB85C",
        "\uB2E8\uC9C0",
        "\uB2F5\uB2E4",
        "\uB2F9\uC2E0",
        "\uB2F9\uC7A5",
        "\uB300\uB85C \uD558\uB2E4",
        "\uB300\uD558\uBA74",
        "\uB300\uD558\uC5EC",
        "\uB300\uD574 \uB9D0\uD558\uC790\uBA74",
        "\uB300\uD574\uC11C",
        "\uB315\uADF8",
        "\uB354\uAD6C\uB098",
        "\uB354\uAD70\uB2E4\uB098",
        "\uB354\uB77C\uB3C4",
        "\uB354\uBD88\uC5B4",
        "\uB354\uC6B1\uB354",
        "\uB354\uC6B1\uC774\uB294",
        "\uB3C4\uB2EC\uD558\uB2E4",
        "\uB3C4\uCC29\uD558\uB2E4",
        "\uB3D9\uC2DC\uC5D0",
        "\uB3D9\uC548",
        "\uB41C\uBC14\uC5D0\uC57C",
        "\uB41C\uC774\uC0C1",
        "\uB450\uBC88\uC9F8\uB85C",
        "\uB458",
        "\uB465\uB465",
        "\uB4A4\uB530\uB77C",
        "\uB4A4\uC774\uC5B4",
        "\uB4E0\uAC04\uC5D0",
        "\uB4E4",
        "\uB4F1",
        "\uB4F1\uB4F1",
        "\uB529\uB3D9",
        "\uB530\uB77C",
        "\uB530\uB77C\uC11C",
        "\uB530\uC704",
        "\uB530\uC9C0\uC9C0 \uC54A\uB2E4",
        "\uB531",
        "\uB54C",
        "\uB54C\uAC00 \uB418\uC5B4",
        "\uB54C\uBB38\uC5D0",
        "\uB610",
        "\uB610\uD55C",
        "\uB69D\uB69D",
        "\uB77C \uD574\uB3C4",
        "\uB839",
        "\uB85C",
        "\uB85C \uC778\uD558\uC5EC",
        "\uB85C\uBD80\uD130",
        "\uB85C\uC368",
        "\uB959",
        "\uB97C",
        "\uB9C8\uC74C\uB300\uB85C",
        "\uB9C8\uC800",
        "\uB9C8\uC800\uB3C4",
        "\uB9C8\uCE58",
        "\uB9C9\uB860\uD558\uACE0",
        "\uB9CC \uBABB\uD558\uB2E4",
        "\uB9CC\uC57D",
        "\uB9CC\uC57D\uC5D0",
        "\uB9CC\uC740 \uC544\uB2C8\uB2E4",
        "\uB9CC\uC774 \uC544\uB2C8\uB2E4",
        "\uB9CC\uC77C",
        "\uB9CC\uD07C",
        "\uB9D0\uD558\uC790\uBA74",
        "\uB9D0\uD560\uAC83\uB3C4 \uC5C6\uACE0",
        "\uB9E4",
        "\uB9E4\uBC88",
        "\uBA54\uC4F0\uAC81\uB2E4",
        "\uBA87",
        "\uBAA8",
        "\uBAA8\uB450",
        "\uBB34\uB835",
        "\uBB34\uB98E\uC4F0\uACE0",
        "\uBB34\uC2A8",
        "\uBB34\uC5C7",
        "\uBB34\uC5C7\uB54C\uBB38\uC5D0",
        "\uBB3C\uB860",
        "\uBC0F",
        "\uBC14\uAFB8\uC5B4\uB9D0\uD558\uBA74",
        "\uBC14\uAFB8\uC5B4\uB9D0\uD558\uC790\uBA74",
        "\uBC14\uAFB8\uC5B4\uC11C \uB9D0\uD558\uBA74",
        "\uBC14\uAFB8\uC5B4\uC11C \uD55C\uB2E4\uBA74",
        "\uBC14\uAFD4 \uB9D0\uD558\uBA74",
        "\uBC14\uB85C",
        "\uBC14\uC640\uAC19\uC774",
        "\uBC16\uC5D0 \uC548\uB41C\uB2E4",
        "\uBC18\uB300\uB85C",
        "\uBC18\uB300\uB85C \uB9D0\uD558\uC790\uBA74",
        "\uBC18\uB4DC\uC2DC",
        "\uBC84\uAE08",
        "\uBCF4\uB294\uB370\uC11C",
        "\uBCF4\uB2E4\uB354",
        "\uBCF4\uB4DC\uB4DD",
        "\uBCF8\uB300\uB85C",
        "\uBD10",
        "\uBD10\uB77C",
        "\uBD80\uB958\uC758 \uC0AC\uB78C\uB4E4",
        "\uBD80\uD130",
        "\uBD88\uAD6C\uD558\uACE0",
        "\uBD88\uBB38\uD558\uACE0",
        "\uBD95\uBD95",
        "\uBE44\uAC71\uAC70\uB9AC\uB2E4",
        "\uBE44\uAD50\uC801",
        "\uBE44\uAE38\uC218 \uC5C6\uB2E4",
        "\uBE44\uB85C\uC18C",
        "\uBE44\uB85D",
        "\uBE44\uC2B7\uD558\uB2E4",
        "\uBE44\uCD94\uC5B4 \uBCF4\uC544",
        "\uBE44\uD558\uBA74",
        "\uBFD0\uB9CC \uC544\uB2C8\uB77C",
        "\uBFD0\uB9CC\uC544\uB2C8\uB77C",
        "\uBFD0\uC774\uB2E4",
        "\uC090\uAC71",
        "\uC090\uAC71\uAC70\uB9AC\uB2E4",
        "\uC0AC",
        "\uC0BC",
        "\uC0C1\uB300\uC801\uC73C\uB85C \uB9D0\uD558\uC790\uBA74",
        "\uC0DD\uAC01\uD55C\uB300\uB85C",
        "\uC124\uB839",
        "\uC124\uB9C8",
        "\uC124\uC0AC",
        "\uC14B",
        "\uC18C\uC0DD",
        "\uC18C\uC778",
        "\uC1A8",
        "\uC27F",
        "\uC2B5\uB2C8\uAE4C",
        "\uC2B5\uB2C8\uB2E4",
        "\uC2DC\uAC01",
        "\uC2DC\uAC04",
        "\uC2DC\uC791\uD558\uC5EC",
        "\uC2DC\uCD08\uC5D0",
        "\uC2DC\uD0A4\uB2E4",
        "\uC2E4\uB85C",
        "\uC2EC\uC9C0\uC5B4",
        "\uC544",
        "\uC544\uB2C8",
        "\uC544\uB2C8\uB098\uB2E4\uB97C\uAC00",
        "\uC544\uB2C8\uB77C\uBA74",
        "\uC544\uB2C8\uBA74",
        "\uC544\uB2C8\uC5C8\uB2E4\uBA74",
        "\uC544\uB798\uC717",
        "\uC544\uBB34\uAC70\uB098",
        "\uC544\uBB34\uB3C4",
        "\uC544\uC57C",
        "\uC544\uC6B8\uB7EC",
        "\uC544\uC774",
        "\uC544\uC774\uACE0",
        "\uC544\uC774\uAD6C",
        "\uC544\uC774\uC57C",
        "\uC544\uC774\uCFE0",
        "\uC544\uD558",
        "\uC544\uD649",
        "\uC548 \uADF8\uB7EC\uBA74",
        "\uC54A\uAE30 \uC704\uD558\uC5EC",
        "\uC54A\uAE30 \uC704\uD574\uC11C",
        "\uC54C \uC218 \uC788\uB2E4",
        "\uC54C\uC558\uC5B4",
        "\uC557",
        "\uC55E\uC5D0\uC11C",
        "\uC55E\uC758\uAC83",
        "\uC57C",
        "\uC57D\uAC04",
        "\uC591\uC790",
        "\uC5B4",
        "\uC5B4\uAE30\uC5EC\uCC28",
        "\uC5B4\uB290",
        "\uC5B4\uB290 \uB144\uB3C4",
        "\uC5B4\uB290\uAC83",
        "\uC5B4\uB290\uACF3",
        "\uC5B4\uB290\uB54C",
        "\uC5B4\uB290\uCABD",
        "\uC5B4\uB290\uD574",
        "\uC5B4\uB514",
        "\uC5B4\uB54C",
        "\uC5B4\uB5A0\uD55C",
        "\uC5B4\uB5A4",
        "\uC5B4\uB5A4\uAC83",
        "\uC5B4\uB5A4\uAC83\uB4E4",
        "\uC5B4\uB5BB\uAC8C",
        "\uC5B4\uB5BB\uD574",
        "\uC5B4\uC774",
        "\uC5B4\uC9F8\uC11C",
        "\uC5B4\uCA0B\uB4E0",
        "\uC5B4\uCA54\uC218 \uC5C6\uB2E4",
        "\uC5B4\uCC0C",
        "\uC5B4\uCC0C\uB40F\uB4E0",
        "\uC5B4\uCC0C\uB40F\uC5B4",
        "\uC5B4\uCC0C\uD558\uB4E0\uC9C0",
        "\uC5B4\uCC0C\uD558\uC5EC",
        "\uC5B8\uC81C",
        "\uC5B8\uC820\uAC00",
        "\uC5BC\uB9C8",
        "\uC5BC\uB9C8 \uC548 \uB418\uB294 \uAC83",
        "\uC5BC\uB9C8\uAC04",
        "\uC5BC\uB9C8\uB098",
        "\uC5BC\uB9C8\uB4E0\uC9C0",
        "\uC5BC\uB9C8\uB9CC\uD07C",
        "\uC5BC\uB9C8\uD07C",
        "\uC5C9\uC5C9",
        "\uC5D0",
        "\uC5D0 \uAC00\uC11C",
        "\uC5D0 \uB2EC\uB824 \uC788\uB2E4",
        "\uC5D0 \uB300\uD574",
        "\uC5D0 \uC788\uB2E4",
        "\uC5D0 \uD55C\uD558\uB2E4",
        "\uC5D0\uAC8C",
        "\uC5D0\uC11C",
        "\uC5EC",
        "\uC5EC\uAE30",
        "\uC5EC\uB35F",
        "\uC5EC\uB7EC\uBD84",
        "\uC5EC\uBCF4\uC2DC\uC624",
        "\uC5EC\uBD80",
        "\uC5EC\uC12F",
        "\uC5EC\uC804\uD788",
        "\uC5EC\uCC28",
        "\uC5F0\uAD00\uB418\uB2E4",
        "\uC5F0\uC774\uC11C",
        "\uC601",
        "\uC601\uCC28",
        "\uC606\uC0AC\uB78C",
        "\uC608",
        "\uC608\uB97C \uB4E4\uBA74",
        "\uC608\uB97C \uB4E4\uC790\uBA74",
        "\uC608\uCEE8\uB300",
        "\uC608\uD558\uBA74",
        "\uC624",
        "\uC624\uB85C\uC9C0",
        "\uC624\uB974\uB2E4",
        "\uC624\uC790\uB9C8\uC790",
        "\uC624\uC9C1",
        "\uC624\uD638",
        "\uC624\uD788\uB824",
        "\uC640",
        "\uC640 \uAC19\uC740 \uC0AC\uB78C\uB4E4",
        "\uC640\uB974\uB974",
        "\uC640\uC544",
        "\uC65C",
        "\uC65C\uB0D0\uD558\uBA74",
        "\uC678\uC5D0\uB3C4",
        "\uC694\uB9CC\uD07C",
        "\uC694\uB9CC\uD55C \uAC83",
        "\uC694\uB9CC\uD55C\uAC78",
        "\uC694\uCEE8\uB300",
        "\uC6B0\uB974\uB974",
        "\uC6B0\uB9AC",
        "\uC6B0\uB9AC\uB4E4",
        "\uC6B0\uC120",
        "\uC6B0\uC5D0 \uC885\uD569\uD55C\uAC83\uACFC\uAC19\uC774",
        "\uC6B4\uC6B4",
        "\uC6D4",
        "\uC704\uC5D0\uC11C \uC11C\uC220\uD55C\uBC14\uC640\uAC19\uC774",
        "\uC704\uD558\uC5EC",
        "\uC704\uD574\uC11C",
        "\uC719\uC719",
        "\uC721",
        "\uC73C\uB85C",
        "\uC73C\uB85C \uC778\uD558\uC5EC",
        "\uC73C\uB85C\uC11C",
        "\uC73C\uB85C\uC368",
        "\uC744",
        "\uC751",
        "\uC751\uB2F9",
        "\uC758",
        "\uC758\uAC70\uD558\uC5EC",
        "\uC758\uC9C0\uD558\uC5EC",
        "\uC758\uD574",
        "\uC758\uD574\uB418\uB2E4",
        "\uC758\uD574\uC11C",
        "\uC774",
        "\uC774 \uB418\uB2E4",
        "\uC774 \uB54C\uBB38\uC5D0",
        "\uC774 \uBC16\uC5D0",
        "\uC774 \uC678\uC5D0",
        "\uC774 \uC815\uB3C4\uC758",
        "\uC774\uAC83",
        "\uC774\uACF3",
        "\uC774\uB54C",
        "\uC774\uB77C\uBA74",
        "\uC774\uB798",
        "\uC774\uB7EC\uC774\uB7EC\uD558\uB2E4",
        "\uC774\uB7EC\uD55C",
        "\uC774\uB7F0",
        "\uC774\uB7F4\uC815\uB3C4\uB85C",
        "\uC774\uB807\uAC8C \uB9CE\uC740 \uAC83",
        "\uC774\uB807\uAC8C\uB418\uBA74",
        "\uC774\uB807\uAC8C\uB9D0\uD558\uC790\uBA74",
        "\uC774\uB807\uAD6C\uB098",
        "\uC774\uB85C \uC778\uD558\uC5EC",
        "\uC774\uB974\uAE30\uAE4C\uC9C0",
        "\uC774\uB9AC\uD558\uC5EC",
        "\uC774\uB9CC\uD07C",
        "\uC774\uBC88",
        "\uC774\uBD10",
        "\uC774\uC0C1",
        "\uC774\uC5B4\uC11C",
        "\uC774\uC5C8\uB2E4",
        "\uC774\uC640 \uAC19\uB2E4",
        "\uC774\uC640 \uAC19\uC740",
        "\uC774\uC640 \uBC18\uB300\uB85C",
        "\uC774\uC640\uAC19\uB2E4\uBA74",
        "\uC774\uC678\uC5D0\uB3C4",
        "\uC774\uC6A9\uD558\uC5EC",
        "\uC774\uC720\uB9CC\uC73C\uB85C",
        "\uC774\uC820",
        "\uC774\uC9C0\uB9CC",
        "\uC774\uCABD",
        "\uC774\uCC9C\uAD6C",
        "\uC774\uCC9C\uC721",
        "\uC774\uCC9C\uCE60",
        "\uC774\uCC9C\uD314",
        "\uC778 \uB4EF\uD558\uB2E4",
        "\uC778\uC820",
        "\uC77C",
        "\uC77C\uAC83\uC774\uB2E4",
        "\uC77C\uACF1",
        "\uC77C\uB2E8",
        "\uC77C\uB54C",
        "\uC77C\uBC18\uC801\uC73C\uB85C",
        "\uC77C\uC9C0\uB77C\uB3C4",
        "\uC784\uC5D0 \uD2C0\uB9BC\uC5C6\uB2E4",
        "\uC785\uAC01\uD558\uC5EC",
        "\uC785\uC7A5\uC5D0\uC11C",
        "\uC787\uB530\uB77C",
        "\uC788\uB2E4",
        "\uC790",
        "\uC790\uAE30",
        "\uC790\uAE30\uC9D1",
        "\uC790\uB9C8\uC790",
        "\uC790\uC2E0",
        "\uC7A0\uAE50",
        "\uC7A0\uC2DC",
        "\uC800",
        "\uC800\uAC83",
        "\uC800\uAC83\uB9CC\uD07C",
        "\uC800\uAE30",
        "\uC800\uCABD",
        "\uC800\uD76C",
        "\uC804\uBD80",
        "\uC804\uC790",
        "\uC804\uD6C4",
        "\uC810\uC5D0\uC11C \uBCF4\uC544",
        "\uC815\uB3C4\uC5D0 \uC774\uB974\uB2E4",
        "\uC81C",
        "\uC81C\uAC01\uAE30",
        "\uC81C\uC678\uD558\uACE0",
        "\uC870\uAE08",
        "\uC870\uCC28",
        "\uC870\uCC28\uB3C4",
        "\uC878\uC878",
        "\uC880",
        "\uC88B\uC544",
        "\uC88D\uC88D",
        "\uC8FC\uB8E9\uC8FC\uB8E9",
        "\uC8FC\uC800\uD558\uC9C0 \uC54A\uACE0",
        "\uC904\uC740 \uBAB0\uB78F\uB2E4",
        "\uC904\uC740\uBAA8\uB978\uB2E4",
        "\uC911\uC5D0\uC11C",
        "\uC911\uC758\uD558\uB098",
        "\uC988\uC74C\uD558\uC5EC",
        "\uC989",
        "\uC989\uC2DC",
        "\uC9C0\uB4E0\uC9C0",
        "\uC9C0\uB9CC",
        "\uC9C0\uB9D0\uACE0",
        "\uC9C4\uC9DC\uB85C",
        "\uCABD\uC73C\uB85C",
        "\uCC28\uB77C\uB9AC",
        "\uCC38",
        "\uCC38\uB098",
        "\uCCAB\uBC88\uC9F8\uB85C",
        "\uCCC7",
        "\uCD1D\uC801\uC73C\uB85C",
        "\uCD1D\uC801\uC73C\uB85C \uB9D0\uD558\uBA74",
        "\uCD1D\uC801\uC73C\uB85C \uBCF4\uBA74",
        "\uCE60",
        "\uCF78\uCF78",
        "\uCF85\uCF85",
        "\uCFF5",
        "\uD0C0\uB2E4",
        "\uD0C0\uC778",
        "\uD0D5\uD0D5",
        "\uD1A0\uD558\uB2E4",
        "\uD1B5\uD558\uC5EC",
        "\uD22D",
        "\uD264",
        "\uD2C8\uD0C0",
        "\uD30D",
        "\uD314",
        "\uD37D",
        "\uD384\uB801",
        "\uD558",
        "\uD558\uAC8C\uB420\uAC83\uC774\uB2E4",
        "\uD558\uAC8C\uD558\uB2E4",
        "\uD558\uACA0\uB294\uAC00",
        "\uD558\uACE0 \uC788\uB2E4",
        "\uD558\uACE0\uC788\uC5C8\uB2E4",
        "\uD558\uACE4\uD558\uC600\uB2E4",
        "\uD558\uAD6C\uB098",
        "\uD558\uAE30 \uB54C\uBB38\uC5D0",
        "\uD558\uAE30 \uC704\uD558\uC5EC",
        "\uD558\uAE30\uB294\uD55C\uB370",
        "\uD558\uAE30\uB9CC \uD558\uBA74",
        "\uD558\uAE30\uBCF4\uB2E4\uB294",
        "\uD558\uAE30\uC5D0",
        "\uD558\uB098",
        "\uD558\uB290\uB2C8",
        "\uD558\uB294 \uAE40\uC5D0",
        "\uD558\uB294 \uD3B8\uC774 \uB0AB\uB2E4",
        "\uD558\uB294\uAC83\uB3C4",
        "\uD558\uB294\uAC83\uB9CC \uBABB\uD558\uB2E4",
        "\uD558\uB294\uAC83\uC774 \uB0AB\uB2E4",
        "\uD558\uB294\uBC14",
        "\uD558\uB354\uB77C\uB3C4",
        "\uD558\uB3C4\uB2E4",
        "\uD558\uB3C4\uB85D\uC2DC\uD0A4\uB2E4",
        "\uD558\uB3C4\uB85D\uD558\uB2E4",
        "\uD558\uB4E0\uC9C0",
        "\uD558\uB824\uACE0\uD558\uB2E4",
        "\uD558\uB9C8\uD130\uBA74",
        "\uD558\uBA74 \uD560\uC218\uB85D",
        "\uD558\uBA74\uB41C\uB2E4",
        "\uD558\uBA74\uC11C",
        "\uD558\uBB3C\uBA70",
        "\uD558\uC5EC\uAE08",
        "\uD558\uC5EC\uC57C",
        "\uD558\uC790\uB9C8\uC790",
        "\uD558\uC9C0 \uC54A\uB294\uB2E4\uBA74",
        "\uD558\uC9C0 \uC54A\uB3C4\uB85D",
        "\uD558\uC9C0\uB9C8",
        "\uD558\uC9C0\uB9C8\uB77C",
        "\uD558\uC9C0\uB9CC",
        "\uD558\uD558",
        "\uD55C \uAE4C\uB2ED\uC5D0",
        "\uD55C \uC774\uC720\uB294",
        "\uD55C \uD6C4",
        "\uD55C\uB2E4\uBA74",
        "\uD55C\uB2E4\uBA74 \uBAB0\uB77C\uB3C4",
        "\uD55C\uB370",
        "\uD55C\uB9C8\uB514",
        "\uD55C\uC801\uC774\uC788\uB2E4",
        "\uD55C\uCF20\uC73C\uB85C\uB294",
        "\uD55C\uD56D\uBAA9",
        "\uD560 \uB530\uB984\uC774\uB2E4",
        "\uD560 \uC0DD\uAC01\uC774\uB2E4",
        "\uD560 \uC904 \uC548\uB2E4",
        "\uD560 \uC9C0\uACBD\uC774\uB2E4",
        "\uD560 \uD798\uC774 \uC788\uB2E4",
        "\uD560\uB54C",
        "\uD560\uB9CC\uD558\uB2E4",
        "\uD560\uB9DD\uC815",
        "\uD560\uBFD0",
        "\uD560\uC218\uC788\uB2E4",
        "\uD560\uC218\uC788\uC5B4",
        "\uD560\uC904\uC54C\uB2E4",
        "\uD560\uC9C0\uB77C\uB3C4",
        "\uD560\uC9C0\uC5B8\uC815",
        "\uD568\uAED8",
        "\uD574\uB3C4\uB41C\uB2E4",
        "\uD574\uB3C4\uC88B\uB2E4",
        "\uD574\uBD10\uC694",
        "\uD574\uC11C\uB294 \uC548\uB41C\uB2E4",
        "\uD574\uC57C\uD55C\uB2E4",
        "\uD574\uC694",
        "\uD588\uC5B4\uC694",
        "\uD5A5\uD558\uB2E4",
        "\uD5A5\uD558\uC5EC",
        "\uD5A5\uD574\uC11C",
        "\uD5C8",
        "\uD5C8\uAC71",
        "\uD5C8\uD5C8",
        "\uD5C9",
        "\uD5C9\uD5C9",
        "\uD5D0\uB5A1\uD5D0\uB5A1",
        "\uD615\uC2DD\uC73C\uB85C \uC4F0\uC5EC",
        "\uD639\uC2DC",
        "\uD639\uC740",
        "\uD63C\uC790",
        "\uD6E8\uC52C",
        "\uD718\uC775",
        "\uD734",
        "\uD750\uD750",
        "\uD765",
        "\uD798\uC785\uC5B4",
        "\uFE3F",
        "\uFF5E",
        "\uFFE5"
      ];
      const kur = [
        "\u0626\u06CE\u0645\u06D5",
        "\u0626\u06CE\u0648\u06D5",
        "\u0626\u06D5\u0645",
        "\u0626\u06D5\u0648",
        "\u0626\u06D5\u0648\u0627\u0646",
        "\u0626\u06D5\u0648\u06D5\u06CC",
        "\u0628\u06C6",
        "\u0628\u06CE",
        "\u0628\u06CE\u062C\u06AF\u06D5",
        "\u0628\u06D5",
        "\u0628\u06D5\u0628\u06CE",
        "\u0628\u06D5\u062F\u06D5\u0645",
        "\u0628\u06D5\u0631\u062F\u06D5\u0645",
        "\u0628\u06D5\u0631\u0644\u06D5",
        "\u0628\u06D5\u0631\u06D5\u0648\u06CC",
        "\u0628\u06D5\u0631\u06D5\u0648\u06D5",
        "\u0628\u06D5\u0644\u0627\u06CC",
        "\u0628\u06D5\u067E\u06CE\u06CC",
        "\u062A\u06C6",
        "\u062A\u06CE",
        "\u062C\u06AF\u06D5",
        "\u062F\u0648\u0627\u06CC",
        "\u062F\u0648\u0648",
        "\u062F\u06D5",
        "\u062F\u06D5\u06A9\u0627\u062A",
        "\u062F\u06D5\u06AF\u06D5\u06B5",
        "\u0633\u06D5\u0631",
        "\u0644\u06CE",
        "\u0644\u06D5",
        "\u0644\u06D5\u0628\u0627\u0628\u06D5\u062A",
        "\u0644\u06D5\u0628\u0627\u062A\u06CC",
        "\u0644\u06D5\u0628\u0627\u0631\u06D5\u06CC",
        "\u0644\u06D5\u0628\u0631\u06CE\u062A\u06CC",
        "\u0644\u06D5\u0628\u0646",
        "\u0644\u06D5\u0628\u06D5\u0631",
        "\u0644\u06D5\u0628\u06D5\u06CC\u0646\u06CC",
        "\u0644\u06D5\u062F\u06D5\u0645",
        "\u0644\u06D5\u0631\u06CE",
        "\u0644\u06D5\u0631\u06CE\u06AF\u0627",
        "\u0644\u06D5\u0631\u06D5\u0648\u06CC",
        "\u0644\u06D5\u0633\u06D5\u0631",
        "\u0644\u06D5\u0644\u0627\u06CC\u06D5\u0646",
        "\u0644\u06D5\u0646\u0627\u0648",
        "\u0644\u06D5\u0646\u06CE\u0648",
        "\u0644\u06D5\u0648",
        "\u0644\u06D5\u067E\u06CE\u0646\u0627\u0648\u06CC",
        "\u0644\u06D5\u0698\u06CE\u0631",
        "\u0644\u06D5\u06AF\u06D5\u06B5",
        "\u0645\u0646",
        "\u0646\u0627\u0648",
        "\u0646\u06CE\u0648\u0627\u0646",
        "\u0647\u06D5\u0631",
        "\u0647\u06D5\u0631\u0648\u06D5\u0647\u0627",
        "\u0648",
        "\u0648\u06D5\u06A9",
        "\u067E\u0627\u0634",
        "\u067E\u06CE",
        "\u067E\u06CE\u0634",
        "\u0686\u06D5\u0646\u062F",
        "\u06A9\u0631\u062F",
        "\u06A9\u06D5",
        "\u06CC"
      ];
      const lat = [
        "a",
        "ab",
        "ac",
        "ad",
        "at",
        "atque",
        "aut",
        "autem",
        "cum",
        "de",
        "dum",
        "e",
        "erant",
        "erat",
        "est",
        "et",
        "etiam",
        "ex",
        "haec",
        "hic",
        "hoc",
        "in",
        "ita",
        "me",
        "nec",
        "neque",
        "non",
        "per",
        "qua",
        "quae",
        "quam",
        "qui",
        "quibus",
        "quidem",
        "quo",
        "quod",
        "re",
        "rebus",
        "rem",
        "res",
        "sed",
        "si",
        "sic",
        "sunt",
        "tamen",
        "tandem",
        "te",
        "ut",
        "vel"
      ];
      const lav = [
        "aiz",
        "ap",
        "apak\u0161",
        "apak\u0161pus",
        "ar",
        "ar\u012B",
        "aug\u0161pus",
        "bet",
        "bez",
        "bija",
        "biji",
        "biju",
        "bij\u0101m",
        "bij\u0101t",
        "b\u016Bs",
        "b\u016Bsi",
        "b\u016Bsiet",
        "b\u016Bsim",
        "b\u016Bt",
        "b\u016B\u0161u",
        "caur",
        "diem\u017E\u0113l",
        "diezin",
        "dro\u0161i",
        "d\u0113\u013C",
        "esam",
        "esat",
        "esi",
        "esmu",
        "gan",
        "gar",
        "iekam",
        "iekams",
        "iek\u0101m",
        "iek\u0101ms",
        "iek\u0161",
        "iek\u0161pus",
        "ik",
        "ir",
        "it",
        "itin",
        "iz",
        "ja",
        "jau",
        "jeb",
        "jeb\u0161u",
        "jel",
        "jo",
        "j\u0101",
        "ka",
        "kam\u0113r",
        "kaut",
        "kol\u012Bdz",
        "kop\u0161",
        "k\u0101",
        "k\u013Cuva",
        "k\u013Cuvi",
        "k\u013Cuvu",
        "k\u013Cuv\u0101m",
        "k\u013Cuv\u0101t",
        "k\u013C\u016Bs",
        "k\u013C\u016Bsi",
        "k\u013C\u016Bsiet",
        "k\u013C\u016Bsim",
        "k\u013C\u016Bst",
        "k\u013C\u016Bstam",
        "k\u013C\u016Bstat",
        "k\u013C\u016Bsti",
        "k\u013C\u016Bstu",
        "k\u013C\u016Bt",
        "k\u013C\u016B\u0161u",
        "labad",
        "lai",
        "lejpus",
        "l\u012Bdz",
        "l\u012Bdzko",
        "ne",
        "neb\u016Bt",
        "nedz",
        "nek\u0101",
        "nevis",
        "nezin",
        "no",
        "nu",
        "n\u0113",
        "otrpus",
        "pa",
        "par",
        "pat",
        "pie",
        "pirms",
        "pret",
        "priek\u0161",
        "p\u0101r",
        "p\u0113c",
        "starp",
        "tad",
        "tak",
        "tapi",
        "taps",
        "tapsi",
        "tapsiet",
        "tapsim",
        "tapt",
        "tap\u0101t",
        "tap\u0161u",
        "ta\u010Du",
        "te",
        "tiec",
        "tiek",
        "tiekam",
        "tiekat",
        "tieku",
        "tik",
        "tika",
        "tikai",
        "tiki",
        "tikko",
        "tiklab",
        "tikl\u012Bdz",
        "tiks",
        "tiksiet",
        "tiksim",
        "tikt",
        "tiku",
        "tikvien",
        "tik\u0101m",
        "tik\u0101t",
        "tik\u0161u",
        "tom\u0113r",
        "topat",
        "turpretim",
        "turpret\u012B",
        "t\u0101",
        "t\u0101d\u0113\u013C",
        "t\u0101lab",
        "t\u0101p\u0113c",
        "un",
        "uz",
        "vai",
        "var",
        "varat",
        "var\u0113ja",
        "var\u0113ji",
        "var\u0113ju",
        "var\u0113j\u0101m",
        "var\u0113j\u0101t",
        "var\u0113s",
        "var\u0113si",
        "var\u0113siet",
        "var\u0113sim",
        "var\u0113t",
        "var\u0113\u0161u",
        "vien",
        "virs",
        "virspus",
        "vis",
        "vi\u0146pus",
        "zem",
        "\u0101rpus",
        "\u0161aipus"
      ];
      const lit = [
        "abi",
        "abidvi",
        "abiejose",
        "abiejuose",
        "abiej\xF8",
        "abiem",
        "abigaliai",
        "abipus",
        "abu",
        "abudu",
        "ai",
        "ana",
        "anaiptol",
        "anaisiais",
        "anajai",
        "anajam",
        "anajame",
        "anapus",
        "anas",
        "anasai",
        "anasis",
        "anei",
        "aniedvi",
        "anieji",
        "aniesiems",
        "anoji",
        "anojo",
        "anojoje",
        "anokia",
        "anoks",
        "anosiomis",
        "anosioms",
        "anosios",
        "anosiose",
        "anot",
        "ant",
        "antai",
        "anuodu",
        "anuoju",
        "anuosiuose",
        "anuosius",
        "an\xE0ja",
        "an\xE0j\xE0",
        "an\xE0j\xE1",
        "an\xE0sias",
        "an\xF8j\xF8",
        "apie",
        "aplink",
        "ar",
        "arba",
        "argi",
        "arti",
        "auk\xF0\xE8iau",
        "a\xF0",
        "be",
        "bei",
        "beje",
        "bema\xFE",
        "bent",
        "bet",
        "betgi",
        "beveik",
        "dar",
        "dargi",
        "daugma\xFE",
        "deja",
        "d\xEBka",
        "d\xEBl",
        "d\xEBlei",
        "d\xEBlto",
        "ech",
        "et",
        "gal",
        "galb\xFBt",
        "galgi",
        "gan",
        "gana",
        "gi",
        "greta",
        "idant",
        "iki",
        "ir",
        "irgi",
        "it",
        "itin",
        "i\xF0",
        "i\xF0ilgai",
        "i\xF0vis",
        "jaisiais",
        "jajai",
        "jajam",
        "jajame",
        "jei",
        "jeigu",
        "ji",
        "jiedu",
        "jiedvi",
        "jieji",
        "jiesiems",
        "jinai",
        "jis",
        "jisai",
        "jog",
        "joji",
        "jojo",
        "jojoje",
        "jokia",
        "joks",
        "josiomis",
        "josioms",
        "josios",
        "josiose",
        "judu",
        "judvi",
        "juk",
        "jumis",
        "jums",
        "jumyse",
        "juodu",
        "juoju",
        "juosiuose",
        "juosius",
        "jus",
        "j\xE0ja",
        "j\xE0j\xE0",
        "j\xE0sias",
        "j\xE1j\xE1",
        "j\xF8j\xF8",
        "j\xFBs",
        "j\xFBsi\xF0kis",
        "j\xFBsi\xF0k\xEB",
        "j\xFBs\xF8",
        "kad",
        "kada",
        "kadangi",
        "kai",
        "kaip",
        "kaipgi",
        "kas",
        "katra",
        "katras",
        "katriedvi",
        "katruodu",
        "ka\xFEin",
        "ka\xFEkas",
        "ka\xFEkatra",
        "ka\xFEkatras",
        "ka\xFEkokia",
        "ka\xFEkoks",
        "ka\xFEkuri",
        "ka\xFEkuris",
        "kiaurai",
        "kiek",
        "kiekvienas",
        "kieno",
        "kita",
        "kitas",
        "kitokia",
        "kitoks",
        "kod\xEBl",
        "kokia",
        "koks",
        "kol",
        "kolei",
        "kone",
        "kuomet",
        "kur",
        "kurgi",
        "kuri",
        "kuriedvi",
        "kuris",
        "kuriuodu",
        "lai",
        "lig",
        "ligi",
        "link",
        "lyg",
        "man",
        "manaisiais",
        "manajai",
        "manajam",
        "manajame",
        "manas",
        "manasai",
        "manasis",
        "mane",
        "manieji",
        "maniesiems",
        "manim",
        "manimi",
        "mani\xF0kis",
        "mani\xF0k\xEB",
        "mano",
        "manoji",
        "manojo",
        "manojoje",
        "manosiomis",
        "manosioms",
        "manosios",
        "manosiose",
        "manuoju",
        "manuosiuose",
        "manuosius",
        "manyje",
        "man\xE0ja",
        "man\xE0j\xE0",
        "man\xE0j\xE1",
        "man\xE0sias",
        "man\xE6s",
        "man\xF8j\xF8",
        "mat",
        "ma\xFEdaug",
        "ma\xFEne",
        "mes",
        "mudu",
        "mudvi",
        "mumis",
        "mums",
        "mumyse",
        "mus",
        "m\xFBsi\xF0kis",
        "m\xFBsi\xF0k\xEB",
        "m\xFBs\xF8",
        "na",
        "nagi",
        "ne",
        "nebe",
        "nebent",
        "negi",
        "negu",
        "nei",
        "nejau",
        "nejaugi",
        "nekaip",
        "nelyginant",
        "nes",
        "net",
        "netgi",
        "netoli",
        "neva",
        "nors",
        "nuo",
        "n\xEB",
        "o",
        "ogi",
        "oi",
        "paeiliui",
        "pagal",
        "pakeliui",
        "palaipsniui",
        "palei",
        "pas",
        "pasak",
        "paskos",
        "paskui",
        "paskum",
        "pat",
        "pati",
        "patiems",
        "paties",
        "pats",
        "patys",
        "pat\xE1",
        "pa\xE8iais",
        "pa\xE8iam",
        "pa\xE8iame",
        "pa\xE8iu",
        "pa\xE8iuose",
        "pa\xE8ius",
        "pa\xE8i\xF8",
        "per",
        "pernelyg",
        "pirm",
        "pirma",
        "pirmiau",
        "po",
        "prie",
        "prie\xF0",
        "prie\xF0ais",
        "pro",
        "pusiau",
        "rasi",
        "rodos",
        "sau",
        "savaisiais",
        "savajai",
        "savajam",
        "savajame",
        "savas",
        "savasai",
        "savasis",
        "save",
        "savieji",
        "saviesiems",
        "savimi",
        "savi\xF0kis",
        "savi\xF0k\xEB",
        "savo",
        "savoji",
        "savojo",
        "savojoje",
        "savosiomis",
        "savosioms",
        "savosios",
        "savosiose",
        "savuoju",
        "savuosiuose",
        "savuosius",
        "savyje",
        "sav\xE0ja",
        "sav\xE0j\xE0",
        "sav\xE0j\xE1",
        "sav\xE0sias",
        "sav\xE6s",
        "sav\xF8j\xF8",
        "skersai",
        "skrad\xFEiai",
        "sta\xE8iai",
        "su",
        "sulig",
        "ta",
        "tad",
        "tai",
        "taigi",
        "taip",
        "taipogi",
        "taisiais",
        "tajai",
        "tajam",
        "tajame",
        "tamsta",
        "tarp",
        "tarsi",
        "tartum",
        "tarytum",
        "tas",
        "tasai",
        "tau",
        "tavaisiais",
        "tavajai",
        "tavajam",
        "tavajame",
        "tavas",
        "tavasai",
        "tavasis",
        "tave",
        "tavieji",
        "taviesiems",
        "tavimi",
        "tavi\xF0kis",
        "tavi\xF0k\xEB",
        "tavo",
        "tavoji",
        "tavojo",
        "tavojoje",
        "tavosiomis",
        "tavosioms",
        "tavosios",
        "tavosiose",
        "tavuoju",
        "tavuosiuose",
        "tavuosius",
        "tavyje",
        "tav\xE0ja",
        "tav\xE0j\xE0",
        "tav\xE0j\xE1",
        "tav\xE0sias",
        "tav\xE6s",
        "tav\xF8j\xF8",
        "ta\xE8iau",
        "te",
        "tegu",
        "tegul",
        "tiedvi",
        "tieji",
        "ties",
        "tiesiems",
        "tiesiog",
        "tik",
        "tikriausiai",
        "tiktai",
        "toji",
        "tojo",
        "tojoje",
        "tokia",
        "toks",
        "tol",
        "tolei",
        "toliau",
        "tosiomis",
        "tosioms",
        "tosios",
        "tosiose",
        "tu",
        "tuodu",
        "tuoju",
        "tuosiuose",
        "tuosius",
        "turb\xFBt",
        "t\xE0ja",
        "t\xE0j\xE0",
        "t\xE0j\xE1",
        "t\xE0sias",
        "t\xF8j\xF8",
        "t\xFBlas",
        "u\xFE",
        "u\xFEtat",
        "u\xFEvis",
        "va",
        "vai",
        "viduj",
        "vidury",
        "vien",
        "vienas",
        "vienokia",
        "vienoks",
        "vietoj",
        "vir\xF0",
        "vir\xF0uj",
        "vir\xF0um",
        "vis",
        "vis d\xEBlto",
        "visa",
        "visas",
        "visgi",
        "visokia",
        "visoks",
        "vos",
        "v\xEBl",
        "v\xEBlgi",
        "ypa\xE8",
        "\xE1",
        "\xE1kypai",
        "\xE1stri\xFEai",
        "\xF0alia",
        "\xF0e",
        "\xF0i",
        "\xF0iaisiais",
        "\xF0iajai",
        "\xF0iajam",
        "\xF0iajame",
        "\xF0iapus",
        "\xF0iedvi",
        "\xF0ieji",
        "\xF0iesiems",
        "\xF0ioji",
        "\xF0iojo",
        "\xF0iojoje",
        "\xF0iokia",
        "\xF0ioks",
        "\xF0iosiomis",
        "\xF0iosioms",
        "\xF0iosios",
        "\xF0iosiose",
        "\xF0is",
        "\xF0isai",
        "\xF0it",
        "\xF0ita",
        "\xF0itas",
        "\xF0itiedvi",
        "\xF0itokia",
        "\xF0itoks",
        "\xF0ituodu",
        "\xF0iuodu",
        "\xF0iuoju",
        "\xF0iuosiuose",
        "\xF0iuosius",
        "\xF0i\xE0ja",
        "\xF0i\xE0j\xE0",
        "\xF0i\xE0sias",
        "\xF0i\xF8j\xF8",
        "\xF0tai",
        "\xF0\xE1j\xE1",
        "\xFEemiau"
      ];
      const lgg = [
        "\u0301",
        "\u0300",
        "n\u0268",
        "m\xE0",
        "r\u0268",
        "d\u0268",
        "\u0268",
        "\u0301n\u0268",
        "\xE8r\u0268",
        "\u0301\xE1'",
        "s\u0268",
        "\xE0z\u0268",
        "y\u0268",
        "r\xE1",
        "v\u0268",
        "nga",
        "be",
        "m\u0268",
        "\xE0",
        "d\xE0",
        "k\u0289",
        "b\xE1",
        " \u0301l\xE9",
        "m\xE1",
        "e",
        "yo",
        "\u0300y\u0268",
        "ma",
        "k\u0268",
        "\xE0l\u0289",
        "\u0301m\xE0",
        "r\u0289\u0301",
        "dr\u0268",
        "pat\xED",
        "a",
        "\xE8",
        "y\xF3",
        "te",
        "\u0300\xE1",
        "m\xE0",
        "m\xE2",
        "d\xE1l\xE9",
        "y\xED",
        "\u030C",
        "p\u0268",
        "e'y\xF3",
        "ndr\xE1a",
        "bo",
        "di",
        "dr\xEC\xE1"
      ];
      const lggNd = [
        "ma",
        "ni",
        "ri",
        "eri",
        "di",
        "yi",
        "si",
        "ba",
        "nga",
        "i",
        "ra",
        "ku",
        "be",
        "yo",
        "da",
        "azini",
        "dria",
        "ru",
        "azi",
        "mu",
        "te",
        "ndra",
        "diyi",
        "ima",
        "mi",
        "alu",
        "nde",
        "alia",
        "le",
        "vile",
        "dri",
        "pati",
        "aria",
        "bo",
        "e'yo",
        "tu",
        "kini",
        "dii",
        "ama",
        "eyi",
        "dika",
        "pi",
        "e",
        "angu",
        "e'do",
        "pie",
        "ka",
        "ti",
        "o'du",
        "du"
      ];
      const msa = [
        "abdul",
        "abdullah",
        "acara",
        "ada",
        "adalah",
        "ahmad",
        "air",
        "akan",
        "akhbar",
        "akhir",
        "aktiviti",
        "alam",
        "amat",
        "amerika",
        "anak",
        "anggota",
        "antara",
        "antarabangsa",
        "apa",
        "apabila",
        "april",
        "as",
        "asas",
        "asean",
        "asia",
        "asing",
        "atas",
        "atau",
        "australia",
        "awal",
        "awam",
        "bagaimanapun",
        "bagi",
        "bahagian",
        "bahan",
        "baharu",
        "bahawa",
        "baik",
        "bandar",
        "bank",
        "banyak",
        "barangan",
        "baru",
        "baru-baru",
        "bawah",
        "beberapa",
        "bekas",
        "beliau",
        "belum",
        "berada",
        "berakhir",
        "berbanding",
        "berdasarkan",
        "berharap",
        "berikutan",
        "berjaya",
        "berjumlah",
        "berkaitan",
        "berkata",
        "berkenaan",
        "berlaku",
        "bermula",
        "bernama",
        "bernilai",
        "bersama",
        "berubah",
        "besar",
        "bhd",
        "bidang",
        "bilion",
        "bn",
        "boleh",
        "bukan",
        "bulan",
        "bursa",
        "cadangan",
        "china",
        "dagangan",
        "dalam",
        "dan",
        "dana",
        "dapat",
        "dari",
        "daripada",
        "dasar",
        "datang",
        "datuk",
        "demikian",
        "dengan",
        "depan",
        "derivatives",
        "dewan",
        "di",
        "diadakan",
        "dibuka",
        "dicatatkan",
        "dijangka",
        "diniagakan",
        "dis",
        "disember",
        "ditutup",
        "dolar",
        "dr",
        "dua",
        "dunia",
        "ekonomi",
        "eksekutif",
        "eksport",
        "empat",
        "enam",
        "faedah",
        "feb",
        "global",
        "hadapan",
        "hanya",
        "harga",
        "hari",
        "hasil",
        "hingga",
        "hubungan",
        "ia",
        "iaitu",
        "ialah",
        "indeks",
        "india",
        "indonesia",
        "industri",
        "ini",
        "islam",
        "isnin",
        "isu",
        "itu",
        "jabatan",
        "jalan",
        "jan",
        "jawatan",
        "jawatankuasa",
        "jepun",
        "jika",
        "jualan",
        "juga",
        "julai",
        "jumaat",
        "jumlah",
        "jun",
        "juta",
        "kadar",
        "kalangan",
        "kali",
        "kami",
        "kata",
        "katanya",
        "kaunter",
        "kawasan",
        "ke",
        "keadaan",
        "kecil",
        "kedua",
        "kedua-dua",
        "kedudukan",
        "kekal",
        "kementerian",
        "kemudahan",
        "kenaikan",
        "kenyataan",
        "kepada",
        "kepentingan",
        "keputusan",
        "kerajaan",
        "kerana",
        "kereta",
        "kerja",
        "kerjasama",
        "kes",
        "keselamatan",
        "keseluruhan",
        "kesihatan",
        "ketika",
        "ketua",
        "keuntungan",
        "kewangan",
        "khamis",
        "kini",
        "kira-kira",
        "kita",
        "klci",
        "klibor",
        "komposit",
        "kontrak",
        "kos",
        "kuala",
        "kuasa",
        "kukuh",
        "kumpulan",
        "lagi",
        "lain",
        "langkah",
        "laporan",
        "lebih",
        "lepas",
        "lima",
        "lot",
        "luar",
        "lumpur",
        "mac",
        "mahkamah",
        "mahu",
        "majlis",
        "makanan",
        "maklumat",
        "malam",
        "malaysia",
        "mana",
        "manakala",
        "masa",
        "masalah",
        "masih",
        "masing-masing",
        "masyarakat",
        "mata",
        "media",
        "mei",
        "melalui",
        "melihat",
        "memandangkan",
        "memastikan",
        "membantu",
        "membawa",
        "memberi",
        "memberikan",
        "membolehkan",
        "membuat",
        "mempunyai",
        "menambah",
        "menarik",
        "menawarkan",
        "mencapai",
        "mencatatkan",
        "mendapat",
        "mendapatkan",
        "menerima",
        "menerusi",
        "mengadakan",
        "mengambil",
        "mengenai",
        "menggalakkan",
        "menggunakan",
        "mengikut",
        "mengumumkan",
        "mengurangkan",
        "meningkat",
        "meningkatkan",
        "menjadi",
        "menjelang",
        "menokok",
        "menteri",
        "menunjukkan",
        "menurut",
        "menyaksikan",
        "menyediakan",
        "mereka",
        "merosot",
        "merupakan",
        "mesyuarat",
        "minat",
        "minggu",
        "minyak",
        "modal",
        "mohd",
        "mudah",
        "mungkin",
        "naik",
        "najib",
        "nasional",
        "negara",
        "negara-negara",
        "negeri",
        "niaga",
        "nilai",
        "nov",
        "ogos",
        "okt",
        "oleh",
        "operasi",
        "orang",
        "pada",
        "pagi",
        "paling",
        "pameran",
        "papan",
        "para",
        "paras",
        "parlimen",
        "parti",
        "pasaran",
        "pasukan",
        "pegawai",
        "pejabat",
        "pekerja",
        "pelabur",
        "pelaburan",
        "pelancongan",
        "pelanggan",
        "pelbagai",
        "peluang",
        "pembangunan",
        "pemberita",
        "pembinaan",
        "pemimpin",
        "pendapatan",
        "pendidikan",
        "penduduk",
        "penerbangan",
        "pengarah",
        "pengeluaran",
        "pengerusi",
        "pengguna",
        "pengurusan",
        "peniaga",
        "peningkatan",
        "penting",
        "peratus",
        "perdagangan",
        "perdana",
        "peringkat",
        "perjanjian",
        "perkara",
        "perkhidmatan",
        "perladangan",
        "perlu",
        "permintaan",
        "perniagaan",
        "persekutuan",
        "persidangan",
        "pertama",
        "pertubuhan",
        "pertumbuhan",
        "perusahaan",
        "peserta",
        "petang",
        "pihak",
        "pilihan",
        "pinjaman",
        "polis",
        "politik",
        "presiden",
        "prestasi",
        "produk",
        "program",
        "projek",
        "proses",
        "proton",
        "pukul",
        "pula",
        "pusat",
        "rabu",
        "rakan",
        "rakyat",
        "ramai",
        "rantau",
        "raya",
        "rendah",
        "ringgit",
        "rumah",
        "sabah",
        "sahaja",
        "saham",
        "sama",
        "sarawak",
        "satu",
        "sawit",
        "saya",
        "sdn",
        "sebagai",
        "sebahagian",
        "sebanyak",
        "sebarang",
        "sebelum",
        "sebelumnya",
        "sebuah",
        "secara",
        "sedang",
        "segi",
        "sehingga",
        "sejak",
        "sekarang",
        "sektor",
        "sekuriti",
        "selain",
        "selama",
        "selasa",
        "selatan",
        "selepas",
        "seluruh",
        "semakin",
        "semalam",
        "semasa",
        "sementara",
        "semua",
        "semula",
        "sen",
        "sendiri",
        "seorang",
        "sepanjang",
        "seperti",
        "sept",
        "september",
        "serantau",
        "seri",
        "serta",
        "sesi",
        "setiap",
        "setiausaha",
        "sidang",
        "singapura",
        "sini",
        "sistem",
        "sokongan",
        "sri",
        "sudah",
        "sukan",
        "suku",
        "sumber",
        "supaya",
        "susut",
        "syarikat",
        "syed",
        "tahap",
        "tahun",
        "tan",
        "tanah",
        "tanpa",
        "tawaran",
        "teknologi",
        "telah",
        "tempat",
        "tempatan",
        "tempoh",
        "tenaga",
        "tengah",
        "tentang",
        "terbaik",
        "terbang",
        "terbesar",
        "terbuka",
        "terdapat",
        "terhadap",
        "termasuk",
        "tersebut",
        "terus",
        "tetapi",
        "thailand",
        "tiada",
        "tidak",
        "tiga",
        "timbalan",
        "timur",
        "tindakan",
        "tinggi",
        "tun",
        "tunai",
        "turun",
        "turut",
        "umno",
        "unit",
        "untuk",
        "untung",
        "urus",
        "usaha",
        "utama",
        "walaupun",
        "wang",
        "wanita",
        "wilayah",
        "yang"
      ];
      const mar = [
        "\u0905\u0927\u093F\u0915",
        "\u0905\u0928\u0947\u0915",
        "\u0905\u0936\u0940",
        "\u0905\u0938\u0932\u092F\u093E\u091A\u0947",
        "\u0905\u0938\u0932\u0947\u0932\u094D\u092F\u093E",
        "\u0905\u0938\u093E",
        "\u0905\u0938\u0942\u0928",
        "\u0905\u0938\u0947",
        "\u0906\u091C",
        "\u0906\u0923\u093F",
        "\u0906\u0924\u093E",
        "\u0906\u092A\u0932\u094D\u092F\u093E",
        "\u0906\u0932\u093E",
        "\u0906\u0932\u0940",
        "\u0906\u0932\u0947",
        "\u0906\u0939\u0947",
        "\u0906\u0939\u0947\u0924",
        "\u090F\u0915",
        "\u090F\u0915\u093E",
        "\u0915\u092E\u0940",
        "\u0915\u0930\u0923\u092F\u093E\u0924",
        "\u0915\u0930\u0942\u0928",
        "\u0915\u093E",
        "\u0915\u093E\u092E",
        "\u0915\u093E\u092F",
        "\u0915\u093E\u0939\u0940",
        "\u0915\u093F\u0935\u093E",
        "\u0915\u0940",
        "\u0915\u0947\u0932\u093E",
        "\u0915\u0947\u0932\u0940",
        "\u0915\u0947\u0932\u0947",
        "\u0915\u094B\u091F\u0940",
        "\u0917\u0947\u0932\u094D\u092F\u093E",
        "\u0918\u0947\u090A\u0928",
        "\u091C\u093E\u0924",
        "\u091D\u093E\u0932\u093E",
        "\u091D\u093E\u0932\u0940",
        "\u091D\u093E\u0932\u0947",
        "\u091D\u093E\u0932\u0947\u0932\u094D\u092F\u093E",
        "\u091F\u093E",
        "\u0921\u0949",
        "\u0924\u0930",
        "\u0924\u0930\u0940",
        "\u0924\u0938\u0947\u091A",
        "\u0924\u093E",
        "\u0924\u0940",
        "\u0924\u0940\u0928",
        "\u0924\u0947",
        "\u0924\u094B",
        "\u0924\u094D\u092F\u093E",
        "\u0924\u094D\u092F\u093E\u091A\u093E",
        "\u0924\u094D\u092F\u093E\u091A\u0940",
        "\u0924\u094D\u092F\u093E\u091A\u094D\u092F\u093E",
        "\u0924\u094D\u092F\u093E\u0928\u093E",
        "\u0924\u094D\u092F\u093E\u0928\u0940",
        "\u0924\u094D\u092F\u093E\u092E\u0941\u0933\u0947",
        "\u0924\u094D\u0930\u0940",
        "\u0926\u093F\u0932\u0940",
        "\u0926\u094B\u0928",
        "\u0928",
        "\u0928\u093E\u0939\u0940",
        "\u0928\u093F\u0930\u094D\u0923\u094D\u092F",
        "\u092A\u0923",
        "\u092A\u092E",
        "\u092A\u0930\u092F\u0924\u0928",
        "\u092A\u093E\u091F\u0940\u0932",
        "\u092E",
        "\u092E\u093E\u0924\u094D\u0930",
        "\u092E\u093E\u0939\u093F\u0924\u0940",
        "\u092E\u0940",
        "\u092E\u0941\u092C\u0940",
        "\u092E\u094D\u0939\u0923\u091C\u0947",
        "\u092E\u094D\u0939\u0923\u093E\u0932\u0947",
        "\u092E\u094D\u0939\u0923\u0942\u0928",
        "\u092F\u093E",
        "\u092F\u093E\u091A\u093E",
        "\u092F\u093E\u091A\u0940",
        "\u092F\u093E\u091A\u094D\u092F\u093E",
        "\u092F\u093E\u0928\u093E",
        "\u092F\u093E\u0928\u0940",
        "\u092F\u0947\u0923\u093E\u0930",
        "\u092F\u0947\u0924",
        "\u092F\u0947\u0925\u0940\u0932",
        "\u092F\u0947\u0925\u0947",
        "\u0932\u093E\u0916",
        "\u0935",
        "\u0935\u094D\u092F\u0915\u0924",
        "\u0938\u0930\u094D\u0935",
        "\u0938\u093E\u0917\u093F\u0924\u094D\u0932\u0947",
        "\u0938\u0941\u0930\u0942",
        "\u0939\u091C\u093E\u0930",
        "\u0939\u093E",
        "\u0939\u0940",
        "\u0939\u0947",
        "\u0939\u094B\u0923\u093E\u0930",
        "\u0939\u094B\u0924",
        "\u0939\u094B\u0924\u093E",
        "\u0939\u094B\u0924\u0940",
        "\u0939\u094B\u0924\u0947"
      ];
      const mya = [
        "\u1021\u1015\u1031\u102B\u103A",
        "\u1021\u1014\u1000\u103A",
        "\u1021\u1019\u103C\u1032\u1010\u1019\u103A\u1038",
        "\u1021\u1010\u103D\u1004\u103A\u1038\u1010\u103D\u1004\u103A",
        "\u1019\u1000\u103C\u102C\u1019\u102E",
        "\u1019\u1010\u102D\u102F\u1004\u103A\u1019\u102E",
        "\u1012\u102B\u1037\u1021\u1015\u103C\u1004\u103A",
        "\u1021\u1031\u102C\u1000\u103A\u1019\u103E\u102C",
        "\u1021\u1011\u1032\u1019\u103E\u102C",
        "\u1018\u101A\u103A\u1010\u1031\u102C\u1037\u1019\u103B\u103E",
        "\u1019\u1000\u103C\u102C\u1001\u100F",
        "\u1010\u1031\u102C\u103A\u1010\u1031\u102C\u103A\u101C\u1031\u1038",
        "\u1005\u1009\u103A\u1010\u103D\u1004\u103A",
        "\u1014\u103E\u1004\u103A\u1037\u1021\u1010\u1030",
        "\u1014\u103E\u1004\u103A\u1037",
        "\u1014\u103E\u1004\u103A\u1037\u1010\u1000\u103D",
        "\u1000\u103B\u103D\u1014\u103A\u1010\u1031\u102C\u103A",
        "\u1000\u103B\u103D\u1014\u103A\u1019",
        "\u1004\u102B",
        "\u1000\u103B\u102F\u1015\u103A",
        "\u1000\u103B\u103D\u1014\u102F\u103A\u1015\u103A",
        "\u1000\u103B\u1014\u1031\u102C\u103A",
        "\u1000\u103B\u1019",
        "\u101E\u1030",
        "\u101E\u1030\u1019",
        "\u1011\u102D\u102F\u101F\u102C",
        "\u1011\u102D\u102F\u1021\u101B\u102C",
        "\u1024\u1021\u101B\u102C",
        "\u1011\u102D\u102F",
        "\u1044\u1004\u103A\u1038",
        "\u1000\u103B\u103D\u1014\u103A\u1010\u1031\u102C\u103A\u1010\u102D\u102F\u1037",
        "\u1000\u103B\u103D\u1014\u103A\u1019\u1010\u102D\u102F\u1037",
        "\u1004\u102B\u1010\u102D\u102F\u1037",
        "\u1000\u103B\u102F\u1015\u103A\u1010\u102D\u102F\u1037",
        "\u1000\u103B\u103D\u1014\u102F\u103A\u1015\u103A\u1010\u102D\u102F\u1037",
        "\u1000\u103B\u1014\u1031\u102C\u103A\u1010\u102D\u102F\u1037",
        "\u1000\u103B\u1019\u1010\u102D\u102F\u1037",
        "\u101E\u1004\u103A",
        "\u101E\u1004\u103A\u1010\u102D\u102F\u1037",
        "\u1014\u1004\u103A\u1010\u102D\u102F\u1037",
        "\u1019\u1004\u103A\u1038",
        "\u1019\u1004\u103A\u1038\u1010\u102D\u102F\u1037",
        "\u101E\u1030\u1010\u102D\u102F\u1037",
        "\u1000\u103B\u103D\u1014\u103A\u1010\u1031\u102C\u103A\u1021\u102C\u1038",
        "\u1000\u103B\u103D\u1014\u103A\u1010\u1031\u102C\u103A\u1000\u102D\u102F",
        "\u1000\u103B\u103D\u1014\u103A\u1019\u1000\u102D\u102F",
        "\u1004\u102B\u1000\u102D\u102F",
        "\u1000\u103B\u102F\u1015\u103A\u1000\u102D\u102F",
        "\u1000\u103B\u103D\u1014\u102F\u103A\u1015\u103A\u1000\u102D\u102F",
        "\u101E\u1030\u1037\u1000\u102D\u102F",
        "\u101E\u1030\u1019\u1000\u102D\u102F",
        "\u1011\u102D\u102F\u1021\u101B\u102C\u1000\u102D\u102F",
        "\u101E\u1004\u103A\u1037\u1000\u102D\u102F",
        "\u101E\u1004\u103A\u1010\u102D\u102F\u1037\u1000\u102D\u102F",
        "\u1014\u1004\u103A\u1010\u102D\u102F\u1037\u1000\u102D\u102F",
        "\u1019\u1004\u103A\u1038\u1000\u102D\u102F",
        "\u1019\u1004\u103A\u1038\u1010\u102D\u102F\u1037\u1000\u102D\u102F",
        "\u1004\u102B\u1010\u102D\u102F\u1037\u1000\u102D\u102F",
        "\u1000\u103B\u102F\u1015\u103A\u1010\u102D\u102F\u1037\u1000\u102D\u102F",
        "\u1000\u103B\u103D\u1014\u102F\u103A\u1015\u103A\u1010\u102D\u102F\u1037\u1000\u102D\u102F",
        "\u1019\u102D\u1019\u102D\u1000\u102D\u102F\u101A\u103A\u1010\u102D\u102F\u1004\u103A",
        "\u1019\u102D\u1019\u102D\u1018\u102C\u101E\u102C",
        "\u1019\u1004\u103A\u1038\u1000\u102D\u102F\u101A\u103A\u1010\u102D\u102F\u1004\u103A",
        "\u1019\u1004\u103A\u1038\u1018\u102C\u101E\u102C",
        "\u1019\u1004\u103A\u1038\u1010\u102D\u102F\u1037\u1000\u102D\u102F\u101A\u103A\u1010\u102D\u102F\u1004\u103A",
        "\u1019\u1004\u103A\u1038\u1010\u102D\u102F\u1037\u1018\u102C\u101E\u102C",
        "\u101E\u1030\u1000\u102D\u102F\u101A\u103A\u1010\u102D\u102F\u1004\u103A",
        "\u1000\u102D\u102F\u101A\u103A\u1010\u102D\u102F\u1004\u103A",
        "\u101E\u1030\u1019\u1000\u102D\u102F\u101A\u103A\u1010\u102D\u102F\u1004\u103A",
        "\u101E\u1030\u1037\u1018\u102C\u101E\u102C",
        "\u101E\u1030\u1037\u1000\u102D\u102F\u101A\u103A\u1000\u102D\u102F",
        "\u1000\u102D\u102F\u101A\u103A\u1037\u1000\u102D\u102F\u101A\u103A\u1000\u102D\u102F",
        "\u1019\u102D\u1019\u102D\u1000\u102D\u102F\u101A\u103A\u1000\u102D\u102F",
        "\u1044\u1004\u103A\u1038\u1015\u1004\u103A",
        "\u1011\u102D\u102F\u1021\u101B\u102C\u1015\u1004\u103A",
        "\u101E\u100A\u103A\u1037",
        "\u1019\u100A\u103A\u1037",
        "\u1010\u1032\u1037",
        "\u1000\u103B\u103D\u1014\u102F\u103A\u1015\u103A\u104F",
        "\u1000\u103B\u103D\u1014\u103A\u1010\u1031\u102C\u103A\u104F",
        "\u1000\u103B\u103D\u1014\u103A\u1019\u104F",
        "\u1000\u103B\u1014\u1031\u102C\u103A\u104F",
        "\u1000\u103B\u1019\u104F",
        "\u101E\u1030\u104F",
        "\u101E\u1030\u1019\u104F",
        "\u1011\u102D\u102F\u1021\u101B\u102C\u104F",
        "\u1011\u102D\u102F\u101F\u102C\u104F",
        "\u1000\u103B\u103D\u1014\u102F\u103A\u1015\u103A\u1010\u102D\u102F\u1037\u104F",
        "\u1004\u102B\u1010\u102D\u102F\u1037\u104F",
        "\u1000\u103B\u103D\u1014\u103A\u1010\u1031\u102C\u103A\u1010\u102D\u102F\u1037\u104F",
        "\u1000\u103B\u103D\u1014\u103A\u1019\u1010\u102D\u102F\u1037\u104F",
        "\u1000\u103B\u1014\u1031\u102C\u103A\u1010\u102D\u102F\u1037\u104F",
        "\u1000\u103B\u1019\u1010\u102D\u102F\u1037\u104F",
        "\u101E\u1004\u103A\u104F",
        "\u101E\u1004\u103A\u1010\u102D\u102F\u1037\u104F",
        "\u1019\u1004\u103A\u1038\u104F",
        "\u1019\u1004\u103A\u1038\u1010\u102D\u102F\u1037\u104F",
        "\u101E\u1030\u1010\u102D\u102F\u1037\u104F",
        "\u1000\u103B\u103D\u1014\u103A\u1010\u1031\u102C\u103A\u1037\u101F\u102C",
        "\u1000\u103B\u103D\u1014\u103A\u1019\u101F\u102C",
        "\u1000\u103B\u1014\u1031\u102C\u103A\u104F\u101F\u102C",
        "\u1000\u103B\u1019\u104F\u101F\u102C",
        "\u1000\u103B\u1019\u101F\u102C",
        "\u1000\u103B\u1014\u1031\u102C\u103A\u101F\u102C",
        "\u101E\u1030\u101F\u102C",
        "\u101E\u1030\u1019\u101F\u102C",
        "\u101E\u1030\u1037\u101F\u102C",
        "\u1000\u103B\u103D\u1014\u102F\u103A\u1015\u103A\u1010\u102D\u102F\u1037\u101F\u102C",
        "\u1000\u103B\u103D\u1014\u103A\u1010\u1031\u102C\u103A\u1010\u102D\u102F\u1037\u101F\u102C",
        "\u1000\u103B\u103D\u1014\u103A\u1019\u1010\u102D\u102F\u1037\u101F\u102C",
        "\u101E\u1004\u103A\u1010\u102D\u102F\u1037\u101F\u102C",
        "\u1019\u1004\u103A\u1038\u1010\u102D\u102F\u1037\u101F\u102C",
        "\u101E\u1030\u1010\u102D\u102F\u1037\u101F\u102C",
        "\u101E\u1030\u1019\u1010\u102D\u102F\u1037\u101F\u102C",
        "\u1024\u1021\u101B\u102C",
        "\u101F\u1031\u102C\u1012\u102B",
        "\u101F\u1031\u102C\u1012\u102E",
        "\u101F\u1031\u102C\u1012\u102E\u101F\u102C",
        "\u1012\u102E\u101F\u102C",
        "\u1012\u102B",
        "\u1011\u102D\u102F\u1021\u101B\u102C",
        "\u1044\u1004\u103A\u1038\u1021\u101B\u102C",
        "\u101A\u1004\u103A\u1038\u1021\u101B\u102C",
        "\u1021\u1032\u1012\u102B",
        "\u101F\u102D\u102F\u101F\u102C",
        "\u1021\u1001\u103B\u102D\u102F\u1037",
        "\u1010\u1005\u103A\u1001\u102F\u1001\u102F",
        "\u1021\u1018\u101A\u103A\u1019\u1006\u102D\u102F",
        "\u1018\u101A\u103A\u1021\u101B\u102C\u1019\u1006\u102D\u102F",
        "\u1021\u1018\u101A\u103A\u1019\u100A\u103A\u101E\u1031\u102C",
        "\u1021\u1000\u103C\u1004\u103A",
        "\u1021\u101B\u102C\u101B\u102C\u1010\u102D\u102F\u1004\u103A\u1038",
        "\u1005\u102D\u102F\u1038\u1005\u1009\u103A\u1019\u103B\u103E",
        "\u1005\u102D\u102F\u1038\u1005\u1009\u103A\u1038\u1019\u103B\u103E",
        "\u1018\u101A\u103A\u101C\u1031\u102C\u1000\u103A\u1019\u1006\u102D\u102F",
        "\u1010\u1005\u103A\u1005\u102F\u1036\u1010\u1005\u103A\u101B\u102C",
        "\u1010\u1005\u102F\u1036\u1010\u101B\u102C",
        "\u1021\u101C\u103B\u1009\u103A\u1038\u1019\u101F\u102F\u1010\u103A",
        "\u1019\u100A\u103A\u101E\u100A\u103A\u1037\u1014\u100A\u103A\u1038\u1014\u103E\u1004\u103A\u1037\u1019\u103B\u103E\u1019\u101F\u102F\u1010\u103A",
        "\u1021\u101C\u103B\u1009\u103A\u1038\u1019\u101B\u103E\u102D\u101E\u1031\u102C",
        "\u1021\u1001\u103C\u102C\u1038\u1016\u103C\u1005\u103A\u101E\u1031\u102C",
        "\u1021\u1001\u103C\u102C\u1038\u101E\u1031\u102C",
        "\u1021\u1001\u103C\u102C\u1038\u1010\u1005\u103A\u1001\u102F",
        "\u1021\u1001\u103C\u102C\u1038\u1010\u1005\u103A\u101A\u1031\u102C\u1000\u103A",
        "\u1021\u102C\u1038\u101C\u102F\u1036\u1038",
        "\u1021\u101B\u102C\u101B\u102C\u1010\u102D\u102F\u1004\u103A\u1038",
        "\u1021\u1000\u102F\u1014\u103A\u101C\u102F\u1036\u1038",
        "\u1021\u101C\u102F\u1036\u1038\u1005\u102F\u1036",
        "\u1021\u101B\u102C\u1001\u1015\u103A\u101E\u102D\u1019\u103A\u1038",
        "\u1010\u1005\u103A\u1001\u102F\u1005\u102E",
        "\u1021\u101E\u102E\u1038\u101E\u102E\u1038",
        "\u1010\u1005\u103A\u1026\u1038\u1026\u1038",
        "\u1010\u1005\u103A\u1001\u102F\u1001\u102F",
        "\u1000\u102D\u102F\u101A\u103A\u1005\u102E\u1000\u102D\u102F\u101A\u103A\u1004\u103E",
        "\u1000\u102D\u102F\u101A\u103A\u1005\u102E",
        "\u1010\u1005\u103A\u1026\u1038\u1005\u102E",
        "\u1010\u1005\u103A\u101A\u1031\u102C\u1000\u103A\u1005\u102E",
        "\u1010\u1005\u103A\u1001\u102F\u1005\u102E",
        "\u1021\u1000\u102F\u1014\u103A",
        "\u1021\u1015\u103C\u100A\u103A\u1037\u1021\u1005\u102F\u1036",
        "\u101C\u102F\u1036\u1038\u101C\u102F\u1036\u1038",
        "\u1014\u103E\u1005\u103A\u1001\u102F\u101C\u102F\u1036\u1038",
        "\u1014\u103E\u1005\u103A\u101A\u1031\u102C\u1000\u103A\u101C\u102F\u1036\u1038",
        "\u1014\u103E\u1005\u103A\u1018\u1000\u103A\u101C\u102F\u1036\u1038",
        "\u1010\u1005\u103A\u1005\u102F\u1036\u1010\u1005\u103A\u101B\u102C",
        "\u1010\u1005\u103A\u1005\u102F\u1036\u1010\u1005\u103A\u1001\u102F",
        "\u1010\u1005\u102F\u1036\u1010\u1001\u102F",
        "\u1010\u1005\u103A\u1005\u102F\u1036\u1010\u1005\u103A\u101A\u1031\u102C\u1000\u103A",
        "\u1010\u1005\u102F\u1036\u1010\u101A\u1031\u102C\u1000\u103A",
        "\u1010\u1005\u103A\u101A\u1031\u102C\u1000\u103A\u101A\u1031\u102C\u1000\u103A",
        "\u1019\u100A\u103A\u101E\u1030\u1019\u1006\u102D\u102F",
        "\u1018\u102C\u1019\u103B\u103E\u1019\u101B\u103E\u102D",
        "\u1018\u102C\u1019\u103E\u1019\u101B\u103E\u102D",
        "\u1021\u1018\u101A\u103A\u1021\u101B\u102C\u1019\u103B\u103E\u1019\u101B\u103E\u102D",
        "\u101C\u1030\u1010\u102D\u102F\u1004\u103A\u1038",
        "\u101C\u1030\u1010\u1000\u102C",
        "\u1014\u103E\u1004\u103A\u1037",
        "\u1015\u103C\u102E\u1038\u101C\u103B\u103E\u1004\u103A",
        "\u1044\u1004\u103A\u1038\u1014\u1031\u102C\u1000\u103A",
        "\u101E\u102D\u102F\u1037\u1019\u101F\u102F\u1010\u103A",
        "\u101E\u102D\u102F\u1037\u1010\u100A\u103A\u1038\u1019\u101F\u102F\u1010\u103A",
        "\u101E\u102D\u102F\u1037\u1019\u101F\u102F\u1010\u103A\u101C\u103B\u103E\u1004\u103A",
        "\u1012\u102B\u1019\u103E\u1019\u101F\u102F\u1010\u103A",
        "\u1016\u103C\u1005\u103A\u1005\u1031",
        "\u101E\u102D\u102F\u1037\u1005\u1031\u1000\u102C\u1019\u1030",
        "\u1012\u102B\u1015\u1031\u1019\u101A\u103A\u1037",
        "\u1012\u102B\u1015\u1031\u1019\u1032\u1037",
        "\u1019\u103E\u1010\u1005\u103A\u1015\u102B\u1038",
        "\u1019\u103E\u101C\u103D\u1032\u101C\u103B\u103E\u1004\u103A",
        "\u1021\u1018\u101A\u103A\u1000\u103C\u1031\u102C\u1004\u103A\u1037\u1006\u102D\u102F\u101E\u1031\u102C\u103A",
        "\u101E\u1031\u102C\u1000\u103C\u1031\u102C\u1004\u103A\u1037",
        "\u101E\u1016\u103C\u1004\u103A\u1037",
        "\u104D",
        "\u101E\u100A\u103A\u1037\u1021\u1010\u103D\u1000\u103A\u1000\u103C\u1031\u102C\u1004\u103A\u1037",
        "\u101C\u103B\u103E\u1004\u103A",
        "\u1015\u102B\u1000",
        "\u1021\u1000\u101A\u103A\u104D",
        "\u101E\u1031\u102C\u103A\u1004\u103C\u102C\u1038\u101C\u100A\u103A\u1038",
        "\u1005\u1031\u1000\u102C\u1019\u1030",
        "\u1014\u100A\u103A\u1038\u1010\u1030",
        "\u1015\u1031\u1019\u101A\u103A\u1037",
        "\u1015\u1031\u1019\u1032\u1037",
        "\u1011\u102D\u102F\u1014\u100A\u103A\u1038\u1010\u1030\u1005\u103D\u102C",
        "\u1011\u102D\u102F\u1014\u100A\u103A\u1038\u1010\u1030",
        "\u1000\u1032\u1037\u101E\u102D\u102F\u1037",
        "\u101E\u1000\u1032\u1037\u101E\u102D\u102F\u1037",
        "\u101A\u1004\u103A\u1038\u1000\u1032\u1037\u101E\u102D\u102F\u1037",
        "\u1011\u102D\u102F\u1000\u1032\u1037\u101E\u102D\u102F\u1037",
        "\u1014\u103E\u1004\u103A\u1037\u1005\u1015\u103A\u101C\u103B\u1009\u103A\u1038\u104D",
        "\u1024\u1019\u103B\u103E",
        "\u1024\u1019\u103B\u103E\u101C\u1031\u102C\u1000\u103A",
        "\u1024\u1000\u1032\u1037\u101E\u102D\u102F\u1037",
        "\u1021\u1001\u102F\u101C\u1031\u102C\u1000\u103A\u1011\u102D",
        "\u1012\u102B\u1000\u1010\u1031\u102C\u1037",
        "\u1021\u1018\u101A\u103A\u1000\u1032\u1037\u101E\u101C\u102D\u102F\u1037",
        "\u1019\u100A\u103A\u1000\u1032\u1037\u101E\u102D\u102F\u1037",
        "\u1019\u100A\u103A\u101E\u100A\u103A\u1037\u1014\u100A\u103A\u1038\u1014\u103E\u1004\u103A\u1037",
        "\u1019\u100A\u103A\u101E\u100A\u103A\u1037\u1014\u100A\u103A\u1038\u1016\u103C\u1004\u103A\u1037",
        "\u1019\u100A\u103A\u101E\u100A\u103A\u1037\u1014\u100A\u103A\u1037\u1014\u103E\u1004\u103A\u1037\u1019\u1006\u102D\u102F",
        "\u1019\u100A\u103A\u101E\u100A\u103A\u1037\u1014\u100A\u103A\u1038\u1016\u103C\u1004\u103A\u1037\u1019\u1006\u102D\u102F",
        "\u1019\u100A\u103A\u101E\u102D\u102F\u1037",
        "\u1018\u101A\u103A\u101C\u102D\u102F\u101C\u1032",
        "\u101E\u102D\u102F\u1037\u1015\u1031\u1010\u100A\u103A\u1037",
        "\u101E\u102D\u102F\u1037\u1015\u1031\u1019\u100A\u103A\u1037",
        "\u1018\u101A\u103A\u1014\u100A\u103A\u1038\u1014\u103E\u1004\u103A\u1037",
        "\u1019\u100A\u103A\u101B\u103D\u1031\u1037\u1019\u100A\u103A\u1019\u103B\u103E",
        "\u1021\u1018\u101A\u103A\u1019\u103B\u103E\u101C\u1031\u102C\u1000\u103A",
        "\u1018\u101A\u103A\u101C\u1031\u102C\u1000\u103A",
        "\u1019\u100A\u103A\u101E\u1030",
        "\u1018\u101A\u103A\u101E\u1030",
        "\u1019\u100A\u103A\u101E\u100A\u103A\u1037\u1021\u1000\u103C\u1031\u102C\u1004\u103A\u1038\u1000\u103C\u1031\u102C\u1004\u103A\u1037",
        "\u1018\u102C\u1021\u1010\u103D\u1000\u103A\u1000\u103C\u1031\u102C\u1004\u103A\u1037",
        "\u1021\u1018\u101A\u103A\u1000\u103C\u1031\u102C\u1004\u103A\u1037",
        "\u1019\u100A\u103A\u101E\u100A\u103A\u1037\u1021\u1010\u103D\u1000\u103A\u1000\u103C\u1031\u102C\u1004\u103A\u1037",
        "\u1018\u102C\u1000\u103C\u1031\u102C\u1004\u103A\u1037",
        "\u1018\u102C\u1021\u1010\u103D\u1000\u103A\u1014\u1032\u1037\u101C\u1032",
        "\u1019\u100A\u103A\u101E\u100A\u103A",
        "\u1018\u102C\u101C\u1032",
        "\u1021\u1018\u101A\u103A\u1021\u101B\u102C\u1014\u100A\u103A\u1038",
        "\u1019\u100A\u103A\u101E\u100A\u103A\u1037\u1021\u101B\u1015\u103A\u1019\u103E\u102C",
        "\u1018\u101A\u103A\u1014\u1031\u101B\u102C\u1010\u103D\u1004\u103A",
        "\u1019\u100A\u103A\u101E\u100A\u103A\u1037\u1014\u1031\u101B\u102C\u1010\u103D\u1004\u103A",
        "\u1019\u100A\u103A\u101E\u100A\u103A\u1037\u1014\u1031\u101B\u102C\u101E\u102D\u102F\u1037",
        "\u1018\u101A\u103A\u1014\u1031\u101B\u102C\u101E\u102D\u102F\u1037",
        "\u1018\u101A\u103A\u1014\u1031\u101B\u102C\u1019\u103E\u102C",
        "\u1018\u101A\u103A\u101E\u1030\u104F",
        "\u1019\u100A\u103A\u101E\u100A\u103A\u1037\u1021\u101B\u102C\u104F",
        "\u1019\u100A\u103A\u101E\u100A\u103A\u1037\u1021\u1001\u102B",
        "\u1018\u101A\u103A\u1021\u1001\u103B\u102D\u1014\u103A",
        "\u1018\u101A\u103A\u1021\u1001\u102B",
        "\u1019\u100A\u103A\u101E\u100A\u103A\u1037\u1021\u1001\u103B\u102D\u1014\u103A",
        "\u1018\u101A\u103A\u1010\u1031\u102C\u1037",
        "\u1019\u100A\u103A\u101E\u1030\u1000\u102D\u102F",
        "\u1019\u100A\u103A\u101E\u1030\u1000",
        "\u1018\u101A\u103A\u101E\u1030\u1037\u1000\u102D\u102F",
        "\u1019\u100A\u103A\u101E\u1030\u1019\u100A\u103A\u101D\u102B",
        "\u1019\u100A\u103A\u101E\u100A\u103A\u1037\u1021\u101B\u102C",
        "\u1018\u101A\u103A\u1021\u101B\u102C",
        "\u1019\u100A\u103A\u101E\u102D\u102F\u1037\u1015\u1004\u103A\u1016\u103C\u1005\u103A\u1005\u1031",
        "\u1018\u101A\u103A\u101C\u102D\u102F\u1015\u1032\u1016\u103C\u1005\u103A\u1016\u103C\u1005\u103A",
        "\u1019\u100A\u103A\u101B\u103D\u1031\u1037\u1019\u100A\u103A\u1019\u103B\u103E\u1016\u103C\u1005\u103A\u1005\u1031",
        "\u1019\u100A\u103A\u101E\u100A\u103A\u1037\u1014\u100A\u103A\u1038\u1014\u103E\u1004\u103A\u1037\u1019\u1006\u102D\u102F",
        "\u1018\u101A\u103A\u1014\u100A\u103A\u1038\u1014\u1032\u1037\u1016\u103C\u1005\u103A\u1016\u103C\u1005\u103A",
        "\u1019\u100A\u103A\u101E\u1030\u1019\u1006\u102D\u102F",
        "\u1018\u101A\u103A\u101E\u1030\u1019\u1006\u102D\u102F",
        "\u1021\u1018\u101A\u103A\u101E\u1030\u1019\u1006\u102D\u102F",
        "\u1019\u100A\u103A\u101E\u100A\u103A\u1037\u1021\u101B\u102C\u1019\u1006\u102D\u102F",
        "\u1018\u102C\u1016\u103C\u1005\u103A\u1016\u103C\u1005\u103A",
        "\u1019\u100A\u103A\u101E\u100A\u103A\u1037\u1021\u101B\u102C\u1016\u103C\u1005\u103A\u1016\u103C\u1005\u103A",
        "\u1019\u100A\u103A\u101E\u100A\u103A\u1037\u1021\u101B\u1015\u103A\u104C\u1019\u1006\u102D\u102F",
        "\u1019\u100A\u103A\u101E\u100A\u103A\u1037\u1014\u1031\u101B\u102C\u1019\u1006\u102D\u102F",
        "\u1018\u101A\u103A\u1021\u1001\u102B\u1019\u1006\u102D\u102F",
        "\u1018\u101A\u103A\u1021\u1001\u103B\u102D\u1014\u103A\u1019\u1006\u102D\u102F",
        "\u1018\u101A\u103A\u1021\u1001\u102B\u1016\u103C\u1005\u103A\u1016\u103C\u1005\u103A",
        "\u1021\u1001\u103B\u102D\u1014\u103A\u1021\u1001\u102B\u1019\u101B\u103D\u1031\u1038"
      ];
      const nob = [
        "og",
        "i",
        "jeg",
        "det",
        "at",
        "en",
        "et",
        "den",
        "til",
        "er",
        "som",
        "p\xE5",
        "de",
        "med",
        "han",
        "av",
        "ikke",
        "der",
        "s\xE5",
        "var",
        "meg",
        "seg",
        "men",
        "ett",
        "har",
        "om",
        "vi",
        "min",
        "mitt",
        "ha",
        "hadde",
        "hun",
        "n\xE5",
        "over",
        "da",
        "ved",
        "fra",
        "du",
        "ut",
        "sin",
        "dem",
        "oss",
        "opp",
        "man",
        "kan",
        "hans",
        "hvor",
        "eller",
        "hva",
        "skal",
        "selv",
        "sj\xF8l",
        "her",
        "alle",
        "vil",
        "bli",
        "ble",
        "blitt",
        "kunne",
        "inn",
        "n\xE5r",
        "kom",
        "noen",
        "noe",
        "ville",
        "dere",
        "som",
        "deres",
        "kun",
        "ja",
        "etter",
        "ned",
        "skulle",
        "denne",
        "for",
        "deg",
        "si",
        "sine",
        "sitt",
        "mot",
        "\xE5",
        "meget",
        "hvorfor",
        "dette",
        "disse",
        "uten",
        "hvordan",
        "ingen",
        "din",
        "ditt",
        "blir",
        "samme",
        "hvilken",
        "hvilke",
        "s\xE5nn",
        "inni",
        "mellom",
        "v\xE5r",
        "hver",
        "hvem",
        "vors",
        "hvis",
        "b\xE5de",
        "bare",
        "enn",
        "fordi",
        "f\xF8r",
        "mange",
        "ogs\xE5",
        "slik",
        "v\xE6rt",
        "v\xE6re",
        "begge",
        "siden",
        "henne",
        "hennar",
        "hennes"
      ];
      const panGu = [
        "\u0A26\u0A47",
        "\u0A35\u0A3F\u0A71\u0A1A",
        "\u0A26\u0A3E",
        "\u0A05\u0A24\u0A47",
        "\u0A26\u0A40",
        "\u0A07\u0A71\u0A15",
        "\u0A28\u0A42\u0A70",
        "\u0A39\u0A48",
        "\u0A24\u0A4B\u0A02",
        "\u0A07\u0A38",
        "\u0A07\u0A39",
        "\u0A28\u0A47",
        "\u0A24\u0A47",
        "\u0A28\u0A3E\u0A32",
        "\u0A32\u0A08",
        "\u0A35\u0A40",
        "\u0A38\u0A40",
        "\u0A35\u0A3F\u0A1A",
        "\u0A15\u0A3F",
        "\u0A1C\u0A4B",
        "\u0A09\u0A39",
        "\u0A09\u0A38",
        "\u0A39\u0A28",
        "\u0A1C\u0A3E\u0A02\u0A26\u0A3E",
        "\u0A15\u0A40\u0A24\u0A3E",
        "\u0A17\u0A3F\u0A06",
        "\u0A39\u0A40",
        "\u0A15\u0A47",
        "\u0A1C\u0A3E\u0A02",
        "\u0A26\u0A40\u0A06\u0A02",
        "\u0A1C\u0A3F\u0A38",
        "\u0A15\u0A30\u0A28",
        "\u0A39\u0A4B",
        "\u0A15\u0A30",
        "\u0A06\u0A2A\u0A23\u0A47",
        "\u0A15\u0A40\u0A24\u0A40",
        "\u0A24\u0A4C\u0A30",
        "\u0A2C\u0A3E\u0A05\u0A26",
        "\u0A28\u0A39\u0A40\u0A02",
        "\u0A2D\u0A3E\u0A30\u0A24\u0A40",
        "\u0A2A\u0A3F\u0A70\u0A21",
        "\u0A38\u0A3F\u0A70\u0A18",
        "\u0A09\u0A71\u0A24\u0A47",
        "\u0A38\u0A3E\u0A32",
        "\u0964",
        "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C",
        "\u0A38\u0A2D",
        "\u0A2D\u0A3E\u0A30\u0A24",
        "\u0A09\u0A28\u0A4D\u0A39\u0A3E\u0A02",
        "\u0A39\u0A41\u0A70\u0A26\u0A3E",
        "\u0A24\u0A71\u0A15",
        "\u0A07\u0A15",
        "\u0A39\u0A4B\u0A07\u0A06",
        "\u0A1C\u0A28\u0A2E",
        "\u0A2C\u0A39\u0A41\u0A24",
        "\u0A2A\u0A30",
        "\u0A26\u0A41\u0A06\u0A30\u0A3E",
        "\u0A30\u0A42\u0A2A",
        "\u0A39\u0A4B\u0A30",
        "\u0A15\u0A70\u0A2E",
        "\u0A06\u0A2A\u0A23\u0A40",
        "\u0A24\u0A3E\u0A02",
        "\u0A38\u0A2E\u0A47\u0A02",
        "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40",
        "\u0A17\u0A08",
        "\u0A26\u0A3F\u0A71\u0A24\u0A3E",
        "\u0A26\u0A4B",
        "\u0A15\u0A3F\u0A38\u0A47",
        "\u0A15\u0A08",
        "\u0A1C\u0A3E",
        "\u0A35\u0A3E\u0A32\u0A47",
        "\u0A38\u0A3C\u0A41\u0A30\u0A42",
        "\u0A09\u0A38\u0A28\u0A47",
        "\u0A15\u0A3F\u0A39\u0A3E",
        "\u0A39\u0A4B\u0A23",
        "\u0A32\u0A4B\u0A15",
        "\u0A1C\u0A3E\u0A02\u0A26\u0A40",
        "\u0A35\u0A3F\u0A71\u0A1A\u0A4B\u0A02",
        "\u0A28\u0A3E\u0A2E",
        "\u0A1C\u0A26\u0A4B\u0A02",
        "\u0A2A\u0A39\u0A3F\u0A32\u0A3E\u0A02",
        "\u0A15\u0A30\u0A26\u0A3E",
        "\u0A39\u0A41\u0A70\u0A26\u0A40",
        "\u0A39\u0A4B\u0A0F",
        "\u0A38\u0A28",
        "\u0A35\u0A1C\u0A4B\u0A02",
        "\u0A30\u0A3E\u0A1C",
        "\u0A2E\u0A41\u0A71\u0A16",
        "\u0A15\u0A30\u0A26\u0A47",
        "\u0A15\u0A41\u0A1D",
        "\u0A38\u0A3E\u0A30\u0A47",
        "\u0A39\u0A41\u0A70\u0A26\u0A47",
        "\u0A38\u0A3C\u0A39\u0A3F\u0A30",
        "\u0A2D\u0A3E\u0A38\u0A3C\u0A3E",
        "\u0A39\u0A4B\u0A08",
        "\u0A05\u0A28\u0A41\u0A38\u0A3E\u0A30",
        "\u0A38\u0A15\u0A26\u0A3E",
        "\u0A06\u0A2E",
        "\u0A35\u0A71\u0A16",
        "\u0A15\u0A4B\u0A08",
        "\u0A35\u0A3E\u0A30",
        "\u0A17\u0A0F",
        "\u0A16\u0A47\u0A24\u0A30",
        "\u0A1C\u0A40",
        "\u0A15\u0A3E\u0A30\u0A28",
        "\u0A15\u0A30\u0A15\u0A47",
        "\u0A1C\u0A3F\u0A35\u0A47\u0A02",
        "\u0A1C\u0A3C\u0A3F\u0A32\u0A4D\u0A39\u0A47",
        "\u0A32\u0A4B\u0A15\u0A3E\u0A02",
        "\u0A1A",
        "\u0A38\u0A3E\u0A39\u0A3F\u0A24",
        "\u0A38\u0A26\u0A40",
        "\u0A2C\u0A3E\u0A30\u0A47",
        "\u0A1C\u0A3E\u0A02\u0A26\u0A47",
        "\u0A35\u0A3E\u0A32\u0A3E",
        "\u0A1C\u0A3E\u0A23",
        "\u0A2A\u0A39\u0A3F\u0A32\u0A40",
        "\u0A2A\u0A4D\u0A30\u0A3E\u0A2A\u0A24",
        "\u0A30\u0A3F\u0A39\u0A3E",
        "\u0A35\u0A3E\u0A32\u0A40",
        "\u0A28\u0A3E\u0A02",
        "\u0A26\u0A4C\u0A30\u0A3E\u0A28",
        "\u0A24\u0A30\u0A4D\u0A39\u0A3E\u0A02",
        "\u0A2F\u0A42\u0A28\u0A40\u0A35\u0A30\u0A38\u0A3F\u0A1F\u0A40",
        "\u0A28\u0A3E",
        "\u0A0F",
        "\u0A24\u0A3F\u0A70\u0A28",
        "\u0A07\u0A28\u0A4D\u0A39\u0A3E\u0A02",
        "\u0A17\u0A41\u0A30\u0A42",
        "\u0A07\u0A38\u0A28\u0A42\u0A70",
        "\u0A07\u0A39\u0A28\u0A3E\u0A02",
        "\u0A2A\u0A3F\u0A24\u0A3E",
        "\u0A32\u0A3F\u0A06",
        "\u0A38\u0A3C\u0A3E\u0A2E\u0A32",
        "\u0A38\u0A3C\u0A2C\u0A26",
        "\u0A05\u0A70\u0A17\u0A30\u0A47\u0A1C\u0A3C\u0A40",
        "\u0A09\u0A38\u0A28\u0A42\u0A70",
        "\u0A09\u0A39\u0A28\u0A3E\u0A02",
        "\u0A38\u0A25\u0A3F\u0A24",
        "\u0A2B\u0A3F\u0A30",
        "\u0A1C\u0A40\u0A35\u0A28",
        "\u0A38\u0A15\u0A42\u0A32",
        "\u0A39\u0A41\u0A23",
        "\u0A26\u0A3F\u0A28",
        "\u0A15\u0A40\u0A24\u0A47",
        "\u0A06\u0A26\u0A3F",
        "\u0A35\u0A71\u0A27",
        "\u0A32\u0A48",
        "\u0A18\u0A30",
        "\u0A35\u0A71\u0A32",
        "\u0A26\u0A47\u0A38\u0A3C",
        "\u0A35\u0A32\u0A4B\u0A02",
        "\u0A2C\u0A23",
        "\u0A35\u0A40\u0A02",
        "\u0A2B\u0A3F\u0A32\u0A2E",
        "\u0A09\u0A2E\u0A30",
        "\u0A2C\u0A32\u0A3E\u0A15",
        "\u0A30\u0A39\u0A47",
        "\u0A38\u0A3E\u0A39\u0A3F\u0A2C",
        "\u0A15\u0A30\u0A26\u0A40",
        "\u0A39\u0A30",
        "\u0A2A\u0A48\u0A26\u0A3E",
        "\u0A18\u0A71\u0A1F",
        "\u0A32\u0A47\u0A16\u0A15",
        "\u0A39\u0A3F\u0A71\u0A38\u0A3E",
        "\u0A2B\u0A3C\u0A3F\u0A32\u0A2E",
        "\u0A2E\u0A4C\u0A24",
        "\u0A1C\u0A3F\u0A71\u0A25\u0A47",
        "\u0A35\u0A71\u0A21\u0A3E",
        "\u0A35\u0A3F\u0A16\u0A47",
        "\u0A06\u0A2A\u0A23\u0A3E",
        "\u0A2A\u0A39\u0A3F\u0A32\u0A3E",
        "\u0A35\u0A30\u0A24\u0A4B\u0A02",
        "\u0A06\u0A2A",
        "\u0A15\u0A30\u0A28\u0A3E",
        "\u0A35\u0A3F\u0A06\u0A39",
        "\u0A30\u0A39\u0A40",
        "\u0A30\u0A3E\u0A39\u0A40\u0A02",
        "\u0A26\u0A3F\u0A71\u0A24\u0A40",
        "\u0A09\u0A38\u0A26\u0A47",
        "\u0A2A\u0A30\u0A3F\u0A35\u0A3E\u0A30",
        "\u0A06",
        "\u0A26\u0A42\u0A1C\u0A47",
        "\u0A05\u0A2E\u0A30\u0A40\u0A15\u0A3E",
        "\u0A2E\u0A70\u0A28\u0A3F\u0A06",
        "\u0A07\u0A38\u0A26\u0A47",
        "\u0A08",
        "\u0A15\u0A3E\u0A32\u0A1C",
        "\u0A38\u0A30\u0A15\u0A3E\u0A30",
        "\u0A07\u0A71\u0A25\u0A47",
        "\u0A2A\u0A3E\u0A15\u0A3F\u0A38\u0A24\u0A3E\u0A28",
        "\u0A38\u0A3C\u0A3E\u0A2E\u0A3F\u0A32",
        "\u0A35\u0A3F\u0A17\u0A3F\u0A06\u0A28",
        "\u0A09\u0A38\u0A26\u0A40",
        "\u0A2A\u0A47\u0A38\u0A3C",
        "\u0A15\u0A3F\u0A09\u0A02\u0A15\u0A3F",
        "\u0A2A\u0A39\u0A3F\u0A32\u0A47",
        "\u0A27\u0A30\u0A2E",
        "\u0A2E\u0A38\u0A3C\u0A39\u0A42\u0A30",
        "\u0A05\u0A70\u0A26\u0A30",
        "\u0A35\u0A3F\u0A1A\u0A4B\u0A02",
        "\u0A1C\u0A3F\u0A28\u0A4D\u0A39\u0A3E\u0A02",
        "\u0A1C\u0A3E\u0A23\u0A3F\u0A06",
        "\u0A2A\u0A3E\u0A23\u0A40",
        "\u0A07\u0A32\u0A3E\u0A35\u0A3E",
        "\u0A05\u0A30\u0A25",
        "\u0A1A\u0A3E\u0A30",
        "\u0A2A\u0A4D\u0A30\u0A38\u0A3F\u0A71\u0A27",
        "\u0A28\u0A3E\u0A35\u0A32",
        "\u0A35\u0A71\u0A21\u0A47",
        "\u0A35\u0A71\u0A32\u0A4B\u0A02",
        "\u0A15\u0A39\u0A3E\u0A23\u0A40",
        "\u0A35\u0A3F\u0A38\u0A3C\u0A35",
        "\u0A2E\u0A42\u0A32",
        "\u0A05\u0A2E\u0A30\u0A40\u0A15\u0A40",
        "\u0A38\u0A25\u0A3E\u0A28",
        "\u0A07\u0A24\u0A3F\u0A39\u0A3E\u0A38",
        "\u0A15\u0A41\u0A71\u0A1D",
        "\u0A35\u0A3F\u0A15\u0A3E\u0A38",
        "\u0A09\u0A71\u0A24\u0A30",
        "\u0A38\u0A3F\u0A71\u0A16\u0A3F\u0A06",
        "\u0A39\u0A3F\u0A70\u0A26\u0A40",
        "\u0A2A\u0A4D\u0A30\u0A2E\u0A41\u0A71\u0A16",
        "\u0A30\u0A1A\u0A28\u0A3E",
        "\u0A2C\u0A23\u0A3E\u0A07\u0A06",
        "\u0A35\u0A3F\u0A38\u0A3C\u0A47\u0A38\u0A3C",
        "\u0A21\u0A3E",
        "\u0A09\u0A71\u0A2A\u0A30",
        "\u0A2A\u0A71\u0A1B\u0A2E\u0A40",
        "\u0A26\u0A47\u0A23",
        "\u0A07\u0A38\u0A26\u0A3E",
        "\u0A38\u0A15\u0A26\u0A47",
        "\u0A30\u0A71\u0A16\u0A3F\u0A06",
        "\u0A15\u0A35\u0A40",
        "\u0A26\u0A3F\u0A71\u0A32\u0A40",
        "\u0A35\u0A71\u0A21\u0A40",
        "\u0A2D\u0A42\u0A2E\u0A3F\u0A15\u0A3E",
        "\u0A38\u0A2E\u0A3E\u0A1C",
        "\u0A15\u0A3E\u0A35\u0A3F",
        "\u0A15\u0A40",
        "\u0A15\u0A4B\u0A32",
        "\u0A26",
        "\u0A17\u0A71\u0A32",
        "\u0A38\u0A70\u0A38\u0A3E\u0A30",
        "\u0A2D\u0A3E\u0A17",
        "\u0A06\u0A08",
        "\u0A26\u0A71\u0A16\u0A23",
        "\u0A05\u0A71\u0A1C",
        "\u0A38\u0A3F\u0A71\u0A16",
        "\u0A15\u0A39\u0A3F\u0A70\u0A26\u0A47",
        "\u0A38\u0A70\u0A17\u0A40\u0A24",
        "\u0A15\u0A3F\u0A32\u0A4B\u0A2E\u0A40\u0A1F\u0A30",
        "\u0A1C\u0A3F\u0A39\u0A28\u0A3E\u0A02",
        "\u0A38\u0A2D\u0A3E",
        "\u0A1C\u0A3F\u0A38\u0A26\u0A3E",
        "\u0A1C\u0A28\u0A35\u0A30\u0A40",
        "\u0A15\u0A35\u0A3F\u0A24\u0A3E",
        "\u0A2E\u0A48\u0A02\u0A2C\u0A30",
        "\u0A32\u0A3F\u0A16\u0A3F\u0A06",
        "\u0A2E\u0A3E\u0A02",
        "\u0A15\u0A32\u0A3E",
        "\u0A2A\u0A70\u0A1C",
        "\u0A25\u0A3E\u0A02",
        "\u0A39\u0A47\u0A20",
        "\u0A1C\u0A3F\u0A06\u0A26\u0A3E",
        "\u0A35\u0A30\u0A24\u0A3F\u0A06",
        "\u0A2E\u0A3E\u0A30\u0A1A",
        "\u0A21\u0A40",
        "\u0A05\u0A15\u0A24\u0A42\u0A2C\u0A30",
        "\u0A24\u0A15",
        "\u0A28\u0A3E\u0A1F\u0A15",
        "\u0A2C\u0A40",
        "\u0A16\u0A3E\u0A38",
        "\u0A07\u0A38\u0A47",
        "\u0A06\u0A27\u0A41\u0A28\u0A3F\u0A15",
        "\u0A05\u0A17\u0A38\u0A24",
        "\u0A24\u0A3F\u0A06\u0A30",
        "\u0A2E\u0A3E\u0A24\u0A3E",
        "\u0A2C\u0A23\u0A3E\u0A09\u0A23",
        "\u0A28\u0A35\u0A70\u0A2C\u0A30",
        "\u0A35\u0A3F\u0A05\u0A15\u0A24\u0A40",
        "\u0A26\u0A71\u0A16\u0A23\u0A40",
        "\u0A26\u0A38\u0A70\u0A2C\u0A30",
        "\u0A06\u0A2B",
        "\u0A17\u0A40\u0A24",
        "\u0A17\u0A3F\u0A23\u0A24\u0A40",
        "\u0A15\u0A3E\u0A32",
        "\u0A16\u0A4B\u0A1C",
        "\u0A38\u0A3E\u0A32\u0A3E\u0A02",
        "\u0A2A\u0A42\u0A30\u0A40",
        "\u0A38\u0A2E\u0A3E\u0A02",
        "\u0A1C\u0A3C\u0A3F\u0A06\u0A26\u0A3E",
        "\u0A07\u0A38\u0A26\u0A40",
        "\u0A38\u0A15\u0A26\u0A40",
        "\u0A35\u0A3F\u0A1A\u0A15\u0A3E\u0A30",
        "\u0A30\u0A3E\u0A1C\u0A27\u0A3E\u0A28\u0A40",
        "\u0A09\u0A38\u0A26\u0A3E",
        "\u0A1C\u0A41\u0A32\u0A3E\u0A08",
        "\u0A1C\u0A42\u0A28",
        "\u0A05\u0A27\u0A40\u0A28",
        "\u0A38\u0A25\u0A3E\u0A2A\u0A28\u0A3E",
        "\u0A38\u0A47\u0A35\u0A3E",
        "\u0A2D\u0A3E\u0A35",
        "\u0A35\u0A30\u0A17",
        "\u0A1B\u0A4B\u0A1F\u0A47",
        "\u0A26\u0A3F\u0A70\u0A26\u0A3E",
        "\u0A38\u0A2E\u0A3E\u0A1C\u0A3F\u0A15",
        "\u0A39\u0A41\u0A70\u0A26\u0A40\u0A06\u0A02",
        "\u0A1F\u0A40\u0A2E",
        "\u0A14\u0A30\u0A24\u0A3E\u0A02",
        "\u0A05\u0A15\u0A38\u0A30",
        "\u0A2A\u0A4D\u0A30\u0A15\u0A3E\u0A38\u0A3C\u0A3F\u0A24",
        "\u0A09\u0A30\u0A26\u0A42",
        "\u0A30\u0A70\u0A17",
        "\u0A2A\u0A3E\u0A30\u0A1F\u0A40",
        "\u0A2C\u0A23\u0A3E",
        "\u0A2A\u0A4D\u0A30\u0A2D\u0A3E\u0A35",
        "\u0A38\u0A3C\u0A41\u0A30\u0A42\u0A06\u0A24",
        "\u0A32\u0A17\u0A2D\u0A17",
        "\u0A2E\u0A08",
        "\u0A38\u0A3F\u0A30\u0A2B",
        "\u0A28\u0A47\u0A5C\u0A47",
        "\u0A1C\u0A3F\u0A38\u0A28\u0A42\u0A70",
        "\u0A39\u0A3E\u0A32\u0A3E\u0A02\u0A15\u0A3F",
        "\u0A26\u0A42\u0A30",
        "\u0A38\u0A24\u0A70\u0A2C\u0A30",
        "\u0A15\u0A3F\u0A24\u0A3E\u0A2C",
        "\u0A15\u0A26\u0A47",
        "\u0A09\u0A71\u0A24\u0A30\u0A40",
        "\u0A2A\u0A4D\u0A30\u0A15\u0A3E\u0A30",
        "\u0A07\u0A38\u0A28\u0A47",
        "\u0A2A\u0A4D\u0A30\u0A26\u0A47\u0A38\u0A3C",
        "\u0A05\u0A71\u0A17\u0A47",
        "\u0A38\u0A70\u0A2F\u0A41\u0A15\u0A24",
        "\u0A2A\u0A5C\u0A4D\u0A39\u0A3E\u0A08",
        "\u0A35\u0A27\u0A47\u0A30\u0A47",
        "\u0A28\u0A3E\u0A32\u0A3C",
        "\u0A2E\u0A28\u0A41\u0A71\u0A16",
        "\u0A2C\u0A3E\u0A15\u0A40",
        "\u0A2A\u0A4D\u0A30\u0A27\u0A3E\u0A28",
        "\u0A26\u0A42\u0A1C\u0A40",
        "\u0A15\u0A41\u0A71\u0A32",
        "\u0A06\u0A2B\u0A3C",
        "\u0A05\u0A27\u0A3F\u0A10\u0A28",
        "\u0A30\u0A3E\u0A38\u0A3C\u0A1F\u0A30\u0A40",
        "\u0A2A\u0A41\u0A71\u0A24\u0A30",
        "\u0A05\u0A70\u0A24\u0A30\u0A30\u0A3E\u0A38\u0A3C\u0A1F\u0A30\u0A40",
        "\u0A27\u0A30\u0A24\u0A40",
        "\u0A15\u0A47\u0A02\u0A26\u0A30",
        "\u0A26\u0A47\u0A38\u0A3C\u0A3E\u0A02",
        "\u0A2E\u0A71\u0A27",
        "\u0A1C\u0A3C\u0A3F\u0A32\u0A4D\u0A39\u0A3E",
        "\u0A38\u0A3E\u0A30\u0A40\u0A06\u0A02",
        "\u0A2A\u0A71\u0A27\u0A30",
        "\u0A39\u0A4B\u0A35\u0A47",
        "\u0A1C\u0A47",
        "\u0A2D\u0A3E\u0A08",
        "\u0A30\u0A39\u0A3F\u0A23",
        "\u0A2A\u0A41\u0A30\u0A38\u0A15\u0A3E\u0A30",
        "\u0A38\u0A2D\u0A3F\u0A06\u0A1A\u0A3E\u0A30",
        "\u0A2A\u0A24\u0A3E",
        "\u0A2A\u0A3E\u0A38\u0A47",
        "\u0A28\u0A35\u0A47\u0A02",
        "\u0A15\u0A70\u0A2A\u0A28\u0A40",
        "\u0A2C\u0A3E\u0A39\u0A30",
        "\u0A35\u0A47\u0A32\u0A47",
        "\u0A38\u0A70\u0A28",
        "\u0A2A\u0A42\u0A30\u0A2C\u0A40",
        "\u0A35\u0A3F\u0A1A\u0A3E\u0A30",
        "\u0A15\u0A3E\u0A30\u0A1C",
        "\u0A2A\u0A40",
        "\u0A2E\u0A39\u0A71\u0A24\u0A35\u0A2A\u0A42\u0A30\u0A28",
        "\u0A26\u0A41\u0A28\u0A40\u0A06\u0A02",
        "\u0A27\u0A3E\u0A30\u0A2E\u0A3F\u0A15",
        "\u0A2E\u0A28\u0A41\u0A71\u0A16\u0A40",
        "\u0A38\u0A2E\u0A42\u0A39",
        "\u0A05\u0A1C\u0A3F\u0A39\u0A47",
        "\u0A32\u0A3E\u0A32",
        "\u0A26\u0A42\u0A1C\u0A3E",
        "\u0A2D\u0A30\u0A3E",
        "\u0A38\u0A4D\u0A30\u0A40",
        "\u0A05\u0A70\u0A24",
        "\u0A1C\u0A3E\u0A02\u0A26\u0A40\u0A06\u0A02",
        "\u0A38\u0A3C\u0A3E\u0A39",
        "\u0A30\u0A39\u0A3F\u0A70\u0A26\u0A47",
        "\u0A2E\u0A39\u0A3E\u0A28",
        "\u0A1A\u0A40\u0A28",
        "\u0A2E\u0A40\u0A1F\u0A30",
        "\u0A35\u0A30\u0A17\u0A47",
        "\u0A28\u0A3E\u0A32\u0A4B\u0A02",
        "\u0A39\u0A3E\u0A38\u0A32",
        "\u0A15\u0A3F\u0A38\u0A2E",
        "\u0A05\u0A1C\u0A3F\u0A39\u0A3E",
        "\u0A2C\u0A23\u0A3F\u0A06",
        "\u0A2D\u0A30",
        "\u0A1B\u0A71\u0A21",
        "\u0A32\u0A48\u0A23",
        "\u0A39\u0A3F\u0A71\u0A38\u0A47",
        "\u0A1F\u0A40",
        "\u0A32\u0A3F\u0A16\u0A47",
        "\u0A2E\u0A3F\u0A32",
        "\u0A2E\u0A4C\u0A1C\u0A42\u0A26",
        "\u0A26\u0A3F\u0A71\u0A24\u0A47",
        "\u0A35\u0A3E\u0A38\u0A24\u0A47",
        "\u0A35\u0A3E\u0A32\u0A40\u0A06\u0A02",
        "\u0A35\u0A27\u0A40\u0A06",
        "\u0A30\u0A42\u0A38\u0A40",
        "\u0A1C\u0A3E\u0A30\u0A40",
        "\u0A38\u0A30\u0A15\u0A3E\u0A30\u0A40",
        "\u0A21\u0A3F\u0A17\u0A30\u0A40",
        "\u0A2A\u0A71\u0A1B\u0A2E",
        "\u0A32\u0A5C\u0A3E\u0A08",
        "\u0A2D\u0A3E\u0A38\u0A3C\u0A3E\u0A35\u0A3E\u0A02",
        "\u0A30\u0A3E\u0A1C\u0A3E",
        "\u0A1C\u0A32\u0A70\u0A27\u0A30",
        "\u0A39\u0A3F\u0A70\u0A26\u0A42",
        "\u0A14\u0A30\u0A24",
        "\u0A1C\u0A70\u0A17",
        "\u0A2C\u0A3E\u0A2C\u0A3E",
        "\u0A2C\u0A71\u0A1A\u0A3F\u0A06\u0A02",
        "\u0A2E\u0A70\u0A24\u0A30\u0A40",
        "\u0A2A\u0A1F\u0A3F\u0A06\u0A32\u0A3E",
        "\u0A35\u0A3E\u0A02\u0A17",
        "\u0A06\u0A09\u0A23",
        "\u0A2D\u0A3E\u0A35\u0A47\u0A02",
        "\u0A15\u0A47\u0A35\u0A32",
        "\u0A10\u0A38",
        "\u0A2A\u0A4D\u0A30\u0A3E\u0A1A\u0A40\u0A28",
        "\u0A30\u0A39\u0A3F\u0A70\u0A26\u0A3E",
        "\u0A2C\u0A4B\u0A32\u0A40",
        "\u0A05\u0A35\u0A3E\u0A30\u0A21",
        "\u0A28\u0A17\u0A30",
        "\u0A16\u0A47\u0A21\u0A3E\u0A02",
        "\u0A2B\u0A3F\u0A32\u0A2E\u0A3E\u0A02",
        "\u0A2C\u0A71\u0A1A\u0A47",
        "\u0A15\u0A4C\u0A30",
        "\u0A24\u0A4B",
        "\u0A2A\u0A4D\u0A30\u0A24\u0A40",
        "\u0A15\u0A41\u0A06\u0A02\u0A1F\u0A2E",
        "\u0A05\u0A2C\u0A3E\u0A26\u0A40",
        "\u0A2A\u0A41\u0A38\u0A24\u0A15",
        "\u0A10\u0A2E",
        "\u0A30\u0A3E\u0A2E",
        "\u0A16\u0A47\u0A24\u0A30\u0A3E\u0A02",
        "\u0A2B\u0A30\u0A35\u0A30\u0A40",
        "\u0A15\u0A4D\u0A30\u0A3F\u0A15\u0A1F",
        "\u0A2A\u0A48\u0A02\u0A26\u0A3E",
        "\u0A07\u0A24\u0A3F\u0A39\u0A3E\u0A38\u0A15",
        "\u0A32\u0A71\u0A17",
        "\u0A2C\u0A4D\u0A30\u0A3F\u0A1F\u0A3F\u0A38\u0A3C",
        "\u0A06\u0A07\u0A06",
        "\u0A2E\u0A3F\u0A32\u0A26\u0A3E"
      ];
      const fas = [
        "\u0627\u0632",
        "\u0628\u0627",
        "\u0628\u0647",
        "\u0628\u0631\u0627\u06CC",
        "\u0648",
        "\u0628\u0627\u06CC\u062F",
        "\u0634\u0627\u06CC\u062F",
        "\u0627\u06A9\u0646\u0648\u0646",
        "\u0627\u06AF\u0631",
        "\u0627\u06AF\u0631\u0686\u0647",
        "\u0627\u0644\u0627",
        "\u0627\u0645\u0627",
        "\u0627\u0646\u062F\u0631",
        "\u0627\u06CC\u0646\u06A9\u0647",
        "\u0628\u0627\u0631\u06CC",
        "\u0628\u0627\u0644\u0639\u06A9\u0633",
        "\u0628\u062F\u0648\u0646",
        "\u0628\u0631",
        "\u0628\u0644\u06A9\u0647",
        "\u0628\u0646\u0627\u0628\u0631\u0627\u06CC\u0646",
        "\u0628\u06CC",
        "\u067E\u0633",
        "\u062A\u0627",
        "\u062C\u0632",
        "\u0686\u0646\u0627\u0646\u0686\u0647",
        "\u0686\u0647",
        "\u0686\u0648\u0646",
        "\u062F\u0631",
        "\u0631\u0627",
        "\u0631\u0648\u06CC",
        "\u0632\u06CC\u0631\u0627",
        "\u0633\u067E\u0633",
        "\u063A\u06CC\u0631",
        "\u06A9\u0647",
        "\u0644\u06CC\u06A9\u0646",
        "\u0645\u0627\u0646\u0646\u062F",
        "\u0645\u062B\u0644",
        "\u0645\u06AF\u0631",
        "\u0646\u0647",
        "\u0646\u06CC\u0632",
        "\u0647\u0631\u0686\u0646\u062F",
        "\u0647\u0645",
        "\u0647\u0645\u0627\u0646",
        "\u0648\u0627\u0646\u06AF\u0647\u06CC",
        "\u0648\u0644\u06CC",
        "\u0648\u0644\u0648",
        "\u0647\u0645\u0627\u0646\u0646\u062F",
        "\u0647\u0645\u0686\u0648"
      ];
      const pol = [
        "a",
        "aby",
        "ach",
        "acz",
        "aczkolwiek",
        "aj",
        "albo",
        "ale",
        "ale\u017C",
        "ani",
        "a\u017C",
        "bardziej",
        "bardzo",
        "bo",
        "bowiem",
        "by",
        "byli",
        "bynajmniej",
        "by\u0107",
        "by\u0142",
        "by\u0142a",
        "by\u0142o",
        "by\u0142y",
        "b\u0119dzie",
        "b\u0119d\u0105",
        "cali",
        "ca\u0142a",
        "ca\u0142y",
        "ci",
        "ci\u0119",
        "ciebie",
        "co",
        "cokolwiek",
        "co\u015B",
        "czasami",
        "czasem",
        "czemu",
        "czy",
        "czyli",
        "daleko",
        "dla",
        "dlaczego",
        "dlatego",
        "do",
        "dobrze",
        "dok\u0105d",
        "do\u015B\u0107",
        "du\u017Co",
        "dwa",
        "dwaj",
        "dwie",
        "dwoje",
        "dzi\u015B",
        "dzisiaj",
        "gdy",
        "gdyby",
        "gdy\u017C",
        "gdzie",
        "gdziekolwiek",
        "gdzie\u015B",
        "i",
        "ich",
        "ile",
        "im",
        "inna",
        "inne",
        "inny",
        "innych",
        "i\u017C",
        "ja",
        "j\u0105",
        "jak",
        "jaka\u015B",
        "jakby",
        "jaki",
        "jakich\u015B",
        "jakie",
        "jaki\u015B",
        "jaki\u017C",
        "jakkolwiek",
        "jako",
        "jako\u015B",
        "je",
        "jeden",
        "jedna",
        "jedno",
        "jednak",
        "jednak\u017Ce",
        "jego",
        "jej",
        "jemu",
        "jest",
        "jestem",
        "jeszcze",
        "je\u015Bli",
        "je\u017Celi",
        "ju\u017C",
        "j\u0105",
        "ka\u017Cdy",
        "kiedy",
        "kilka",
        "kim\u015B",
        "kto",
        "ktokolwiek",
        "kto\u015B",
        "kt\xF3ra",
        "kt\xF3re",
        "kt\xF3rego",
        "kt\xF3rej",
        "kt\xF3ry",
        "kt\xF3rych",
        "kt\xF3rym",
        "kt\xF3rzy",
        "ku",
        "lat",
        "lecz",
        "lub",
        "ma",
        "maj\u0105",
        "ma\u0142o",
        "mam",
        "mi",
        "mimo",
        "mi\u0119dzy",
        "mn\u0105",
        "mnie",
        "mog\u0105",
        "moi",
        "moim",
        "moja",
        "moje",
        "mo\u017Ce",
        "mo\u017Cliwe",
        "mo\u017Cna",
        "m\xF3j",
        "mu",
        "musi",
        "my",
        "na",
        "nad",
        "nam",
        "nami",
        "nas",
        "nasi",
        "nasz",
        "nasza",
        "nasze",
        "naszego",
        "naszych",
        "natomiast",
        "natychmiast",
        "nawet",
        "ni\u0105",
        "nic",
        "nich",
        "nie",
        "niech",
        "niego",
        "niej",
        "niemu",
        "nigdy",
        "nim",
        "nimi",
        "ni\u017C",
        "no",
        "o",
        "obok",
        "od",
        "oko\u0142o",
        "on",
        "ona",
        "one",
        "oni",
        "ono",
        "oraz",
        "oto",
        "owszem",
        "pan",
        "pana",
        "pani",
        "po",
        "pod",
        "podczas",
        "pomimo",
        "ponad",
        "poniewa\u017C",
        "powinien",
        "powinna",
        "powinni",
        "powinno",
        "poza",
        "prawie",
        "przecie\u017C",
        "przed",
        "przede",
        "przedtem",
        "przez",
        "przy",
        "roku",
        "r\xF3wnie\u017C",
        "sam",
        "sama",
        "s\u0105",
        "si\u0119",
        "sk\u0105d",
        "sobie",
        "sob\u0105",
        "spos\xF3b",
        "swoje",
        "ta",
        "tak",
        "taka",
        "taki",
        "takie",
        "tak\u017Ce",
        "tam",
        "te",
        "tego",
        "tej",
        "temu",
        "ten",
        "teraz",
        "te\u017C",
        "to",
        "tob\u0105",
        "tobie",
        "tote\u017C",
        "trzeba",
        "tu",
        "tutaj",
        "twoi",
        "twoim",
        "twoja",
        "twoje",
        "twym",
        "tw\xF3j",
        "ty",
        "tych",
        "tylko",
        "tym",
        "u",
        "w",
        "wam",
        "wami",
        "was",
        "wasz",
        "za\u015B",
        "wasza",
        "wasze",
        "we",
        "wed\u0142ug",
        "wiele",
        "wielu",
        "wi\u0119c",
        "wi\u0119cej",
        "t\u0119",
        "wszyscy",
        "wszystkich",
        "wszystkie",
        "wszystkim",
        "wszystko",
        "wtedy",
        "wy",
        "w\u0142a\u015Bnie",
        "z",
        "za",
        "zapewne",
        "zawsze",
        "ze",
        "z\u0142",
        "znowu",
        "zn\xF3w",
        "zosta\u0142",
        "\u017Caden",
        "\u017Cadna",
        "\u017Cadne",
        "\u017Cadnych",
        "\u017Ce",
        "\u017Ceby"
      ];
      const por = [
        "a",
        "\xE0",
        "ao",
        "aos",
        "aquela",
        "aquelas",
        "aquele",
        "aqueles",
        "aquilo",
        "as",
        "\xE0s",
        "at\xE9",
        "com",
        "como",
        "da",
        "das",
        "de",
        "dela",
        "delas",
        "dele",
        "deles",
        "depois",
        "do",
        "dos",
        "e",
        "ela",
        "elas",
        "ele",
        "eles",
        "em",
        "entre",
        "essa",
        "essas",
        "esse",
        "esses",
        "esta",
        "estas",
        "este",
        "estes",
        "eu",
        "isso",
        "isto",
        "j\xE1",
        "lhe",
        "lhes",
        "mais",
        "mas",
        "me",
        "mesmo",
        "meu",
        "meus",
        "minha",
        "minhas",
        "muito",
        "muitos",
        "na",
        "n\xE3o",
        "nas",
        "nem",
        "no",
        "nos",
        "n\xF3s",
        "nossa",
        "nossas",
        "nosso",
        "nossos",
        "num",
        "nuns",
        "numa",
        "numas",
        "o",
        "os",
        "ou",
        "para",
        "pela",
        "pelas",
        "pelo",
        "pelos",
        "por",
        "quais",
        "qual",
        "quando",
        "que",
        "quem",
        "se",
        "sem",
        "seu",
        "seus",
        "s\xF3",
        "sua",
        "suas",
        "tamb\xE9m",
        "te",
        "teu",
        "teus",
        "tu",
        "tua",
        "tuas",
        "um",
        "uma",
        "umas",
        "voc\xEA",
        "voc\xEAs",
        "vos",
        "vosso",
        "vossos"
      ];
      const porBr = [
        "a",
        "\xE0",
        "adeus",
        "agora",
        "a\xED",
        "ainda",
        "al\xE9m",
        "algo",
        "algu\xE9m",
        "algum",
        "alguma",
        "algumas",
        "alguns",
        "ali",
        "ampla",
        "amplas",
        "amplo",
        "amplos",
        "ano",
        "anos",
        "ante",
        "antes",
        "ao",
        "aos",
        "apenas",
        "apoio",
        "ap\xF3s",
        "aquela",
        "aquelas",
        "aquele",
        "aqueles",
        "aqui",
        "aquilo",
        "\xE1rea",
        "as",
        "\xE0s",
        "assim",
        "at\xE9",
        "atr\xE1s",
        "atrav\xE9s",
        "baixo",
        "bastante",
        "bem",
        "boa",
        "boas",
        "bom",
        "bons",
        "breve",
        "c\xE1",
        "cada",
        "catorze",
        "cedo",
        "cento",
        "certamente",
        "certeza",
        "cima",
        "cinco",
        "coisa",
        "coisas",
        "com",
        "como",
        "conselho",
        "contra",
        "contudo",
        "custa",
        "da",
        "d\xE1",
        "d\xE3o",
        "daquela",
        "daquelas",
        "daquele",
        "daqueles",
        "dar",
        "das",
        "de",
        "debaixo",
        "dela",
        "delas",
        "dele",
        "deles",
        "demais",
        "dentro",
        "depois",
        "desde",
        "dessa",
        "dessas",
        "desse",
        "desses",
        "desta",
        "destas",
        "deste",
        "destes",
        "deve",
        "devem",
        "devendo",
        "dever",
        "dever\xE1",
        "dever\xE3o",
        "deveria",
        "deveriam",
        "devia",
        "deviam",
        "dez",
        "dezenove",
        "dezesseis",
        "dezessete",
        "dezoito",
        "dia",
        "diante",
        "disse",
        "disso",
        "disto",
        "dito",
        "diz",
        "dizem",
        "dizer",
        "do",
        "dois",
        "dos",
        "doze",
        "duas",
        "d\xFAvida",
        "e",
        "\xE9",
        "ela",
        "elas",
        "ele",
        "eles",
        "em",
        "embora",
        "enquanto",
        "entre",
        "era",
        "eram",
        "\xE9ramos",
        "\xE9s",
        "essa",
        "essas",
        "esse",
        "esses",
        "esta",
        "est\xE1",
        "estamos",
        "est\xE3o",
        "estar",
        "estas",
        "est\xE1s",
        "estava",
        "estavam",
        "est\xE1vamos",
        "este",
        "esteja",
        "estejam",
        "estejamos",
        "estes",
        "esteve",
        "estive",
        "estivemos",
        "estiver",
        "estivera",
        "estiveram",
        "estiv\xE9ramos",
        "estiverem",
        "estivermos",
        "estivesse",
        "estivessem",
        "estiv\xE9ssemos",
        "estiveste",
        "estivestes",
        "estou",
        "etc",
        "eu",
        "exemplo",
        "fa\xE7o",
        "falta",
        "favor",
        "faz",
        "fazeis",
        "fazem",
        "fazemos",
        "fazendo",
        "fazer",
        "fazes",
        "feita",
        "feitas",
        "feito",
        "feitos",
        "fez",
        "fim",
        "final",
        "foi",
        "fomos",
        "for",
        "fora",
        "foram",
        "f\xF4ramos",
        "forem",
        "forma",
        "formos",
        "fosse",
        "fossem",
        "f\xF4ssemos",
        "foste",
        "fostes",
        "fui",
        "geral",
        "grande",
        "grandes",
        "grupo",
        "h\xE1",
        "haja",
        "hajam",
        "hajamos",
        "h\xE3o",
        "havemos",
        "havia",
        "hei",
        "hoje",
        "hora",
        "horas",
        "houve",
        "houvemos",
        "houver",
        "houvera",
        "houver\xE1",
        "houveram",
        "houv\xE9ramos",
        "houver\xE3o",
        "houverei",
        "houverem",
        "houveremos",
        "houveria",
        "houveriam",
        "houver\xEDamos",
        "houvermos",
        "houvesse",
        "houvessem",
        "houv\xE9ssemos",
        "isso",
        "isto",
        "j\xE1",
        "la",
        "l\xE1",
        "lado",
        "lhe",
        "lhes",
        "lo",
        "local",
        "logo",
        "longe",
        "lugar",
        "maior",
        "maioria",
        "mais",
        "mal",
        "mas",
        "m\xE1ximo",
        "me",
        "meio",
        "menor",
        "menos",
        "m\xEAs",
        "meses",
        "mesma",
        "mesmas",
        "mesmo",
        "mesmos",
        "meu",
        "meus",
        "mil",
        "minha",
        "minhas",
        "momento",
        "muita",
        "muitas",
        "muito",
        "muitos",
        "na",
        "nada",
        "n\xE3o",
        "naquela",
        "naquelas",
        "naquele",
        "naqueles",
        "nas",
        "nem",
        "nenhum",
        "nenhuma",
        "nessa",
        "nessas",
        "nesse",
        "nesses",
        "nesta",
        "nestas",
        "neste",
        "nestes",
        "ningu\xE9m",
        "n\xEDvel",
        "no",
        "noite",
        "nome",
        "nos",
        "n\xF3s",
        "nossa",
        "nossas",
        "nosso",
        "nossos",
        "nova",
        "novas",
        "nove",
        "novo",
        "novos",
        "num",
        "numa",
        "n\xFAmero",
        "nunca",
        "o",
        "obra",
        "obrigada",
        "obrigado",
        "oitava",
        "oitavo",
        "oito",
        "onde",
        "ontem",
        "onze",
        "os",
        "ou",
        "outra",
        "outras",
        "outro",
        "outros",
        "para",
        "parece",
        "parte",
        "partir",
        "paucas",
        "pela",
        "pelas",
        "pelo",
        "pelos",
        "pequena",
        "pequenas",
        "pequeno",
        "pequenos",
        "per",
        "perante",
        "perto",
        "pode",
        "pude",
        "p\xF4de",
        "podem",
        "podendo",
        "poder",
        "poderia",
        "poderiam",
        "podia",
        "podiam",
        "p\xF5e",
        "p\xF5em",
        "pois",
        "ponto",
        "pontos",
        "por",
        "por\xE9m",
        "porque",
        "porqu\xEA",
        "posi\xE7\xE3o",
        "poss\xEDvel",
        "possivelmente",
        "posso",
        "pouca",
        "poucas",
        "pouco",
        "poucos",
        "primeira",
        "primeiras",
        "primeiro",
        "primeiros",
        "pr\xF3pria",
        "pr\xF3prias",
        "pr\xF3prio",
        "pr\xF3prios",
        "pr\xF3xima",
        "pr\xF3ximas",
        "pr\xF3ximo",
        "pr\xF3ximos",
        "pude",
        "puderam",
        "quais",
        "qu\xE1is",
        "qual",
        "quando",
        "quanto",
        "quantos",
        "quarta",
        "quarto",
        "quatro",
        "que",
        "qu\xEA",
        "quem",
        "quer",
        "quereis",
        "querem",
        "queremas",
        "queres",
        "quero",
        "quest\xE3o",
        "quinta",
        "quinto",
        "quinze",
        "rela\xE7\xE3o",
        "sabe",
        "sabem",
        "s\xE3o",
        "se",
        "segunda",
        "segundo",
        "sei",
        "seis",
        "seja",
        "sejam",
        "sejamos",
        "sem",
        "sempre",
        "sendo",
        "ser",
        "ser\xE1",
        "ser\xE3o",
        "serei",
        "seremos",
        "seria",
        "seriam",
        "ser\xEDamos",
        "sete",
        "s\xE9tima",
        "s\xE9timo",
        "seu",
        "seus",
        "sexta",
        "sexto",
        "si",
        "sido",
        "sim",
        "sistema",
        "s\xF3",
        "sob",
        "sobre",
        "sois",
        "somos",
        "sou",
        "sua",
        "suas",
        "tal",
        "talvez",
        "tamb\xE9m",
        "tampouco",
        "tanta",
        "tantas",
        "tanto",
        "t\xE3o",
        "tarde",
        "te",
        "tem",
        "t\xE9m",
        "t\xEAm",
        "temos",
        "tendes",
        "tendo",
        "tenha",
        "tenham",
        "tenhamos",
        "tenho",
        "tens",
        "ter",
        "ter\xE1",
        "ter\xE3o",
        "terceira",
        "terceiro",
        "terei",
        "teremos",
        "teria",
        "teriam",
        "ter\xEDamos",
        "teu",
        "teus",
        "teve",
        "ti",
        "tido",
        "tinha",
        "tinham",
        "t\xEDnhamos",
        "tive",
        "tivemos",
        "tiver",
        "tivera",
        "tiveram",
        "tiv\xE9ramos",
        "tiverem",
        "tivermos",
        "tivesse",
        "tivessem",
        "tiv\xE9ssemos",
        "tiveste",
        "tivestes",
        "toda",
        "todas",
        "todavia",
        "todo",
        "todos",
        "trabalho",
        "tr\xEAs",
        "treze",
        "tu",
        "tua",
        "tuas",
        "tudo",
        "\xFAltima",
        "\xFAltimas",
        "\xFAltimo",
        "\xFAltimos",
        "um",
        "uma",
        "umas",
        "uns",
        "vai",
        "vais",
        "v\xE3o",
        "v\xE1rios",
        "vem",
        "v\xEAm",
        "vendo",
        "vens",
        "ver",
        "vez",
        "vezes",
        "viagem",
        "vindo",
        "vinte",
        "vir",
        "voc\xEA",
        "voc\xEAs",
        "vos",
        "v\xF3s",
        "vossa",
        "vossas",
        "vosso",
        "vossos",
        "zero"
      ];
      const ron = [
        "acea",
        "aceasta",
        "aceast\u0103",
        "aceea",
        "acei",
        "aceia",
        "acel",
        "acela",
        "acele",
        "acelea",
        "acest",
        "acesta",
        "aceste",
        "acestea",
        "ace\u015Fti",
        "ace\u015Ftia",
        "acolo",
        "acord",
        "acum",
        "ai",
        "aia",
        "aib\u0103",
        "aici",
        "al",
        "ale",
        "alea",
        "altceva",
        "altcineva",
        "am",
        "ar",
        "are",
        "asemenea",
        "asta",
        "astea",
        "ast\u0103zi",
        "asupra",
        "au",
        "avea",
        "avem",
        "ave\u0163i",
        "azi",
        "a\u015F",
        "a\u015Fadar",
        "a\u0163i",
        "bine",
        "bucur",
        "bun\u0103",
        "ca",
        "care",
        "caut",
        "ce",
        "cel",
        "ceva",
        "chiar",
        "cinci",
        "cine",
        "cineva",
        "contra",
        "cu",
        "cum",
        "cumva",
        "cur\xE2nd",
        "cur\xEEnd",
        "c\xE2nd",
        "c\xE2t",
        "c\xE2te",
        "c\xE2tva",
        "c\xE2\u0163i",
        "c\xEEnd",
        "c\xEEt",
        "c\xEEte",
        "c\xEEtva",
        "c\xEE\u0163i",
        "c\u0103",
        "c\u0103ci",
        "c\u0103rei",
        "c\u0103ror",
        "c\u0103rui",
        "c\u0103tre",
        "da",
        "dac\u0103",
        "dar",
        "datorit\u0103",
        "dat\u0103",
        "dau",
        "de",
        "deci",
        "deja",
        "deoarece",
        "departe",
        "de\u015Fi",
        "din",
        "dinaintea",
        "dintr-",
        "dintre",
        "doi",
        "doilea",
        "dou\u0103",
        "drept",
        "dup\u0103",
        "d\u0103",
        "ea",
        "ei",
        "el",
        "ele",
        "eram",
        "este",
        "eu",
        "e\u015Fti",
        "face",
        "fata",
        "fi",
        "fie",
        "fiecare",
        "fii",
        "fim",
        "fiu",
        "fi\u0163i",
        "frumos",
        "f\u0103r\u0103",
        "gra\u0163ie",
        "halb\u0103",
        "iar",
        "ieri",
        "la",
        "le",
        "li",
        "lor",
        "lui",
        "l\xE2ng\u0103",
        "l\xEEng\u0103",
        "mai",
        "mea",
        "mei",
        "mele",
        "mereu",
        "meu",
        "mi",
        "mie",
        "mine",
        "mult",
        "mult\u0103",
        "mul\u0163i",
        "mul\u0163umesc",
        "m\xE2ine",
        "m\xEEine",
        "m\u0103",
        "ne",
        "nevoie",
        "nici",
        "nic\u0103ieri",
        "nimeni",
        "nimeri",
        "nimic",
        "ni\u015Fte",
        "noastre",
        "noastr\u0103",
        "noi",
        "noroc",
        "nostru",
        "nou\u0103",
        "no\u015Ftri",
        "nu",
        "opt",
        "ori",
        "oricare",
        "orice",
        "oricine",
        "oricum",
        "oric\xE2nd",
        "oric\xE2t",
        "oric\xEEnd",
        "oric\xEEt",
        "oriunde",
        "patra",
        "patru",
        "patrulea",
        "pe",
        "pentru",
        "peste",
        "pic",
        "poate",
        "pot",
        "prea",
        "prima",
        "primul",
        "prin",
        "printr-",
        "pu\u0163in",
        "pu\u0163ina",
        "pu\u0163in\u0103",
        "p\xE2n\u0103",
        "p\xEEn\u0103",
        "rog",
        "sa",
        "sale",
        "sau",
        "se",
        "spate",
        "spre",
        "sub",
        "sunt",
        "suntem",
        "sunte\u0163i",
        "sut\u0103",
        "s\xEEnt",
        "s\xEEntem",
        "s\xEEnte\u0163i",
        "s\u0103",
        "s\u0103i",
        "s\u0103u",
        "ta",
        "tale",
        "te",
        "timp",
        "tine",
        "toate",
        "toat\u0103",
        "tot",
        "totu\u015Fi",
        "to\u0163i",
        "trei",
        "treia",
        "treilea",
        "tu",
        "t\u0103i",
        "t\u0103u",
        "un",
        "una",
        "unde",
        "undeva",
        "unei",
        "uneia",
        "unele",
        "uneori",
        "unii",
        "unor",
        "unora",
        "unu",
        "unui",
        "unuia",
        "unul",
        "vi",
        "voastre",
        "voastr\u0103",
        "voi",
        "vostru",
        "vou\u0103",
        "vo\u015Ftri",
        "vreme",
        "vreo",
        "vreun",
        "v\u0103",
        "zece",
        "zero",
        "zi",
        "zice",
        "\xEEi",
        "\xEEl",
        "\xEEmi",
        "\xEEmpotriva",
        "\xEEn",
        "\xEEnainte",
        "\xEEnaintea",
        "\xEEncotro",
        "\xEEnc\xE2t",
        "\xEEnc\xEEt",
        "\xEEntre",
        "\xEEntruc\xE2t",
        "\xEEntruc\xEEt",
        "\xEE\u0163i",
        "\u0103la",
        "\u0103lea",
        "\u0103sta",
        "\u0103stea",
        "\u0103\u015Ftia",
        "\u015Fapte",
        "\u015Fase",
        "\u015Fi",
        "\u015Ftiu",
        "\u0163i",
        "\u0163ie"
      ];
      const rus = [
        "\u0438",
        "\u0432",
        "\u0432\u043E",
        "\u043D\u0435",
        "\u0447\u0442\u043E",
        "\u043E\u043D",
        "\u043D\u0430",
        "\u044F",
        "\u0441",
        "\u0441\u043E",
        "\u043A\u0430\u043A",
        "\u0430",
        "\u0442\u043E",
        "\u0432\u0441\u0435",
        "\u043E\u043D\u0430",
        "\u0442\u0430\u043A",
        "\u0435\u0433\u043E",
        "\u043D\u043E",
        "\u0434\u0430",
        "\u0442\u044B",
        "\u043A",
        "\u0443",
        "\u0436\u0435",
        "\u0432\u044B",
        "\u0437\u0430",
        "\u0431\u044B",
        "\u043F\u043E",
        "\u0442\u043E\u043B\u044C\u043A\u043E",
        "\u0435\u0435",
        "\u043C\u043D\u0435",
        "\u0431\u044B\u043B\u043E",
        "\u0432\u043E\u0442",
        "\u043E\u0442",
        "\u043C\u0435\u043D\u044F",
        "\u0435\u0449\u0435",
        "\u043D\u0435\u0442",
        "\u043E",
        "\u0438\u0437",
        "\u0435\u043C\u0443",
        "\u0442\u0435\u043F\u0435\u0440\u044C",
        "\u043A\u043E\u0433\u0434\u0430",
        "\u0434\u0430\u0436\u0435",
        "\u043D\u0443",
        "\u043B\u0438",
        "\u0435\u0441\u043B\u0438",
        "\u0443\u0436\u0435",
        "\u0438\u043B\u0438",
        "\u043D\u0438",
        "\u0431\u044B\u0442\u044C",
        "\u0431\u044B\u043B",
        "\u043D\u0435\u0433\u043E",
        "\u0434\u043E",
        "\u0432\u0430\u0441",
        "\u043D\u0438\u0431\u0443\u0434\u044C",
        "\u0443\u0436",
        "\u0432\u0430\u043C",
        "\u0441\u043A\u0430\u0437\u0430\u043B",
        "\u0432\u0435\u0434\u044C",
        "\u0442\u0430\u043C",
        "\u043F\u043E\u0442\u043E\u043C",
        "\u0441\u0435\u0431\u044F",
        "\u043D\u0438\u0447\u0435\u0433\u043E",
        "\u0435\u0439",
        "\u043C\u043E\u0436\u0435\u0442",
        "\u043E\u043D\u0438",
        "\u0442\u0443\u0442",
        "\u0433\u0434\u0435",
        "\u0435\u0441\u0442\u044C",
        "\u043D\u0430\u0434\u043E",
        "\u043D\u0435\u0439",
        "\u0434\u043B\u044F",
        "\u043C\u044B",
        "\u0442\u0435\u0431\u044F",
        "\u0438\u0445",
        "\u0447\u0435\u043C",
        "\u0431\u044B\u043B\u0430",
        "\u0441\u0430\u043C",
        "\u0447\u0442\u043E\u0431",
        "\u0431\u0435\u0437",
        "\u0431\u0443\u0434\u0442\u043E",
        "\u0447\u0435\u0433\u043E",
        "\u0440\u0430\u0437",
        "\u0442\u043E\u0436\u0435",
        "\u0441\u0435\u0431\u0435",
        "\u043F\u043E\u0434",
        "\u0431\u0443\u0434\u0435\u0442",
        "\u0436",
        "\u0442\u043E\u0433\u0434\u0430",
        "\u043A\u0442\u043E",
        "\u044D\u0442\u043E\u0442",
        "\u0442\u043E\u0433\u043E",
        "\u043F\u043E\u0442\u043E\u043C\u0443",
        "\u044D\u0442\u043E\u0433\u043E",
        "\u043A\u0430\u043A\u043E\u0439",
        "\u0441\u043E\u0432\u0441\u0435\u043C",
        "\u043D\u0438\u043C",
        "\u044D\u0442\u043E\u043C",
        "\u043F\u043E\u0447\u0442\u0438",
        "\u043C\u043E\u0439",
        "\u0442\u0435\u043C",
        "\u0447\u0442\u043E\u0431\u044B",
        "\u043D\u0435\u0435",
        "\u0431\u044B\u043B\u0438",
        "\u043A\u0443\u0434\u0430",
        "\u0432\u0441\u0435\u0445",
        "\u043D\u0438\u043A\u043E\u0433\u0434\u0430",
        "\u0441\u0435\u0433\u043E\u0434\u043D\u044F",
        "\u043C\u043E\u0436\u043D\u043E",
        "\u043F\u0440\u0438",
        "\u043E\u0431",
        "\u0434\u0440\u0443\u0433\u043E\u0439",
        "\u0445\u043E\u0442\u044C",
        "\u043F\u043E\u0441\u043B\u0435",
        "\u043D\u0430\u0434",
        "\u0431\u043E\u043B\u044C\u0448\u0435",
        "\u0442\u043E\u0442",
        "\u0447\u0435\u0440\u0435\u0437",
        "\u044D\u0442\u0438",
        "\u043D\u0430\u0441",
        "\u043F\u0440\u043E",
        "\u0432\u0441\u0435\u0433\u043E",
        "\u043D\u0438\u0445",
        "\u043A\u0430\u043A\u0430\u044F",
        "\u043C\u043D\u043E\u0433\u043E",
        "\u0440\u0430\u0437\u0432\u0435",
        "\u044D\u0442\u0443",
        "\u043C\u043E\u044F",
        "\u0441\u0432\u043E\u044E",
        "\u044D\u0442\u043E\u0439",
        "\u043F\u0435\u0440\u0435\u0434",
        "\u0438\u043D\u043E\u0433\u0434\u0430",
        "\u043B\u0443\u0447\u0448\u0435",
        "\u0447\u0443\u0442\u044C",
        "\u0442\u043E\u043C",
        "\u043D\u0435\u043B\u044C\u0437\u044F",
        "\u0442\u0430\u043A\u043E\u0439",
        "\u0438\u043C",
        "\u0431\u043E\u043B\u0435\u0435",
        "\u0432\u0441\u0435\u0433\u0434\u0430",
        "\u043A\u043E\u043D\u0435\u0447\u043D\u043E",
        "\u0432\u0441\u044E",
        "\u043C\u0435\u0436\u0434\u0443",
        "\u044D\u0442\u043E",
        "\u043B\u0438\u0448\u044C"
      ];
      const slk = [
        "a",
        "aby",
        "aj",
        "ako",
        "ak\xFD",
        "ale",
        "alebo",
        "ani",
        "av\u0161ak",
        "ba",
        "bez",
        "bu\xEF",
        "cez",
        "do",
        "ho",
        "hoci",
        "i",
        "ich",
        "im",
        "ja",
        "jeho",
        "jej",
        "jemu",
        "ju",
        "k",
        "kam",
        "kde",
        "ked\u017Ee",
        "ke\xEF",
        "kto",
        "ktor\xFD",
        "ku",
        "lebo",
        "ma",
        "mi",
        "mne",
        "mnou",
        "mu",
        "my",
        "m\xF2a",
        "m\xF4j",
        "na",
        "nad",
        "nami",
        "neho",
        "nej",
        "nemu",
        "nich",
        "nielen",
        "nim",
        "no",
        "n\xE1m",
        "n\xE1s",
        "n\xE1\u0161",
        "n\xEDm",
        "o",
        "od",
        "on",
        "ona",
        "oni",
        "ono",
        "ony",
        "po",
        "pod",
        "pre",
        "pred",
        "pri",
        "s",
        "sa",
        "seba",
        "sem",
        "so",
        "svoj",
        "tak\xFD",
        "tam",
        "teba",
        "tebe",
        "tebou",
        "tej",
        "ten",
        "ti",
        "tie",
        "to",
        "toho",
        "tomu",
        "tou",
        "tvoj",
        "ty",
        "t\xE1",
        "t\xFDm",
        "v",
        "vami",
        "ve\xEF",
        "vo",
        "vy",
        "v\xE1m",
        "v\xE1s",
        "v\xE1\u0161",
        "v\u0161ak",
        "z",
        "za",
        "zo",
        "\x9Da",
        "\xE8i",
        "\xE8o",
        "\xE8\xED",
        "\xF2om",
        "\xF2ou",
        "\xF2u",
        "\u017Ee"
      ];
      const slv = [
        "a",
        "ali",
        "april",
        "avgust",
        "b",
        "bi",
        "bil",
        "bila",
        "bile",
        "bili",
        "bilo",
        "biti",
        "blizu",
        "bo",
        "bodo",
        "bojo",
        "bolj",
        "bom",
        "bomo",
        "boste",
        "bova",
        "bo\u0161",
        "brez",
        "c",
        "cel",
        "cela",
        "celi",
        "celo",
        "d",
        "da",
        "dale\u010D",
        "dan",
        "danes",
        "datum",
        "december",
        "deset",
        "deseta",
        "deseti",
        "deseto",
        "devet",
        "deveta",
        "deveti",
        "deveto",
        "do",
        "dober",
        "dobra",
        "dobri",
        "dobro",
        "dokler",
        "dol",
        "dolg",
        "dolga",
        "dolgi",
        "dovolj",
        "drug",
        "druga",
        "drugi",
        "drugo",
        "dva",
        "dve",
        "e",
        "eden",
        "en",
        "ena",
        "ene",
        "eni",
        "enkrat",
        "eno",
        "etc.",
        "f",
        "februar",
        "g",
        "g.",
        "ga",
        "ga.",
        "gor",
        "gospa",
        "gospod",
        "h",
        "halo",
        "i",
        "idr.",
        "ii",
        "iii",
        "in",
        "iv",
        "ix",
        "iz",
        "j",
        "januar",
        "jaz",
        "je",
        "ji",
        "jih",
        "jim",
        "jo",
        "julij",
        "junij",
        "jutri",
        "k",
        "kadarkoli",
        "kaj",
        "kajti",
        "kako",
        "kakor",
        "kamor",
        "kamorkoli",
        "kar",
        "karkoli",
        "katerikoli",
        "kdaj",
        "kdo",
        "kdorkoli",
        "ker",
        "ki",
        "kje",
        "kjer",
        "kjerkoli",
        "ko",
        "koder",
        "koderkoli",
        "koga",
        "komu",
        "kot",
        "kratek",
        "kratka",
        "kratke",
        "kratki",
        "l",
        "lahka",
        "lahke",
        "lahki",
        "lahko",
        "le",
        "lep",
        "lepa",
        "lepe",
        "lepi",
        "lepo",
        "leto",
        "m",
        "maj",
        "majhen",
        "majhna",
        "majhni",
        "malce",
        "malo",
        "manj",
        "marec",
        "me",
        "med",
        "medtem",
        "mene",
        "mesec",
        "mi",
        "midva",
        "midve",
        "mnogo",
        "moj",
        "moja",
        "moje",
        "mora",
        "morajo",
        "moram",
        "moramo",
        "morate",
        "mora\u0161",
        "morem",
        "mu",
        "n",
        "na",
        "nad",
        "naj",
        "najina",
        "najino",
        "najmanj",
        "naju",
        "najve\u010D",
        "nam",
        "narobe",
        "nas",
        "nato",
        "nazaj",
        "na\u0161",
        "na\u0161a",
        "na\u0161e",
        "ne",
        "nedavno",
        "nedelja",
        "nek",
        "neka",
        "nekaj",
        "nekatere",
        "nekateri",
        "nekatero",
        "nekdo",
        "neke",
        "nekega",
        "neki",
        "nekje",
        "neko",
        "nekoga",
        "neko\u010D",
        "ni",
        "nikamor",
        "nikdar",
        "nikjer",
        "nikoli",
        "ni\u010D",
        "nje",
        "njega",
        "njegov",
        "njegova",
        "njegovo",
        "njej",
        "njemu",
        "njen",
        "njena",
        "njeno",
        "nji",
        "njih",
        "njihov",
        "njihova",
        "njihovo",
        "njiju",
        "njim",
        "njo",
        "njun",
        "njuna",
        "njuno",
        "no",
        "nocoj",
        "november",
        "npr.",
        "o",
        "ob",
        "oba",
        "obe",
        "oboje",
        "od",
        "odprt",
        "odprta",
        "odprti",
        "okoli",
        "oktober",
        "on",
        "onadva",
        "one",
        "oni",
        "onidve",
        "osem",
        "osma",
        "osmi",
        "osmo",
        "oz.",
        "p",
        "pa",
        "pet",
        "peta",
        "petek",
        "peti",
        "peto",
        "po",
        "pod",
        "pogosto",
        "poleg",
        "poln",
        "polna",
        "polni",
        "polno",
        "ponavadi",
        "ponedeljek",
        "ponovno",
        "potem",
        "povsod",
        "pozdravljen",
        "pozdravljeni",
        "prav",
        "prava",
        "prave",
        "pravi",
        "pravo",
        "prazen",
        "prazna",
        "prazno",
        "prbl.",
        "precej",
        "pred",
        "prej",
        "preko",
        "pri",
        "pribl.",
        "pribli\u017Eno",
        "primer",
        "pripravljen",
        "pripravljena",
        "pripravljeni",
        "proti",
        "prva",
        "prvi",
        "prvo",
        "r",
        "ravno",
        "redko",
        "res",
        "re\u010D",
        "s",
        "saj",
        "sam",
        "sama",
        "same",
        "sami",
        "samo",
        "se",
        "sebe",
        "sebi",
        "sedaj",
        "sedem",
        "sedma",
        "sedmi",
        "sedmo",
        "sem",
        "september",
        "seveda",
        "si",
        "sicer",
        "skoraj",
        "skozi",
        "slab",
        "smo",
        "so",
        "sobota",
        "spet",
        "sreda",
        "srednja",
        "srednji",
        "sta",
        "ste",
        "stran",
        "stvar",
        "sva",
        "t",
        "ta",
        "tak",
        "taka",
        "take",
        "taki",
        "tako",
        "takoj",
        "tam",
        "te",
        "tebe",
        "tebi",
        "tega",
        "te\u017Eak",
        "te\u017Eka",
        "te\u017Eki",
        "te\u017Eko",
        "ti",
        "tista",
        "tiste",
        "tisti",
        "tisto",
        "tj.",
        "tja",
        "to",
        "toda",
        "torek",
        "tretja",
        "tretje",
        "tretji",
        "tri",
        "tu",
        "tudi",
        "tukaj",
        "tvoj",
        "tvoja",
        "tvoje",
        "u",
        "v",
        "vaju",
        "vam",
        "vas",
        "va\u0161",
        "va\u0161a",
        "va\u0161e",
        "ve",
        "vedno",
        "velik",
        "velika",
        "veliki",
        "veliko",
        "vendar",
        "ves",
        "ve\u010D",
        "vi",
        "vidva",
        "vii",
        "viii",
        "visok",
        "visoka",
        "visoke",
        "visoki",
        "vsa",
        "vsaj",
        "vsak",
        "vsaka",
        "vsakdo",
        "vsake",
        "vsaki",
        "vsakomur",
        "vse",
        "vsega",
        "vsi",
        "vso",
        "v\u010Dasih",
        "v\u010Deraj",
        "x",
        "z",
        "za",
        "zadaj",
        "zadnji",
        "zakaj",
        "zaprta",
        "zaprti",
        "zaprto",
        "zdaj",
        "zelo",
        "zunaj",
        "\u010D",
        "\u010De",
        "\u010Desto",
        "\u010Detrta",
        "\u010Detrtek",
        "\u010Detrti",
        "\u010Detrto",
        "\u010Dez",
        "\u010Digav",
        "\u0161",
        "\u0161est",
        "\u0161esta",
        "\u0161esti",
        "\u0161esto",
        "\u0161tiri",
        "\u017E",
        "\u017Ee"
      ];
      const som = [
        "oo",
        "atabo",
        "ay",
        "ku",
        "waxeey",
        "uu",
        "lakin",
        "si",
        "ayuu",
        "soo",
        "waa",
        "ka",
        "kasoo",
        "kale",
        "waxuu",
        "ayee",
        "ayaa",
        "kuu",
        "isku",
        "ugu",
        "jiray",
        "dhan",
        "dambeestii",
        "inuu",
        "in",
        "jirtay",
        "uheestay",
        "aad",
        "uga",
        "hadana",
        "timaado",
        "timaaday"
      ];
      const sot = [
        "a",
        "le",
        "o",
        "ba",
        "ho",
        "oa",
        "ea",
        "ka",
        "hae",
        "tselane",
        "eaba",
        "ke",
        "hore",
        "ha",
        "e",
        "ne",
        "re",
        "bona",
        "me",
        "limo",
        "tsa",
        "haholo",
        "la",
        "empa",
        "ngoanake",
        "se",
        "moo",
        "m'e",
        "bane",
        "mo",
        "tse",
        "sa",
        "li",
        "ena",
        "bina",
        "pina",
        "hape"
      ];
      const spa = [
        "a",
        "un",
        "el",
        "ella",
        "y",
        "sobre",
        "de",
        "la",
        "que",
        "en",
        "los",
        "del",
        "se",
        "las",
        "por",
        "un",
        "para",
        "con",
        "no",
        "una",
        "su",
        "al",
        "lo",
        "como",
        "m\xE1s",
        "pero",
        "sus",
        "le",
        "ya",
        "o",
        "porque",
        "cuando",
        "muy",
        "sin",
        "sobre",
        "tambi\xE9n",
        "me",
        "hasta",
        "donde",
        "quien",
        "desde",
        "nos",
        "durante",
        "uno",
        "ni",
        "contra",
        "ese",
        "eso",
        "m\xED",
        "qu\xE9",
        "otro",
        "\xE9l",
        "cual",
        "poco",
        "mi",
        "t\xFA",
        "te",
        "ti",
        "s\xED"
      ];
      const swa = [
        "na",
        "ya",
        "wa",
        "kwa",
        "ni",
        "za",
        "katika",
        "la",
        "kuwa",
        "kama",
        "kwamba",
        "cha",
        "hiyo",
        "lakini",
        "yake",
        "hata",
        "wakati",
        "hivyo",
        "sasa",
        "wake",
        "au",
        "watu",
        "hii",
        "zaidi",
        "vya",
        "huo",
        "tu",
        "kwenye",
        "si",
        "pia",
        "ili",
        "moja",
        "kila",
        "baada",
        "ambao",
        "ambayo",
        "yao",
        "wao",
        "kuna",
        "hilo",
        "kutoka",
        "kubwa",
        "pamoja",
        "bila",
        "huu",
        "hayo",
        "sana",
        "ndani",
        "mkuu",
        "hizo",
        "kufanya",
        "wengi",
        "hadi",
        "mmoja",
        "hili",
        "juu",
        "kwanza",
        "wetu",
        "kuhusu",
        "baadhi",
        "wote",
        "yetu",
        "hivi",
        "kweli",
        "mara",
        "wengine",
        "nini",
        "ndiyo",
        "zao",
        "kati",
        "hao",
        "hapa",
        "kutokana",
        "muda",
        "habari",
        "ambaye",
        "wenye",
        "nyingine",
        "hakuna",
        "tena",
        "hatua",
        "bado",
        "nafasi",
        "basi",
        "kabisa",
        "hicho",
        "nje",
        "huyo",
        "vile",
        "yote",
        "mkubwa",
        "alikuwa",
        "zote",
        "leo",
        "haya",
        "huko",
        "kutoa",
        "mwa",
        "kiasi",
        "hasa",
        "nyingi",
        "kabla",
        "wale",
        "chini",
        "gani",
        "hapo",
        "lazima",
        "mwingine",
        "bali",
        "huku",
        "zake",
        "ilikuwa",
        "tofauti",
        "kupata",
        "mbalimbali",
        "pale",
        "kusema",
        "badala",
        "wazi",
        "yeye",
        "alisema",
        "hawa",
        "ndio",
        "hizi",
        "tayari",
        "wala",
        "muhimu",
        "ile",
        "mpya",
        "ambazo",
        "dhidi",
        "kwenda",
        "sisi",
        "kwani",
        "jinsi",
        "binafsi",
        "kutumia",
        "mbili",
        "mbali",
        "kuu",
        "mengine",
        "mbele",
        "namna",
        "mengi",
        "upande"
      ];
      const swe = [
        "jag",
        "det",
        "\xE4r",
        "du",
        "inte",
        "att",
        "en",
        "och",
        "har",
        "vi",
        "p\xE5",
        "i",
        "f\xF6r",
        "han",
        "vad",
        "med",
        "mig",
        "som",
        "h\xE4r",
        "om",
        "dig",
        "var",
        "den",
        "s\xE5",
        "till",
        "kan",
        "de",
        "ni",
        "ska",
        "ett",
        "men",
        "av",
        "vill",
        "nu",
        "ja",
        "nej",
        "bara",
        "hon",
        "hur",
        "min",
        "d\xE4r",
        "honom",
        "kom",
        "din",
        "d\xE5",
        "n\xE4r",
        "ha",
        "er",
        "ta",
        "ut",
        "f\xE5r",
        "man",
        "vara",
        "oss",
        "dem",
        "eller",
        "varf\xF6r",
        "alla",
        "fr\xE5n",
        "upp",
        "igen",
        "sa",
        "hade",
        "allt",
        "in",
        "sig",
        "ingen",
        "henne",
        "vem",
        "mitt",
        "n\xE5t",
        "blir",
        "\xE4n",
        "bli",
        "ju",
        "tv\xE5",
        "tar",
        "hans",
        "ditt",
        "mina",
        "\xE5t",
        "v\xE4l",
        "ocks\xE5",
        "n\xE5n",
        "l\xE5t",
        "detta",
        "va",
        "dina",
        "dom",
        "blev",
        "inga",
        "sin",
        "just",
        "m\xE5nga",
        "vart",
        "vilken",
        "ur",
        "ens",
        "sitt",
        "e",
        "jo",
        "era",
        "deras",
        "fem",
        "sex",
        "denna",
        "vilket",
        "fyra",
        "v\xE5rt",
        "emot",
        "tio",
        "ert",
        "sju",
        "\xE5tta",
        "n\xE5nting",
        "ned",
        "ers",
        "nio",
        "mej"
      ];
      const tha = [
        "\u0E01\u0E25\u0E48\u0E32\u0E27",
        "\u0E01\u0E27\u0E48\u0E32",
        "\u0E01\u0E31\u0E19",
        "\u0E01\u0E31\u0E1A",
        "\u0E01\u0E32\u0E23",
        "\u0E01\u0E47",
        "\u0E01\u0E48\u0E2D\u0E19",
        "\u0E02\u0E13\u0E30",
        "\u0E02\u0E2D",
        "\u0E02\u0E2D\u0E07",
        "\u0E02\u0E36\u0E49\u0E19",
        "\u0E04\u0E07",
        "\u0E04\u0E23\u0E31\u0E49\u0E07",
        "\u0E04\u0E27\u0E32\u0E21",
        "\u0E04\u0E37\u0E2D",
        "\u0E08\u0E30",
        "\u0E08\u0E31\u0E14",
        "\u0E08\u0E32\u0E01",
        "\u0E08\u0E36\u0E07",
        "\u0E0A\u0E48\u0E27\u0E07",
        "\u0E0B\u0E36\u0E48\u0E07",
        "\u0E14\u0E31\u0E07",
        "\u0E14\u0E49\u0E27\u0E22",
        "\u0E14\u0E49\u0E32\u0E19",
        "\u0E15\u0E31\u0E49\u0E07",
        "\u0E15\u0E31\u0E49\u0E07\u0E41\u0E15\u0E48",
        "\u0E15\u0E32\u0E21",
        "\u0E15\u0E48\u0E2D",
        "\u0E15\u0E48\u0E32\u0E07",
        "\u0E15\u0E48\u0E32\u0E07\u0E46",
        "\u0E15\u0E49\u0E2D\u0E07",
        "\u0E16\u0E36\u0E07",
        "\u0E16\u0E39\u0E01",
        "\u0E16\u0E49\u0E32",
        "\u0E17\u0E31\u0E49\u0E07",
        "\u0E17\u0E31\u0E49\u0E07\u0E19\u0E35\u0E49",
        "\u0E17\u0E32\u0E07",
        "\u0E17\u0E35\u0E48",
        "\u0E17\u0E35\u0E48\u0E2A\u0E38\u0E14",
        "\u0E17\u0E38\u0E01",
        "\u0E17\u0E4D\u0E32",
        "\u0E17\u0E4D\u0E32\u0E43\u0E2B\u0E49",
        "\u0E19\u0E2D\u0E01\u0E08\u0E32\u0E01",
        "\u0E19\u0E31\u0E01",
        "\u0E19\u0E31\u0E49\u0E19",
        "\u0E19\u0E35\u0E49",
        "\u0E19\u0E48\u0E32",
        "\u0E19\u0E4D\u0E32",
        "\u0E1A\u0E32\u0E07",
        "\u0E1C\u0E25",
        "\u0E1C\u0E48\u0E32\u0E19",
        "\u0E1E\u0E1A",
        "\u0E1E\u0E23\u0E49\u0E2D\u0E21",
        "\u0E21\u0E32",
        "\u0E21\u0E32\u0E01",
        "\u0E21\u0E35",
        "\u0E22\u0E31\u0E07",
        "\u0E23\u0E27\u0E21",
        "\u0E23\u0E30\u0E2B\u0E27\u0E48\u0E32\u0E07",
        "\u0E23\u0E31\u0E1A",
        "\u0E23\u0E32\u0E22",
        "\u0E23\u0E48\u0E27\u0E21",
        "\u0E25\u0E07",
        "\u0E27\u0E31\u0E19",
        "\u0E27\u0E48\u0E32",
        "\u0E2A\u0E38\u0E14",
        "\u0E2A\u0E48\u0E07",
        "\u0E2A\u0E48\u0E27\u0E19",
        "\u0E2A\u0E4D\u0E32\u0E2B\u0E23\u0E31\u0E1A",
        "\u0E2B\u0E19\u0E36\u0E48\u0E07",
        "\u0E2B\u0E23\u0E37\u0E2D",
        "\u0E2B\u0E25\u0E31\u0E07",
        "\u0E2B\u0E25\u0E31\u0E07\u0E08\u0E32\u0E01",
        "\u0E2B\u0E25\u0E32\u0E22",
        "\u0E2B\u0E32\u0E01",
        "\u0E2D\u0E22\u0E32\u0E01",
        "\u0E2D\u0E22\u0E39\u0E48",
        "\u0E2D\u0E22\u0E48\u0E32\u0E07",
        "\u0E2D\u0E2D\u0E01",
        "\u0E2D\u0E30\u0E44\u0E23",
        "\u0E2D\u0E32\u0E08",
        "\u0E2D\u0E35\u0E01",
        "\u0E40\u0E02\u0E32",
        "\u0E40\u0E02\u0E49\u0E32",
        "\u0E40\u0E04\u0E22",
        "\u0E40\u0E09\u0E1E\u0E32\u0E30",
        "\u0E40\u0E0A\u0E48\u0E19",
        "\u0E40\u0E14\u0E35\u0E22\u0E27",
        "\u0E40\u0E14\u0E35\u0E22\u0E27\u0E01\u0E31\u0E19",
        "\u0E40\u0E19\u0E37\u0E48\u0E2D\u0E07\u0E08\u0E32\u0E01",
        "\u0E40\u0E1B\u0E34\u0E14",
        "\u0E40\u0E1B\u0E34\u0E14\u0E40\u0E1C\u0E22",
        "\u0E40\u0E1B\u0E47\u0E19",
        "\u0E40\u0E1B\u0E47\u0E19\u0E01\u0E32\u0E23",
        "\u0E40\u0E1E\u0E23\u0E32\u0E30",
        "\u0E40\u0E1E\u0E37\u0E48\u0E2D",
        "\u0E40\u0E21\u0E37\u0E48\u0E2D",
        "\u0E40\u0E23\u0E32",
        "\u0E40\u0E23\u0E34\u0E48\u0E21",
        "\u0E40\u0E25\u0E22",
        "\u0E40\u0E2B\u0E47\u0E19",
        "\u0E40\u0E2D\u0E07",
        "\u0E41\u0E15\u0E48",
        "\u0E41\u0E1A\u0E1A",
        "\u0E41\u0E23\u0E01",
        "\u0E41\u0E25\u0E30",
        "\u0E41\u0E25\u0E49\u0E27",
        "\u0E41\u0E2B\u0E48\u0E07",
        "\u0E42\u0E14\u0E22",
        "\u0E43\u0E19",
        "\u0E43\u0E2B\u0E49",
        "\u0E44\u0E14\u0E49",
        "\u0E44\u0E1B",
        "\u0E44\u0E21\u0E48",
        "\u0E44\u0E27\u0E49"
      ];
      const tgl = [
        "akin",
        "aking",
        "ako",
        "alin",
        "am",
        "amin",
        "aming",
        "ang",
        "ano",
        "anumang",
        "apat",
        "at",
        "atin",
        "ating",
        "ay",
        "bababa",
        "bago",
        "bakit",
        "bawat",
        "bilang",
        "dahil",
        "dalawa",
        "dapat",
        "din",
        "dito",
        "doon",
        "gagawin",
        "gayunman",
        "ginagawa",
        "ginawa",
        "ginawang",
        "gumawa",
        "gusto",
        "habang",
        "hanggang",
        "hindi",
        "huwag",
        "iba",
        "ibaba",
        "ibabaw",
        "ibig",
        "ikaw",
        "ilagay",
        "ilalim",
        "ilan",
        "inyong",
        "isa",
        "isang",
        "itaas",
        "ito",
        "iyo",
        "iyon",
        "iyong",
        "ka",
        "kahit",
        "kailangan",
        "kailanman",
        "kami",
        "kanila",
        "kanilang",
        "kanino",
        "kanya",
        "kanyang",
        "kapag",
        "kapwa",
        "karamihan",
        "katiyakan",
        "katulad",
        "kaya",
        "kaysa",
        "ko",
        "kong",
        "kulang",
        "kumuha",
        "kung",
        "laban",
        "lahat",
        "lamang",
        "likod",
        "lima",
        "maaari",
        "maaaring",
        "maging",
        "mahusay",
        "makita",
        "marami",
        "marapat",
        "masyado",
        "may",
        "mayroon",
        "mga",
        "minsan",
        "mismo",
        "mula",
        "muli",
        "na",
        "nabanggit",
        "naging",
        "nagkaroon",
        "nais",
        "nakita",
        "namin",
        "napaka",
        "narito",
        "nasaan",
        "ng",
        "ngayon",
        "ni",
        "nila",
        "nilang",
        "nito",
        "niya",
        "niyang",
        "noon",
        "o",
        "pa",
        "paano",
        "pababa",
        "paggawa",
        "pagitan",
        "pagkakaroon",
        "pagkatapos",
        "palabas",
        "pamamagitan",
        "panahon",
        "pangalawa",
        "para",
        "paraan",
        "pareho",
        "pataas",
        "pero",
        "pumunta",
        "pumupunta",
        "sa",
        "saan",
        "sabi",
        "sabihin",
        "sarili",
        "sila",
        "sino",
        "siya",
        "tatlo",
        "tayo",
        "tulad",
        "tungkol",
        "una",
        "walang"
      ];
      const tur = [
        "acaba",
        "acep",
        "adeta",
        "altm\u0131\u015F",
        "altm\u0131\u015F",
        "alt\u0131",
        "alt\u0131",
        "ama",
        "ancak",
        "arada",
        "art\u0131k",
        "asl\u0131nda",
        "aynen",
        "ayr\u0131ca",
        "az",
        "bana",
        "bari",
        "bazen",
        "baz\u0131",
        "baz\u0131",
        "ba\u015Fka",
        "belki",
        "ben",
        "benden",
        "beni",
        "benim",
        "beri",
        "be\u015F",
        "be\u015F",
        "be\u015F",
        "bile",
        "bin",
        "bir",
        "biraz",
        "biri",
        "birka\xE7",
        "birkez",
        "bir\xE7ok",
        "bir\u015Fey",
        "bir\u015Feyi",
        "bir\u015Fey",
        "bir\u015Feyi",
        "bir\u015Fey",
        "biz",
        "bizden",
        "bize",
        "bizi",
        "bizim",
        "bu",
        "buna",
        "bunda",
        "bundan",
        "bunlar",
        "bunlar\u0131",
        "bunlar\u0131n",
        "bunu",
        "bunun",
        "burada",
        "b\xF6yle",
        "b\xF6ylece",
        "b\xFCt\xFCn",
        "da",
        "daha",
        "dahi",
        "dahil",
        "daima",
        "dair",
        "dayanarak",
        "de",
        "defa",
        "de\u0111il",
        "de\u011Fil",
        "diye",
        "di\u0111er",
        "di\u011Fer",
        "doksan",
        "dokuz",
        "dolay\u0131",
        "dolay\u0131s\u0131yla",
        "d\xF6rt",
        "edecek",
        "eden",
        "ederek",
        "edilecek",
        "ediliyor",
        "edilmesi",
        "ediyor",
        "elli",
        "en",
        "etmesi",
        "etti",
        "etti\u011Fi",
        "etti\u011Fini",
        "e\u0111er",
        "e\u011Fer",
        "fakat",
        "gibi",
        "g\xF6re",
        "halbuki",
        "halen",
        "hangi",
        "hani",
        "hari\xE7",
        "hatta",
        "hele",
        "hem",
        "hen\xFCz",
        "hep",
        "hepsi",
        "her",
        "herhangi",
        "herkes",
        "herkesin",
        "hi\xE7",
        "hi\xE7bir",
        "iken",
        "iki",
        "ila",
        "ile",
        "ilgili",
        "ilk",
        "illa",
        "ise",
        "itibaren",
        "itibariyle",
        "iyi",
        "iyice",
        "i\xE7in",
        "i\u015Fte",
        "i\u015Fte",
        "kadar",
        "kan\u0131mca",
        "kar\u015F\u0131n",
        "katrilyon",
        "kendi",
        "kendilerine",
        "kendini",
        "kendisi",
        "kendisine",
        "kendisini",
        "kere",
        "kez",
        "ke\u015Fke",
        "ki",
        "kim",
        "kimden",
        "kime",
        "kimi",
        "kimse",
        "k\u0131rk",
        "k\u0131saca",
        "k\u0131rk",
        "lakin",
        "madem",
        "me\u0111er",
        "milyar",
        "milyon",
        "mu",
        "m\xFC",
        "m\u0131",
        "m\u0131",
        "nas\u0131l",
        "nas\u0131l",
        "ne",
        "neden",
        "nedenle",
        "nerde",
        "nere",
        "nerede",
        "nereye",
        "nitekim",
        "niye",
        "ni\xE7in",
        "o",
        "olan",
        "olarak",
        "oldu",
        "olduklar\u0131n\u0131",
        "oldu\u011Fu",
        "oldu\u011Funu",
        "olmad\u0131",
        "olmad\u0131\u011F\u0131",
        "olmak",
        "olmas\u0131",
        "olmayan",
        "olmaz",
        "olsa",
        "olsun",
        "olup",
        "olur",
        "olursa",
        "oluyor",
        "on",
        "ona",
        "ondan",
        "onlar",
        "onlardan",
        "onlari",
        "onlar\u0131n",
        "onlar\u0131",
        "onlar\u0131n",
        "onu",
        "onun",
        "otuz",
        "oysa",
        "pek",
        "ra\u011Fmen",
        "sadece",
        "sanki",
        "sekiz",
        "seksen",
        "sen",
        "senden",
        "seni",
        "senin",
        "siz",
        "sizden",
        "sizi",
        "sizin",
        "sonra",
        "taraf\u0131ndan",
        "trilyon",
        "t\xFCm",
        "var",
        "vard\u0131",
        "ve",
        "veya",
        "veyahut",
        "ya",
        "yahut",
        "yani",
        "yapacak",
        "yapmak",
        "yapt\u0131",
        "yapt\u0131klar\u0131",
        "yapt\u0131\u011F\u0131",
        "yapt\u0131\u011F\u0131n\u0131",
        "yap\u0131lan",
        "yap\u0131lmas\u0131",
        "yap\u0131yor",
        "yedi",
        "yerine",
        "yetmi\u015F",
        "yetmi\u015F",
        "yetmi\u015F",
        "yine",
        "yirmi",
        "yoksa",
        "y\xFCz",
        "zaten",
        "\xE7ok",
        "\xE7\xFCnk\xFC",
        "\xF6yle",
        "\xFCzere",
        "\xFC\xE7",
        "\u015Fey",
        "\u015Feyden",
        "\u015Feyi",
        "\u015Feyler",
        "\u015Fu",
        "\u015Funa",
        "\u015Funda",
        "\u015Fundan",
        "\u015Funu",
        "\u015Fey",
        "\u015Feyden",
        "\u015Feyi",
        "\u015Feyler",
        "\u015Fu",
        "\u015Funa",
        "\u015Funda",
        "\u015Fundan",
        "\u015Funlar\u0131",
        "\u015Funu",
        "\u015F\xF6yle",
        "\u015Fayet",
        "\u015Fimdi",
        "\u015Fu",
        "\u015F\xF6yle"
      ];
      const ukr = [
        "\u0430\u0432\u0436\u0435\u0436",
        "\u0430\u0434\u0436\u0435",
        "\u0430\u043B\u0435",
        "\u0431",
        "\u0431\u0435\u0437",
        "\u0431\u0443\u0432",
        "\u0431\u0443\u043B\u0430",
        "\u0431\u0443\u043B\u0438",
        "\u0431\u0443\u043B\u043E",
        "\u0431\u0443\u0442\u0438",
        "\u0431\u0456\u043B\u044C\u0448",
        "\u0432\u0430\u043C",
        "\u0432\u0430\u0441",
        "\u0432\u0435\u0441\u044C",
        "\u0432\u0437\u0434\u043E\u0432\u0436",
        "\u0432\u0438",
        "\u0432\u043D\u0438\u0437",
        "\u0432\u043D\u0438\u0437\u0443",
        "\u0432\u043E\u043D\u0430",
        "\u0432\u043E\u043D\u0438",
        "\u0432\u043E\u043D\u043E",
        "\u0432\u0441\u0435",
        "\u0432\u0441\u0435\u0440\u0435\u0434\u0438\u043D\u0456",
        "\u0432\u0441\u0456\u0445",
        "\u0432\u0456\u0434",
        "\u0432\u0456\u043D",
        "\u0434\u0430",
        "\u0434\u0430\u0432\u0430\u0439",
        "\u0434\u0430\u0432\u0430\u0442\u0438",
        "\u0434\u0435",
        "\u0434\u0435\u0449\u043E",
        "\u0434\u043B\u044F",
        "\u0434\u043E",
        "\u0437",
        "\u0437\u0430\u0432\u0436\u0434\u0438",
        "\u0437\u0430\u043C\u0456\u0441\u0442\u044C",
        "\u0439",
        "\u043A\u043E\u043B\u0438",
        "\u043B\u0435\u0434\u0432\u0435",
        "\u043C\u0430\u0439\u0436\u0435",
        "\u043C\u0438",
        "\u043D\u0430\u0432\u043A\u043E\u043B\u043E",
        "\u043D\u0430\u0432\u0456\u0442\u044C",
        "\u043D\u0430\u043C",
        "\u043E\u0442",
        "\u043E\u0442\u0436\u0435",
        "\u043E\u0442\u043E\u0436",
        "\u043F\u043E\u0437\u0430",
        "\u043F\u0440\u043E",
        "\u043F\u0456\u0434",
        "\u0442\u0430",
        "\u0442\u0430\u043A",
        "\u0442\u0430\u043A\u0438\u0439",
        "\u0442\u0430\u043A\u043E\u0436",
        "\u0442\u0435",
        "\u0442\u0438",
        "\u0442\u043E\u0431\u0442\u043E",
        "\u0442\u043E\u0436",
        "\u0442\u043E\u0449\u043E",
        "\u0445\u043E\u0447\u0430",
        "\u0446\u0435",
        "\u0446\u0435\u0439",
        "\u0447\u0438",
        "\u0447\u043E\u0433\u043E",
        "\u0449\u043E",
        "\u044F\u043A",
        "\u044F\u043A\u0438\u0439",
        "\u044F\u043A\u043E\u0457",
        "\u0454",
        "\u0456\u0437",
        "\u0456\u043D\u0448\u0438\u0445",
        "\u0457\u0445",
        "\u0457\u0457"
      ];
      const urd = [
        "\u0622\u0626\u06CC",
        "\u0622\u0626\u06D2",
        "\u0622\u062C",
        "\u0622\u062E\u0631",
        "\u0622\u062E\u0631\u06A9\u0628\u0631",
        "\u0622\u062F\u0647\u06CC",
        "\u0622\u064B\u0628",
        "\u0622\u0679\u06BE",
        "\u0622\u06CC\u0628",
        "\u0627\u0629",
        "\u0627\u062E\u0628\u0632\u062A",
        "\u0627\u062E\u062A\u062A\u0628\u0645",
        "\u0627\u062F\u06BE\u0631",
        "\u0627\u0631\u062F",
        "\u0627\u0631\u062F\u06AF\u0631\u062F",
        "\u0627\u0631\u06A9\u0628\u0649",
        "\u0627\u0634",
        "\u0627\u0636\u062A\u0639\u0648\u0628\u0644",
        "\u0627\u0636\u062A\u0639\u0648\u0628\u0644\u0627\u062A",
        "\u0627\u0636\u0637\u0631\u0630",
        "\u0627\u0636\u06A9\u0628",
        "\u0627\u0636\u06A9\u06CC",
        "\u0627\u0636\u06A9\u06D2",
        "\u0627\u0637\u0631\u0627\u0641",
        "\u0627\u063A\u06CC\u0628",
        "\u0627\u0641\u0631\u0627\u062F",
        "\u0627\u0644\u06AF",
        "\u0627\u0648\u0631",
        "\u0627\u0648\u064B\u0686\u0628",
        "\u0627\u0648\u064B\u0686\u0628\u0626\u06CC",
        "\u0627\u0648\u064B\u0686\u06CC",
        "\u0627\u0648\u064B\u0686\u06D2",
        "\u0627\u0649",
        "\u0627\u064B",
        "\u0627\u064B\u0630\u0631",
        "\u0627\u064B\u06C1\u06CC\u06BA",
        "\u0627\u0679\u06BE\u0628\u064B\u0628",
        "\u0627\u067E\u064C\u0628",
        "\u0627\u067E\u064C\u06D2",
        "\u0627\u0686\u06BE\u0628",
        "\u0627\u0686\u06BE\u06CC",
        "\u0627\u0686\u06BE\u06D2",
        "\u0627\u06A9\u062B\u0631",
        "\u0627\u06A9\u0679\u06BE\u0628",
        "\u0627\u06A9\u0679\u06BE\u06CC",
        "\u0627\u06A9\u0679\u06BE\u06D2",
        "\u0627\u06A9\u06CC\u0644\u0627",
        "\u0627\u06A9\u06CC\u0644\u06CC",
        "\u0627\u06A9\u06CC\u0644\u06D2",
        "\u0627\u06AF\u0631\u0686\u06C1",
        "\u0627\u06C1\u0646",
        "\u0627\u06CC\u0637\u06D2",
        "\u0627\u06CC\u06A9",
        "\u0628",
        "\u062A",
        "\u062A\u0628\u0632\u064D",
        "\u062A\u062A",
        "\u062A\u0631",
        "\u062A\u0631\u062A\u06CC\u062A",
        "\u062A\u0631\u06CC\u064A",
        "\u062A\u0639\u0630\u0627\u062F",
        "\u062A\u0646",
        "\u062A\u0648",
        "\u062A\u0648\u0628\u0645",
        "\u062A\u0648\u06C1\u06CC",
        "\u062A\u0648\u06C1\u06CC\u06BA",
        "\u062A\u064C\u06C1\u0628",
        "\u062A\u06A9",
        "\u062A\u06BE\u0628",
        "\u062A\u06BE\u0648\u0691\u0627",
        "\u062A\u06BE\u0648\u0691\u06CC",
        "\u062A\u06BE\u0648\u0691\u06D2",
        "\u062A\u06BE\u06CC",
        "\u062A\u06BE\u06D2",
        "\u062A\u06CC\u064A",
        "\u062B\u0628",
        "\u062B\u0628\u0626\u06CC\u06BA",
        "\u062B\u0628\u062A\u0631\u062A\u06CC\u062A",
        "\u062B\u0628\u0631\u06CC",
        "\u062B\u0628\u0631\u06D2",
        "\u062B\u0628\u0639\u062B",
        "\u062B\u0628\u0644\u0627",
        "\u062B\u0628\u0644\u062A\u0631\u062A\u06CC\u062A",
        "\u062B\u0628\u06C1\u0631",
        "\u062B\u062F\u0628\u0626\u06D2",
        "\u062B\u0631\u0622\u06BA",
        "\u062B\u0631\u0627\u06BA",
        "\u062B\u0631\u0634",
        "\u062B\u0639\u0630",
        "\u062B\u063A\u06CC\u0631",
        "\u062B\u0644\u064C\u0630",
        "\u062B\u0644\u064C\u0630\u0648\u062B\u0628\u0644\u0627",
        "\u062B\u0644\u06A9\u06C1",
        "\u062B\u064A",
        "\u062B\u064C\u0628",
        "\u062B\u064C\u0628\u0631\u06C1\u0628",
        "\u062B\u064C\u0628\u0631\u06C1\u06CC",
        "\u062B\u064C\u0628\u0631\u06C1\u06D2",
        "\u062B\u064C\u0628\u064B\u0628",
        "\u062B\u064C\u0630",
        "\u062B\u064C\u0630\u06A9\u0631\u0648",
        "\u062B\u064C\u0630\u06A9\u0631\u064B\u0628",
        "\u062B\u064C\u0630\u06CC",
        "\u062B\u0691\u0627",
        "\u062B\u0691\u0648\u06BA",
        "\u062B\u0691\u06CC",
        "\u062B\u0691\u06D2",
        "\u062B\u06BE\u0631",
        "\u062B\u06BE\u0631\u0627",
        "\u062B\u06BE\u0631\u0627\u06C1\u0648\u0627",
        "\u062B\u06BE\u0631\u067E\u0648\u0631",
        "\u062B\u06BE\u06CC",
        "\u062B\u06C1\u062A",
        "\u062B\u06C1\u062A\u0631",
        "\u062B\u06C1\u062A\u0631\u06CC",
        "\u062B\u06C1\u062A\u0631\u06CC\u064A",
        "\u062B\u06CC\u0686",
        "\u062C",
        "\u062E\u0628",
        "\u062E\u0628\u0631\u06C1\u0628",
        "\u062E\u0628\u0631\u06C1\u06CC",
        "\u062E\u0628\u0631\u06C1\u06D2",
        "\u062E\u0628\u0647\u0648\u0638",
        "\u062E\u0628\u064B\u0628",
        "\u062E\u0628\u064B\u062A\u0628",
        "\u062E\u0628\u064B\u062A\u06CC",
        "\u062E\u0628\u064B\u062A\u06D2",
        "\u062E\u0628\u064B\u064C\u0628",
        "\u062E\u062A",
        "\u062E\u062A\u0646",
        "\u062E\u062C\u06A9\u06C1",
        "\u062E\u0635",
        "\u062E\u0637\u0637\u0631\u0630",
        "\u062E\u0644\u0630\u06CC",
        "\u062E\u0648",
        "\u062E\u0648\u0627\u0649",
        "\u062E\u0648\u064B\u06C1\u06CC",
        "\u062E\u0648\u06A9\u06C1",
        "\u062E\u064C\u0628\u0629",
        "\u062E\u06AF\u06C1",
        "\u062E\u06AF\u06C1\u0648\u06BA",
        "\u062E\u06AF\u06C1\u06CC\u06BA",
        "\u062E\u06CC\u0637\u0628",
        "\u062E\u06CC\u0637\u0628\u06A9\u06C1",
        "\u062F\u0631",
        "\u062F\u0631\u062E\u0628\u062A",
        "\u062F\u0631\u062E\u06C1",
        "\u062F\u0631\u062E\u06D2",
        "\u062F\u0631\u0632\u0642\u06CC\u0642\u062A",
        "\u062F\u0631\u0636\u062A",
        "\u062F\u0634",
        "\u062F\u0641\u0639\u06C1",
        "\u062F\u0644\u0686\u0637\u067E",
        "\u062F\u0644\u0686\u0637\u067E\u06CC",
        "\u062F\u0644\u0686\u0637\u067E\u06CC\u0628\u06BA",
        "\u062F\u0648",
        "\u062F\u0648\u0631",
        "\u062F\u0648\u0631\u0627\u0649",
        "\u062F\u0648\u0636\u0631\u0627",
        "\u062F\u0648\u0636\u0631\u0648\u06BA",
        "\u062F\u0648\u0636\u0631\u06CC",
        "\u062F\u0648\u0636\u0631\u06D2",
        "\u062F\u0648\u064B\u0648\u06BA",
        "\u062F\u06A9\u06BE\u0628\u0626\u06CC\u06BA",
        "\u062F\u06A9\u06BE\u0628\u062A\u0628",
        "\u062F\u06A9\u06BE\u0628\u062A\u06CC",
        "\u062F\u06A9\u06BE\u0628\u062A\u06D2",
        "\u062F\u06A9\u06BE\u0628\u0648",
        "\u062F\u06A9\u06BE\u0628\u064B\u0628",
        "\u062F\u06A9\u06BE\u0628\u06CC\u0628",
        "\u062F\u06CC",
        "\u062F\u06CC\u0628",
        "\u062F\u06CC\u062A\u0628",
        "\u062F\u06CC\u062A\u06CC",
        "\u062F\u06CC\u062A\u06D2",
        "\u062F\u06CC\u0631",
        "\u062F\u06CC\u064C\u0628",
        "\u062F\u06CC\u06A9\u06BE\u0648",
        "\u062F\u06CC\u06A9\u06BE\u064C\u0628",
        "\u062F\u06CC\u06A9\u06BE\u06CC",
        "\u062F\u06CC\u06A9\u06BE\u06CC\u06BA",
        "\u062F\u06D2",
        "\u0631",
        "\u0631\u0627\u0636\u062A\u0648\u06BA",
        "\u0631\u0627\u0636\u062A\u06C1",
        "\u0631\u0627\u0636\u062A\u06D2",
        "\u0631\u0631\u06CC\u0639\u06C1",
        "\u0631\u0631\u06CC\u0639\u06D2",
        "\u0631\u06A9\u064A",
        "\u0631\u06A9\u06BE",
        "\u0631\u06A9\u06BE\u0628",
        "\u0631\u06A9\u06BE\u062A\u0628",
        "\u0631\u06A9\u06BE\u062A\u0628\u06C1\u0648\u06BA",
        "\u0631\u06A9\u06BE\u062A\u06CC",
        "\u0631\u06A9\u06BE\u062A\u06D2",
        "\u0631\u06A9\u06BE\u06CC",
        "\u0631\u06A9\u06BE\u06D2",
        "\u0631\u06C1\u0628",
        "\u0631\u06C1\u06CC",
        "\u0631\u06C1\u06D2",
        "\u0632",
        "\u0632\u0628\u0635\u0644",
        "\u0632\u0628\u0636\u0631",
        "\u0632\u0628\u0644",
        "\u0632\u0628\u0644\u0627\u062A",
        "\u0632\u0628\u0644\u06CC\u06C1",
        "\u0632\u0635\u0648\u06BA",
        "\u0632\u0635\u06C1",
        "\u0632\u0635\u06D2",
        "\u0632\u0642\u0628\u0626\u0642",
        "\u0632\u0642\u06CC\u062A\u06CC\u06BA",
        "\u0632\u0642\u06CC\u0642\u062A",
        "\u0632\u06A9\u0646",
        "\u0632\u06A9\u0648\u06CC\u06C1",
        "\u0632\u06CC\u0628\u062F\u064D",
        "\u0635\u0628\u0641",
        "\u0635\u0633\u06CC\u0631",
        "\u0635\u0641\u0631",
        "\u0635\u0648\u0631\u062A",
        "\u0635\u0648\u0631\u062A\u0633\u0628\u0644",
        "\u0635\u0648\u0631\u062A\u0648\u06BA",
        "\u0635\u0648\u0631\u062A\u06CC\u06BA",
        "\u0636",
        "\u0636\u0628\u062A",
        "\u0636\u0628\u062A\u06BE",
        "\u0636\u0628\u062F\u064D",
        "\u0636\u0628\u0631\u0627",
        "\u0636\u0628\u0631\u06D2",
        "\u0636\u0628\u0644",
        "\u0636\u0628\u0644\u0648\u06BA",
        "\u0636\u062A",
        "\u0636\u0631\u0648\u0631",
        "\u0636\u0631\u0648\u0631\u062A",
        "\u0636\u0631\u0648\u0631\u06CC",
        "\u0636\u0644\u0637\u0644\u06C1",
        "\u0636\u0648\u0686",
        "\u0636\u0648\u0686\u0628",
        "\u0636\u0648\u0686\u062A\u0628",
        "\u0636\u0648\u0686\u062A\u06CC",
        "\u0636\u0648\u0686\u062A\u06D2",
        "\u0636\u0648\u0686\u0648",
        "\u0636\u0648\u0686\u064C\u0628",
        "\u0636\u0648\u0686\u06CC",
        "\u0636\u0648\u0686\u06CC\u06BA",
        "\u0636\u06A9\u0628",
        "\u0636\u06A9\u062A\u0628",
        "\u0636\u06A9\u062A\u06CC",
        "\u0636\u06A9\u062A\u06D2",
        "\u0636\u06A9\u064C\u0628",
        "\u0636\u06A9\u06CC",
        "\u0636\u06A9\u06D2",
        "\u0636\u06CC\u0630\u06BE\u0628",
        "\u0636\u06CC\u0630\u06BE\u06CC",
        "\u0636\u06CC\u0630\u06BE\u06D2",
        "\u0636\u06CC\u06A9\u064C\u0688",
        "\u0636\u06D2",
        "\u0637\u0631\u0641",
        "\u0637\u0631\u06CC\u0642",
        "\u0637\u0631\u06CC\u0642\u0648\u06BA",
        "\u0637\u0631\u06CC\u0642\u06C1",
        "\u0637\u0631\u06CC\u0642\u06D2",
        "\u0637\u0648\u0631",
        "\u0637\u0648\u0631\u067E\u0631",
        "\u0638\u0628\u06C1\u0631",
        "\u0639",
        "\u0639\u0630\u062F",
        "\u0639\u0638\u06CC\u0646",
        "\u0639\u0644\u0627\u0642\u0648\u06BA",
        "\u0639\u0644\u0627\u0642\u06C1",
        "\u0639\u0644\u0627\u0642\u06D2",
        "\u0639\u0644\u0627\u0648\u064D",
        "\u0639\u0648\u0648\u0647\u06CC",
        "\u063A\u0628\u06CC\u0630",
        "\u063A\u062E\u0635",
        "\u063A\u0630",
        "\u063A\u0631\u0648\u0639",
        "\u063A\u0631\u0648\u0639\u0628\u062A",
        "\u063A\u06D2",
        "\u0641\u0631\u062F",
        "\u0641\u06CC",
        "\u0642",
        "\u0642\u062C\u0644",
        "\u0642\u062C\u06CC\u0644\u06C1",
        "\u0642\u0637\u0646",
        "\u0644\u0626\u06D2",
        "\u0644\u0627",
        "\u0644\u0627\u0632\u0647\u06CC",
        "\u0644\u0648",
        "\u0644\u0648\u062C\u0628",
        "\u0644\u0648\u062C\u06CC",
        "\u0644\u0648\u062C\u06D2",
        "\u0644\u0648\u0633\u0628\u062A",
        "\u0644\u0648\u0633\u06C1",
        "\u0644\u0648\u06AF",
        "\u0644\u0648\u06AF\u0648\u06BA",
        "\u0644\u0691\u06A9\u067E\u064A",
        "\u0644\u06AF\u062A\u0628",
        "\u0644\u06AF\u062A\u06CC",
        "\u0644\u06AF\u062A\u06D2",
        "\u0644\u06AF\u064C\u0628",
        "\u0644\u06AF\u06CC",
        "\u0644\u06AF\u06CC\u06BA",
        "\u0644\u06AF\u06D2",
        "\u0644\u06CC",
        "\u0644\u06CC\u0628",
        "\u0644\u06CC\u064C\u0628",
        "\u0644\u06CC\u06BA",
        "\u0644\u06D2",
        "\u0647",
        "\u0647\u062A\u0639\u0644\u0642",
        "\u0647\u062E\u062A\u0644\u0641",
        "\u0647\u0633\u062A\u0631\u0645",
        "\u0647\u0633\u062A\u0631\u0647\u06C1",
        "\u0647\u0633\u0637\u0648\u0634",
        "\u0647\u0633\u06CC\u0630",
        "\u0647\u0637\u0626\u0644\u06C1",
        "\u0647\u0637\u0626\u0644\u06D2",
        "\u0647\u0637\u0628\u0626\u0644",
        "\u0647\u0637\u062A\u0639\u0648\u0644",
        "\u0647\u0637\u0644\u0642",
        "\u0647\u0639\u0644\u0648\u0645",
        "\u0647\u063B\u062A\u0648\u0644",
        "\u0647\u0644\u0627",
        "\u0647\u0648\u06A9\u064A",
        "\u0647\u0648\u06A9\u064C\u0628\u062A",
        "\u0647\u0648\u06A9\u064C\u06C1",
        "\u0647\u064C\u0628\u0636\u062A",
        "\u0647\u0691\u0627",
        "\u0647\u0691\u064B\u0628",
        "\u0647\u0691\u06D2",
        "\u0647\u06A9\u0648\u0644",
        "\u0647\u06AF\u0631",
        "\u0647\u06C1\u0631\u062B\u0628\u0649",
        "\u0647\u06CC\u0631\u0627",
        "\u0647\u06CC\u0631\u06CC",
        "\u0647\u06CC\u0631\u06D2",
        "\u0647\u06CC\u06BA",
        "\u0648",
        "\u0648\u0627\u0631",
        "\u0648\u0627\u0644\u06D2",
        "\u0648\u064D",
        "\u064B\u0626\u06CC",
        "\u064B\u0626\u06D2",
        "\u064B\u0628",
        "\u064B\u0628\u067E\u0637\u064C\u0630",
        "\u064B\u0628\u06AF\u0633\u06CC\u0631",
        "\u064B\u0637\u062C\u062A",
        "\u064B\u0642\u0637\u06C1",
        "\u064B\u0648",
        "\u064B\u0648\u062E\u0648\u0627\u0649",
        "\u064B\u06A9\u0628\u0644\u064C\u0628",
        "\u064B\u06A9\u062A\u06C1",
        "\u064B\u06C1",
        "\u064B\u06C1\u06CC\u06BA",
        "\u064B\u06CC\u0628",
        "\u064B\u06D2",
        "\u0653 \u0622\u0634",
        "\u0679\u06BE\u06CC\u06A9",
        "\u067E\u0628\u0626\u06D2",
        "\u067E\u0628\u0634",
        "\u067E\u0628\u064B\u0628",
        "\u067E\u0628\u064B\u0686",
        "\u067E\u0631",
        "\u067E\u0631\u0627\u064B\u0628",
        "\u067E\u0637\u064C\u0630",
        "\u067E\u0644",
        "\u067E\u0648\u0631\u0627",
        "\u067E\u0648\u0686\u06BE\u0628",
        "\u067E\u0648\u0686\u06BE\u062A\u0628",
        "\u067E\u0648\u0686\u06BE\u062A\u06CC",
        "\u067E\u0648\u0686\u06BE\u062A\u06D2",
        "\u067E\u0648\u0686\u06BE\u0648",
        "\u067E\u0648\u0686\u06BE\u0648\u06BA",
        "\u067E\u0648\u0686\u06BE\u064C\u0628",
        "\u067E\u0648\u0686\u06BE\u06CC\u06BA",
        "\u067E\u0686\u06BE\u0644\u0627",
        "\u067E\u06BE\u0631",
        "\u067E\u06C1\u0644\u0627",
        "\u067E\u06C1\u0644\u06CC",
        "\u067E\u06C1\u0644\u06D2\u0636\u06CC",
        "\u067E\u06C1\u0644\u06D2\u0636\u06D2",
        "\u067E\u06C1\u0644\u06D2\u0636\u06D2\u06C1\u06CC",
        "\u067E\u06CC\u0639",
        "\u0686\u0628\u0631",
        "\u0686\u0628\u06C1\u0628",
        "\u0686\u0628\u06C1\u064C\u0628",
        "\u0686\u0628\u06C1\u06D2",
        "\u0686\u0644\u0627",
        "\u0686\u0644\u0648",
        "\u0686\u0644\u06CC\u06BA",
        "\u0686\u0644\u06D2",
        "\u0686\u06A9\u0628",
        "\u0686\u06A9\u06CC",
        "\u0686\u06A9\u06CC\u06BA",
        "\u0686\u06A9\u06D2",
        "\u0686\u06BE\u0648\u0679\u0628",
        "\u0686\u06BE\u0648\u0679\u0648\u06BA",
        "\u0686\u06BE\u0648\u0679\u06CC",
        "\u0686\u06BE\u0648\u0679\u06D2",
        "\u0686\u06BE\u06C1",
        "\u0686\u06CC\u0633\u06CC\u06BA",
        "\u0688\u06BE\u0648\u064B\u0688\u0627",
        "\u0688\u06BE\u0648\u064B\u0688\u0644\u06CC\u0628",
        "\u0688\u06BE\u0648\u064B\u0688\u0648",
        "\u0688\u06BE\u0648\u064B\u0688\u064B\u0628",
        "\u0688\u06BE\u0648\u064B\u0688\u06CC",
        "\u0688\u06BE\u0648\u064B\u0688\u06CC\u06BA",
        "\u06A9",
        "\u06A9\u0626\u06CC",
        "\u06A9\u0626\u06D2",
        "\u06A9\u0628",
        "\u06A9\u0628\u0641\u06CC",
        "\u06A9\u0628\u0645",
        "\u06A9\u062A",
        "\u06A9\u062C\u06BE\u06CC",
        "\u06A9\u0631\u0627",
        "\u06A9\u0631\u062A\u0628",
        "\u06A9\u0631\u062A\u0628\u06C1\u0648\u06BA",
        "\u06A9\u0631\u062A\u06CC",
        "\u06A9\u0631\u062A\u06D2",
        "\u06A9\u0631\u062A\u06D2\u06C1\u0648",
        "\u06A9\u0631\u0631\u06C1\u0628",
        "\u06A9\u0631\u0631\u06C1\u06CC",
        "\u06A9\u0631\u0631\u06C1\u06D2",
        "\u06A9\u0631\u0648",
        "\u06A9\u0631\u064B\u0628",
        "\u06A9\u0631\u06CC\u06BA",
        "\u06A9\u0631\u06D2",
        "\u06A9\u0637\u06CC",
        "\u06A9\u0644",
        "\u06A9\u0646",
        "\u06A9\u0648\u0626\u06CC",
        "\u06A9\u0648\u062A\u0631",
        "\u06A9\u0648\u0631\u0627",
        "\u06A9\u0648\u0631\u0648\u06BA",
        "\u06A9\u0648\u0631\u064D",
        "\u06A9\u0648\u0631\u06D2",
        "\u06A9\u0648\u0637\u064A",
        "\u06A9\u0648\u0649",
        "\u06A9\u0648\u064B\u0637\u0628",
        "\u06A9\u0648\u064B\u0637\u06CC",
        "\u06A9\u0648\u064B\u0637\u06D2",
        "\u06A9\u06BE\u0648\u0644\u0627",
        "\u06A9\u06BE\u0648\u0644\u0648",
        "\u06A9\u06BE\u0648\u0644\u064C\u0628",
        "\u06A9\u06BE\u0648\u0644\u06CC",
        "\u06A9\u06BE\u0648\u0644\u06CC\u06BA",
        "\u06A9\u06BE\u0648\u0644\u06D2",
        "\u06A9\u06C1",
        "\u06A9\u06C1\u0628",
        "\u06A9\u06C1\u062A\u0628",
        "\u06A9\u06C1\u062A\u06CC",
        "\u06A9\u06C1\u062A\u06D2",
        "\u06A9\u06C1\u0648",
        "\u06A9\u06C1\u0648\u06BA",
        "\u06A9\u06C1\u064C\u0628",
        "\u06A9\u06C1\u06CC",
        "\u06A9\u06C1\u06CC\u06BA",
        "\u06A9\u06C1\u06D2",
        "\u06A9\u06CC",
        "\u06A9\u06CC\u0628",
        "\u06A9\u06CC\u0637\u0628",
        "\u06A9\u06CC\u0637\u0631\u0641",
        "\u06A9\u06CC\u0637\u06D2",
        "\u06A9\u06CC\u0644\u0626\u06D2",
        "\u06A9\u06CC\u0648\u064B\u06A9\u06C1",
        "\u06A9\u06CC\u0648\u06BA",
        "\u06A9\u06CC\u06D2",
        "\u06A9\u06D2",
        "\u06A9\u06D2\u062B\u0639\u0630",
        "\u06A9\u06D2\u0631\u0631\u06CC\u0639\u06D2",
        "\u06AF\u0626\u06CC",
        "\u06AF\u0626\u06D2",
        "\u06AF\u0628",
        "\u06AF\u0631\u062F",
        "\u06AF\u0631\u0648\u064D",
        "\u06AF\u0631\u0648\u067E",
        "\u06AF\u0631\u0648\u06C1\u0648\u06BA",
        "\u06AF\u064C\u062A\u06CC",
        "\u06AF\u06CC",
        "\u06AF\u06CC\u0628",
        "\u06AF\u06D2",
        "\u06C1\u0631",
        "\u06C1\u0646",
        "\u06C1\u0648",
        "\u06C1\u0648\u0626\u06CC",
        "\u06C1\u0648\u0626\u06D2",
        "\u06C1\u0648\u0627",
        "\u06C1\u0648\u0628\u0631\u0627",
        "\u06C1\u0648\u0628\u0631\u06CC",
        "\u06C1\u0648\u0628\u0631\u06D2",
        "\u06C1\u0648\u062A\u0628",
        "\u06C1\u0648\u062A\u06CC",
        "\u06C1\u0648\u062A\u06D2",
        "\u06C1\u0648\u0631\u06C1\u0628",
        "\u06C1\u0648\u0631\u06C1\u06CC",
        "\u06C1\u0648\u0631\u06C1\u06D2",
        "\u06C1\u0648\u0636\u06A9\u062A\u0628",
        "\u06C1\u0648\u0636\u06A9\u062A\u06CC",
        "\u06C1\u0648\u0636\u06A9\u062A\u06D2",
        "\u06C1\u0648\u064B\u0628",
        "\u06C1\u0648\u064B\u06CC",
        "\u06C1\u0648\u064B\u06D2",
        "\u06C1\u0648\u0686\u06A9\u0628",
        "\u06C1\u0648\u0686\u06A9\u06CC",
        "\u06C1\u0648\u0686\u06A9\u06D2",
        "\u06C1\u0648\u06AF\u0626\u06CC",
        "\u06C1\u0648\u06AF\u0626\u06D2",
        "\u06C1\u0648\u06AF\u06CC\u0628",
        "\u06C1\u0648\u06BA",
        "\u06C1\u06CC",
        "\u06C1\u06CC\u06BA",
        "\u06C1\u06D2",
        "\u06CC",
        "\u06CC\u0642\u06CC\u064C\u06CC",
        "\u06CC\u06C1",
        "\u06CC\u06C1\u0628\u06BA"
      ];
      const vie = [
        "b\u1ECB",
        "b\u1EDFi",
        "c\u1EA3",
        "c\xE1c",
        "c\xE1i",
        "c\u1EA7n",
        "c\xE0ng",
        "ch\u1EC9",
        "chi\u1EBFc",
        "cho",
        "ch\u1EE9",
        "ch\u01B0a",
        "chuy\u1EC7n",
        "c\xF3",
        "c\xF3 th\u1EC3",
        "c\u1EE9",
        "c\u1EE7a",
        "c\xF9ng",
        "c\u0169ng",
        "\u0111\xE3",
        "\u0111ang",
        "\u0111\u1EC3",
        "\u0111\u1EBFn n\u1ED7i",
        "\u0111\u1EC1u",
        "\u0111i\u1EC1u",
        "do",
        "\u0111\xF3",
        "\u0111\u01B0\u1EE3c",
        "d\u01B0\u1EDBi",
        "g\xEC",
        "khi",
        "kh\xF4ng",
        "l\xE0",
        "l\u1EA1i",
        "l\xEAn",
        "l\xFAc",
        "m\xE0",
        "m\u1ED7i",
        "m\u1ED9t c\xE1ch",
        "n\xE0y",
        "n\xEAn",
        "n\u1EBFu",
        "ngay",
        "nhi\u1EC1u",
        "nh\u01B0",
        "nh\u01B0ng",
        "nh\u1EEFng",
        "n\u01A1i",
        "n\u1EEFa",
        "ph\u1EA3i",
        "qua",
        "ra",
        "r\u1EB1ng",
        "r\u1EA5t",
        "r\u1ED3i",
        "sau",
        "s\u1EBD",
        "so",
        "s\u1EF1",
        "t\u1EA1i",
        "theo",
        "th\xEC",
        "tr\xEAn",
        "tr\u01B0\u1EDBc",
        "t\u1EEB",
        "t\u1EEBng",
        "v\xE0",
        "v\u1EABn",
        "v\xE0o",
        "v\u1EADy",
        "v\xEC",
        "vi\u1EC7c",
        "v\u1EDBi",
        "v\u1EEBa",
        "v\xE2ng",
        "\xE0",
        "\u1EEB",
        "t\u1EEB"
      ];
      const yor = [
        "\xF3",
        "n\xED",
        "\xECj\xE0p\xE1",
        "\u1E63e",
        "r\u1EB9\u0300",
        "t\xED",
        "\xE0w\u1ECDn",
        "s\xED",
        "ni",
        "n\xE1\xE0",
        "anansi",
        "l\xE1ti",
        "kan",
        "ti",
        "\u0144",
        "l\u1ECD",
        "o",
        "b\xED",
        "pad\xE0",
        "s\xEC",
        "w\xE1",
        "wangari",
        "l\xE8",
        "w\xE0",
        "k\xED",
        "p\xFAp\u1ECD\u0300",
        "od\xF2",
        "mi",
        "w\u1ECD\u0301n",
        "p\u1EB9\u0300l\xFA",
        "a",
        "\u1E63\xF9gb\u1ECD\u0301n",
        "f\xFAn",
        "j\u1EB9\u0301",
        "f\u1EB9\u0301",
        "o\xFAnj\u1EB9",
        "r\xED",
        "igi",
        "k\xF2",
        "il\xE9",
        "j\xF9",
        "ol\xF3\u0144gb\xF2",
        "p\xE9",
        "\xE9",
        "gbogbo",
        "i\u1E63u",
        "in\xFA",
        "b\u1EB9\u0300r\u1EB9\u0300",
        "j\u1EB9",
        "fi",
        "d\xFAr\xF3",
        "al\u1EB9\u0301",
        "\u1ECDj\u1ECD\u0301",
        "n\xEDtor\xED",
        "n\u01F9kan",
        "\u1ECD\u0300r\u1EB9\u0301",
        "\xE0k\xF3k\xF2",
        "s\xEDn\xFA",
        "s\u0323",
        "y\xEC\xED"
      ];
      const zul = [
        "ukuthi",
        "kodwa",
        "futhi",
        "kakhulu",
        "wakhe",
        "kusho",
        "uma",
        "wathi",
        "umama",
        "kanye",
        "phansi",
        "ngesikhathi",
        "lapho",
        "u",
        "zakhe",
        "khona",
        "ukuba",
        "nje",
        "phezulu",
        "yakhe",
        "kungani",
        "wase",
        "la",
        "mina",
        "wami",
        "ukuze",
        "unonkungu",
        "wabona",
        "wahamba",
        "lakhe",
        "yami",
        "kanjani",
        "kwakukhona",
        "ngelinye"
      ];
      const defaultStopwords = eng2;
      const removeStopwords = function(tokens, stopwords) {
        stopwords = stopwords || defaultStopwords;
        if (typeof tokens !== "object" || typeof stopwords !== "object") {
          throw new Error("expected Arrays try: removeStopwords(Array[, Array])");
        }
        return tokens.filter(function(value) {
          return stopwords.indexOf(value.toLowerCase()) === -1;
        });
      };
      exports2._123 = _123;
      exports2.afr = afr;
      exports2.ara = ara;
      exports2.ben = ben;
      exports2.bre = bre;
      exports2.bul = bul;
      exports2.cat = cat;
      exports2.ces = ces;
      exports2.dan = dan;
      exports2.deu = deu;
      exports2.ell = ell;
      exports2.eng = eng2;
      exports2.epo = epo;
      exports2.est = est;
      exports2.eus = eus;
      exports2.fas = fas;
      exports2.fin = fin;
      exports2.fra = fra;
      exports2.gle = gle;
      exports2.glg = glg;
      exports2.guj = guj;
      exports2.hau = hau;
      exports2.heb = heb;
      exports2.hin = hin;
      exports2.hrv = hrv;
      exports2.hun = hun;
      exports2.hye = hye;
      exports2.ind = ind;
      exports2.ita = ita;
      exports2.jpn = jpn;
      exports2.kor = kor;
      exports2.kur = kur;
      exports2.lat = lat;
      exports2.lav = lav;
      exports2.lgg = lgg;
      exports2.lggNd = lggNd;
      exports2.lit = lit;
      exports2.mar = mar;
      exports2.msa = msa;
      exports2.mya = mya;
      exports2.nld = nld;
      exports2.nob = nob;
      exports2.panGu = panGu;
      exports2.pol = pol;
      exports2.por = por;
      exports2.porBr = porBr;
      exports2.removeStopwords = removeStopwords;
      exports2.ron = ron;
      exports2.rus = rus;
      exports2.slk = slk;
      exports2.slv = slv;
      exports2.som = som;
      exports2.sot = sot;
      exports2.spa = spa;
      exports2.swa = swa;
      exports2.swe = swe;
      exports2.tgl = tgl;
      exports2.tha = tha;
      exports2.tur = tur;
      exports2.ukr = ukr;
      exports2.urd = urd;
      exports2.vie = vie;
      exports2.yor = yor;
      exports2.zho = zho;
      exports2.zul = zul;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});

// dist/$server_build/chunks/pages/_user__B1WxMRwu.mjs
var user_B1WxMRwu_exports = {};
__export(user_B1WxMRwu_exports, {
  default: () => $$user,
  file: () => $$file12,
  prerender: () => prerender14,
  url: () => $$url12
});
function removewords(str) {
  const urlRegex = /https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/gi;
  const userRegex = /@[a-zA-Z]*/g;
  const hashTags = /#[a-zA-Z]*/g;
  const expressions = /\b’[a-zA-Z]+\b/gi;
  const expressions2 = /\b'[a-zA-Z]+\b/gi;
  const stopWordRegex = new RegExp(`\\b(${import_stopword.eng.join("|")})\\b`, "gi");
  const processedSentence = str.replace(expressions, (match) => `--=${match}=--`).replace(expressions2, (match) => `--=${match}=--`).replace(stopWordRegex, (match) => `--=${match}=--`).replace(hashTags, (match) => `--=${match}=--`).replace(userRegex, (match) => `--=${match}=--`).replace(urlRegex, (match) => `--=${match}=--`);
  return processedSentence;
}
function templatizeline(str) {
  const filtered = removewords(str);
  const keywordRegex = /--=(.*?)=--/g;
  const substrings = filtered.split(keywordRegex);
  const keywordMatch = filtered.match(keywordRegex)?.map((x) => x.replace("--=", "").replace("=--", ""));
  return { substrings, keywordMatch };
}
function normalizestr(str) {
  return str.replace("@", "").replaceAll("'", "").replaceAll("/", "").replaceAll(".", "").replaceAll(":", "");
}
var import_stopword, $$Astro$16, $$TwitterTemplatize, $$Astro13, prerender14, $$user, $$file12, $$url12;
var init_user_B1WxMRwu = __esm({
  "dist/$server_build/chunks/pages/_user__B1WxMRwu.mjs"() {
    "use strict";
    init_astro_CZ31vzIS();
    init_colors();
    init_CgdEe831();
    init_RxTcdYg8();
    import_stopword = __toESM(require_stopword_umd(), 1);
    $$Astro$16 = createAstro();
    $$TwitterTemplatize = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro$16, $$props, $$slots);
      Astro2.self = $$TwitterTemplatize;
      const { obj } = Astro2.props;
      let str = obj;
      if (Array.isArray(str)) {
        str = str.map((x) => x.text).join("\n");
      }
      const lines = str.split("\n").map((line) => templatizeline(line));
      return renderTemplate`${renderComponent($$result, "Fragment", Fragment, {}, { "default": ($$result2) => renderTemplate`${lines.map(
        ({
          substrings,
          keywordMatch
        }) => {
          return renderTemplate`${maybeRenderHead()}<p class="ml-14">${substrings.map((substring) => {
            if (keywordMatch?.includes(substring)) {
              return renderTemplate`<span${addAttribute(
                "pseudo" + normalizestr(substring),
                "class"
              )}></span>`;
            }
            return substring;
          })}</p>`;
        }
      )}` })}`;
    }, "/home/runner/work/monext/monext/apps/kloun/src/components/TwitterTemplatize.astro", void 0);
    $$Astro13 = createAstro();
    prerender14 = false;
    $$user = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro13, $$props, $$slots);
      Astro2.self = $$user;
      const { user } = Astro2.params;
      const twfetch = await fetch("https://cdn.kloun.lol/" + user + "_tw.json");
      const tweets2 = await twfetch.json();
      if (!tweets2) {
        return new Response("Not Found", {
          status: 404,
          statusText: "Not Found"
        });
      }
      const cssx = templatizeline(JSON.stringify(tweets2)).keywordMatch?.map(
        (x) => `.pseudo${normalizestr(x)}::before { content: "${x}";}`
      ).join("\n");
      const reposts = Array.from(
        new Set(
          tweets2.filter((item) => item.originalPoster).map(
            (user2) => user2.originalPoster?.screenName
          )
        )
      ) || [""];
      const existget = { tweets: [] };
      console.log(reposts, "<=====>", existget);
      const exist = existget.tweets.map(
        (it) => it.uid.replace("_tw", "")
      );
      console.log(reposts, "<=====>", existget, "<=====>", exist);
      return renderTemplate`${renderComponent($$result, "Layout", $$Layout, { "title": `${user} public tweets on twitter`, "description": `${user} public tweets on twitter`, "hideFooter": true }, { "default": ($$result2) => renderTemplate`${tweets2.map((t, i) => renderTemplate`${maybeRenderHead()}<div class="bg-gray-800 dark:bg-white mb-2 rounded-md border boder-1 dark:border-gray-500 pb-2"> ${i === 5 && renderTemplate`${renderComponent($$result2, "RudSense", $$RudSense, {})}`} ${i === 11 && renderTemplate`${renderComponent($$result2, "RudSense", $$RudSense, { "main": true })}`} <div class="flex flex-shrink-0 p-2 pb-0"> <div class="flex-shrink-0 group block"> <div class="flex items-center"> ${renderComponent($$result2, "amp-img", "amp-img", { "width": "48", "height": "48", "class": "inline-block   rounded-full", "src": "resp.user.profileImageUrl", "alt": "", "layout": "fixed" })} <div class="ml-2"> <div class="leading-6 font-light text-xl"> ${user} <div class="text-xs leading-5 font-light"> ${t.createdAt}${" "} ${t.originalPoster ? "| retweeted:" : "| tweeted:"} </div> </div> </div> </div> </div> </div> <div> ${t.originalPoster && renderTemplate`<a class="flex items-center  bg-black w-fit"${addAttribute(
        exist?.includes(t.originalPoster.screenName) ? "/tw/u/" + t.originalPoster.screenName : "https://twitter.com/" + t.originalPoster.screenName,
        "href"
      )} rel="prefetch"> <img width="24" height="24" class="inline-block   rounded-full ml-14"${addAttribute(t.originalPoster.profileImageUrl.replace("=--", "").replace("--=", ""), "src")} alt=""> <div class="text-base leading-6 font-bold pl-2"> ${t.originalPoster.name} :
</div> </a>`} <div class="flex flex-col"> ${renderComponent($$result2, "TwitterTemplatize", $$TwitterTemplatize, { "obj": t.text })} </div> </div> </div>`)}` })} <style>${unescapeHTML(cssx)}</style>`;
    }, "/home/runner/work/monext/monext/apps/kloun/src/pages/tw/u/[user].astro", void 0);
    $$file12 = "/home/runner/work/monext/monext/apps/kloun/src/pages/tw/u/[user].astro";
    $$url12 = "/tw/u/[user]";
  }
});

// dist/$server_build/chunks/_user__DBpFqfWo.mjs
var user_DBpFqfWo_exports = {};
__export(user_DBpFqfWo_exports, {
  page: () => page15,
  renderers: () => renderers
});
var page15;
var init_user_DBpFqfWo = __esm({
  "dist/$server_build/chunks/_user__DBpFqfWo.mjs"() {
    "use strict";
    init_renderers();
    page15 = () => Promise.resolve().then(() => (init_user_B1WxMRwu(), user_B1WxMRwu_exports));
  }
});

// dist/$server_build/chunks/pages/__DxGsAQqG.mjs
var DxGsAQqG_exports = {};
__export(DxGsAQqG_exports, {
  default: () => $$4,
  file: () => $$file13,
  prerender: () => prerender15,
  url: () => $$url13
});
var $$Astro14, prerender15, $$4, $$file13, $$url13;
var init_DxGsAQqG = __esm({
  "dist/$server_build/chunks/pages/__DxGsAQqG.mjs"() {
    "use strict";
    init_astro_CZ31vzIS();
    init_colors();
    init_CgdEe831();
    init_RxTcdYg8();
    init_drizzle_orm();
    $$Astro14 = createAstro();
    prerender15 = false;
    $$4 = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro14, $$props, $$slots);
      Astro2.self = $$4;
      const alphabet = [
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "M",
        "N",
        "O",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "U",
        "V",
        "W",
        "X",
        "Y",
        "Z"
      ];
      const { twitter } = Astro2.params;
      const x = twitter ? twitter.split("_") : ["a"];
      const pagenum = x[1] ? Number(x[1]) : 1;
      const skip = pagenum * 100 - 100;
      const respxx = db2.select({ uid: tweets.uid, cat: tweets.cat }).from(tweets).limit(100).offset(skip).where(eq(tweets.cat, x[0]));
      const countx = db2.select({ count: agregator.count }).from(agregator).where(eq(agregator.cat, `${x[0]}_tweets`));
      const respx = await Promise.all([respxx, countx]).then((values) => {
        return { data: values[0], count: values[1][0].count };
      });
      return renderTemplate`${renderComponent($$result, "Layout", $$Layout, { "title": ` Twitter ecosphere ${pagenum}`, "description": `Twitter ecosphere   ` }, { "default": ($$result2) => renderTemplate` ${maybeRenderHead()}<div class="flex flex-wrap justify-center items-center gap-1 mb-3"> ${alphabet.map((x2) => renderTemplate`<a${addAttribute("/tw/" + x2.toLowerCase() + "_1", "href")} class="bg-slate-900 p-2 font-bold text-white dark:bg-white dark:text-slate-900 rounded-md"> ${x2} </a>`)} </div> <div class="flex flex-row flex-wrap justify-center p-0 gap-2"> ${respx.data.map(({ uid }) => renderTemplate`<a class="active flex  bg-slate-900 font-bold text-white dark:bg-white dark:text-slate-900 px-3 rounded-xl text-sm"${addAttribute("/tw/u/" + uid.replace("_tw", ""), "href")}> ${uid.replace("_tw", "")}${" "} </a>`)} </div> ${renderComponent($$result2, "Pagination", $$Pagination, { "items": respx.count, "currentPage": pagenum, "pageSize": 100, "prefix": "/tw/" + x[0] + "_" })} ` })}`;
    }, "/home/runner/work/monext/monext/apps/kloun/src/pages/tw/[...twitter].astro", void 0);
    $$file13 = "/home/runner/work/monext/monext/apps/kloun/src/pages/tw/[...twitter].astro";
    $$url13 = "/tw/[...twitter]";
  }
});

// dist/$server_build/chunks/_.._BQmBYHww.mjs
var BQmBYHww_exports = {};
__export(BQmBYHww_exports, {
  page: () => page16,
  renderers: () => renderers
});
var page16;
var init_BQmBYHww = __esm({
  "dist/$server_build/chunks/_.._BQmBYHww.mjs"() {
    "use strict";
    init_renderers();
    page16 = () => Promise.resolve().then(() => (init_DxGsAQqG(), DxGsAQqG_exports));
  }
});

// dist/$server_build/chunks/pages/vicove_BG76BcLO.mjs
var vicove_BG76BcLO_exports = {};
__export(vicove_BG76BcLO_exports, {
  default: () => $$Vicove,
  file: () => $$file14,
  prerender: () => prerender16,
  url: () => $$url14
});
var $$Astro15, prerender16, $$Vicove, $$file14, $$url14;
var init_vicove_BG76BcLO = __esm({
  "dist/$server_build/chunks/pages/vicove_BG76BcLO.mjs"() {
    "use strict";
    init_astro_CZ31vzIS();
    init_colors();
    init_RxTcdYg8();
    init_CgdEe831();
    $$Astro15 = createAstro();
    prerender16 = false;
    $$Vicove = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro15, $$props, $$slots);
      Astro2.self = $$Vicove;
      const cats = catsx.aggregator.filter((x) => x.cat).filter((x) => x.cat.includes("JOK") && !x.cat.includes("JOKEN")).filter((x) => x.total_count > 1).map((x) => ({
        cat: x.cat.replace("JOK", ""),
        slug: slugify(x.cat.replace("JOK", "").replace("\u044A", " ")),
        count: x.total_count
      })).sort((a, b) => b.count - a.count);
      return renderTemplate`${renderComponent($$result, "Layout", $$Layout, { "title": "\u0412\u0438\u0446\u043E\u0432\u0435 \u0438 \u0437\u0430\u0431\u0430\u0432\u043D\u0438 \u043A\u043E\u0442\u043A\u0438 \u0438 \u043C\u0435\u043C\u0435\u0442\u0430", "description": "\u0412\u0438\u0446\u043E\u0432\u0435 \u0438 \u0437\u0430\u0431\u0430\u0432\u043D\u0438 \u043A\u043E\u0442\u043A\u0438 \u0438 \u043C\u0435\u043C\u0435\u0442\u0430", "hideFooter": true }, { "default": ($$result2) => renderTemplate` ${renderComponent($$result2, "RudSense", $$RudSense, { "main": true })} ${maybeRenderHead()}<h1 class="text-5xl text-gradient">Вицове</h1> <div class="my-3 flex w-full flex-wrap gap-3"> ${cats.map(
        ({
          cat,
          slug,
          count
        }) => renderTemplate`${renderComponent($$result2, "CatButton", $$CatButton, { "title": cat, "url": "/cat/" + slug, "count": count })}`
      )} </div> ` })}`;
    }, "/home/runner/work/monext/monext/apps/kloun/src/pages/vicove.astro", void 0);
    $$file14 = "/home/runner/work/monext/monext/apps/kloun/src/pages/vicove.astro";
    $$url14 = "/vicove";
  }
});

// dist/$server_build/chunks/vicove_BA876vaw.mjs
var vicove_BA876vaw_exports = {};
__export(vicove_BA876vaw_exports, {
  page: () => page17,
  renderers: () => renderers
});
var page17;
var init_vicove_BA876vaw = __esm({
  "dist/$server_build/chunks/vicove_BA876vaw.mjs"() {
    "use strict";
    init_renderers();
    page17 = () => Promise.resolve().then(() => (init_vicove_BG76BcLO(), vicove_BG76BcLO_exports));
  }
});

// dist/$server_build/chunks/pages/index_Bvl0vZVa.mjs
var index_Bvl0vZVa_exports = {};
__export(index_Bvl0vZVa_exports, {
  default: () => $$Index,
  file: () => $$file15,
  prerender: () => prerender17,
  url: () => $$url15
});
var $$Astro16, prerender17, $$Index, $$file15, $$url15;
var init_index_Bvl0vZVa = __esm({
  "dist/$server_build/chunks/pages/index_Bvl0vZVa.mjs"() {
    "use strict";
    init_astro_CZ31vzIS();
    init_colors();
    init_CgdEe831();
    init_CjObBNHd();
    init_RxTcdYg8();
    init_drizzle_orm();
    $$Astro16 = createAstro();
    prerender17 = false;
    $$Index = createComponent(async ($$result, $$props, $$slots) => {
      const Astro2 = $$result.createAstro($$Astro16, $$props, $$slots);
      Astro2.self = $$Index;
      const respx = await db2.select({ id: newsbg.id, nid: newsbg.nid, title: newsbg.title, image: newsbg.image, date: newsbg.date }).from(newsbg).limit(30).where(eq(newsbg.cat, "NewsBG")).orderBy(desc(newsbg.id));
      return renderTemplate`${renderComponent($$result, "Layout", $$Layout, { "title": "\u0412\u0438\u0446\u043E\u0432\u0435 \u0438 \u0437\u0430\u0431\u0430\u0432\u043D\u0438 \u043A\u043E\u0442\u043A\u0438 \u0438 \u043C\u0435\u043C\u0435\u0442\u0430", "description": "\u0412\u0438\u0446\u043E\u0432\u0435 \u0438 \u0437\u0430\u0431\u0430\u0432\u043D\u0438 \u043A\u043E\u0442\u043A\u0438 \u0438 \u043C\u0435\u043C\u0435\u0442\u0430" }, { "default": ($$result2) => renderTemplate` ${maybeRenderHead()}<div class="flex flex-col md:flex-row justify-between"> <div class="flex-shrink-0 w-full md:w-auto md:order-1 flex justify-center"> <img src="/images/spaceclown.svg" alt="Space Clown" class="block h-32 md:h-48 lg:h-64 object-cover rounded-md shadow-sm"> </div> <div class="ml-4 sm:ml-8 md:mr-8 lg:mr-12 xl:mr-24"> <h1 class="text-3xl font-bold tracking-tighter sm:text-5xl xl:text-6xl/none bg-clip-text text-transparent bg-gradient-to-r from-white to-gray-500">
Клоунада? Вземете дневната си доза смях и новини в kloun.lol!
</h1> <p class="md:text-xl dark:text-zinc-100 mx-auto bg-clip-text text-transparent bg-gradient-to-b from-white to-gray-500">
Нашите авангардни AI алгоритми претърсват мрежата за най-смешните
        мемета, видеоклипове и статии, като същевременно ви държат в крак с
        най-новите новини. От политиката до поп културата, нашият екип от
        експерти комедианти и журналисти гарантира, че никога няма да пропуснете
        нито един момент. Така че вземете малко захарен памук, сложете червения
        си нос и се пригответе за LOL с нас!
</p> </div> </div> <h1 class="text-3xl font-black">Актуално</h1> ${renderComponent($$result2, "RudSense", $$RudSense, {})} <div class="flex flex-wrap gap-3"> ${respx.map(
        ({
          nid,
          title,
          date,
          key,
          image,
          id
        }) => renderTemplate`${renderComponent($$result2, "CardNews", $$CardNews, { "title": title, "img": image, "date": date, "key": key, "nid": nid, "id": id })}`
      )} </div> <div class="flex flex-wrap justify-end my-2"> <a class="btn dark:btn-ghost border-2" href="/news">Още новини</a> </div> ${renderComponent($$result2, "RudSense", $$RudSense, {})} <h1 class="text-3xl font-black">Вицове</h1> <div class="my-3 flex w-full flex-wrap gap-3"> ${jokecats.slice(0, 9).map(
        ({
          cat,
          slug,
          count
        }) => renderTemplate`${renderComponent($$result2, "CatButton", $$CatButton, { "title": cat, "url": "/cat/" + slug, "count": count })}`
      )} </div> <div class="flex flex-wrap justify-end my-2"> <a class="btn dark:btn-ghost border-2" href="/vicove">Всички</a> </div> ${renderComponent($$result2, "RudSense", $$RudSense, { "main": true })} <h1 class="text-3xl font-black">Забавно в картинки</h1> <div class="snap-x flex flex-nowrap py-2 snap-proximity overflow-x-auto"> <!-- {
      memes.slice(0, 20).map(({ thumb }: { thumb: string }) => (
        <label
          class="hover:animate-pulse snap-center flex-shrink-0"
          for="my-modal"
        >
          <div class="rounded-lg bg-gradient-to-r from-purple-900 to-pink-600 p-1 dark:from-white dark:to-slate-400 m-1 cursor-pointer flex">
            <img
              width="128"
              height="128"
              class="rounded-lg i-amphtml-element i-amphtml-layout-fixed i-amphtml-layout-size-defined i-amphtml-built i-amphtml-layout"
              alt="pr0gramm"
              src={\`https://thumb.pr0gramm.com/\${thumb}\`}
              i-amphtml-layout="fixed"
              style="width: 128px; height: 128px; --loader-delay-offset:1ms !important;"
            />
          </div>
        </label>
      ))
    } --> </div> <div class="flex flex-wrap justify-end my-2"> <a class="btn dark:btn-ghost border-2" href="/memes">Всички</a> </div> ` })}`;
    }, "/home/runner/work/monext/monext/apps/kloun/src/pages/index.astro", void 0);
    $$file15 = "/home/runner/work/monext/monext/apps/kloun/src/pages/index.astro";
    $$url15 = "";
  }
});

// dist/$server_build/chunks/index_RZYCZe8A.mjs
var index_RZYCZe8A_exports = {};
__export(index_RZYCZe8A_exports, {
  page: () => page18,
  renderers: () => renderers
});
var page18;
var init_index_RZYCZe8A = __esm({
  "dist/$server_build/chunks/index_RZYCZe8A.mjs"() {
    "use strict";
    init_renderers();
    page18 = () => Promise.resolve().then(() => (init_index_Bvl0vZVa(), index_Bvl0vZVa_exports));
  }
});

// dist/$server_build/_worker.mjs
init_renderers();

// dist/$server_build/manifest_CK685D1V.mjs
init_path();
var import_cookie = __toESM(require_cookie(), 1);
init_colors();
init_astro_CZ31vzIS();

// ../../node_modules/path-to-regexp/dist.es2015/index.js
function lexer(str) {
  var tokens = [];
  var i = 0;
  while (i < str.length) {
    var char = str[i];
    if (char === "*" || char === "+" || char === "?") {
      tokens.push({ type: "MODIFIER", index: i, value: str[i++] });
      continue;
    }
    if (char === "\\") {
      tokens.push({ type: "ESCAPED_CHAR", index: i++, value: str[i++] });
      continue;
    }
    if (char === "{") {
      tokens.push({ type: "OPEN", index: i, value: str[i++] });
      continue;
    }
    if (char === "}") {
      tokens.push({ type: "CLOSE", index: i, value: str[i++] });
      continue;
    }
    if (char === ":") {
      var name = "";
      var j = i + 1;
      while (j < str.length) {
        var code = str.charCodeAt(j);
        if (
          // `0-9`
          code >= 48 && code <= 57 || // `A-Z`
          code >= 65 && code <= 90 || // `a-z`
          code >= 97 && code <= 122 || // `_`
          code === 95
        ) {
          name += str[j++];
          continue;
        }
        break;
      }
      if (!name)
        throw new TypeError("Missing parameter name at ".concat(i));
      tokens.push({ type: "NAME", index: i, value: name });
      i = j;
      continue;
    }
    if (char === "(") {
      var count = 1;
      var pattern = "";
      var j = i + 1;
      if (str[j] === "?") {
        throw new TypeError('Pattern cannot start with "?" at '.concat(j));
      }
      while (j < str.length) {
        if (str[j] === "\\") {
          pattern += str[j++] + str[j++];
          continue;
        }
        if (str[j] === ")") {
          count--;
          if (count === 0) {
            j++;
            break;
          }
        } else if (str[j] === "(") {
          count++;
          if (str[j + 1] !== "?") {
            throw new TypeError("Capturing groups are not allowed at ".concat(j));
          }
        }
        pattern += str[j++];
      }
      if (count)
        throw new TypeError("Unbalanced pattern at ".concat(i));
      if (!pattern)
        throw new TypeError("Missing pattern at ".concat(i));
      tokens.push({ type: "PATTERN", index: i, value: pattern });
      i = j;
      continue;
    }
    tokens.push({ type: "CHAR", index: i, value: str[i++] });
  }
  tokens.push({ type: "END", index: i, value: "" });
  return tokens;
}
function parse(str, options) {
  if (options === void 0) {
    options = {};
  }
  var tokens = lexer(str);
  var _a3 = options.prefixes, prefixes = _a3 === void 0 ? "./" : _a3;
  var defaultPattern = "[^".concat(escapeString(options.delimiter || "/#?"), "]+?");
  var result = [];
  var key = 0;
  var i = 0;
  var path = "";
  var tryConsume = function(type) {
    if (i < tokens.length && tokens[i].type === type)
      return tokens[i++].value;
  };
  var mustConsume = function(type) {
    var value2 = tryConsume(type);
    if (value2 !== void 0)
      return value2;
    var _a4 = tokens[i], nextType = _a4.type, index = _a4.index;
    throw new TypeError("Unexpected ".concat(nextType, " at ").concat(index, ", expected ").concat(type));
  };
  var consumeText = function() {
    var result2 = "";
    var value2;
    while (value2 = tryConsume("CHAR") || tryConsume("ESCAPED_CHAR")) {
      result2 += value2;
    }
    return result2;
  };
  while (i < tokens.length) {
    var char = tryConsume("CHAR");
    var name = tryConsume("NAME");
    var pattern = tryConsume("PATTERN");
    if (name || pattern) {
      var prefix = char || "";
      if (prefixes.indexOf(prefix) === -1) {
        path += prefix;
        prefix = "";
      }
      if (path) {
        result.push(path);
        path = "";
      }
      result.push({
        name: name || key++,
        prefix,
        suffix: "",
        pattern: pattern || defaultPattern,
        modifier: tryConsume("MODIFIER") || ""
      });
      continue;
    }
    var value = char || tryConsume("ESCAPED_CHAR");
    if (value) {
      path += value;
      continue;
    }
    if (path) {
      result.push(path);
      path = "";
    }
    var open = tryConsume("OPEN");
    if (open) {
      var prefix = consumeText();
      var name_1 = tryConsume("NAME") || "";
      var pattern_1 = tryConsume("PATTERN") || "";
      var suffix = consumeText();
      mustConsume("CLOSE");
      result.push({
        name: name_1 || (pattern_1 ? key++ : ""),
        pattern: name_1 && !pattern_1 ? defaultPattern : pattern_1,
        prefix,
        suffix,
        modifier: tryConsume("MODIFIER") || ""
      });
      continue;
    }
    mustConsume("END");
  }
  return result;
}
function compile(str, options) {
  return tokensToFunction(parse(str, options), options);
}
function tokensToFunction(tokens, options) {
  if (options === void 0) {
    options = {};
  }
  var reFlags = flags(options);
  var _a3 = options.encode, encode = _a3 === void 0 ? function(x) {
    return x;
  } : _a3, _b3 = options.validate, validate = _b3 === void 0 ? true : _b3;
  var matches = tokens.map(function(token) {
    if (typeof token === "object") {
      return new RegExp("^(?:".concat(token.pattern, ")$"), reFlags);
    }
  });
  return function(data) {
    var path = "";
    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];
      if (typeof token === "string") {
        path += token;
        continue;
      }
      var value = data ? data[token.name] : void 0;
      var optional = token.modifier === "?" || token.modifier === "*";
      var repeat = token.modifier === "*" || token.modifier === "+";
      if (Array.isArray(value)) {
        if (!repeat) {
          throw new TypeError('Expected "'.concat(token.name, '" to not repeat, but got an array'));
        }
        if (value.length === 0) {
          if (optional)
            continue;
          throw new TypeError('Expected "'.concat(token.name, '" to not be empty'));
        }
        for (var j = 0; j < value.length; j++) {
          var segment = encode(value[j], token);
          if (validate && !matches[i].test(segment)) {
            throw new TypeError('Expected all "'.concat(token.name, '" to match "').concat(token.pattern, '", but got "').concat(segment, '"'));
          }
          path += token.prefix + segment + token.suffix;
        }
        continue;
      }
      if (typeof value === "string" || typeof value === "number") {
        var segment = encode(String(value), token);
        if (validate && !matches[i].test(segment)) {
          throw new TypeError('Expected "'.concat(token.name, '" to match "').concat(token.pattern, '", but got "').concat(segment, '"'));
        }
        path += token.prefix + segment + token.suffix;
        continue;
      }
      if (optional)
        continue;
      var typeOfMessage = repeat ? "an array" : "a string";
      throw new TypeError('Expected "'.concat(token.name, '" to be ').concat(typeOfMessage));
    }
    return path;
  };
}
function escapeString(str) {
  return str.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
}
function flags(options) {
  return options && options.sensitive ? "" : "i";
}

// dist/$server_build/manifest_CK685D1V.mjs
var dateTimeFormat = new Intl.DateTimeFormat([], {
  hour: "2-digit",
  minute: "2-digit",
  second: "2-digit",
  hour12: false
});
var levels = {
  debug: 20,
  info: 30,
  warn: 40,
  error: 50,
  silent: 90
};
function log(opts, level, label, message, newLine = true) {
  const logLevel = opts.level;
  const dest = opts.dest;
  const event = {
    label,
    level,
    message,
    newLine
  };
  if (!isLogLevelEnabled(logLevel, level)) {
    return;
  }
  dest.write(event);
}
function isLogLevelEnabled(configuredLogLevel, level) {
  return levels[configuredLogLevel] <= levels[level];
}
function info(opts, label, message, newLine = true) {
  return log(opts, "info", label, message, newLine);
}
function warn(opts, label, message, newLine = true) {
  return log(opts, "warn", label, message, newLine);
}
function error(opts, label, message, newLine = true) {
  return log(opts, "error", label, message, newLine);
}
function debug(...args) {
  if ("_astroGlobalDebug" in globalThis) {
    globalThis._astroGlobalDebug(...args);
  }
}
function getEventPrefix({ level, label }) {
  const timestamp = `${dateTimeFormat.format(/* @__PURE__ */ new Date())}`;
  const prefix = [];
  if (level === "error" || level === "warn") {
    prefix.push(bold(timestamp));
    prefix.push(`[${level.toUpperCase()}]`);
  } else {
    prefix.push(timestamp);
  }
  if (label) {
    prefix.push(`[${label}]`);
  }
  if (level === "error") {
    return red(prefix.join(" "));
  }
  if (level === "warn") {
    return yellow(prefix.join(" "));
  }
  if (prefix.length === 1) {
    return dim(prefix[0]);
  }
  return dim(prefix[0]) + " " + blue(prefix.splice(1).join(" "));
}
if (typeof process !== "undefined") {
  let proc = process;
  if ("argv" in proc && Array.isArray(proc.argv)) {
    if (proc.argv.includes("--verbose"))
      ;
    else if (proc.argv.includes("--silent"))
      ;
    else
      ;
  }
}
var Logger = class {
  options;
  constructor(options) {
    this.options = options;
  }
  info(label, message, newLine = true) {
    info(this.options, label, message, newLine);
  }
  warn(label, message, newLine = true) {
    warn(this.options, label, message, newLine);
  }
  error(label, message, newLine = true) {
    error(this.options, label, message, newLine);
  }
  debug(label, ...messages) {
    debug(label, ...messages);
  }
  level() {
    return this.options.level;
  }
  forkIntegrationLogger(label) {
    return new AstroIntegrationLogger(this.options, label);
  }
};
var AstroIntegrationLogger = class _AstroIntegrationLogger {
  options;
  label;
  constructor(logging, label) {
    this.options = logging;
    this.label = label;
  }
  /**
   * Creates a new logger instance with a new label, but the same log options.
   */
  fork(label) {
    return new _AstroIntegrationLogger(this.options, label);
  }
  info(message) {
    info(this.options, this.label, message);
  }
  warn(message) {
    warn(this.options, this.label, message);
  }
  error(message) {
    error(this.options, this.label, message);
  }
  debug(message) {
    debug(this.label, message);
  }
};
function getRouteGenerator(segments, addTrailingSlash) {
  const template = segments.map((segment) => {
    return "/" + segment.map((part) => {
      if (part.spread) {
        return `:${part.content.slice(3)}(.*)?`;
      } else if (part.dynamic) {
        return `:${part.content}`;
      } else {
        return part.content.normalize().replace(/\?/g, "%3F").replace(/#/g, "%23").replace(/%5B/g, "[").replace(/%5D/g, "]").replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
      }
    }).join("");
  }).join("");
  let trailing = "";
  if (addTrailingSlash === "always" && segments.length) {
    trailing = "/";
  }
  const toPath = compile(template + trailing);
  return (params) => {
    const path = toPath(params);
    return path || "/";
  };
}
function deserializeRouteData(rawRouteData) {
  return {
    route: rawRouteData.route,
    type: rawRouteData.type,
    pattern: new RegExp(rawRouteData.pattern),
    params: rawRouteData.params,
    component: rawRouteData.component,
    generate: getRouteGenerator(rawRouteData.segments, rawRouteData._meta.trailingSlash),
    pathname: rawRouteData.pathname || void 0,
    segments: rawRouteData.segments,
    prerender: rawRouteData.prerender,
    redirect: rawRouteData.redirect,
    redirectRoute: rawRouteData.redirectRoute ? deserializeRouteData(rawRouteData.redirectRoute) : void 0,
    fallbackRoutes: rawRouteData.fallbackRoutes.map((fallback) => {
      return deserializeRouteData(fallback);
    }),
    isIndex: rawRouteData.isIndex
  };
}
function deserializeManifest(serializedManifest) {
  const routes = [];
  for (const serializedRoute of serializedManifest.routes) {
    routes.push({
      ...serializedRoute,
      routeData: deserializeRouteData(serializedRoute.routeData)
    });
    const route = serializedRoute;
    route.routeData = deserializeRouteData(serializedRoute.routeData);
  }
  const assets = new Set(serializedManifest.assets);
  const componentMetadata = new Map(serializedManifest.componentMetadata);
  const inlinedScripts = new Map(serializedManifest.inlinedScripts);
  const clientDirectives = new Map(serializedManifest.clientDirectives);
  return {
    // in case user middleware exists, this no-op middleware will be reassigned (see plugin-ssr.ts)
    middleware(_, next) {
      return next();
    },
    ...serializedManifest,
    assets,
    componentMetadata,
    inlinedScripts,
    clientDirectives,
    routes
  };
}
var manifest = deserializeManifest({ "adapterName": "@astrojs/cloudflare", "routes": [{ "file": "", "links": [], "scripts": [], "styles": [], "routeData": { "type": "endpoint", "isIndex": false, "route": "/_image", "pattern": "^\\/_image$", "segments": [[{ "content": "_image", "dynamic": false, "spread": false }]], "params": [], "component": "../../node_modules/astro/dist/assets/endpoint/generic.js", "pathname": "/_image", "prerender": false, "fallbackRoutes": [], "_meta": { "trailingSlash": "ignore" } } }, { "file": "", "links": [], "scripts": [], "styles": [], "routeData": { "route": "/api/cache", "isIndex": false, "type": "endpoint", "pattern": "^\\/api\\/cache\\/?$", "segments": [[{ "content": "api", "dynamic": false, "spread": false }], [{ "content": "cache", "dynamic": false, "spread": false }]], "params": [], "component": "src/pages/api/cache.ts", "pathname": "/api/cache", "prerender": false, "fallbackRoutes": [], "_meta": { "trailingSlash": "ignore" } } }, { "file": "", "links": [], "scripts": [], "styles": [], "routeData": { "route": "/api/img/[id].jpg", "isIndex": false, "type": "endpoint", "pattern": "^\\/api\\/img\\/([^/]+?)\\.jpg\\/?$", "segments": [[{ "content": "api", "dynamic": false, "spread": false }], [{ "content": "img", "dynamic": false, "spread": false }], [{ "content": "id", "dynamic": true, "spread": false }, { "content": ".jpg", "dynamic": false, "spread": false }]], "params": ["id"], "component": "src/pages/api/img/[id].jpg.ts", "prerender": false, "fallbackRoutes": [], "_meta": { "trailingSlash": "ignore" } } }, { "file": "", "links": [], "scripts": [], "styles": [{ "type": "external", "src": "/_astro/_business_.DeUe6d1A.css" }, { "type": "external", "src": "/_astro/_business_.ClJHYUwc.css" }], "routeData": { "route": "/business/[...business]", "isIndex": false, "type": "page", "pattern": "^\\/business(?:\\/(.*?))?\\/?$", "segments": [[{ "content": "business", "dynamic": false, "spread": false }], [{ "content": "...business", "dynamic": true, "spread": true }]], "params": ["...business"], "component": "src/pages/business/[...business].astro", "prerender": false, "fallbackRoutes": [], "_meta": { "trailingSlash": "ignore" } } }, { "file": "", "links": [], "scripts": [], "styles": [{ "type": "external", "src": "/_astro/_business_.DeUe6d1A.css" }, { "type": "external", "src": "/_astro/_business_.ClJHYUwc.css" }], "routeData": { "route": "/cat/[...jokecat]", "isIndex": false, "type": "page", "pattern": "^\\/cat(?:\\/(.*?))?\\/?$", "segments": [[{ "content": "cat", "dynamic": false, "spread": false }], [{ "content": "...jokecat", "dynamic": true, "spread": true }]], "params": ["...jokecat"], "component": "src/pages/cat/[...jokecat].astro", "prerender": false, "fallbackRoutes": [], "_meta": { "trailingSlash": "ignore" } } }, { "file": "", "links": [], "scripts": [], "styles": [{ "type": "external", "src": "/_astro/_business_.DeUe6d1A.css" }, { "type": "external", "src": "/_astro/_business_.ClJHYUwc.css" }], "routeData": { "route": "/joke/[jokeid]", "isIndex": false, "type": "page", "pattern": "^\\/joke\\/([^/]+?)\\/?$", "segments": [[{ "content": "joke", "dynamic": false, "spread": false }], [{ "content": "jokeid", "dynamic": true, "spread": false }]], "params": ["jokeid"], "component": "src/pages/joke/[jokeid].astro", "prerender": false, "fallbackRoutes": [], "_meta": { "trailingSlash": "ignore" } } }, { "file": "", "links": [], "scripts": [], "styles": [{ "type": "external", "src": "/_astro/_business_.DeUe6d1A.css" }, { "type": "external", "src": "/_astro/_business_.ClJHYUwc.css" }], "routeData": { "route": "/memes", "isIndex": false, "type": "page", "pattern": "^\\/memes\\/?$", "segments": [[{ "content": "memes", "dynamic": false, "spread": false }]], "params": [], "component": "src/pages/memes.astro", "pathname": "/memes", "prerender": false, "fallbackRoutes": [], "_meta": { "trailingSlash": "ignore" } } }, { "file": "", "links": [], "scripts": [], "styles": [{ "type": "external", "src": "/_astro/_business_.DeUe6d1A.css" }, { "type": "external", "src": "/_astro/_business_.ClJHYUwc.css" }], "routeData": { "route": "/news/i/[slug]/[newsid]", "isIndex": false, "type": "page", "pattern": "^\\/news\\/i\\/([^/]+?)\\/([^/]+?)\\/?$", "segments": [[{ "content": "news", "dynamic": false, "spread": false }], [{ "content": "i", "dynamic": false, "spread": false }], [{ "content": "slug", "dynamic": true, "spread": false }], [{ "content": "newsid", "dynamic": true, "spread": false }]], "params": ["slug", "newsid"], "component": "src/pages/news/i/[slug]/[newsid].astro", "prerender": false, "fallbackRoutes": [], "_meta": { "trailingSlash": "ignore" } } }, { "file": "", "links": [], "scripts": [], "styles": [{ "type": "external", "src": "/_astro/_business_.DeUe6d1A.css" }], "routeData": { "route": "/news/tr/[id]", "isIndex": false, "type": "page", "pattern": "^\\/news\\/tr\\/([^/]+?)\\/?$", "segments": [[{ "content": "news", "dynamic": false, "spread": false }], [{ "content": "tr", "dynamic": false, "spread": false }], [{ "content": "id", "dynamic": true, "spread": false }]], "params": ["id"], "component": "src/pages/news/tr/[id].astro", "prerender": false, "fallbackRoutes": [], "_meta": { "trailingSlash": "ignore" } } }, { "file": "", "links": [], "scripts": [], "styles": [{ "type": "external", "src": "/_astro/_business_.DeUe6d1A.css" }, { "type": "external", "src": "/_astro/_business_.ClJHYUwc.css" }], "routeData": { "route": "/news/[...newspage]", "isIndex": false, "type": "page", "pattern": "^\\/news(?:\\/(.*?))?\\/?$", "segments": [[{ "content": "news", "dynamic": false, "spread": false }], [{ "content": "...newspage", "dynamic": true, "spread": true }]], "params": ["...newspage"], "component": "src/pages/news/[...newspage].astro", "prerender": false, "fallbackRoutes": [], "_meta": { "trailingSlash": "ignore" } } }, { "file": "", "links": [], "scripts": [], "styles": [{ "type": "external", "src": "/_astro/_business_.DeUe6d1A.css" }, { "type": "external", "src": "/_astro/_business_.ClJHYUwc.css" }], "routeData": { "route": "/other/about", "isIndex": false, "type": "page", "pattern": "^\\/other\\/about\\/?$", "segments": [[{ "content": "other", "dynamic": false, "spread": false }], [{ "content": "about", "dynamic": false, "spread": false }]], "params": [], "component": "src/pages/other/about.astro", "pathname": "/other/about", "prerender": false, "fallbackRoutes": [], "_meta": { "trailingSlash": "ignore" } } }, { "file": "", "links": [], "scripts": [], "styles": [{ "type": "external", "src": "/_astro/_business_.DeUe6d1A.css" }, { "type": "external", "src": "/_astro/_business_.ClJHYUwc.css" }], "routeData": { "route": "/other/contact", "isIndex": false, "type": "page", "pattern": "^\\/other\\/contact\\/?$", "segments": [[{ "content": "other", "dynamic": false, "spread": false }], [{ "content": "contact", "dynamic": false, "spread": false }]], "params": [], "component": "src/pages/other/contact.astro", "pathname": "/other/contact", "prerender": false, "fallbackRoutes": [], "_meta": { "trailingSlash": "ignore" } } }, { "file": "", "links": [], "scripts": [], "styles": [{ "type": "external", "src": "/_astro/_business_.DeUe6d1A.css" }, { "type": "external", "src": "/_astro/_business_.ClJHYUwc.css" }], "routeData": { "route": "/other/privacy", "isIndex": false, "type": "page", "pattern": "^\\/other\\/privacy\\/?$", "segments": [[{ "content": "other", "dynamic": false, "spread": false }], [{ "content": "privacy", "dynamic": false, "spread": false }]], "params": [], "component": "src/pages/other/privacy.astro", "pathname": "/other/privacy", "prerender": false, "fallbackRoutes": [], "_meta": { "trailingSlash": "ignore" } } }, { "file": "", "links": [], "scripts": [], "styles": [{ "type": "external", "src": "/_astro/_business_.DeUe6d1A.css" }, { "type": "external", "src": "/_astro/_business_.ClJHYUwc.css" }], "routeData": { "route": "/other/terms", "isIndex": false, "type": "page", "pattern": "^\\/other\\/terms\\/?$", "segments": [[{ "content": "other", "dynamic": false, "spread": false }], [{ "content": "terms", "dynamic": false, "spread": false }]], "params": [], "component": "src/pages/other/terms.astro", "pathname": "/other/terms", "prerender": false, "fallbackRoutes": [], "_meta": { "trailingSlash": "ignore" } } }, { "file": "", "links": [], "scripts": [], "styles": [{ "type": "external", "src": "/_astro/_business_.DeUe6d1A.css" }, { "type": "external", "src": "/_astro/_business_.ClJHYUwc.css" }], "routeData": { "route": "/tw/u/[user]", "isIndex": false, "type": "page", "pattern": "^\\/tw\\/u\\/([^/]+?)\\/?$", "segments": [[{ "content": "tw", "dynamic": false, "spread": false }], [{ "content": "u", "dynamic": false, "spread": false }], [{ "content": "user", "dynamic": true, "spread": false }]], "params": ["user"], "component": "src/pages/tw/u/[user].astro", "prerender": false, "fallbackRoutes": [], "_meta": { "trailingSlash": "ignore" } } }, { "file": "", "links": [], "scripts": [], "styles": [{ "type": "external", "src": "/_astro/_business_.DeUe6d1A.css" }, { "type": "external", "src": "/_astro/_business_.ClJHYUwc.css" }], "routeData": { "route": "/tw/[...twitter]", "isIndex": false, "type": "page", "pattern": "^\\/tw(?:\\/(.*?))?\\/?$", "segments": [[{ "content": "tw", "dynamic": false, "spread": false }], [{ "content": "...twitter", "dynamic": true, "spread": true }]], "params": ["...twitter"], "component": "src/pages/tw/[...twitter].astro", "prerender": false, "fallbackRoutes": [], "_meta": { "trailingSlash": "ignore" } } }, { "file": "", "links": [], "scripts": [], "styles": [{ "type": "external", "src": "/_astro/_business_.DeUe6d1A.css" }, { "type": "external", "src": "/_astro/_business_.ClJHYUwc.css" }], "routeData": { "route": "/vicove", "isIndex": false, "type": "page", "pattern": "^\\/vicove\\/?$", "segments": [[{ "content": "vicove", "dynamic": false, "spread": false }]], "params": [], "component": "src/pages/vicove.astro", "pathname": "/vicove", "prerender": false, "fallbackRoutes": [], "_meta": { "trailingSlash": "ignore" } } }, { "file": "", "links": [], "scripts": [], "styles": [{ "type": "external", "src": "/_astro/_business_.DeUe6d1A.css" }, { "type": "external", "src": "/_astro/_business_.ClJHYUwc.css" }], "routeData": { "route": "/", "isIndex": true, "type": "page", "pattern": "^\\/$", "segments": [], "params": [], "component": "src/pages/index.astro", "pathname": "/", "prerender": false, "fallbackRoutes": [], "_meta": { "trailingSlash": "ignore" } } }], "base": "/", "trailingSlash": "ignore", "compressHTML": true, "componentMetadata": [["/home/runner/work/monext/monext/apps/kloun/src/pages/business/[...business].astro", { "propagation": "none", "containsHead": true }], ["/home/runner/work/monext/monext/apps/kloun/src/pages/cat/[...jokecat].astro", { "propagation": "none", "containsHead": true }], ["/home/runner/work/monext/monext/apps/kloun/src/pages/index.astro", { "propagation": "none", "containsHead": true }], ["/home/runner/work/monext/monext/apps/kloun/src/pages/joke/[jokeid].astro", { "propagation": "none", "containsHead": true }], ["/home/runner/work/monext/monext/apps/kloun/src/pages/memes.astro", { "propagation": "none", "containsHead": true }], ["/home/runner/work/monext/monext/apps/kloun/src/pages/news/[...newspage].astro", { "propagation": "none", "containsHead": true }], ["/home/runner/work/monext/monext/apps/kloun/src/pages/news/i/[slug]/[newsid].astro", { "propagation": "none", "containsHead": true }], ["/home/runner/work/monext/monext/apps/kloun/src/pages/other/about.astro", { "propagation": "none", "containsHead": true }], ["/home/runner/work/monext/monext/apps/kloun/src/pages/other/contact.astro", { "propagation": "none", "containsHead": true }], ["/home/runner/work/monext/monext/apps/kloun/src/pages/other/privacy.astro", { "propagation": "none", "containsHead": true }], ["/home/runner/work/monext/monext/apps/kloun/src/pages/other/terms.astro", { "propagation": "none", "containsHead": true }], ["/home/runner/work/monext/monext/apps/kloun/src/pages/tw/[...twitter].astro", { "propagation": "none", "containsHead": true }], ["/home/runner/work/monext/monext/apps/kloun/src/pages/tw/u/[user].astro", { "propagation": "none", "containsHead": true }], ["/home/runner/work/monext/monext/apps/kloun/src/pages/vicove.astro", { "propagation": "none", "containsHead": true }], ["/home/runner/work/monext/monext/apps/kloun/src/pages/news/tr/[id].astro", { "propagation": "none", "containsHead": true }]], "renderers": [], "clientDirectives": [["idle", '(()=>{var i=t=>{let e=async()=>{await(await t())()};"requestIdleCallback"in window?window.requestIdleCallback(e):setTimeout(e,200)};(self.Astro||(self.Astro={})).idle=i;window.dispatchEvent(new Event("astro:idle"));})();'], ["load", '(()=>{var e=async t=>{await(await t())()};(self.Astro||(self.Astro={})).load=e;window.dispatchEvent(new Event("astro:load"));})();'], ["media", '(()=>{var s=(i,t)=>{let a=async()=>{await(await i())()};if(t.value){let e=matchMedia(t.value);e.matches?a():e.addEventListener("change",a,{once:!0})}};(self.Astro||(self.Astro={})).media=s;window.dispatchEvent(new Event("astro:media"));})();'], ["only", '(()=>{var e=async t=>{await(await t())()};(self.Astro||(self.Astro={})).only=e;window.dispatchEvent(new Event("astro:only"));})();'], ["visible", '(()=>{var l=(s,i,o)=>{let r=async()=>{await(await s())()},t=typeof i.value=="object"?i.value:void 0,c={rootMargin:t==null?void 0:t.rootMargin},n=new IntersectionObserver(e=>{for(let a of e)if(a.isIntersecting){n.disconnect(),r();break}},c);for(let e of o.children)n.observe(e)};(self.Astro||(self.Astro={})).visible=l;window.dispatchEvent(new Event("astro:visible"));})();']], "entryModules": { "\0@astrojs-ssr-virtual-entry": "_worker.mjs", "\0@astro-renderers": "renderers.mjs", "\0noop-middleware": "_noop-middleware.mjs", "/src/pages/tw/[...twitter].astro": "chunks/pages/__DxGsAQqG.mjs", "/src/pages/news/tr/[id].astro": "chunks/pages/_id__C11Dlzq7.mjs", "/src/pages/api/img/[id].jpg.ts": "chunks/pages/_id__B7VpvpGu.mjs", "/src/pages/joke/[jokeid].astro": "chunks/pages/_jokeid__D-okbgnW.mjs", "/src/pages/news/i/[slug]/[newsid].astro": "chunks/pages/_newsid__Dp-Q_cV2.mjs", "/src/pages/tw/u/[user].astro": "chunks/pages/_user__B1WxMRwu.mjs", "/src/pages/other/about.astro": "chunks/pages/about_DS1AyclJ.mjs", "/src/pages/api/cache.ts": "chunks/pages/cache_B96RcsR2.mjs", "/src/pages/other/contact.astro": "chunks/pages/contact_rHzsJBOS.mjs", "/../../node_modules/astro/dist/assets/endpoint/generic.js": "chunks/pages/generic_Dg3fraW5.mjs", "/src/pages/index.astro": "chunks/pages/index_Bvl0vZVa.mjs", "/src/pages/memes.astro": "chunks/pages/memes_D-x3pmmn.mjs", "/src/pages/other/privacy.astro": "chunks/pages/privacy_LB-knq4L.mjs", "/src/pages/other/terms.astro": "chunks/pages/terms_n6QJ_92b.mjs", "/src/pages/vicove.astro": "chunks/pages/vicove_BG76BcLO.mjs", "\0@astrojs-manifest": "manifest_CK685D1V.mjs", "\0@astro-page:../../node_modules/astro/dist/assets/endpoint/generic@_@js": "chunks/generic_DXelvnfV.mjs", "\0@astro-page:src/pages/api/cache@_@ts": "chunks/cache_CxM4wECI.mjs", "\0@astro-page:src/pages/api/img/[id].jpg@_@ts": "chunks/_id__CGP2WXdM.mjs", "\0@astro-page:src/pages/business/[...business]@_@astro": "chunks/_.._CEcPGdZk.mjs", "\0@astro-page:src/pages/cat/[...jokecat]@_@astro": "chunks/_.._YZPPflW2.mjs", "\0@astro-page:src/pages/joke/[jokeid]@_@astro": "chunks/_jokeid__B9Jf0Wxb.mjs", "\0@astro-page:src/pages/memes@_@astro": "chunks/memes_CWP-a497.mjs", "\0@astro-page:src/pages/news/i/[slug]/[newsid]@_@astro": "chunks/_newsid__BcDxRY_R.mjs", "\0@astro-page:src/pages/news/tr/[id]@_@astro": "chunks/_id__CKOC9N_T.mjs", "\0@astro-page:src/pages/news/[...newspage]@_@astro": "chunks/_.._B8o-o42o.mjs", "\0@astro-page:src/pages/other/about@_@astro": "chunks/about_DVO9HVTu.mjs", "\0@astro-page:src/pages/other/contact@_@astro": "chunks/contact_Bbre7H9Z.mjs", "\0@astro-page:src/pages/other/privacy@_@astro": "chunks/privacy_BPBkW_rH.mjs", "\0@astro-page:src/pages/other/terms@_@astro": "chunks/terms_BQCIrs1A.mjs", "\0@astro-page:src/pages/tw/u/[user]@_@astro": "chunks/_user__DBpFqfWo.mjs", "\0@astro-page:src/pages/tw/[...twitter]@_@astro": "chunks/_.._BQmBYHww.mjs", "\0@astro-page:src/pages/vicove@_@astro": "chunks/vicove_BA876vaw.mjs", "\0@astro-page:src/pages/index@_@astro": "chunks/index_RZYCZe8A.mjs", "astro:scripts/before-hydration.js": "" }, "inlinedScripts": [], "assets": ["/_astro/inter-cyrillic-ext-wght-normal.DIEz8p5i.woff2", "/_astro/inter-cyrillic-wght-normal.BmJJXa8e.woff2", "/_astro/inter-greek-ext-wght-normal.D5AYLNiq.woff2", "/_astro/inter-greek-wght-normal.DyIDNIyN.woff2", "/_astro/inter-vietnamese-wght-normal._GQuwPVU.woff2", "/_astro/inter-latin-ext-wght-normal.CN1pIXkb.woff2", "/_astro/inter-latin-wght-normal.BgVq2Tq4.woff2", "/_astro/_business_.ClJHYUwc.css", "/_astro/_business_.DeUe6d1A.css", "/1.txt", "/Inter-roman.var.woff2", "/[id].jpg.txt", "/_routes.json", "/ads.js", "/ads.txt", "/amp.js", "/exp.js", "/favicon.ico", "/favicon.svg", "/kache.ts", "/logo1.png", "/modal.js", "/prefetch.js", "/robots.txt", "/satori.js", "/style.css", "/test.html", "/test.js", "/test.ts", "/$server_build/_noop-middleware.mjs", "/$server_build/_worker.mjs", "/$server_build/renderers.mjs", "/fb/[...facebook].astro", "/fbapps/untitled file", "/images/2023.jpg", "/images/2023.webp", "/images/apple-touch-icon.png", "/images/arrow.svg", "/images/bgg.svg", "/images/botwave-white.svg", "/images/botwave.svg", "/images/clown-face.png", "/images/cmass2022.jpg", "/images/cmass2022.webp", "/images/facebook.svg", "/images/favicon-16x16.png", "/images/favicon-32x32.ico", "/images/favicon.ico", "/images/logobottom.png", "/images/logobottomsmall.png", "/images/logobottomwhite.png", "/images/logodark.png", "/images/logosvg.svg", "/images/logowhite.png", "/images/pixel.png", "/images/placeholderfb.png", "/images/powered-white.png", "/images/powered-white.svg", "/images/powered.png", "/images/powered.sketch", "/images/powered.svg", "/images/program.svg", "/images/readmore.png", "/images/readmore.svg", "/images/spaceclown.svg", "/images/upwave-white.svg", "/images/upwave.svg", "/ml/test.js", "/ml/test.txt", "/ml/xx", "/ramdisk/ramdisk.js", "/ramdisk/server.js", "/rudixops/rudixops.png", "/sitemaps/sitemap.mjs", "/sitemaps/subpages.mjs", "/$server_build/_astro/_business_.ClJHYUwc.css", "/$server_build/_astro/_business_.DeUe6d1A.css", "/$server_build/_astro/inter-cyrillic-ext-wght-normal.DIEz8p5i.woff2", "/$server_build/_astro/inter-cyrillic-wght-normal.BmJJXa8e.woff2", "/$server_build/_astro/inter-greek-ext-wght-normal.D5AYLNiq.woff2", "/$server_build/_astro/inter-greek-wght-normal.DyIDNIyN.woff2", "/$server_build/_astro/inter-latin-ext-wght-normal.CN1pIXkb.woff2", "/$server_build/_astro/inter-latin-wght-normal.BgVq2Tq4.woff2", "/$server_build/_astro/inter-vietnamese-wght-normal._GQuwPVU.woff2", "/$server_build/chunks/_.._B8o-o42o.mjs", "/$server_build/chunks/_.._BQmBYHww.mjs", "/$server_build/chunks/_.._CEcPGdZk.mjs", "/$server_build/chunks/_.._YZPPflW2.mjs", "/$server_build/chunks/_id__CGP2WXdM.mjs", "/$server_build/chunks/_id__CKOC9N_T.mjs", "/$server_build/chunks/_jokeid__B9Jf0Wxb.mjs", "/$server_build/chunks/_newsid__BcDxRY_R.mjs", "/$server_build/chunks/_user__DBpFqfWo.mjs", "/$server_build/chunks/about_DVO9HVTu.mjs", "/$server_build/chunks/astro_CZ31vzIS.mjs", "/$server_build/chunks/cache_CxM4wECI.mjs", "/$server_build/chunks/contact_Bbre7H9Z.mjs", "/$server_build/chunks/generic_DXelvnfV.mjs", "/$server_build/chunks/index_RZYCZe8A.mjs", "/$server_build/chunks/memes_CWP-a497.mjs", "/$server_build/chunks/privacy_BPBkW_rH.mjs", "/$server_build/chunks/terms_BQCIrs1A.mjs", "/$server_build/chunks/vicove_BA876vaw.mjs", "/efs/git/ecosystem.config.js", "/efs/git/package-lock.json", "/efs/git/package.json", "/efs/git/ramdisk.js", "/efs/git/server.js", "/efs/node/ec2.txt", "/efs/node/package-lock.json", "/efs/node/package.json", "/efs/node/sqs.js", "/efs/node/sqslocal.js", "/efs/tmp/default.ini", "/efs/tmp/docker-compose.yml", "/efs/tmp/init.sh", "/efs/tmp/local.ini", "/efs/tmp/nginx.conf", "/fbapps/asciiprepare/dev.html", "/fbapps/asciiprepare/jq.js", "/fbapps/ass/app.js", "/fbapps/ass/app.json", "/fbapps/ass/dev.html", "/fbapps/ass/jq.js", "/fbapps/assbg_BG/app.json", "/fbapps/assbg_BG/bacl.jpg", "/fbapps/assbg_BG/dev.html", "/fbapps/assbg_BG/jq.js", "/fbapps/assen/dev.html", "/fbapps/assen_US/app.json", "/fbapps/assen_US/back.jpg", "/fbapps/assen_US/dev.html", "/fbapps/assen_US/jq.js", "/fbapps/banica2023/back.png", "/fbapps/banica2023/items.json", "/fbapps/banica2023/react.svg", "/fbapps/banica2023/svg.svg", "/fbapps/banicak2022/app.json", "/fbapps/banicak2022/back.jpg", "/fbapps/banicak2022/cover111x.jpg", "/fbapps/banicak2022/cover2.jpg", "/fbapps/banicak2022/dev.html", "/fbapps/banicak2022/items.json", "/fbapps/banicak2022/jq.js", "/fbapps/banicak2022/kolednabanica.json", "/fbapps/cars/app.json", "/fbapps/cars/cover.jpg", "/fbapps/cars/dev.html", "/fbapps/carss/app.json", "/fbapps/carss/cover.jpg", "/fbapps/carss/dev.html", "/fbapps/celeb/app.json", "/fbapps/celeb/back.jpg", "/fbapps/celeb/cover.jpg", "/fbapps/celeb/dev.html", "/fbapps/celebus/app.json", "/fbapps/celebus/cover.jpg", "/fbapps/celebus/dev.html", "/fbapps/denposleden/denposleden.json", "/fbapps/denposleden/script.js", "/fbapps/godini/app.json", "/fbapps/godini/cover.jpg", "/fbapps/godini/dev.html", "/fbapps/godini/script.js", "/fbapps/godini/vazrast.json", "/fbapps/goodbad/angular.html", "/fbapps/goodbad/app.json", "/fbapps/goodbad/back.png", "/fbapps/goodbad/items.json", "/fbapps/goodbad/svg.svg", "/fbapps/iaponsko/app.json", "/fbapps/iaponsko/bacl.jpg", "/fbapps/iaponsko/cover.jpg", "/fbapps/iaponsko/dev.html", "/fbapps/iaponsko/jq.js", "/fbapps/iaponskoime/app.json", "/fbapps/iaponskoime/back.jpg", "/fbapps/iaponskoime/dev.html", "/fbapps/iaponskoime/iaponskoime.json", "/fbapps/iaponskoime/script.js", "/fbapps/imetoti/imetoti.json", "/fbapps/imetoti/script.js", "/fbapps/indianskoime/app.json", "/fbapps/indianskoime/cover.jpg", "/fbapps/indianskoime/dev.html", "/fbapps/indianskoime/indianskoime.json", "/fbapps/japan/app.json", "/fbapps/japan/bacl.jpg", "/fbapps/japan/cover.jpg", "/fbapps/japan/dev.html", "/fbapps/japan/jq.js", "/fbapps/japanen/dev.html", "/fbapps/kolednaimg/1.jpg", "/fbapps/kolednaimg/10.jpg", "/fbapps/kolednaimg/11.jpg", "/fbapps/kolednaimg/12.jpg", "/fbapps/kolednaimg/13.jpg", "/fbapps/kolednaimg/14.jpg", "/fbapps/kolednaimg/15.jpg", "/fbapps/kolednaimg/16.jpg", "/fbapps/kolednaimg/17.jpg", "/fbapps/kolednaimg/18.jpg", "/fbapps/kolednaimg/19.jpg", "/fbapps/kolednaimg/2.jpg", "/fbapps/kolednaimg/20.jpg", "/fbapps/kolednaimg/21.jpg", "/fbapps/kolednaimg/22.jpg", "/fbapps/kolednaimg/23.jpg", "/fbapps/kolednaimg/24.jpg", "/fbapps/kolednaimg/25.jpg", "/fbapps/kolednaimg/26.jpg", "/fbapps/kolednaimg/27.jpg", "/fbapps/kolednaimg/28.jpg", "/fbapps/kolednaimg/29.jpg", "/fbapps/kolednaimg/3.jpg", "/fbapps/kolednaimg/30.jpg", "/fbapps/kolednaimg/4.jpg", "/fbapps/kolednaimg/5.jpg", "/fbapps/kolednaimg/6.jpg", "/fbapps/kolednaimg/7.jpg", "/fbapps/kolednaimg/8.jpg", "/fbapps/kolednaimg/9.jpg", "/fbapps/match/app.json", "/fbapps/match/back.jpg", "/fbapps/match/cover.jpg", "/fbapps/match/dev.html", "/fbapps/moiatazodia/app.json", "/fbapps/moiatazodia/script.js", "/fbapps/podhojda/app.json", "/fbapps/podhojda/back.jpg", "/fbapps/podhojda/cover.jpg", "/fbapps/podhojda/dev.html", "/fbapps/predishenjivot/app.json", "/fbapps/predishenjivot/back.jpg", "/fbapps/predishenjivot/back1.jpg", "/fbapps/predishenjivot/cover.jpg", "/fbapps/predishenjivot/dev.html", "/fbapps/vazrast/app.json", "/fbapps/vazrast/script.js", "/rudixops/bg/about.webarchive", "/rudixops/bg/contact.webarchive", "/rudixops/bg/index.webarchive", "/rudixops/bg/services.webarchive", "/images/font/Nunito-Black.ttf", "/images/font/Nunito-Black.woff", "/images/font/Nunito-Black.woff2", "/images/font/Nunito-BlackItalic.ttf", "/images/font/Nunito-BlackItalic.woff", "/images/font/Nunito-BlackItalic.woff2", "/images/font/Nunito-Bold.ttf", "/images/font/Nunito-Bold.woff", "/images/font/Nunito-Bold.woff2", "/images/font/Nunito-BoldItalic.ttf", "/images/font/Nunito-BoldItalic.woff", "/images/font/Nunito-BoldItalic.woff2", "/images/font/Nunito-ExtraBold.ttf", "/images/font/Nunito-ExtraBold.woff", "/images/font/Nunito-ExtraBold.woff2", "/images/font/Nunito-ExtraBoldItalic.ttf", "/images/font/Nunito-ExtraBoldItalic.woff", "/images/font/Nunito-ExtraBoldItalic.woff2", "/images/font/Nunito-ExtraLight.ttf", "/images/font/Nunito-ExtraLight.woff", "/images/font/Nunito-ExtraLight.woff2", "/images/font/Nunito-ExtraLightItalic.ttf", "/images/font/Nunito-ExtraLightItalic.woff", "/images/font/Nunito-ExtraLightItalic.woff2", "/images/font/Nunito-Italic.ttf", "/images/font/Nunito-Italic.woff", "/images/font/Nunito-Italic.woff2", "/images/font/Nunito-Light.ttf", "/images/font/Nunito-Light.woff", "/images/font/Nunito-Light.woff2", "/images/font/Nunito-LightItalic.ttf", "/images/font/Nunito-LightItalic.woff", "/images/font/Nunito-LightItalic.woff2", "/images/font/Nunito-Medium.ttf", "/images/font/Nunito-Medium.woff", "/images/font/Nunito-Medium.woff2", "/images/font/Nunito-MediumItalic.ttf", "/images/font/Nunito-MediumItalic.woff", "/images/font/Nunito-MediumItalic.woff2", "/images/font/Nunito-Regular.ttf", "/images/font/Nunito-Regular.woff", "/images/font/Nunito-Regular.woff2", "/images/font/Nunito-SemiBold.ttf", "/images/font/Nunito-SemiBold.woff", "/images/font/Nunito-SemiBold.woff2", "/images/font/Nunito-SemiBoldItalic.ttf", "/images/font/Nunito-SemiBoldItalic.woff", "/images/font/Nunito-SemiBoldItalic.woff2", "/images/font/woff.woff2", "/rudixops/en/about.webarchive", "/rudixops/en/contact.webarchive", "/rudixops/en/index.webarchive", "/rudixops/en/services.webarchive", "/$server_build/chunks/astro/assets-service_4eEmk9sZ.mjs", "/$server_build/chunks/pages/__CgdEe831.mjs", "/$server_build/chunks/pages/__CjObBNHd.mjs", "/$server_build/chunks/pages/__DxGsAQqG.mjs", "/$server_build/chunks/pages/__RxTcdYg8.mjs", "/$server_build/chunks/pages/_id__B7VpvpGu.mjs", "/$server_build/chunks/pages/_id__C11Dlzq7.mjs", "/$server_build/chunks/pages/_jokeid__D-okbgnW.mjs", "/$server_build/chunks/pages/_newsid__Dp-Q_cV2.mjs", "/$server_build/chunks/pages/_user__B1WxMRwu.mjs", "/$server_build/chunks/pages/about_DS1AyclJ.mjs", "/$server_build/chunks/pages/cache_B96RcsR2.mjs", "/$server_build/chunks/pages/contact_rHzsJBOS.mjs", "/$server_build/chunks/pages/generic_Dg3fraW5.mjs", "/$server_build/chunks/pages/index_Bvl0vZVa.mjs", "/$server_build/chunks/pages/memes_D-x3pmmn.mjs", "/$server_build/chunks/pages/privacy_LB-knq4L.mjs", "/$server_build/chunks/pages/terms_n6QJ_92b.mjs", "/$server_build/chunks/pages/vicove_BG76BcLO.mjs", "/efs/node/test/_replicator.1675279681.couch", "/efs/node/test/db.1675279527.couch", "/fbapps/cars/cars/alfa-romeo_spider.jpg", "/fbapps/cars/cars/audi_r8.jpg", "/fbapps/cars/cars/audi_s5.jpg", "/fbapps/cars/cars/bmw_m5.jpg", "/fbapps/cars/cars/bugatti_veyron.jpg", "/fbapps/cars/cars/cadillac_deville.jpg", "/fbapps/cars/cars/citroen_ds.jpg", "/fbapps/cars/cars/dodge_chalenger.jpg", "/fbapps/cars/cars/dodge_viper.jpg", "/fbapps/cars/cars/ferrari_enzo.jpg", "/fbapps/cars/cars/jaguar_xj.jpg", "/fbapps/cars/cars/jeep_wrangler.jpg", "/fbapps/cars/cars/land_rover.jpg", "/fbapps/cars/cars/mazda_3_sport.jpg", "/fbapps/cars/cars/mercedes_g_class.jpg", "/fbapps/cars/cars/mercedes_maybach.jpg", "/fbapps/cars/cars/mini_cooper.jpg", "/fbapps/cars/cars/mitsubishi_lancer.jpg", "/fbapps/cars/cars/nissan_GTR.jpg", "/fbapps/cars/cars/opel_calibra.jpg", "/fbapps/cars/cars/porsche_panamera.jpg", "/fbapps/cars/cars/toyota_supra.jpg", "/fbapps/cars/cars/volvo_xc90.jpg", "/fbapps/carss/cars/alfa-romeo_spider.jpg", "/fbapps/carss/cars/audi_r8.jpg", "/fbapps/carss/cars/audi_s5.jpg", "/fbapps/carss/cars/bmw_m5.jpg", "/fbapps/carss/cars/bugatti_veyron.jpg", "/fbapps/carss/cars/cadillac_deville.jpg", "/fbapps/carss/cars/citroen_ds.jpg", "/fbapps/carss/cars/dodge_chalenger.jpg", "/fbapps/carss/cars/dodge_viper.jpg", "/fbapps/carss/cars/ferrari_enzo.jpg", "/fbapps/carss/cars/jaguar_xj.jpg", "/fbapps/carss/cars/jeep_wrangler.jpg", "/fbapps/carss/cars/land_rover.jpg", "/fbapps/carss/cars/mazda_3_sport.jpg", "/fbapps/carss/cars/mercedes_g_class.jpg", "/fbapps/carss/cars/mercedes_maybach.jpg", "/fbapps/carss/cars/mini_cooper.jpg", "/fbapps/carss/cars/mitsubishi_lancer.jpg", "/fbapps/carss/cars/nissan_GTR.jpg", "/fbapps/carss/cars/opel_calibra.jpg", "/fbapps/carss/cars/porsche_panamera.jpg", "/fbapps/carss/cars/toyota_supra.jpg", "/fbapps/carss/cars/volvo_xc90.jpg", "/fbapps/celeb/images/female-Katharine-McPhee.jpg", "/fbapps/celeb/images/female-adele-300.jpg", "/fbapps/celeb/images/female-ali-larter1_300.jpg", "/fbapps/celeb/images/female-alicia-keys300.jpg", "/fbapps/celeb/images/female-amanda-bynes300.jpg", "/fbapps/celeb/images/female-amanda-seyfried-300.jpg", "/fbapps/celeb/images/female-america-ferrera300.jpg", "/fbapps/celeb/images/female-amy-adams300.jpg", "/fbapps/celeb/images/female-anna-nicole300.jpg", "/fbapps/celeb/images/female-anne-hathaway300.jpg", "/fbapps/celeb/images/female-ashlee-simpson300.jpg", "/fbapps/celeb/images/female-ashley-greene-300.jpg", "/fbapps/celeb/images/female-ashley-olsen300.jpg", "/fbapps/celeb/images/female-ashley-tisdale300.jpg", "/fbapps/celeb/images/female-audrina-patridge300.jpg", "/fbapps/celeb/images/female-avril-lavigne300.jpg", "/fbapps/celeb/images/female-beyonce-knowles.jpg", "/fbapps/celeb/images/female-brooke-shields300.jpg", "/fbapps/celeb/images/female-cameron-diaz.jpg", "/fbapps/celeb/images/female-carmen_electra.jpg", "/fbapps/celeb/images/female-cate-blanchett.jpg", "/fbapps/celeb/images/female-catherine-jones.jpg", "/fbapps/celeb/images/female-celine-dion.jpg", "/fbapps/celeb/images/female-charlize-theron.jpg", "/fbapps/celeb/images/female-cheryl-burke.jpg", "/fbapps/celeb/images/female-christina-aguilera.jpg", "/fbapps/celeb/images/female-christina-applegate300.jpg", "/fbapps/celeb/images/female-claire-danes300a.jpg", "/fbapps/celeb/images/female-courtney-cox300.jpg", "/fbapps/celeb/images/female-demi-lovato300.jpg", "/fbapps/celeb/images/female-demi-moore.jpg", "/fbapps/celeb/images/female-denise-richards.jpg", "/fbapps/celeb/images/female-drew-barrymore.jpg", "/fbapps/celeb/images/female-ed-westwick300.jpg", "/fbapps/celeb/images/female-elin-nordegren-300.jpg", "/fbapps/celeb/images/female-elisebeth-hasselback300.jpg", "/fbapps/celeb/images/female-emily-blunt300.jpg", "/fbapps/celeb/images/female-emma-stone-300.jpg", "/fbapps/celeb/images/female-emma-watson-300.jpg", "/fbapps/celeb/images/female-eva-longoria.jpg", "/fbapps/celeb/images/female-eva-mendes.jpg", "/fbapps/celeb/images/female-evan-rachelwood300.jpg", "/fbapps/celeb/images/female-evangeline-lilly300.jpg", "/fbapps/celeb/images/female-gisele-bundchen300.jpg", "/fbapps/celeb/images/female-gwen-stefani.jpg", "/fbapps/celeb/images/female-heidi-montag.jpg", "/fbapps/celeb/images/female-hilary-duff.jpg", "/fbapps/celeb/images/female-january-jones-300.jpg", "/fbapps/celeb/images/female-jennifer-aniston.jpg", "/fbapps/celeb/images/female-jennifer-lawrence-300.jpg", "/fbapps/celeb/images/female-jennifer-lopez.jpg", "/fbapps/celeb/images/female-jessica-alba.jpg", "/fbapps/celeb/images/female-jessica-biel.jpg", "/fbapps/celeb/images/female-jessica-simpson.jpg", "/fbapps/celeb/images/female-jessica-szohr-300.jpg", "/fbapps/celeb/images/female-julia-roberts.jpg", "/fbapps/celeb/images/female-julianne-hough.jpg", "/fbapps/celeb/images/female-kate-beckinsale.jpg", "/fbapps/celeb/images/female-kate-hudson.jpg", "/fbapps/celeb/images/female-kate-moss.jpg", "/fbapps/celeb/images/female-katherine-heig.jpg", "/fbapps/celeb/images/female-katie-holmes-300.jpg", "/fbapps/celeb/images/female-keira-knightley.jpg", "/fbapps/celeb/images/female-kevin-federline300.jpg", "/fbapps/celeb/images/female-kim-kardashian300b.jpg", "/fbapps/celeb/images/female-kristen-stewart300.jpg", "/fbapps/celeb/images/female-kristin-cavallari.jpg", "/fbapps/celeb/images/female-lauren-conrad300.jpg", "/fbapps/celeb/images/female-leighton-meester300.jpg", "/fbapps/celeb/images/female-lindsay-lohan.jpg", "/fbapps/celeb/images/female-mandy-moore.jpg", "/fbapps/celeb/images/female-megan-fox.jpg", "/fbapps/celeb/images/female-mila-kunis-300.jpg", "/fbapps/celeb/images/female-mischa-barton.jpg", "/fbapps/celeb/images/female-natalie-portman300.jpg", "/fbapps/celeb/images/female-penelope-cruz300.jpg", "/fbapps/celeb/images/female-pink300.jpg", "/fbapps/celeb/images/female-rachel-bilson300.jpg", "/fbapps/celeb/images/female-salma-hayek.jpg", "/fbapps/celeb/images/female-sandra-bullock.jpg", "/fbapps/celeb/images/female-scarett-johansson.jpg", "/fbapps/celeb/images/female-selena-gomez.jpg", "/fbapps/celeb/images/female-shakira.jpg", "/fbapps/celeb/images/female-shania-twain300.jpg", "/fbapps/celeb/images/female-sheryl-crow300.jpg", "/fbapps/celeb/images/female-sienna-miller.jpg", "/fbapps/celeb/images/female-taylor-momsen300.jpg", "/fbapps/celeb/images/male-adam-levine-300.jpg", "/fbapps/celeb/images/male-alexander-skarsgard-300.jpg", "/fbapps/celeb/images/male-andrew-garfield-300.jpg", "/fbapps/celeb/images/male-ashton-kutcher300.jpg", "/fbapps/celeb/images/male-ben-affleck-300.jpg", "/fbapps/celeb/images/male-brad-pitt.jpg", "/fbapps/celeb/images/male-bradley-cooper.jpg", "/fbapps/celeb/images/male-brody-jenner300.jpg", "/fbapps/celeb/images/male-bruce-willis300.jpg", "/fbapps/celeb/images/male-chace-crawford300.jpg", "/fbapps/celeb/images/male-channing-tatum.jpg", "/fbapps/celeb/images/male-charlie-sheen-300.jpg", "/fbapps/celeb/images/male-chris-hemsworth.jpg", "/fbapps/celeb/images/male-chris-pine-300.jpg", "/fbapps/celeb/images/male-christian-bale-300.jpg", "/fbapps/celeb/images/male-clay-aiken.jpg", "/fbapps/celeb/images/male-colin-farrell300.jpg", "/fbapps/celeb/images/male-cory-monteith.jpg", "/fbapps/celeb/images/male-daniel-radcliffe300.jpg", "/fbapps/celeb/images/male-david-archuleta.jpg", "/fbapps/celeb/images/male-david-beckham.jpg", "/fbapps/celeb/images/male-david-cook.jpg", "/fbapps/celeb/images/male-ed-westwick300.jpg", "/fbapps/celeb/images/male-george-clooney.jpg", "/fbapps/celeb/images/male-gerard-butler300.jpg", "/fbapps/celeb/images/male-heath-ledger.jpg", "/fbapps/celeb/images/male-hugh-jackman.jpg", "/fbapps/celeb/images/male-jake-gyllenhaal.jpg", "/fbapps/celeb/images/male-james-franco300.jpg", "/fbapps/celeb/images/male-john-krasinski300.jpg", "/fbapps/celeb/images/male-john-mayer300.jpg", "/fbapps/celeb/images/male-johnny-depp.jpg", "/fbapps/celeb/images/male-jon-hamm-300.jpg", "/fbapps/celeb/images/male-josh-duhamel.jpg", "/fbapps/celeb/images/male-jude-law300.jpg", "/fbapps/celeb/images/male-justin-timberlake.jpg", "/fbapps/celeb/images/male-keanu-reeves300.jpg", "/fbapps/celeb/images/male-keith-urban.jpg", "/fbapps/celeb/images/male-kellan-lutz-300.jpg", "/fbapps/celeb/images/male-kelly-clarkson.jpg", "/fbapps/celeb/images/male-kenny-chesney300.jpg", "/fbapps/celeb/images/male-kris-allen-300.jpg", "/fbapps/celeb/images/male-leo-dicaprio.jpg", "/fbapps/celeb/images/male-liam-hemsworth-300.jpg", "/fbapps/celeb/images/male-mario-lopez-300.jpg", "/fbapps/celeb/images/male-mark-ballas300.jpg", "/fbapps/celeb/images/male-mark-wahlberg-300.jpg", "/fbapps/celeb/images/male-matt-damon300.jpg", "/fbapps/celeb/images/male-matthew-mcconaughey.jpg", "/fbapps/celeb/images/male-milo-ventimiglia300.jpg", "/fbapps/celeb/images/male-nick-lachey300.jpg", "/fbapps/celeb/images/male-orlando-bloom300.jpg", "/fbapps/celeb/images/male-patrick-dempsey.jpg", "/fbapps/celeb/images/male-penn-badgley300.jpg", "/fbapps/celeb/images/male-prince-harry300.jpg", "/fbapps/celeb/images/male-prince-william300.jpg", "/fbapps/celeb/images/male-robert-pattinson300.jpg", "/fbapps/celeb/images/male-robert-pattinson300a.jpg", "/fbapps/celeb/images/male-ryan-gosling-300.jpg", "/fbapps/celeb/images/male-ryan-phillippe300.jpg", "/fbapps/celeb/images/male-ryan-reynoldsa300.jpg", "/fbapps/celeb/images/male-shia-labeouf300.jpg", "/fbapps/celeb/images/male-taylor-hicks.jpg", "/fbapps/celeb/images/male-taylor-lautner300.jpg", "/fbapps/celeb/images/male-tim-mcgraw.jpg", "/fbapps/celeb/images/male-tom-brady300.jpg", "/fbapps/celeb/images/male-tom-cruise.jpg", "/fbapps/godini/godini/0.jpg", "/fbapps/godini/godini/1.jpg", "/fbapps/godini/godini/2.jpg", "/fbapps/godini/godini/3.jpg", "/fbapps/godini/godini/4.jpg", "/fbapps/godini/godini/5.jpg", "/fbapps/godini/godini/6.jpg", "/fbapps/godini/godini/7.jpg", "/fbapps/celebus/images/female-Katharine-McPhee.jpg", "/fbapps/celebus/images/female-adele-300.jpg", "/fbapps/celebus/images/female-ali-larter1_300.jpg", "/fbapps/celebus/images/female-alicia-keys300.jpg", "/fbapps/celebus/images/female-amanda-bynes300.jpg", "/fbapps/celebus/images/female-amanda-seyfried-300.jpg", "/fbapps/celebus/images/female-america-ferrera300.jpg", "/fbapps/celebus/images/female-amy-adams300.jpg", "/fbapps/celebus/images/female-anna-nicole300.jpg", "/fbapps/celebus/images/female-anne-hathaway300.jpg", "/fbapps/celebus/images/female-ashlee-simpson300.jpg", "/fbapps/celebus/images/female-ashley-greene-300.jpg", "/fbapps/celebus/images/female-ashley-olsen300.jpg", "/fbapps/celebus/images/female-ashley-tisdale300.jpg", "/fbapps/celebus/images/female-audrina-patridge300.jpg", "/fbapps/celebus/images/female-avril-lavigne300.jpg", "/fbapps/celebus/images/female-beyonce-knowles.jpg", "/fbapps/celebus/images/female-brooke-shields300.jpg", "/fbapps/celebus/images/female-cameron-diaz.jpg", "/fbapps/celebus/images/female-carmen_electra.jpg", "/fbapps/celebus/images/female-cate-blanchett.jpg", "/fbapps/celebus/images/female-catherine-jones.jpg", "/fbapps/celebus/images/female-celine-dion.jpg", "/fbapps/celebus/images/female-charlize-theron.jpg", "/fbapps/celebus/images/female-cheryl-burke.jpg", "/fbapps/celebus/images/female-christina-aguilera.jpg", "/fbapps/celebus/images/female-christina-applegate300.jpg", "/fbapps/celebus/images/female-claire-danes300a.jpg", "/fbapps/celebus/images/female-courtney-cox300.jpg", "/fbapps/celebus/images/female-demi-lovato300.jpg", "/fbapps/celebus/images/female-demi-moore.jpg", "/fbapps/celebus/images/female-denise-richards.jpg", "/fbapps/celebus/images/female-drew-barrymore.jpg", "/fbapps/celebus/images/female-ed-westwick300.jpg", "/fbapps/celebus/images/female-elin-nordegren-300.jpg", "/fbapps/celebus/images/female-elisebeth-hasselback300.jpg", "/fbapps/celebus/images/female-emily-blunt300.jpg", "/fbapps/celebus/images/female-emma-stone-300.jpg", "/fbapps/celebus/images/female-emma-watson-300.jpg", "/fbapps/celebus/images/female-eva-longoria.jpg", "/fbapps/celebus/images/female-eva-mendes.jpg", "/fbapps/celebus/images/female-evan-rachelwood300.jpg", "/fbapps/celebus/images/female-evangeline-lilly300.jpg", "/fbapps/celebus/images/female-gisele-bundchen300.jpg", "/fbapps/celebus/images/female-gwen-stefani.jpg", "/fbapps/celebus/images/female-heidi-montag.jpg", "/fbapps/celebus/images/female-hilary-duff.jpg", "/fbapps/celebus/images/female-january-jones-300.jpg", "/fbapps/celebus/images/female-jennifer-aniston.jpg", "/fbapps/celebus/images/female-jennifer-lawrence-300.jpg", "/fbapps/celebus/images/female-jennifer-lopez.jpg", "/fbapps/celebus/images/female-jessica-alba.jpg", "/fbapps/celebus/images/female-jessica-biel.jpg", "/fbapps/celebus/images/female-jessica-simpson.jpg", "/fbapps/celebus/images/female-jessica-szohr-300.jpg", "/fbapps/celebus/images/female-julia-roberts.jpg", "/fbapps/celebus/images/female-julianne-hough.jpg", "/fbapps/celebus/images/female-kate-beckinsale.jpg", "/fbapps/celebus/images/female-kate-hudson.jpg", "/fbapps/celebus/images/female-kate-moss.jpg", "/fbapps/celebus/images/female-katherine-heig.jpg", "/fbapps/celebus/images/female-katie-holmes-300.jpg", "/fbapps/celebus/images/female-keira-knightley.jpg", "/fbapps/celebus/images/female-kevin-federline300.jpg", "/fbapps/celebus/images/female-kim-kardashian300b.jpg", "/fbapps/celebus/images/female-kristen-stewart300.jpg", "/fbapps/celebus/images/female-kristin-cavallari.jpg", "/fbapps/celebus/images/female-lauren-conrad300.jpg", "/fbapps/celebus/images/female-leighton-meester300.jpg", "/fbapps/celebus/images/female-lindsay-lohan.jpg", "/fbapps/celebus/images/female-mandy-moore.jpg", "/fbapps/celebus/images/female-megan-fox.jpg", "/fbapps/celebus/images/female-mila-kunis-300.jpg", "/fbapps/celebus/images/female-mischa-barton.jpg", "/fbapps/celebus/images/female-natalie-portman300.jpg", "/fbapps/celebus/images/female-penelope-cruz300.jpg", "/fbapps/celebus/images/female-pink300.jpg", "/fbapps/celebus/images/female-rachel-bilson300.jpg", "/fbapps/celebus/images/female-salma-hayek.jpg", "/fbapps/celebus/images/female-sandra-bullock.jpg", "/fbapps/celebus/images/female-scarett-johansson.jpg", "/fbapps/celebus/images/female-selena-gomez.jpg", "/fbapps/celebus/images/female-shakira.jpg", "/fbapps/celebus/images/female-shania-twain300.jpg", "/fbapps/celebus/images/female-sheryl-crow300.jpg", "/fbapps/celebus/images/female-sienna-miller.jpg", "/fbapps/celebus/images/female-taylor-momsen300.jpg", "/fbapps/celebus/images/male-adam-levine-300.jpg", "/fbapps/celebus/images/male-alexander-skarsgard-300.jpg", "/fbapps/celebus/images/male-andrew-garfield-300.jpg", "/fbapps/celebus/images/male-ashton-kutcher300.jpg", "/fbapps/celebus/images/male-ben-affleck-300.jpg", "/fbapps/celebus/images/male-brad-pitt.jpg", "/fbapps/celebus/images/male-bradley-cooper.jpg", "/fbapps/celebus/images/male-brody-jenner300.jpg", "/fbapps/celebus/images/male-bruce-willis300.jpg", "/fbapps/celebus/images/male-chace-crawford300.jpg", "/fbapps/celebus/images/male-channing-tatum.jpg", "/fbapps/celebus/images/male-charlie-sheen-300.jpg", "/fbapps/celebus/images/male-chris-hemsworth.jpg", "/fbapps/celebus/images/male-chris-pine-300.jpg", "/fbapps/celebus/images/male-christian-bale-300.jpg", "/fbapps/celebus/images/male-clay-aiken.jpg", "/fbapps/celebus/images/male-colin-farrell300.jpg", "/fbapps/celebus/images/male-cory-monteith.jpg", "/fbapps/celebus/images/male-daniel-radcliffe300.jpg", "/fbapps/celebus/images/male-david-archuleta.jpg", "/fbapps/celebus/images/male-david-beckham.jpg", "/fbapps/celebus/images/male-david-cook.jpg", "/fbapps/celebus/images/male-ed-westwick300.jpg", "/fbapps/celebus/images/male-george-clooney.jpg", "/fbapps/celebus/images/male-gerard-butler300.jpg", "/fbapps/celebus/images/male-heath-ledger.jpg", "/fbapps/celebus/images/male-hugh-jackman.jpg", "/fbapps/celebus/images/male-jake-gyllenhaal.jpg", "/fbapps/celebus/images/male-james-franco300.jpg", "/fbapps/celebus/images/male-john-krasinski300.jpg", "/fbapps/celebus/images/male-john-mayer300.jpg", "/fbapps/celebus/images/male-johnny-depp.jpg", "/fbapps/celebus/images/male-jon-hamm-300.jpg", "/fbapps/celebus/images/male-josh-duhamel.jpg", "/fbapps/celebus/images/male-jude-law300.jpg", "/fbapps/celebus/images/male-justin-timberlake.jpg", "/fbapps/celebus/images/male-keanu-reeves300.jpg", "/fbapps/celebus/images/male-keith-urban.jpg", "/fbapps/celebus/images/male-kellan-lutz-300.jpg", "/fbapps/celebus/images/male-kelly-clarkson.jpg", "/fbapps/celebus/images/male-kenny-chesney300.jpg", "/fbapps/celebus/images/male-kris-allen-300.jpg", "/fbapps/celebus/images/male-leo-dicaprio.jpg", "/fbapps/celebus/images/male-liam-hemsworth-300.jpg", "/fbapps/celebus/images/male-mario-lopez-300.jpg", "/fbapps/celebus/images/male-mark-ballas300.jpg", "/fbapps/celebus/images/male-mark-wahlberg-300.jpg", "/fbapps/celebus/images/male-matt-damon300.jpg", "/fbapps/celebus/images/male-matthew-mcconaughey.jpg", "/fbapps/celebus/images/male-milo-ventimiglia300.jpg", "/fbapps/celebus/images/male-nick-lachey300.jpg", "/fbapps/celebus/images/male-orlando-bloom300.jpg", "/fbapps/celebus/images/male-patrick-dempsey.jpg", "/fbapps/celebus/images/male-penn-badgley300.jpg", "/fbapps/celebus/images/male-prince-harry300.jpg", "/fbapps/celebus/images/male-prince-william300.jpg", "/fbapps/celebus/images/male-robert-pattinson300a.jpg", "/fbapps/celebus/images/male-ryan-gosling-300.jpg", "/fbapps/celebus/images/male-ryan-phillippe300.jpg", "/fbapps/celebus/images/male-ryan-reynoldsa300.jpg", "/fbapps/celebus/images/male-shia-labeouf300.jpg", "/fbapps/celebus/images/male-taylor-hicks.jpg", "/fbapps/celebus/images/male-taylor-lautner300.jpg", "/fbapps/celebus/images/male-tim-mcgraw.jpg", "/fbapps/celebus/images/male-tom-brady300.jpg", "/fbapps/celebus/images/male-tom-cruise.jpg", "/fbapps/goodbad/src/fonts.txt", "/fbapps/goodbad/src/jquery.percentageloader-0.1.css", "/fbapps/goodbad/src/jquery.percentageloader-0.1.js", "/fbapps/goodbad/src/jquery.percentageloader-0.1.min.js", "/fbapps/match/images/female-Katharine-McPhee.jpg", "/fbapps/match/images/female-adele-300.jpg", "/fbapps/match/images/female-ali-larter1_300.jpg", "/fbapps/match/images/female-alicia-keys300.jpg", "/fbapps/match/images/female-amanda-bynes300.jpg", "/fbapps/match/images/female-amanda-seyfried-300.jpg", "/fbapps/match/images/female-america-ferrera300.jpg", "/fbapps/match/images/female-amy-adams300.jpg", "/fbapps/match/images/female-anna-nicole300.jpg", "/fbapps/match/images/female-anne-hathaway300.jpg", "/fbapps/match/images/female-ashlee-simpson300.jpg", "/fbapps/match/images/female-ashley-greene-300.jpg", "/fbapps/match/images/female-ashley-olsen300.jpg", "/fbapps/match/images/female-ashley-tisdale300.jpg", "/fbapps/match/images/female-audrina-patridge300.jpg", "/fbapps/match/images/female-avril-lavigne300.jpg", "/fbapps/match/images/female-beyonce-knowles.jpg", "/fbapps/match/images/female-brooke-shields300.jpg", "/fbapps/match/images/female-cameron-diaz.jpg", "/fbapps/match/images/female-carmen_electra.jpg", "/fbapps/match/images/female-cate-blanchett.jpg", "/fbapps/match/images/female-catherine-jones.jpg", "/fbapps/match/images/female-celine-dion.jpg", "/fbapps/match/images/female-charlize-theron.jpg", "/fbapps/match/images/female-cheryl-burke.jpg", "/fbapps/match/images/female-christina-aguilera.jpg", "/fbapps/match/images/female-christina-applegate300.jpg", "/fbapps/match/images/female-claire-danes300a.jpg", "/fbapps/match/images/female-courtney-cox300.jpg", "/fbapps/match/images/female-demi-lovato300.jpg", "/fbapps/match/images/female-demi-moore.jpg", "/fbapps/match/images/female-denise-richards.jpg", "/fbapps/match/images/female-drew-barrymore.jpg", "/fbapps/match/images/female-ed-westwick300.jpg", "/fbapps/match/images/female-elin-nordegren-300.jpg", "/fbapps/match/images/female-elisebeth-hasselback300.jpg", "/fbapps/match/images/female-emily-blunt300.jpg", "/fbapps/match/images/female-emma-stone-300.jpg", "/fbapps/match/images/female-emma-watson-300.jpg", "/fbapps/match/images/female-eva-longoria.jpg", "/fbapps/match/images/female-eva-mendes.jpg", "/fbapps/match/images/female-evan-rachelwood300.jpg", "/fbapps/match/images/female-evangeline-lilly300.jpg", "/fbapps/match/images/female-gisele-bundchen300.jpg", "/fbapps/match/images/female-gwen-stefani.jpg", "/fbapps/match/images/female-heidi-montag.jpg", "/fbapps/match/images/female-hilary-duff.jpg", "/fbapps/match/images/female-january-jones-300.jpg", "/fbapps/match/images/female-jennifer-aniston.jpg", "/fbapps/match/images/female-jennifer-lawrence-300.jpg", "/fbapps/match/images/female-jennifer-lopez.jpg", "/fbapps/match/images/female-jessica-alba.jpg", "/fbapps/match/images/female-jessica-biel.jpg", "/fbapps/match/images/female-jessica-simpson.jpg", "/fbapps/match/images/female-jessica-szohr-300.jpg", "/fbapps/match/images/female-julia-roberts.jpg", "/fbapps/match/images/female-julianne-hough.jpg", "/fbapps/match/images/female-kate-beckinsale.jpg", "/fbapps/match/images/female-kate-hudson.jpg", "/fbapps/match/images/female-kate-moss.jpg", "/fbapps/match/images/female-katherine-heig.jpg", "/fbapps/match/images/female-katie-holmes-300.jpg", "/fbapps/match/images/female-keira-knightley.jpg", "/fbapps/match/images/female-kevin-federline300.jpg", "/fbapps/match/images/female-kim-kardashian300b.jpg", "/fbapps/match/images/female-kristen-stewart300.jpg", "/fbapps/match/images/female-kristin-cavallari.jpg", "/fbapps/match/images/female-lauren-conrad300.jpg", "/fbapps/match/images/female-leighton-meester300.jpg", "/fbapps/match/images/female-lindsay-lohan.jpg", "/fbapps/match/images/female-mandy-moore.jpg", "/fbapps/match/images/female-megan-fox.jpg", "/fbapps/match/images/female-mila-kunis-300.jpg", "/fbapps/match/images/female-mischa-barton.jpg", "/fbapps/match/images/female-natalie-portman300.jpg", "/fbapps/match/images/female-penelope-cruz300.jpg", "/fbapps/match/images/female-pink300.jpg", "/fbapps/match/images/female-rachel-bilson300.jpg", "/fbapps/match/images/female-salma-hayek.jpg", "/fbapps/match/images/female-sandra-bullock.jpg", "/fbapps/match/images/female-scarett-johansson.jpg", "/fbapps/match/images/female-selena-gomez.jpg", "/fbapps/match/images/female-shakira.jpg", "/fbapps/match/images/female-shania-twain300.jpg", "/fbapps/match/images/female-sheryl-crow300.jpg", "/fbapps/match/images/female-sienna-miller.jpg", "/fbapps/match/images/female-taylor-momsen300.jpg", "/fbapps/match/images/male-adam-levine-300.jpg", "/fbapps/match/images/male-alexander-skarsgard-300.jpg", "/fbapps/match/images/male-andrew-garfield-300.jpg", "/fbapps/match/images/male-ashton-kutcher300.jpg", "/fbapps/match/images/male-ben-affleck-300.jpg", "/fbapps/match/images/male-brad-pitt.jpg", "/fbapps/match/images/male-bradley-cooper.jpg", "/fbapps/match/images/male-brody-jenner300.jpg", "/fbapps/match/images/male-bruce-willis300.jpg", "/fbapps/match/images/male-chace-crawford300.jpg", "/fbapps/match/images/male-channing-tatum.jpg", "/fbapps/match/images/male-charlie-sheen-300.jpg", "/fbapps/match/images/male-chris-hemsworth.jpg", "/fbapps/match/images/male-chris-pine-300.jpg", "/fbapps/match/images/male-christian-bale-300.jpg", "/fbapps/match/images/male-clay-aiken.jpg", "/fbapps/match/images/male-colin-farrell300.jpg", "/fbapps/match/images/male-cory-monteith.jpg", "/fbapps/match/images/male-daniel-radcliffe300.jpg", "/fbapps/match/images/male-david-archuleta.jpg", "/fbapps/match/images/male-david-beckham.jpg", "/fbapps/match/images/male-david-cook.jpg", "/fbapps/match/images/male-ed-westwick300.jpg", "/fbapps/match/images/male-george-clooney.jpg", "/fbapps/match/images/male-gerard-butler300.jpg", "/fbapps/match/images/male-heath-ledger.jpg", "/fbapps/match/images/male-hugh-jackman.jpg", "/fbapps/match/images/male-jake-gyllenhaal.jpg", "/fbapps/match/images/male-james-franco300.jpg", "/fbapps/match/images/male-john-krasinski300.jpg", "/fbapps/match/images/male-john-mayer300.jpg", "/fbapps/match/images/male-johnny-depp.jpg", "/fbapps/match/images/male-jon-hamm-300.jpg", "/fbapps/match/images/male-josh-duhamel.jpg", "/fbapps/match/images/male-jude-law300.jpg", "/fbapps/match/images/male-justin-timberlake.jpg", "/fbapps/match/images/male-keanu-reeves300.jpg", "/fbapps/match/images/male-keith-urban.jpg", "/fbapps/match/images/male-kellan-lutz-300.jpg", "/fbapps/match/images/male-kelly-clarkson.jpg", "/fbapps/match/images/male-kenny-chesney300.jpg", "/fbapps/match/images/male-kris-allen-300.jpg", "/fbapps/match/images/male-leo-dicaprio.jpg", "/fbapps/match/images/male-liam-hemsworth-300.jpg", "/fbapps/match/images/male-mario-lopez-300.jpg", "/fbapps/match/images/male-mark-ballas300.jpg", "/fbapps/match/images/male-mark-wahlberg-300.jpg", "/fbapps/match/images/male-matt-damon300.jpg", "/fbapps/match/images/male-matthew-mcconaughey.jpg", "/fbapps/match/images/male-milo-ventimiglia300.jpg", "/fbapps/match/images/male-nick-lachey300.jpg", "/fbapps/match/images/male-orlando-bloom300.jpg", "/fbapps/match/images/male-patrick-dempsey.jpg", "/fbapps/match/images/male-penn-badgley300.jpg", "/fbapps/match/images/male-prince-harry300.jpg", "/fbapps/match/images/male-prince-william300.jpg", "/fbapps/match/images/male-robert-pattinson300.jpg", "/fbapps/match/images/male-robert-pattinson300a.jpg", "/fbapps/match/images/male-ryan-gosling-300.jpg", "/fbapps/match/images/male-ryan-phillippe300.jpg", "/fbapps/match/images/male-ryan-reynoldsa300.jpg", "/fbapps/match/images/male-shia-labeouf300.jpg", "/fbapps/match/images/male-taylor-hicks.jpg", "/fbapps/match/images/male-taylor-lautner300.jpg", "/fbapps/match/images/male-tim-mcgraw.jpg", "/fbapps/match/images/male-tom-brady300.jpg", "/fbapps/match/images/male-tom-cruise.jpg", "/fbapps/podhojda/images/female-Katharine-McPhee.jpg", "/fbapps/podhojda/images/female-adele-300.jpg", "/fbapps/podhojda/images/female-ali-larter1_300.jpg", "/fbapps/podhojda/images/female-alicia-keys300.jpg", "/fbapps/podhojda/images/female-amanda-bynes300.jpg", "/fbapps/podhojda/images/female-amanda-seyfried-300.jpg", "/fbapps/podhojda/images/female-america-ferrera300.jpg", "/fbapps/podhojda/images/female-amy-adams300.jpg", "/fbapps/podhojda/images/female-anna-nicole300.jpg", "/fbapps/podhojda/images/female-anne-hathaway300.jpg", "/fbapps/podhojda/images/female-ashlee-simpson300.jpg", "/fbapps/podhojda/images/female-ashley-greene-300.jpg", "/fbapps/podhojda/images/female-ashley-olsen300.jpg", "/fbapps/podhojda/images/female-ashley-tisdale300.jpg", "/fbapps/podhojda/images/female-audrina-patridge300.jpg", "/fbapps/podhojda/images/female-avril-lavigne300.jpg", "/fbapps/podhojda/images/female-beyonce-knowles.jpg", "/fbapps/podhojda/images/female-brooke-shields300.jpg", "/fbapps/podhojda/images/female-cameron-diaz.jpg", "/fbapps/podhojda/images/female-carmen_electra.jpg", "/fbapps/podhojda/images/female-cate-blanchett.jpg", "/fbapps/podhojda/images/female-catherine-jones.jpg", "/fbapps/podhojda/images/female-celine-dion.jpg", "/fbapps/podhojda/images/female-charlize-theron.jpg", "/fbapps/podhojda/images/female-cheryl-burke.jpg", "/fbapps/podhojda/images/female-christina-aguilera.jpg", "/fbapps/podhojda/images/female-christina-applegate300.jpg", "/fbapps/podhojda/images/female-claire-danes300a.jpg", "/fbapps/podhojda/images/female-courtney-cox300.jpg", "/fbapps/podhojda/images/female-demi-lovato300.jpg", "/fbapps/podhojda/images/female-demi-moore.jpg", "/fbapps/podhojda/images/female-denise-richards.jpg", "/fbapps/podhojda/images/female-drew-barrymore.jpg", "/fbapps/podhojda/images/female-ed-westwick300.jpg", "/fbapps/podhojda/images/female-elin-nordegren-300.jpg", "/fbapps/podhojda/images/female-elisebeth-hasselback300.jpg", "/fbapps/podhojda/images/female-emily-blunt300.jpg", "/fbapps/podhojda/images/female-emma-stone-300.jpg", "/fbapps/podhojda/images/female-emma-watson-300.jpg", "/fbapps/podhojda/images/female-eva-longoria.jpg", "/fbapps/podhojda/images/female-eva-mendes.jpg", "/fbapps/podhojda/images/female-evan-rachelwood300.jpg", "/fbapps/podhojda/images/female-evangeline-lilly300.jpg", "/fbapps/podhojda/images/female-gisele-bundchen300.jpg", "/fbapps/podhojda/images/female-gwen-stefani.jpg", "/fbapps/podhojda/images/female-heidi-montag.jpg", "/fbapps/podhojda/images/female-hilary-duff.jpg", "/fbapps/podhojda/images/female-january-jones-300.jpg", "/fbapps/podhojda/images/female-jennifer-aniston.jpg", "/fbapps/podhojda/images/female-jennifer-lawrence-300.jpg", "/fbapps/podhojda/images/female-jennifer-lopez.jpg", "/fbapps/podhojda/images/female-jessica-alba.jpg", "/fbapps/podhojda/images/female-jessica-biel.jpg", "/fbapps/podhojda/images/female-jessica-simpson.jpg", "/fbapps/podhojda/images/female-jessica-szohr-300.jpg", "/fbapps/podhojda/images/female-julia-roberts.jpg", "/fbapps/podhojda/images/female-julianne-hough.jpg", "/fbapps/podhojda/images/female-kate-beckinsale.jpg", "/fbapps/podhojda/images/female-kate-hudson.jpg", "/fbapps/podhojda/images/female-kate-moss.jpg", "/fbapps/podhojda/images/female-katherine-heig.jpg", "/fbapps/podhojda/images/female-katie-holmes-300.jpg", "/fbapps/podhojda/images/female-keira-knightley.jpg", "/fbapps/podhojda/images/female-kevin-federline300.jpg", "/fbapps/podhojda/images/female-kim-kardashian300b.jpg", "/fbapps/podhojda/images/female-kristen-stewart300.jpg", "/fbapps/podhojda/images/female-kristin-cavallari.jpg", "/fbapps/podhojda/images/female-lauren-conrad300.jpg", "/fbapps/podhojda/images/female-leighton-meester300.jpg", "/fbapps/podhojda/images/female-lindsay-lohan.jpg", "/fbapps/podhojda/images/female-mandy-moore.jpg", "/fbapps/podhojda/images/female-megan-fox.jpg", "/fbapps/podhojda/images/female-mila-kunis-300.jpg", "/fbapps/podhojda/images/female-mischa-barton.jpg", "/fbapps/podhojda/images/female-natalie-portman300.jpg", "/fbapps/podhojda/images/female-penelope-cruz300.jpg", "/fbapps/podhojda/images/female-pink300.jpg", "/fbapps/podhojda/images/female-rachel-bilson300.jpg", "/fbapps/podhojda/images/female-salma-hayek.jpg", "/fbapps/podhojda/images/female-sandra-bullock.jpg", "/fbapps/podhojda/images/female-scarett-johansson.jpg", "/fbapps/podhojda/images/female-selena-gomez.jpg", "/fbapps/podhojda/images/female-shakira.jpg", "/fbapps/podhojda/images/female-shania-twain300.jpg", "/fbapps/podhojda/images/female-sheryl-crow300.jpg", "/fbapps/podhojda/images/female-sienna-miller.jpg", "/fbapps/podhojda/images/female-taylor-momsen300.jpg", "/fbapps/podhojda/images/male-adam-levine-300.jpg", "/fbapps/podhojda/images/male-alexander-skarsgard-300.jpg", "/fbapps/podhojda/images/male-andrew-garfield-300.jpg", "/fbapps/podhojda/images/male-ashton-kutcher300.jpg", "/fbapps/podhojda/images/male-ben-affleck-300.jpg", "/fbapps/podhojda/images/male-brad-pitt.jpg", "/fbapps/podhojda/images/male-bradley-cooper.jpg", "/fbapps/podhojda/images/male-brody-jenner300.jpg", "/fbapps/podhojda/images/male-bruce-willis300.jpg", "/fbapps/podhojda/images/male-chace-crawford300.jpg", "/fbapps/podhojda/images/male-channing-tatum.jpg", "/fbapps/podhojda/images/male-charlie-sheen-300.jpg", "/fbapps/podhojda/images/male-chris-hemsworth.jpg", "/fbapps/podhojda/images/male-chris-pine-300.jpg", "/fbapps/podhojda/images/male-christian-bale-300.jpg", "/fbapps/podhojda/images/male-clay-aiken.jpg", "/fbapps/podhojda/images/male-colin-farrell300.jpg", "/fbapps/podhojda/images/male-cory-monteith.jpg", "/fbapps/podhojda/images/male-daniel-radcliffe300.jpg", "/fbapps/podhojda/images/male-david-archuleta.jpg", "/fbapps/podhojda/images/male-david-beckham.jpg", "/fbapps/podhojda/images/male-david-cook.jpg", "/fbapps/podhojda/images/male-ed-westwick300.jpg", "/fbapps/podhojda/images/male-george-clooney.jpg", "/fbapps/podhojda/images/male-gerard-butler300.jpg", "/fbapps/podhojda/images/male-heath-ledger.jpg", "/fbapps/podhojda/images/male-hugh-jackman.jpg", "/fbapps/podhojda/images/male-jake-gyllenhaal.jpg", "/fbapps/podhojda/images/male-james-franco300.jpg", "/fbapps/podhojda/images/male-john-krasinski300.jpg", "/fbapps/podhojda/images/male-john-mayer300.jpg", "/fbapps/podhojda/images/male-johnny-depp.jpg", "/fbapps/podhojda/images/male-jon-hamm-300.jpg", "/fbapps/podhojda/images/male-josh-duhamel.jpg", "/fbapps/podhojda/images/male-jude-law300.jpg", "/fbapps/podhojda/images/male-justin-timberlake.jpg", "/fbapps/podhojda/images/male-keanu-reeves300.jpg", "/fbapps/podhojda/images/male-keith-urban.jpg", "/fbapps/podhojda/images/male-kellan-lutz-300.jpg", "/fbapps/podhojda/images/male-kelly-clarkson.jpg", "/fbapps/podhojda/images/male-kenny-chesney300.jpg", "/fbapps/podhojda/images/male-kris-allen-300.jpg", "/fbapps/podhojda/images/male-leo-dicaprio.jpg", "/fbapps/podhojda/images/male-liam-hemsworth-300.jpg", "/fbapps/podhojda/images/male-mario-lopez-300.jpg", "/fbapps/podhojda/images/male-mark-ballas300.jpg", "/fbapps/podhojda/images/male-mark-wahlberg-300.jpg", "/fbapps/podhojda/images/male-matt-damon300.jpg", "/fbapps/podhojda/images/male-matthew-mcconaughey.jpg", "/fbapps/podhojda/images/male-milo-ventimiglia300.jpg", "/fbapps/podhojda/images/male-nick-lachey300.jpg", "/fbapps/podhojda/images/male-orlando-bloom300.jpg", "/fbapps/podhojda/images/male-patrick-dempsey.jpg", "/fbapps/podhojda/images/male-penn-badgley300.jpg", "/fbapps/podhojda/images/male-prince-harry300.jpg", "/fbapps/podhojda/images/male-prince-william300.jpg", "/fbapps/podhojda/images/male-robert-pattinson300.jpg", "/fbapps/podhojda/images/male-robert-pattinson300a.jpg", "/fbapps/podhojda/images/male-ryan-gosling-300.jpg", "/fbapps/podhojda/images/male-ryan-phillippe300.jpg", "/fbapps/podhojda/images/male-ryan-reynoldsa300.jpg", "/fbapps/podhojda/images/male-shia-labeouf300.jpg", "/fbapps/podhojda/images/male-taylor-hicks.jpg", "/fbapps/podhojda/images/male-taylor-lautner300.jpg", "/fbapps/podhojda/images/male-tim-mcgraw.jpg", "/fbapps/podhojda/images/male-tom-brady300.jpg", "/fbapps/podhojda/images/male-tom-cruise.jpg", "/fbapps/vazrast/godini/0.jpg", "/fbapps/vazrast/godini/1.jpg", "/fbapps/vazrast/godini/2.jpg", "/fbapps/vazrast/godini/3.jpg", "/fbapps/vazrast/godini/4.jpg", "/fbapps/vazrast/godini/5.jpg", "/fbapps/vazrast/godini/6.jpg", "/fbapps/vazrast/godini/7.jpg", "/facebook/[appid]/[type]/[refreshid]/img.txt", "/facebook/[appid]/[type]/[refreshid]/res/[svgresultid].txt"], "buildFormat": "directory" });

// dist/$server_build/_worker.mjs
init_path();
init_astro_CZ31vzIS();
var import_cookie2 = __toESM(require_cookie(), 1);
init_colors();

// dist/$server_build/_noop-middleware.mjs
var onRequest = (_, next) => next();

// dist/$server_build/_worker.mjs
function shouldAppendForwardSlash(trailingSlash, buildFormat) {
  switch (trailingSlash) {
    case "always":
      return true;
    case "never":
      return false;
    case "ignore": {
      switch (buildFormat) {
        case "directory":
          return true;
        case "preserve":
        case "file":
          return false;
      }
    }
  }
}
function getPathByLocale(locale, locales) {
  for (const loopLocale of locales) {
    if (typeof loopLocale === "string") {
      if (loopLocale === locale) {
        return loopLocale;
      }
    } else {
      for (const code of loopLocale.codes) {
        if (code === locale) {
          return loopLocale.path;
        }
      }
    }
  }
  throw new Unreachable();
}
function normalizeTheLocale(locale) {
  return locale.replaceAll("_", "-").toLowerCase();
}
function toCodes(locales) {
  return locales.map((loopLocale) => {
    if (typeof loopLocale === "string") {
      return loopLocale;
    } else {
      return loopLocale.codes[0];
    }
  });
}
var Unreachable = class extends Error {
  constructor() {
    super(
      "Astro encountered an unexpected line of code.\nIn most cases, this is not your fault, but a bug in astro code.\nIf there isn't one already, please create an issue.\nhttps://astro.build/issues"
    );
  }
};
var DELETED_EXPIRATION = /* @__PURE__ */ new Date(0);
var DELETED_VALUE = "deleted";
var responseSentSymbol2 = Symbol.for("astro.responseSent");
var AstroCookie = class {
  constructor(value) {
    this.value = value;
  }
  json() {
    if (this.value === void 0) {
      throw new Error(`Cannot convert undefined to an object.`);
    }
    return JSON.parse(this.value);
  }
  number() {
    return Number(this.value);
  }
  boolean() {
    if (this.value === "false")
      return false;
    if (this.value === "0")
      return false;
    return Boolean(this.value);
  }
};
var AstroCookies = class {
  #request;
  #requestValues;
  #outgoing;
  #consumed;
  constructor(request) {
    this.#request = request;
    this.#requestValues = null;
    this.#outgoing = null;
    this.#consumed = false;
  }
  /**
   * Astro.cookies.delete(key) is used to delete a cookie. Using this method will result
   * in a Set-Cookie header added to the response.
   * @param key The cookie to delete
   * @param options Options related to this deletion, such as the path of the cookie.
   */
  delete(key, options) {
    const serializeOptions = {
      expires: DELETED_EXPIRATION
    };
    if (options?.domain) {
      serializeOptions.domain = options.domain;
    }
    if (options?.path) {
      serializeOptions.path = options.path;
    }
    this.#ensureOutgoingMap().set(key, [
      DELETED_VALUE,
      (0, import_cookie2.serialize)(key, DELETED_VALUE, serializeOptions),
      false
    ]);
  }
  /**
   * Astro.cookies.get(key) is used to get a cookie value. The cookie value is read from the
   * request. If you have set a cookie via Astro.cookies.set(key, value), the value will be taken
   * from that set call, overriding any values already part of the request.
   * @param key The cookie to get.
   * @returns An object containing the cookie value as well as convenience methods for converting its value.
   */
  get(key, options = void 0) {
    if (this.#outgoing?.has(key)) {
      let [serializedValue, , isSetValue] = this.#outgoing.get(key);
      if (isSetValue) {
        return new AstroCookie(serializedValue);
      } else {
        return void 0;
      }
    }
    const values = this.#ensureParsed(options);
    if (key in values) {
      const value = values[key];
      return new AstroCookie(value);
    }
  }
  /**
   * Astro.cookies.has(key) returns a boolean indicating whether this cookie is either
   * part of the initial request or set via Astro.cookies.set(key)
   * @param key The cookie to check for.
   * @returns
   */
  has(key, options = void 0) {
    if (this.#outgoing?.has(key)) {
      let [, , isSetValue] = this.#outgoing.get(key);
      return isSetValue;
    }
    const values = this.#ensureParsed(options);
    return !!values[key];
  }
  /**
   * Astro.cookies.set(key, value) is used to set a cookie's value. If provided
   * an object it will be stringified via JSON.stringify(value). Additionally you
   * can provide options customizing how this cookie will be set, such as setting httpOnly
   * in order to prevent the cookie from being read in client-side JavaScript.
   * @param key The name of the cookie to set.
   * @param value A value, either a string or other primitive or an object.
   * @param options Options for the cookie, such as the path and security settings.
   */
  set(key, value, options) {
    if (this.#consumed) {
      const warning = new Error(
        "Astro.cookies.set() was called after the cookies had already been sent to the browser.\nThis may have happened if this method was called in an imported component.\nPlease make sure that Astro.cookies.set() is only called in the frontmatter of the main page."
      );
      warning.name = "Warning";
      console.warn(warning);
    }
    let serializedValue;
    if (typeof value === "string") {
      serializedValue = value;
    } else {
      let toStringValue = value.toString();
      if (toStringValue === Object.prototype.toString.call(value)) {
        serializedValue = JSON.stringify(value);
      } else {
        serializedValue = toStringValue;
      }
    }
    const serializeOptions = {};
    if (options) {
      Object.assign(serializeOptions, options);
    }
    this.#ensureOutgoingMap().set(key, [
      serializedValue,
      (0, import_cookie2.serialize)(key, serializedValue, serializeOptions),
      true
    ]);
    if (this.#request[responseSentSymbol2]) {
      throw new AstroError({
        ...ResponseSentError
      });
    }
  }
  /**
   * Astro.cookies.header() returns an iterator for the cookies that have previously
   * been set by either Astro.cookies.set() or Astro.cookies.delete().
   * This method is primarily used by adapters to set the header on outgoing responses.
   * @returns
   */
  *headers() {
    if (this.#outgoing == null)
      return;
    for (const [, value] of this.#outgoing) {
      yield value[1];
    }
  }
  /**
   * Behaves the same as AstroCookies.prototype.headers(),
   * but allows a warning when cookies are set after the instance is consumed.
   */
  static consume(cookies) {
    cookies.#consumed = true;
    return cookies.headers();
  }
  #ensureParsed(options = void 0) {
    if (!this.#requestValues) {
      this.#parse(options);
    }
    if (!this.#requestValues) {
      this.#requestValues = {};
    }
    return this.#requestValues;
  }
  #ensureOutgoingMap() {
    if (!this.#outgoing) {
      this.#outgoing = /* @__PURE__ */ new Map();
    }
    return this.#outgoing;
  }
  #parse(options = void 0) {
    const raw = this.#request.headers.get("cookie");
    if (!raw) {
      return;
    }
    this.#requestValues = (0, import_cookie2.parse)(raw, options);
  }
};
var astroCookiesSymbol = Symbol.for("astro.cookies");
function attachCookiesToResponse(response, cookies) {
  Reflect.set(response, astroCookiesSymbol, cookies);
}
function getFromResponse(response) {
  let cookies = Reflect.get(response, astroCookiesSymbol);
  if (cookies != null) {
    return cookies;
  } else {
    return void 0;
  }
}
function* getSetCookiesFromResponse(response) {
  const cookies = getFromResponse(response);
  if (!cookies) {
    return [];
  }
  for (const headerValue of AstroCookies.consume(cookies)) {
    yield headerValue;
  }
  return [];
}
var consoleLogDestination = {
  write(event) {
    let dest = console.error;
    if (levels[event.level] < levels["error"]) {
      dest = console.log;
    }
    if (event.label === "SKIP_FORMAT") {
      dest(event.message);
    } else {
      dest(getEventPrefix(event) + " " + event.message);
    }
    return true;
  }
};
var RedirectComponentInstance = {
  default() {
    return new Response(null, {
      status: 301
    });
  }
};
var RedirectSinglePageBuiltModule = {
  page: () => Promise.resolve(RedirectComponentInstance),
  onRequest: (_, next) => next(),
  renderers: []
};
function routeIsRedirect(route) {
  return route?.type === "redirect";
}
function routeIsFallback(route) {
  return route?.type === "fallback";
}
async function renderRedirect(renderContext) {
  const {
    request: { method },
    routeData
  } = renderContext;
  const { redirect, redirectRoute } = routeData;
  const status = redirectRoute && typeof redirect === "object" ? redirect.status : method === "GET" ? 301 : 308;
  const headers = { location: encodeURI(redirectRouteGenerate(renderContext)) };
  return new Response(null, { status, headers });
}
function redirectRouteGenerate(renderContext) {
  const {
    params,
    routeData: { redirect, redirectRoute }
  } = renderContext;
  if (typeof redirectRoute !== "undefined") {
    return redirectRoute?.generate(params) || redirectRoute?.pathname || "/";
  } else if (typeof redirect === "string") {
    let target = redirect;
    for (const param of Object.keys(params)) {
      const paramValue = params[param];
      target = target.replace(`[${param}]`, paramValue);
      target = target.replace(`[...${param}]`, paramValue);
    }
    return target;
  } else if (typeof redirect === "undefined") {
    return "/";
  }
  return redirect.destination;
}
function parseLocale(header) {
  if (header === "*") {
    return [{ locale: header, qualityValue: void 0 }];
  }
  const result = [];
  const localeValues = header.split(",").map((str) => str.trim());
  for (const localeValue of localeValues) {
    const split = localeValue.split(";").map((str) => str.trim());
    const localeName = split[0];
    const qualityValue = split[1];
    if (!split) {
      continue;
    }
    if (qualityValue && qualityValue.startsWith("q=")) {
      const qualityValueAsFloat = Number.parseFloat(qualityValue.slice("q=".length));
      if (Number.isNaN(qualityValueAsFloat) || qualityValueAsFloat > 1) {
        result.push({
          locale: localeName,
          qualityValue: void 0
        });
      } else {
        result.push({
          locale: localeName,
          qualityValue: qualityValueAsFloat
        });
      }
    } else {
      result.push({
        locale: localeName,
        qualityValue: void 0
      });
    }
  }
  return result;
}
function sortAndFilterLocales(browserLocaleList, locales) {
  const normalizedLocales = toCodes(locales).map(normalizeTheLocale);
  return browserLocaleList.filter((browserLocale) => {
    if (browserLocale.locale !== "*") {
      return normalizedLocales.includes(normalizeTheLocale(browserLocale.locale));
    }
    return true;
  }).sort((a, b) => {
    if (a.qualityValue && b.qualityValue) {
      if (a.qualityValue > b.qualityValue) {
        return -1;
      } else if (a.qualityValue < b.qualityValue) {
        return 1;
      }
    }
    return 0;
  });
}
function computePreferredLocale(request, locales) {
  const acceptHeader = request.headers.get("Accept-Language");
  let result = void 0;
  if (acceptHeader) {
    const browserLocaleList = sortAndFilterLocales(parseLocale(acceptHeader), locales);
    const firstResult = browserLocaleList.at(0);
    if (firstResult && firstResult.locale !== "*") {
      for (const currentLocale of locales) {
        if (typeof currentLocale === "string") {
          if (normalizeTheLocale(currentLocale) === normalizeTheLocale(firstResult.locale)) {
            result = currentLocale;
          }
        } else {
          for (const currentCode of currentLocale.codes) {
            if (normalizeTheLocale(currentCode) === normalizeTheLocale(firstResult.locale)) {
              result = currentLocale.path;
            }
          }
        }
      }
    }
  }
  return result;
}
function computePreferredLocaleList(request, locales) {
  const acceptHeader = request.headers.get("Accept-Language");
  let result = [];
  if (acceptHeader) {
    const browserLocaleList = sortAndFilterLocales(parseLocale(acceptHeader), locales);
    if (browserLocaleList.length === 1 && browserLocaleList.at(0).locale === "*") {
      return locales.map((locale) => {
        if (typeof locale === "string") {
          return locale;
        } else {
          return locale.codes.at(0);
        }
      });
    } else if (browserLocaleList.length > 0) {
      for (const browserLocale of browserLocaleList) {
        for (const loopLocale of locales) {
          if (typeof loopLocale === "string") {
            if (normalizeTheLocale(loopLocale) === normalizeTheLocale(browserLocale.locale)) {
              result.push(loopLocale);
            }
          } else {
            for (const code of loopLocale.codes) {
              if (code === browserLocale.locale) {
                result.push(loopLocale.path);
              }
            }
          }
        }
      }
    }
  }
  return result;
}
function computeCurrentLocale(pathname, locales) {
  for (const segment of pathname.split("/")) {
    for (const locale of locales) {
      if (typeof locale === "string") {
        if (!segment.includes(locale))
          continue;
        if (normalizeTheLocale(locale) === normalizeTheLocale(segment)) {
          return locale;
        }
      } else {
        if (locale.path === segment) {
          return locale.codes.at(0);
        } else {
          for (const code of locale.codes) {
            if (normalizeTheLocale(code) === normalizeTheLocale(segment)) {
              return code;
            }
          }
        }
      }
    }
  }
}
async function callMiddleware(onRequest2, apiContext, responseFunction) {
  let nextCalled = false;
  let responseFunctionPromise = void 0;
  const next = async () => {
    nextCalled = true;
    responseFunctionPromise = responseFunction();
    return responseFunctionPromise;
  };
  let middlewarePromise = onRequest2(apiContext, next);
  return await Promise.resolve(middlewarePromise).then(async (value) => {
    if (nextCalled) {
      if (typeof value !== "undefined") {
        if (value instanceof Response === false) {
          throw new AstroError(MiddlewareNotAResponse);
        }
        return value;
      } else {
        if (responseFunctionPromise) {
          return responseFunctionPromise;
        } else {
          throw new AstroError(MiddlewareNotAResponse);
        }
      }
    } else if (typeof value === "undefined") {
      throw new AstroError(MiddlewareNoDataOrNextCalled);
    } else if (value instanceof Response === false) {
      throw new AstroError(MiddlewareNotAResponse);
    } else {
      return value;
    }
  });
}
function sequence(...handlers2) {
  const filtered = handlers2.filter((h) => !!h);
  const length = filtered.length;
  if (!length) {
    const handler = defineMiddleware((context, next) => {
      return next();
    });
    return handler;
  }
  return defineMiddleware((context, next) => {
    return applyHandle(0, context);
    function applyHandle(i, handleContext) {
      const handle = filtered[i];
      const result = handle(handleContext, async () => {
        if (i < length - 1) {
          return applyHandle(i + 1, handleContext);
        } else {
          return next();
        }
      });
      return result;
    }
  });
}
function defineMiddleware(fn) {
  return fn;
}
function pathnameHasLocale(pathname, locales) {
  const segments = pathname.split("/");
  for (const segment of segments) {
    for (const locale of locales) {
      if (typeof locale === "string") {
        if (normalizeTheLocale(segment) === normalizeTheLocale(locale)) {
          return true;
        }
      } else if (segment === locale.path) {
        return true;
      }
    }
  }
  return false;
}
function createI18nMiddleware(i18n, base, trailingSlash, buildFormat) {
  if (!i18n)
    return (_, next) => next();
  const prefixAlways = (url2, response, context) => {
    if (url2.pathname === base + "/" || url2.pathname === base) {
      if (shouldAppendForwardSlash(trailingSlash, buildFormat)) {
        return context.redirect(`${appendForwardSlash(joinPaths(base, i18n.defaultLocale))}`);
      } else {
        return context.redirect(`${joinPaths(base, i18n.defaultLocale)}`);
      }
    } else if (!pathnameHasLocale(url2.pathname, i18n.locales)) {
      return notFound(response);
    }
    return void 0;
  };
  const prefixOtherLocales = (url2, response) => {
    let pathnameContainsDefaultLocale = false;
    for (const segment of url2.pathname.split("/")) {
      if (normalizeTheLocale(segment) === normalizeTheLocale(i18n.defaultLocale)) {
        pathnameContainsDefaultLocale = true;
        break;
      }
    }
    if (pathnameContainsDefaultLocale) {
      const newLocation = url2.pathname.replace(`/${i18n.defaultLocale}`, "");
      response.headers.set("Location", newLocation);
      return notFound(response);
    }
    return void 0;
  };
  const prefixAlwaysNoRedirect = (url2, response) => {
    const isRoot = url2.pathname === base + "/" || url2.pathname === base;
    if (!(isRoot || pathnameHasLocale(url2.pathname, i18n.locales))) {
      return notFound(response);
    }
    return void 0;
  };
  return async (context, next) => {
    const response = await next();
    const type = response.headers.get(ROUTE_TYPE_HEADER);
    if (type !== "page" && type !== "fallback") {
      return response;
    }
    const { url: url2, currentLocale } = context;
    const { locales, defaultLocale, fallback, strategy } = i18n;
    switch (i18n.strategy) {
      case "domains-prefix-other-locales": {
        if (localeHasntDomain(i18n, currentLocale)) {
          const result = prefixOtherLocales(url2, response);
          if (result) {
            return result;
          }
        }
        break;
      }
      case "pathname-prefix-other-locales": {
        const result = prefixOtherLocales(url2, response);
        if (result) {
          return result;
        }
        break;
      }
      case "domains-prefix-always-no-redirect": {
        if (localeHasntDomain(i18n, currentLocale)) {
          const result = prefixAlwaysNoRedirect(url2, response);
          if (result) {
            return result;
          }
        }
        break;
      }
      case "pathname-prefix-always-no-redirect": {
        const result = prefixAlwaysNoRedirect(url2, response);
        if (result) {
          return result;
        }
        break;
      }
      case "pathname-prefix-always": {
        const result = prefixAlways(url2, response, context);
        if (result) {
          return result;
        }
        break;
      }
      case "domains-prefix-always": {
        if (localeHasntDomain(i18n, currentLocale)) {
          const result = prefixAlways(url2, response, context);
          if (result) {
            return result;
          }
        }
        break;
      }
    }
    if (response.status >= 300 && fallback) {
      const fallbackKeys = i18n.fallback ? Object.keys(i18n.fallback) : [];
      const segments = url2.pathname.split("/");
      const urlLocale = segments.find((segment) => {
        for (const locale of locales) {
          if (typeof locale === "string") {
            if (locale === segment) {
              return true;
            }
          } else if (locale.path === segment) {
            return true;
          }
        }
        return false;
      });
      if (urlLocale && fallbackKeys.includes(urlLocale)) {
        const fallbackLocale = fallback[urlLocale];
        const pathFallbackLocale = getPathByLocale(fallbackLocale, locales);
        let newPathname;
        if (pathFallbackLocale === defaultLocale && strategy === "pathname-prefix-other-locales") {
          newPathname = url2.pathname.replace(`/${urlLocale}`, ``);
        } else {
          newPathname = url2.pathname.replace(`/${urlLocale}`, `/${pathFallbackLocale}`);
        }
        return context.redirect(newPathname);
      }
    }
    return response;
  };
}
function notFound(response) {
  if (response.headers.get(REROUTE_DIRECTIVE_HEADER) === "no")
    return response;
  return new Response(null, {
    status: 404,
    headers: response.headers
  });
}
function localeHasntDomain(i18n, currentLocale) {
  for (const domainLocale of Object.values(i18n.domainLookupTable)) {
    if (domainLocale === currentLocale) {
      return false;
    }
  }
  return true;
}
var VALID_PARAM_TYPES = ["string", "number", "undefined"];
function validateGetStaticPathsParameter([key, value], route) {
  if (!VALID_PARAM_TYPES.includes(typeof value)) {
    throw new AstroError({
      ...GetStaticPathsInvalidRouteParam,
      message: GetStaticPathsInvalidRouteParam.message(key, value, typeof value),
      location: {
        file: route
      }
    });
  }
}
function validateDynamicRouteModule(mod, {
  ssr,
  route
}) {
  if ((!ssr || route.prerender) && !mod.getStaticPaths) {
    throw new AstroError({
      ...GetStaticPathsRequired,
      location: { file: route.component }
    });
  }
}
function validateGetStaticPathsResult(result, logger, route) {
  if (!Array.isArray(result)) {
    throw new AstroError({
      ...InvalidGetStaticPathsReturn,
      message: InvalidGetStaticPathsReturn.message(typeof result),
      location: {
        file: route.component
      }
    });
  }
  result.forEach((pathObject) => {
    if (typeof pathObject === "object" && Array.isArray(pathObject) || pathObject === null) {
      throw new AstroError({
        ...InvalidGetStaticPathsEntry,
        message: InvalidGetStaticPathsEntry.message(
          Array.isArray(pathObject) ? "array" : typeof pathObject
        )
      });
    }
    if (pathObject.params === void 0 || pathObject.params === null || pathObject.params && Object.keys(pathObject.params).length === 0) {
      throw new AstroError({
        ...GetStaticPathsExpectedParams,
        location: {
          file: route.component
        }
      });
    }
    for (const [key, val] of Object.entries(pathObject.params)) {
      if (!(typeof val === "undefined" || typeof val === "string" || typeof val === "number")) {
        logger.warn(
          "router",
          `getStaticPaths() returned an invalid path param: "${key}". A string, number or undefined value was expected, but got \`${JSON.stringify(
            val
          )}\`.`
        );
      }
      if (typeof val === "string" && val === "") {
        logger.warn(
          "router",
          `getStaticPaths() returned an invalid path param: "${key}". \`undefined\` expected for an optional param, but got empty string.`
        );
      }
    }
  });
}
function stringifyParams(params, route) {
  const validatedParams = Object.entries(params).reduce((acc, next) => {
    validateGetStaticPathsParameter(next, route.component);
    const [key, value] = next;
    if (value !== void 0) {
      acc[key] = typeof value === "string" ? trimSlashes(value) : value.toString();
    }
    return acc;
  }, {});
  return JSON.stringify(route.generate(validatedParams));
}
function generatePaginateFunction(routeMatch) {
  return function paginateUtility(data, args = {}) {
    let { pageSize: _pageSize, params: _params, props: _props } = args;
    const pageSize = _pageSize || 10;
    const paramName = "page";
    const additionalParams = _params || {};
    const additionalProps = _props || {};
    let includesFirstPageNumber;
    if (routeMatch.params.includes(`...${paramName}`)) {
      includesFirstPageNumber = false;
    } else if (routeMatch.params.includes(`${paramName}`)) {
      includesFirstPageNumber = true;
    } else {
      throw new AstroError({
        ...PageNumberParamNotFound,
        message: PageNumberParamNotFound.message(paramName)
      });
    }
    const lastPage = Math.max(1, Math.ceil(data.length / pageSize));
    const result = [...Array(lastPage).keys()].map((num) => {
      const pageNum = num + 1;
      const start = pageSize === Infinity ? 0 : (pageNum - 1) * pageSize;
      const end = Math.min(start + pageSize, data.length);
      const params = {
        ...additionalParams,
        [paramName]: includesFirstPageNumber || pageNum > 1 ? String(pageNum) : void 0
      };
      const current = correctIndexRoute(routeMatch.generate({ ...params }));
      const next = pageNum === lastPage ? void 0 : correctIndexRoute(routeMatch.generate({ ...params, page: String(pageNum + 1) }));
      const prev = pageNum === 1 ? void 0 : correctIndexRoute(
        routeMatch.generate({
          ...params,
          page: !includesFirstPageNumber && pageNum - 1 === 1 ? void 0 : String(pageNum - 1)
        })
      );
      return {
        params,
        props: {
          ...additionalProps,
          page: {
            data: data.slice(start, end),
            start,
            end: end - 1,
            size: pageSize,
            total: data.length,
            currentPage: pageNum,
            lastPage,
            url: { current, next, prev }
          }
        }
      };
    });
    return result;
  };
}
function correctIndexRoute(route) {
  if (route === "") {
    return "/";
  }
  return route;
}
async function callGetStaticPaths({
  mod,
  route,
  routeCache,
  logger,
  ssr
}) {
  const cached = routeCache.get(route);
  if (!mod) {
    throw new Error("This is an error caused by Astro and not your code. Please file an issue.");
  }
  if (cached?.staticPaths) {
    return cached.staticPaths;
  }
  validateDynamicRouteModule(mod, { ssr, route });
  if (ssr && !route.prerender) {
    const entry = Object.assign([], { keyed: /* @__PURE__ */ new Map() });
    routeCache.set(route, { ...cached, staticPaths: entry });
    return entry;
  }
  let staticPaths = [];
  if (!mod.getStaticPaths) {
    throw new Error("Unexpected Error.");
  }
  staticPaths = await mod.getStaticPaths({
    // Q: Why the cast?
    // A: So users downstream can have nicer typings, we have to make some sacrifice in our internal typings, which necessitate a cast here
    paginate: generatePaginateFunction(route)
  });
  validateGetStaticPathsResult(staticPaths, logger, route);
  const keyedStaticPaths = staticPaths;
  keyedStaticPaths.keyed = /* @__PURE__ */ new Map();
  for (const sp of keyedStaticPaths) {
    const paramsKey = stringifyParams(sp.params, route);
    keyedStaticPaths.keyed.set(paramsKey, sp);
  }
  routeCache.set(route, { ...cached, staticPaths: keyedStaticPaths });
  return keyedStaticPaths;
}
var RouteCache = class {
  logger;
  cache = {};
  mode;
  constructor(logger, mode = "production") {
    this.logger = logger;
    this.mode = mode;
  }
  /** Clear the cache. */
  clearAll() {
    this.cache = {};
  }
  set(route, entry) {
    const key = this.key(route);
    if (this.mode === "production" && this.cache[key]?.staticPaths) {
      this.logger.warn(null, `Internal Warning: route cache overwritten. (${key})`);
    }
    this.cache[key] = entry;
  }
  get(route) {
    return this.cache[this.key(route)];
  }
  key(route) {
    return `${route.route}_${route.component}`;
  }
};
function findPathItemByKey(staticPaths, params, route, logger) {
  const paramsKey = stringifyParams(params, route);
  const matchedStaticPath = staticPaths.keyed.get(paramsKey);
  if (matchedStaticPath) {
    return matchedStaticPath;
  }
  logger.debug("router", `findPathItemByKey() - Unexpected cache miss looking for ${paramsKey}`);
}
var Pipeline = class {
  constructor(logger, manifest2, mode, renderers2, resolve, serverLike, streaming, adapterName = manifest2.adapterName, clientDirectives = manifest2.clientDirectives, inlinedScripts = manifest2.inlinedScripts, compressHTML = manifest2.compressHTML, i18n = manifest2.i18n, middleware = manifest2.middleware, routeCache = new RouteCache(logger, mode), site = manifest2.site ? new URL(manifest2.site) : void 0) {
    this.logger = logger;
    this.manifest = manifest2;
    this.mode = mode;
    this.renderers = renderers2;
    this.resolve = resolve;
    this.serverLike = serverLike;
    this.streaming = streaming;
    this.adapterName = adapterName;
    this.clientDirectives = clientDirectives;
    this.inlinedScripts = inlinedScripts;
    this.compressHTML = compressHTML;
    this.i18n = i18n;
    this.middleware = middleware;
    this.routeCache = routeCache;
    this.site = site;
    this.internalMiddleware = [
      createI18nMiddleware(i18n, manifest2.base, manifest2.trailingSlash, manifest2.buildFormat)
    ];
  }
  internalMiddleware;
};
async function getProps(opts) {
  const { logger, mod, routeData: route, routeCache, pathname, serverLike } = opts;
  if (!route || route.pathname) {
    return {};
  }
  if (routeIsRedirect(route) || routeIsFallback(route) || route.component === DEFAULT_404_COMPONENT) {
    return {};
  }
  const params = getParams(route, pathname);
  if (mod) {
    validatePrerenderEndpointCollision(route, mod, params);
  }
  const staticPaths = await callGetStaticPaths({
    mod,
    route,
    routeCache,
    logger,
    ssr: serverLike
  });
  const matchedStaticPath = findPathItemByKey(staticPaths, params, route, logger);
  if (!matchedStaticPath && (serverLike ? route.prerender : true)) {
    throw new AstroError({
      ...NoMatchingStaticPathFound,
      message: NoMatchingStaticPathFound.message(pathname),
      hint: NoMatchingStaticPathFound.hint([route.component])
    });
  }
  const props = matchedStaticPath?.props ? { ...matchedStaticPath.props } : {};
  return props;
}
function getParams(route, pathname) {
  if (!route.params.length)
    return {};
  const paramsMatch = route.pattern.exec(decodeURIComponent(pathname));
  if (!paramsMatch)
    return {};
  const params = {};
  route.params.forEach((key, i) => {
    if (key.startsWith("...")) {
      params[key.slice(3)] = paramsMatch[i + 1] ? paramsMatch[i + 1] : void 0;
    } else {
      params[key] = paramsMatch[i + 1];
    }
  });
  return params;
}
function validatePrerenderEndpointCollision(route, mod, params) {
  if (route.type === "endpoint" && mod.getStaticPaths) {
    const lastSegment = route.segments[route.segments.length - 1];
    const paramValues = Object.values(params);
    const lastParam = paramValues[paramValues.length - 1];
    if (lastSegment.length === 1 && lastSegment[0].dynamic && lastParam === void 0) {
      throw new AstroError({
        ...PrerenderDynamicEndpointPathCollide,
        message: PrerenderDynamicEndpointPathCollide.message(route.route),
        hint: PrerenderDynamicEndpointPathCollide.hint(route.component),
        location: {
          file: route.component
        }
      });
    }
  }
}
function getFunctionExpression(slot) {
  if (!slot)
    return;
  if (slot.expressions?.length !== 1)
    return;
  return slot.expressions[0];
}
var Slots = class {
  #result;
  #slots;
  #logger;
  constructor(result, slots, logger) {
    this.#result = result;
    this.#slots = slots;
    this.#logger = logger;
    if (slots) {
      for (const key of Object.keys(slots)) {
        if (this[key] !== void 0) {
          throw new AstroError({
            ...ReservedSlotName,
            message: ReservedSlotName.message(key)
          });
        }
        Object.defineProperty(this, key, {
          get() {
            return true;
          },
          enumerable: true
        });
      }
    }
  }
  has(name) {
    if (!this.#slots)
      return false;
    return Boolean(this.#slots[name]);
  }
  async render(name, args = []) {
    if (!this.#slots || !this.has(name))
      return;
    const result = this.#result;
    if (!Array.isArray(args)) {
      this.#logger.warn(
        null,
        `Expected second parameter to be an array, received a ${typeof args}. If you're trying to pass an array as a single argument and getting unexpected results, make sure you're passing your array as a item of an array. Ex: Astro.slots.render('default', [["Hello", "World"]])`
      );
    } else if (args.length > 0) {
      const slotValue = this.#slots[name];
      const component = typeof slotValue === "function" ? await slotValue(result) : await slotValue;
      const expression = getFunctionExpression(component);
      if (expression) {
        const slot = async () => typeof expression === "function" ? expression(...args) : expression;
        return await renderSlotToString(result, slot).then((res) => {
          return res;
        });
      }
      if (typeof component === "function") {
        return await renderJSX(result, component(...args)).then(
          (res) => res != null ? String(res) : res
        );
      }
    }
    const content = await renderSlotToString(result, this.#slots[name]);
    const outHTML = chunkToString(result, content);
    return outHTML;
  }
};
var RenderContext = class _RenderContext {
  constructor(pipeline, locals, middleware, pathname, request, routeData, status, cookies = new AstroCookies(request), params = getParams(routeData, pathname), url2 = new URL(request.url)) {
    this.pipeline = pipeline;
    this.locals = locals;
    this.middleware = middleware;
    this.pathname = pathname;
    this.request = request;
    this.routeData = routeData;
    this.status = status;
    this.cookies = cookies;
    this.params = params;
    this.url = url2;
  }
  static create({
    locals = {},
    middleware,
    pathname,
    pipeline,
    request,
    routeData,
    status = 200
  }) {
    return new _RenderContext(
      pipeline,
      locals,
      sequence(...pipeline.internalMiddleware, middleware ?? pipeline.middleware),
      pathname,
      request,
      routeData,
      status
    );
  }
  /**
   * The main function of the RenderContext.
   *
   * Use this function to render any route known to Astro.
   * It attempts to render a route. A route can be a:
   *
   * - page
   * - redirect
   * - endpoint
   * - fallback
   */
  async render(componentInstance) {
    const { cookies, middleware, pathname, pipeline, routeData } = this;
    const { logger, routeCache, serverLike, streaming } = pipeline;
    const props = await getProps({
      mod: componentInstance,
      routeData,
      routeCache,
      pathname,
      logger,
      serverLike
    });
    const apiContext = this.createAPIContext(props);
    const lastNext = async () => {
      switch (routeData.type) {
        case "endpoint":
          return renderEndpoint(componentInstance, apiContext, serverLike, logger);
        case "redirect":
          return renderRedirect(this);
        case "page": {
          const result = await this.createResult(componentInstance);
          let response2;
          try {
            response2 = await renderPage(
              result,
              componentInstance?.default,
              props,
              {},
              streaming,
              routeData
            );
          } catch (e) {
            result.cancelled = true;
            throw e;
          }
          response2.headers.set(ROUTE_TYPE_HEADER, "page");
          if (routeData.route === "/404" || routeData.route === "/500") {
            response2.headers.set(REROUTE_DIRECTIVE_HEADER, "no");
          }
          return response2;
        }
        case "fallback": {
          return new Response(null, { status: 500, headers: { [ROUTE_TYPE_HEADER]: "fallback" } });
        }
      }
    };
    const response = await callMiddleware(middleware, apiContext, lastNext);
    if (response.headers.get(ROUTE_TYPE_HEADER)) {
      response.headers.delete(ROUTE_TYPE_HEADER);
    }
    attachCookiesToResponse(response, cookies);
    return response;
  }
  createAPIContext(props) {
    const renderContext = this;
    const { cookies, params, pipeline, request, url: url2 } = this;
    const generator = `Astro v${ASTRO_VERSION}`;
    const redirect = (path, status = 302) => new Response(null, { status, headers: { Location: path } });
    return {
      cookies,
      get clientAddress() {
        return renderContext.clientAddress();
      },
      get currentLocale() {
        return renderContext.computeCurrentLocale();
      },
      generator,
      get locals() {
        return renderContext.locals;
      },
      // TODO(breaking): disallow replacing the locals object
      set locals(val) {
        if (typeof val !== "object") {
          throw new AstroError(LocalsNotAnObject);
        } else {
          renderContext.locals = val;
          Reflect.set(request, clientLocalsSymbol, val);
        }
      },
      params,
      get preferredLocale() {
        return renderContext.computePreferredLocale();
      },
      get preferredLocaleList() {
        return renderContext.computePreferredLocaleList();
      },
      props,
      redirect,
      request,
      site: pipeline.site,
      url: url2
    };
  }
  async createResult(mod) {
    const { cookies, pathname, pipeline, routeData, status } = this;
    const { clientDirectives, inlinedScripts, compressHTML, manifest: manifest2, renderers: renderers2, resolve } = pipeline;
    const { links, scripts, styles } = await pipeline.headElements(routeData);
    const componentMetadata = await pipeline.componentMetadata(routeData) ?? manifest2.componentMetadata;
    const headers = new Headers({ "Content-Type": "text/html" });
    const partial = Boolean(mod.partial);
    const response = {
      status,
      statusText: "OK",
      get headers() {
        return headers;
      },
      // Disallow `Astro.response.headers = new Headers`
      set headers(_) {
        throw new AstroError(AstroResponseHeadersReassigned);
      }
    };
    const result = {
      cancelled: false,
      clientDirectives,
      inlinedScripts,
      componentMetadata,
      compressHTML,
      cookies,
      /** This function returns the `Astro` faux-global */
      createAstro: (astroGlobal, props, slots) => this.createAstro(result, astroGlobal, props, slots),
      links,
      partial,
      pathname,
      renderers: renderers2,
      resolve,
      response,
      scripts,
      styles,
      _metadata: {
        hasHydrationScript: false,
        rendererSpecificHydrationScripts: /* @__PURE__ */ new Set(),
        hasRenderedHead: false,
        renderedScripts: /* @__PURE__ */ new Set(),
        hasDirectives: /* @__PURE__ */ new Set(),
        headInTree: false,
        extraHead: [],
        propagators: /* @__PURE__ */ new Set()
      }
    };
    return result;
  }
  createAstro(result, astroGlobalPartial, props, slotValues) {
    const renderContext = this;
    const { cookies, locals, params, pipeline, request, url: url2 } = this;
    const { response } = result;
    const redirect = (path, status = 302) => {
      if (request[responseSentSymbol]) {
        throw new AstroError({
          ...ResponseSentError
        });
      }
      return new Response(null, { status, headers: { Location: path } });
    };
    const slots = new Slots(result, slotValues, pipeline.logger);
    const astroGlobalCombined = {
      ...astroGlobalPartial,
      cookies,
      get clientAddress() {
        return renderContext.clientAddress();
      },
      get currentLocale() {
        return renderContext.computeCurrentLocale();
      },
      params,
      get preferredLocale() {
        return renderContext.computePreferredLocale();
      },
      get preferredLocaleList() {
        return renderContext.computePreferredLocaleList();
      },
      props,
      locals,
      redirect,
      request,
      response,
      slots,
      site: pipeline.site,
      url: url2
    };
    return astroGlobalCombined;
  }
  clientAddress() {
    const { pipeline, request } = this;
    if (clientAddressSymbol in request) {
      return Reflect.get(request, clientAddressSymbol);
    }
    if (pipeline.adapterName) {
      throw new AstroError({
        ...ClientAddressNotAvailable,
        message: ClientAddressNotAvailable.message(pipeline.adapterName)
      });
    } else {
      throw new AstroError(StaticClientAddressNotAvailable);
    }
  }
  /**
   * API Context may be created multiple times per request, i18n data needs to be computed only once.
   * So, it is computed and saved here on creation of the first APIContext and reused for later ones.
   */
  #currentLocale;
  computeCurrentLocale() {
    const {
      url: url2,
      pipeline: { i18n },
      routeData
    } = this;
    if (!i18n)
      return;
    const { defaultLocale, locales, strategy } = i18n;
    const fallbackTo = strategy === "pathname-prefix-other-locales" || strategy === "domains-prefix-other-locales" ? defaultLocale : void 0;
    return this.#currentLocale ??= computeCurrentLocale(routeData.route, locales) ?? computeCurrentLocale(url2.pathname, locales) ?? fallbackTo;
  }
  #preferredLocale;
  computePreferredLocale() {
    const {
      pipeline: { i18n },
      request
    } = this;
    if (!i18n)
      return;
    return this.#preferredLocale ??= computePreferredLocale(request, i18n.locales);
  }
  #preferredLocaleList;
  computePreferredLocaleList() {
    const {
      pipeline: { i18n },
      request
    } = this;
    if (!i18n)
      return;
    return this.#preferredLocaleList ??= computePreferredLocaleList(request, i18n.locales);
  }
};
function getAssetsPrefix(fileExtension2, assetsPrefix) {
  if (!assetsPrefix)
    return "";
  if (typeof assetsPrefix === "string")
    return assetsPrefix;
  const dotLessFileExtension = fileExtension2.slice(1);
  if (assetsPrefix[dotLessFileExtension]) {
    return assetsPrefix[dotLessFileExtension];
  }
  return assetsPrefix.fallback;
}
function createAssetLink(href, base, assetsPrefix) {
  if (assetsPrefix) {
    const pf = getAssetsPrefix(fileExtension(href), assetsPrefix);
    return joinPaths(pf, slash(href));
  } else if (base) {
    return prependForwardSlash(joinPaths(base, slash(href)));
  } else {
    return href;
  }
}
function createStylesheetElement(stylesheet, base, assetsPrefix) {
  if (stylesheet.type === "inline") {
    return {
      props: {},
      children: stylesheet.content
    };
  } else {
    return {
      props: {
        rel: "stylesheet",
        href: createAssetLink(stylesheet.src, base, assetsPrefix)
      },
      children: ""
    };
  }
}
function createStylesheetElementSet(stylesheets, base, assetsPrefix) {
  return new Set(stylesheets.map((s) => createStylesheetElement(s, base, assetsPrefix)));
}
function createModuleScriptElement(script, base, assetsPrefix) {
  if (script.type === "external") {
    return createModuleScriptElementWithSrc(script.value, base, assetsPrefix);
  } else {
    return {
      props: {
        type: "module"
      },
      children: script.value
    };
  }
}
function createModuleScriptElementWithSrc(src, base, assetsPrefix) {
  return {
    props: {
      type: "module",
      src: createAssetLink(src, base, assetsPrefix)
    },
    children: ""
  };
}
function ensure404Route(manifest2) {
  if (!manifest2.routes.some((route) => route.route === "/404")) {
    manifest2.routes.push({
      component: DEFAULT_404_COMPONENT,
      generate: () => "",
      params: [],
      pattern: /\/404/,
      prerender: false,
      segments: [],
      type: "page",
      route: "/404",
      fallbackRoutes: [],
      isIndex: false
    });
  }
  return manifest2;
}
function matchRoute(pathname, manifest2) {
  const decodedPathname = decodeURI(pathname);
  return manifest2.routes.find((route) => {
    return route.pattern.test(decodedPathname) || route.fallbackRoutes.some((fallbackRoute) => fallbackRoute.pattern.test(decodedPathname));
  });
}
var AppPipeline = class _AppPipeline extends Pipeline {
  static create({
    logger,
    manifest: manifest2,
    mode,
    renderers: renderers2,
    resolve,
    serverLike,
    streaming
  }) {
    return new _AppPipeline(logger, manifest2, mode, renderers2, resolve, serverLike, streaming);
  }
  headElements(routeData) {
    const routeInfo = this.manifest.routes.find((route) => route.routeData === routeData);
    const links = /* @__PURE__ */ new Set();
    const scripts = /* @__PURE__ */ new Set();
    const styles = createStylesheetElementSet(routeInfo?.styles ?? []);
    for (const script of routeInfo?.scripts ?? []) {
      if ("stage" in script) {
        if (script.stage === "head-inline") {
          scripts.add({
            props: {},
            children: script.children
          });
        }
      } else {
        scripts.add(createModuleScriptElement(script));
      }
    }
    return { links, styles, scripts };
  }
  componentMetadata() {
  }
};
var App = class _App {
  #manifest;
  #manifestData;
  #logger = new Logger({
    dest: consoleLogDestination,
    level: "info"
  });
  #baseWithoutTrailingSlash;
  #pipeline;
  #adapterLogger;
  #renderOptionsDeprecationWarningShown = false;
  constructor(manifest2, streaming = true) {
    this.#manifest = manifest2;
    this.#manifestData = ensure404Route({
      routes: manifest2.routes.map((route) => route.routeData)
    });
    this.#baseWithoutTrailingSlash = removeTrailingForwardSlash(this.#manifest.base);
    this.#pipeline = this.#createPipeline(streaming);
    this.#adapterLogger = new AstroIntegrationLogger(
      this.#logger.options,
      this.#manifest.adapterName
    );
  }
  getAdapterLogger() {
    return this.#adapterLogger;
  }
  /**
   * Creates a pipeline by reading the stored manifest
   *
   * @param streaming
   * @private
   */
  #createPipeline(streaming = false) {
    return AppPipeline.create({
      logger: this.#logger,
      manifest: this.#manifest,
      mode: "production",
      renderers: this.#manifest.renderers,
      resolve: async (specifier) => {
        if (!(specifier in this.#manifest.entryModules)) {
          throw new Error(`Unable to resolve [${specifier}]`);
        }
        const bundlePath = this.#manifest.entryModules[specifier];
        switch (true) {
          case bundlePath.startsWith("data:"):
          case bundlePath.length === 0: {
            return bundlePath;
          }
          default: {
            return createAssetLink(bundlePath, this.#manifest.base, this.#manifest.assetsPrefix);
          }
        }
      },
      serverLike: true,
      streaming
    });
  }
  set setManifestData(newManifestData) {
    this.#manifestData = newManifestData;
  }
  removeBase(pathname) {
    if (pathname.startsWith(this.#manifest.base)) {
      return pathname.slice(this.#baseWithoutTrailingSlash.length + 1);
    }
    return pathname;
  }
  #getPathnameFromRequest(request) {
    const url2 = new URL(request.url);
    const pathname = prependForwardSlash(this.removeBase(url2.pathname));
    return pathname;
  }
  match(request) {
    const url2 = new URL(request.url);
    if (this.#manifest.assets.has(url2.pathname))
      return void 0;
    let pathname = this.#computePathnameFromDomain(request);
    if (!pathname) {
      pathname = prependForwardSlash(this.removeBase(url2.pathname));
    }
    let routeData = matchRoute(pathname, this.#manifestData);
    if (!routeData || routeData.prerender)
      return void 0;
    return routeData;
  }
  #computePathnameFromDomain(request) {
    let pathname = void 0;
    const url2 = new URL(request.url);
    if (this.#manifest.i18n && (this.#manifest.i18n.strategy === "domains-prefix-always" || this.#manifest.i18n.strategy === "domains-prefix-other-locales" || this.#manifest.i18n.strategy === "domains-prefix-always-no-redirect")) {
      let host = request.headers.get("X-Forwarded-Host");
      let protocol = request.headers.get("X-Forwarded-Proto");
      if (protocol) {
        protocol = protocol + ":";
      } else {
        protocol = url2.protocol;
      }
      if (!host) {
        host = request.headers.get("Host");
      }
      if (host && protocol) {
        host = host.split(":")[0];
        try {
          let locale;
          const hostAsUrl = new URL(`${protocol}//${host}`);
          for (const [domainKey, localeValue] of Object.entries(
            this.#manifest.i18n.domainLookupTable
          )) {
            const domainKeyAsUrl = new URL(domainKey);
            if (hostAsUrl.host === domainKeyAsUrl.host && hostAsUrl.protocol === domainKeyAsUrl.protocol) {
              locale = localeValue;
              break;
            }
          }
          if (locale) {
            pathname = prependForwardSlash(
              joinPaths(normalizeTheLocale(locale), this.removeBase(url2.pathname))
            );
            if (url2.pathname.endsWith("/")) {
              pathname = appendForwardSlash(pathname);
            }
          }
        } catch (e) {
          this.#logger.error(
            "router",
            `Astro tried to parse ${protocol}//${host} as an URL, but it threw a parsing error. Check the X-Forwarded-Host and X-Forwarded-Proto headers.`
          );
          this.#logger.error("router", `Error: ${e}`);
        }
      }
    }
    return pathname;
  }
  async render(request, routeDataOrOptions, maybeLocals) {
    let routeData;
    let locals;
    let clientAddress;
    let addCookieHeader;
    if (routeDataOrOptions && ("addCookieHeader" in routeDataOrOptions || "clientAddress" in routeDataOrOptions || "locals" in routeDataOrOptions || "routeData" in routeDataOrOptions)) {
      if ("addCookieHeader" in routeDataOrOptions) {
        addCookieHeader = routeDataOrOptions.addCookieHeader;
      }
      if ("clientAddress" in routeDataOrOptions) {
        clientAddress = routeDataOrOptions.clientAddress;
      }
      if ("routeData" in routeDataOrOptions) {
        routeData = routeDataOrOptions.routeData;
      }
      if ("locals" in routeDataOrOptions) {
        locals = routeDataOrOptions.locals;
      }
    } else {
      routeData = routeDataOrOptions;
      locals = maybeLocals;
      if (routeDataOrOptions || locals) {
        this.#logRenderOptionsDeprecationWarning();
      }
    }
    if (locals) {
      if (typeof locals !== "object") {
        this.#logger.error(null, new AstroError(LocalsNotAnObject).stack);
        return this.#renderError(request, { status: 500 });
      }
      Reflect.set(request, clientLocalsSymbol, locals);
    }
    if (clientAddress) {
      Reflect.set(request, clientAddressSymbol, clientAddress);
    }
    if (request.url !== collapseDuplicateSlashes(request.url)) {
      request = new Request(collapseDuplicateSlashes(request.url), request);
    }
    if (!routeData) {
      routeData = this.match(request);
    }
    if (!routeData) {
      return this.#renderError(request, { locals, status: 404 });
    }
    const pathname = this.#getPathnameFromRequest(request);
    const defaultStatus = this.#getDefaultStatusCode(routeData, pathname);
    const mod = await this.#getModuleForRoute(routeData);
    let response;
    try {
      const renderContext = RenderContext.create({
        pipeline: this.#pipeline,
        locals,
        pathname,
        request,
        routeData,
        status: defaultStatus
      });
      response = await renderContext.render(await mod.page());
    } catch (err) {
      this.#logger.error(null, err.stack || err.message || String(err));
      return this.#renderError(request, { locals, status: 500 });
    }
    if (REROUTABLE_STATUS_CODES.includes(response.status) && response.headers.get(REROUTE_DIRECTIVE_HEADER) !== "no") {
      return this.#renderError(request, {
        locals,
        response,
        status: response.status
      });
    }
    if (response.headers.has(REROUTE_DIRECTIVE_HEADER)) {
      response.headers.delete(REROUTE_DIRECTIVE_HEADER);
    }
    if (addCookieHeader) {
      for (const setCookieHeaderValue of _App.getSetCookieFromResponse(response)) {
        response.headers.append("set-cookie", setCookieHeaderValue);
      }
    }
    Reflect.set(response, responseSentSymbol, true);
    return response;
  }
  #logRenderOptionsDeprecationWarning() {
    if (this.#renderOptionsDeprecationWarningShown)
      return;
    this.#logger.warn(
      "deprecated",
      `The adapter ${this.#manifest.adapterName} is using a deprecated signature of the 'app.render()' method. From Astro 4.0, locals and routeData are provided as properties on an optional object to this method. Using the old signature will cause an error in Astro 5.0. See https://github.com/withastro/astro/pull/9199 for more information.`
    );
    this.#renderOptionsDeprecationWarningShown = true;
  }
  setCookieHeaders(response) {
    return getSetCookiesFromResponse(response);
  }
  /**
   * Reads all the cookies written by `Astro.cookie.set()` onto the passed response.
   * For example,
   * ```ts
   * for (const cookie_ of App.getSetCookieFromResponse(response)) {
   *     const cookie: string = cookie_
   * }
   * ```
   * @param response The response to read cookies from.
   * @returns An iterator that yields key-value pairs as equal-sign-separated strings.
   */
  static getSetCookieFromResponse = getSetCookiesFromResponse;
  /**
   * If it is a known error code, try sending the according page (e.g. 404.astro / 500.astro).
   * This also handles pre-rendered /404 or /500 routes
   */
  async #renderError(request, { locals, status, response: originalResponse, skipMiddleware = false }) {
    const errorRoutePath = `/${status}${this.#manifest.trailingSlash === "always" ? "/" : ""}`;
    const errorRouteData = matchRoute(errorRoutePath, this.#manifestData);
    const url2 = new URL(request.url);
    if (errorRouteData) {
      if (errorRouteData.prerender) {
        const maybeDotHtml = errorRouteData.route.endsWith(`/${status}`) ? ".html" : "";
        const statusURL = new URL(
          `${this.#baseWithoutTrailingSlash}/${status}${maybeDotHtml}`,
          url2
        );
        const response2 = await fetch(statusURL.toString());
        const override = { status };
        return this.#mergeResponses(response2, originalResponse, override);
      }
      const mod = await this.#getModuleForRoute(errorRouteData);
      try {
        const renderContext = RenderContext.create({
          locals,
          pipeline: this.#pipeline,
          middleware: skipMiddleware ? (_, next) => next() : void 0,
          pathname: this.#getPathnameFromRequest(request),
          request,
          routeData: errorRouteData,
          status
        });
        const response2 = await renderContext.render(await mod.page());
        return this.#mergeResponses(response2, originalResponse);
      } catch {
        if (skipMiddleware === false) {
          return this.#renderError(request, {
            locals,
            status,
            response: originalResponse,
            skipMiddleware: true
          });
        }
      }
    }
    const response = this.#mergeResponses(new Response(null, { status }), originalResponse);
    Reflect.set(response, responseSentSymbol, true);
    return response;
  }
  #mergeResponses(newResponse, originalResponse, override) {
    if (!originalResponse) {
      if (override !== void 0) {
        return new Response(newResponse.body, {
          status: override.status,
          statusText: newResponse.statusText,
          headers: newResponse.headers
        });
      }
      return newResponse;
    }
    const status = override?.status ? override.status : originalResponse.status === 200 ? newResponse.status : originalResponse.status;
    try {
      originalResponse.headers.delete("Content-type");
    } catch {
    }
    return new Response(newResponse.body, {
      status,
      statusText: status === 200 ? newResponse.statusText : originalResponse.statusText,
      // If you're looking at here for possible bugs, it means that it's not a bug.
      // With the middleware, users can meddle with headers, and we should pass to the 404/500.
      // If users see something weird, it's because they are setting some headers they should not.
      //
      // Although, we don't want it to replace the content-type, because the error page must return `text/html`
      headers: new Headers([
        ...Array.from(newResponse.headers),
        ...Array.from(originalResponse.headers)
      ])
    });
  }
  #getDefaultStatusCode(routeData, pathname) {
    if (!routeData.pattern.exec(pathname)) {
      for (const fallbackRoute of routeData.fallbackRoutes) {
        if (fallbackRoute.pattern.test(pathname)) {
          return 302;
        }
      }
    }
    const route = removeTrailingForwardSlash(routeData.route);
    if (route.endsWith("/404"))
      return 404;
    if (route.endsWith("/500"))
      return 500;
    return 200;
  }
  async #getModuleForRoute(route) {
    if (route.component === DEFAULT_404_COMPONENT) {
      return {
        page: async () => ({ default: () => new Response(null, { status: 404 }) }),
        renderers: []
      };
    }
    if (route.type === "redirect") {
      return RedirectSinglePageBuiltModule;
    } else {
      if (this.#manifest.pageMap) {
        const importComponentInstance = this.#manifest.pageMap.get(route.component);
        if (!importComponentInstance) {
          throw new Error(
            `Unexpectedly unable to find a component instance for route ${route.route}`
          );
        }
        const pageModule = await importComponentInstance();
        return pageModule;
      } else if (this.#manifest.pageModule) {
        const importComponentInstance = this.#manifest.pageModule;
        return importComponentInstance;
      } else {
        throw new Error(
          "Astro couldn't find the correct page to render, probably because it wasn't correctly mapped for SSR usage. This is an internal error, please file an issue."
        );
      }
    }
  }
};
var isNode2 = typeof process === "object" && Object.prototype.toString.call(process) === "[object process]";
function getProcessEnvProxy() {
  return new Proxy({}, {
    get: (target, prop) => {
      console.warn(
        // NOTE: \0 prevents Vite replacement
        `Unable to access \`import.meta\0.env.${prop.toString()}\` on initialization as the Cloudflare platform only provides the environment variables per request. Please move the environment variable access inside a function that's only called after a request has been received.`
      );
    }
  });
}
if (!isNode2) {
  process.env = getProcessEnvProxy();
}
function createExports(manifest2) {
  const app = new App(manifest2);
  const fetch2 = async (request, env, context) => {
    process.env = env;
    const { pathname } = new URL(request.url);
    if (manifest2.assets.has(pathname)) {
      return env.ASSETS.fetch(request);
    }
    const routeData = app.match(request);
    Reflect.set(request, Symbol.for("astro.clientAddress"), request.headers.get("cf-connecting-ip"));
    const locals = {
      runtime: {
        waitUntil: (promise) => {
          context.waitUntil(promise);
        },
        env,
        cf: request.cf,
        caches
      }
    };
    const response = await app.render(request, { routeData, locals });
    if (app.setCookieHeaders) {
      for (const setCookieHeader of app.setCookieHeaders(response)) {
        response.headers.append("Set-Cookie", setCookieHeader);
      }
    }
    return response;
  };
  return { default: { fetch: fetch2 } };
}
var serverEntrypointModule = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  createExports
}, Symbol.toStringTag, { value: "Module" }));
var _page0 = () => Promise.resolve().then(() => (init_generic_DXelvnfV(), generic_DXelvnfV_exports));
var _page1 = () => Promise.resolve().then(() => (init_cache_CxM4wECI(), cache_CxM4wECI_exports));
var _page2 = () => Promise.resolve().then(() => (init_id_CGP2WXdM(), id_CGP2WXdM_exports));
var _page3 = () => Promise.resolve().then(() => (init_CEcPGdZk(), CEcPGdZk_exports));
var _page4 = () => Promise.resolve().then(() => (init_YZPPflW2(), YZPPflW2_exports));
var _page5 = () => Promise.resolve().then(() => (init_jokeid_B9Jf0Wxb(), jokeid_B9Jf0Wxb_exports));
var _page6 = () => Promise.resolve().then(() => (init_memes_CWP_a497(), memes_CWP_a497_exports));
var _page7 = () => Promise.resolve().then(() => (init_newsid_BcDxRY_R(), newsid_BcDxRY_R_exports));
var _page8 = () => Promise.resolve().then(() => (init_id_CKOC9N_T(), id_CKOC9N_T_exports));
var _page9 = () => Promise.resolve().then(() => (init_B8o_o42o(), B8o_o42o_exports));
var _page10 = () => Promise.resolve().then(() => (init_about_DVO9HVTu(), about_DVO9HVTu_exports));
var _page11 = () => Promise.resolve().then(() => (init_contact_Bbre7H9Z(), contact_Bbre7H9Z_exports));
var _page12 = () => Promise.resolve().then(() => (init_privacy_BPBkW_rH(), privacy_BPBkW_rH_exports));
var _page13 = () => Promise.resolve().then(() => (init_terms_BQCIrs1A(), terms_BQCIrs1A_exports));
var _page14 = () => Promise.resolve().then(() => (init_user_DBpFqfWo(), user_DBpFqfWo_exports));
var _page15 = () => Promise.resolve().then(() => (init_BQmBYHww(), BQmBYHww_exports));
var _page16 = () => Promise.resolve().then(() => (init_vicove_BA876vaw(), vicove_BA876vaw_exports));
var _page17 = () => Promise.resolve().then(() => (init_index_RZYCZe8A(), index_RZYCZe8A_exports));
var pageMap = /* @__PURE__ */ new Map([
  ["../../node_modules/astro/dist/assets/endpoint/generic.js", _page0],
  ["src/pages/api/cache.ts", _page1],
  ["src/pages/api/img/[id].jpg.ts", _page2],
  ["src/pages/business/[...business].astro", _page3],
  ["src/pages/cat/[...jokecat].astro", _page4],
  ["src/pages/joke/[jokeid].astro", _page5],
  ["src/pages/memes.astro", _page6],
  ["src/pages/news/i/[slug]/[newsid].astro", _page7],
  ["src/pages/news/tr/[id].astro", _page8],
  ["src/pages/news/[...newspage].astro", _page9],
  ["src/pages/other/about.astro", _page10],
  ["src/pages/other/contact.astro", _page11],
  ["src/pages/other/privacy.astro", _page12],
  ["src/pages/other/terms.astro", _page13],
  ["src/pages/tw/u/[user].astro", _page14],
  ["src/pages/tw/[...twitter].astro", _page15],
  ["src/pages/vicove.astro", _page16],
  ["src/pages/index.astro", _page17]
]);
var _manifest = Object.assign(manifest, {
  pageMap,
  renderers,
  middleware: onRequest
});
var _args = void 0;
var _exports = createExports(_manifest);
var __astrojsSsrVirtualEntry = _exports.default;
var _start = "start";
if (_start in serverEntrypointModule) {
  serverEntrypointModule[_start](_manifest, _args);
}
export {
  __astrojsSsrVirtualEntry as default,
  pageMap
};
/**
 * shortdash - https://github.com/bibig/node-shorthash
 *
 * @license
 *
 * (The MIT License)
 *
 * Copyright (c) 2013 Bibig <bibig@me.com>
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
/*! Bundled license information:

cookie/index.js:
  (*!
   * cookie
   * Copyright(c) 2012-2014 Roman Shtylman
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

cssesc/cssesc.js:
  (*! https://mths.be/cssesc v3.0.0 by @mathias *)

lodash/lodash.js:
  (**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)
*/
